<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: plugin | @johtaniの日記 2nd]]></title>
  <link href="http://blog.johtani.info/blog/categories/plugin/atom.xml" rel="self"/>
  <link href="http://blog.johtani.info/"/>
  <updated>2017-09-21T10:39:22+09:00</updated>
  <id>http://blog.johtani.info/</id>
  <author>
    <name><![CDATA[johtani]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lucene Kuromoji for NEologdで指定した品詞の単語を抜き出すIngest Pluginを書いてみた #elasticsearchjp]]></title>
    <link href="http://blog.johtani.info/blog/2016/07/22/making-ingest-processor-plugin-with-cookiecutter/"/>
    <updated>2016-07-22T13:26:56+09:00</updated>
    <id>http://blog.johtani.info/blog/2016/07/22/making-ingest-processor-plugin-with-cookiecutter</id>
    <content type="html"><![CDATA[<p>久しぶりに、技術的なブログ書いてます。</p>

<p>Ingest Processorのプラグインを作ってみたくなったので、書いてみました。
ただ書いてみるんじゃ3番煎じになりそうなので、<a href="https://cookiecutter.readthedocs.io/en/latest/readme.html">cookiecutter</a>を使ってみました。</p>

<!-- more -->


<p>と言っても、同僚のAlexが<a href="https://discuss.elastic.co/t/cookiecutter-template-for-writing-ingest-processors/52985">cookiecutter-elasticsearch-ingest-processor</a>と言うテンプレートを作ってくれているのを使っただけですが。（<a href="https://discuss.elastic.co">https://discuss.elastic.co</a> に投稿された記事で、使い方がアニメgifで説明されててわかりやすいです）</p>

<p><a href="https://cookiecutter.readthedocs.io/en/latest/readme.html">cookiecutter</a>とは、コマンドラインで質問に答えると、テンプレートからプロジェクトが生成できるツールです。
Elasticでは、カスタムBeatを作る時に利用する例がいつかの日本語ブログや発表資料で話題になっていました。
これのIngest Processorのプラグインバージョンです。</p>

<p>今回は、NEologdも使ってみたかったので、Lucene Kuromoji for NEologdを利用して
指定した品詞の単語だけを抽出するProcessorを作ってみました。</p>

<p>GitHubのプロジェクト：<a href="https://github.com/johtani/elasticsearch-ingest-kuromoji-pos-extract">https://github.com/johtani/elasticsearch-ingest-kuromoji-pos-extract</a></p>

<h3>Cookiecutterの使い方</h3>

<p><a href="https://cookiecutter.readthedocs.io/en/latest/readme.html">Cookiecutterのインストールはサイト</a>をご覧ください。</p>

<pre><code>cookiecutter gh:spinscale/cookiecutter-elasticsearch-ingest-processor
</code></pre>

<p>あとは、出てくる以下の項目を指定するだけです。</p>

<ul>
<li><code>processor_type</code> : Ingest Processorのタイプ名です。<code>kuromoji_part_of_speech_extract</code>としました。（Alexのだと<code>_</code>を使うとちょっと問題があるので後述）</li>
<li><code>description</code> : readme.mdに利用されます。</li>
<li><code>developer_name</code> : 名前を記載。Javaのファイルのヘッダに利用</li>
<li><code>elasticsearch_version</code> : デフォルトで<code>5.0.0-alpha4</code>が指定されているので、特に指定せず</li>
</ul>


<p>以上の質問に答えたら、プロジェクトのディレクトリ構造が出来上がってます。
プロジェクトのビルドなどにはGradleを利用します。</p>

<h3>プロジェクトのIntelliJ IDEA用のファイルを生成</h3>

<p>build.gradleファイルでGradleのideaプラグインがapplyされているので、以下のコマンドを叩けばIntelliJ IDEAのプロジェクトファイル（？）が生成され、IntelliJで開けばすぐに開発ができる状態にできます。</p>

<pre><code>gradle idea
</code></pre>

<h3>コーディング</h3>

<p>あとは、必要処理をコーディングします。
実際にコーディングするクラスは<code>org.elasticsearch.plugin.ingest.kuromoji_part_of_speech_extract</code>のパッケージにある以下の2つです。（パッケージ名にはprocessor_typeの名前が指定されている）</p>

<ul>
<li>IngestKuromojiPartOfSpeechExtractPlugin</li>
<li>KuromojiPartOfSpeechExtractProcessor</li>
</ul>


<h4>IngestKuromojiPartOfSpeechExtractPlugin</h4>

<p>Pluginというクラスは、プラグインをNodeのModuleとして登録する処理を書くクラスとなります。
生成してすぐは、次のような形になっています。（※importやクラス定義の部分は省略しています。）</p>

<pre><code class="Java">...
    public static final Setting&lt;String&gt; YOUR_SETTING =
            new Setting&lt;&gt;("ingest.kuromoji_part_of_speech_extract.setting", "foo", (value) -&gt; value, Setting.Property.NodeScope);

    @Override
    public List&lt;Setting&lt;?&gt;&gt; getSettings() {
        return Arrays.asList(YOUR_SETTING);
    }

    public void onModule(NodeModule nodeModule) throws IOException {
        nodeModule.registerProcessor(KuromojiPartOfSpeechExtractProcessor.TYPE,
                (registry) -&gt; new KuromojiPartOfSpeechExtractProcessor.Factory());
    }
...
</code></pre>

<p><code>YOUR_SETTING</code>プロパティと<code>getSettings()</code>メソッドは<code>elasticsearch.yml</code>で指定したい設定を記述する場合の例になります。今回は特に必要ないので両方削除しました。
最終系は<a href="https://github.com/johtani/elasticsearch-ingest-kuromoji-pos-extract">GitHubのコード</a>をご覧ください。</p>

<h4>KuromojiPartOfSpeechExtractProcessor</h4>

<p>Processorは実際にIngest Nodeで行う処理を書くところです。</p>

<pre><code class="Java">
    public static final String TYPE = "kuromoji_part_of_speech_extract";

    private final String field;
    private final String targetField;

    public KuromojiPartOfSpeechExtractProcessor(String tag, String field, String targetField) throws IOException {
        super(tag);
        this.field = field;
        this.targetField = targetField;
    }

    @Override
    public void execute(IngestDocument ingestDocument) throws Exception {
        String content = ingestDocument.getFieldValue(field, String.class);
        // TODO implement me!
        ingestDocument.setFieldValue(targetField, content);
    }

    @Override
    public String getType() {
        return TYPE;
    }

    public static final class Factory extends AbstractProcessorFactory&lt;KuromojiPartOfSpeechExtractProcessor&gt; {

        @Override
        public KuromojiPartOfSpeechExtractProcessor doCreate(String processorTag, Map&lt;String, Object&gt; config) throws Exception {
            String field = readStringProperty(TYPE, processorTag, config, "field");
            String targetField = readStringProperty(TYPE, processorTag, config, "target_field", "default_field_name");

            return new KuromojiPartOfSpeechExtractProcessor(processorTag, field, targetField);
        }
    }
</code></pre>

<p><code>TYPE</code>が<a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/put-pipeline-api.html">Ingest APIのPipelineでProcessorを指定するときに使う名前</a>になります。ここは、cookiecutterの時にprocessor_typeに入力した文字列になっています。
<code>kuromoji_part_of_speech_extract</code>だと長いので、<code>kuromoji_pos_extract</code>に変えました。</p>

<p><code>execute()</code>メソッドに<code>// TODO implement me!</code>とあります。
この部分に実際の処理を記述していきます。</p>

<p>あとは、<code>Factory</code>クラスでIngest APIで指定された設定項目を読み込みます。
今回作成した<code>elasticsearch-ingest-kuromoji-pos-extract</code>では品詞を指定する必要があるので、<code>pos_tags</code>を指定できるように処理を追加しました。</p>

<p>私が実装したものの説明をするとちょっと長くなりそうなので、<a href="https://github.com/johtani/elasticsearch-ingest-kuromoji-pos-extract">GitHubのコード</a>をご覧ください。</p>

<h3>テストのコーディング</h3>

<p>テストのクラスもテンプレートで生成されています。</p>

<ul>
<li>KuromojiPartOfSpeechExtractProcessorTests</li>
<li>KuromojiPartOfSpeechExtractRestIT</li>
</ul>


<h4>KuromojiPartOfSpeechExtractProcessorTests</h4>

<p>Processorクラスのテストになります。生成直後は次のような感じです。</p>

<pre><code class="Java">public void testThatProcessorWorks() throws Exception {
    Map&lt;String, Object&gt; document = new HashMap&lt;&gt;();
    document.put("source_field", "fancy source field content");
    IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document);

    KuromojiPartOfSpeechExtractProcessor processor = new KuromojiPartOfSpeechExtractProcessor(randomAsciiOfLength(10), "source_field", "target_field");
    processor.execute(ingestDocument);
    Map&lt;String, Object&gt; data = ingestDocument.getSourceAndMetadata();

    assertThat(data, hasKey("target_field"));
    assertThat(data.get("target_field"), is("fancy source field content"));
    // TODO add fancy assertions here
}
</code></pre>

<p>テストメソッドも実装されていますが、パラメータの追加の設定処理やアサーションが書かれてません。
実装に合わせて、アサーションや設定処理を追加しましょう。</p>

<h4>KuromojiPartOfSpeechExtractRestIT</h4>

<p>こちらはIntegration Testになります。
実際にElasticsearchに対して外部からAPIを叩くような感じです。
APIを叩くときに利用するJSONの設定やアサーションは<code>src/test/resources</code>にyamlファイルがあります。</p>

<ul>
<li>10_basic.yaml</li>
<li>20_kuromoji_part_of_speech_extract_processor.yaml</li>
</ul>


<p><code>10_basic.yaml</code>はプラグインがインストールされているかの確認のテストです。特に変更する必要はないです。</p>

<p><code>20_kuromoji_part_of_speech_extract_processor.yaml</code>は実際にコーディングしたProcessorが動くかどうかのテストです。</p>

<p>テストの内容については、<a href="https://github.com/johtani/elasticsearch-ingest-kuromoji-pos-extract">GitHubのコード</a>をご覧ください。</p>

<h3>テストの実行とZipの生成</h3>

<p>テストの実行とZipの生成は次のコマンドを実行すればOKです。</p>

<pre><code>gradle check
</code></pre>

<p>テストに問題があった場合は、コケますし、問題なければ<code>SUCCESS</code>と表示が出ます。
成功した場合は<code>build/distributions/</code>というディレクトリにzipファイルができています。
これをElasticsearchのpluginコマンドでインストールすれば動きます。</p>

<pre><code>bin/plugin install file:///path/to/elasticsearch-ingest-kuromoji-pos-extract/build/distribution/ingest-kuromoji_part_of_speech_extract-0.0.1-SNAPSHOT.zip
</code></pre>

<h3>kuromoji_pos_extractの利用方法</h3>

<p>Ingest APIには便利な<a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/simulate-pipeline-api.html">Simulate Pipeline API</a>があります。</p>

<p>ということで、<a href="https://github.com/neologd/mecab-ipadic-neologd/blob/master/README.ja.md">mecab-ipadic-NEologd</a>にあったサンプルの文章を使って、使い方の説明です。</p>

<pre><code class="JSON">POST _ingest/pipeline/_simulate
{
  "pipeline" : {
    "description" : "kuromoji neologd extract test",
    "processors" : [
      {
        "kuromoji_pos_extract" : {
        "field" : "body",
        "target_field" : "noun_field",
        "pos_tags" : [
          "名詞-固有名詞-組織",
          "名詞-固有名詞-一般",
          "名詞-固有名詞-人名-一般",
          "名詞-固有名詞-地域-一般",
          "名詞-固有名詞-地域-国"
          ]
        }
      }
      ]
  },
  "docs" : [
    {
      "_index": "index",
      "_type": "type",
      "_id": "id",
      "_source": {
        "body" : "10日放送の「中居正広のミになる図書館」（テレビ朝日系）で、SMAPの中居正広が、篠原信一の過去の勘違いを明かす一幕があった。"
      }
    }
    ]
}
</code></pre>

<p>結果はこちら。</p>

<pre><code class="JSON">{
  "docs": [
    {
      "doc": {
        "_index": "index",
        "_id": "id",
        "_type": "type",
        "_source": {
          "noun_field": [
            "10日",
            "中居正広のミになる図書館",
            "テレビ朝日",
            "SMAP",
            "中居正広",
            "篠原信一"
          ],
          "body": "10日放送の「中居正広のミになる図書館」（テレビ朝日系）で、SMAPの中居正広が、篠原信一の過去の勘違いを明かす一幕があった。"
        },
        "_ingest": {
          "timestamp": "2016-07-22T06:18:49.007+0000"
        }
      }
    }
  ]
}
</code></pre>

<p><code>noun_field</code>に固有名詞の単語が抜き出せているのがわかるかと思います。</p>

<h3>Alexのテンプレートで困った点</h3>

<p>テンプレートは便利だったのですが、<code>processor_type</code>に<code>_</code>を使用したタイプ名を指定すると次のような問題（？）が発生しました。</p>

<ul>
<li>クラス名が<code>Kuromoji_part_of_speech_extractProcessor</code>となってしまう</li>
</ul>


<p>深刻な問題ではないのですが、JavaだとCamel Caseが普通なのでちょっと気になって。
ということで、<a href="https://github.com/spinscale/cookiecutter-elasticsearch-ingest-processor/pull/1">プルリク</a>作って出してみました。まだ取り込まれてないかな。</p>

<p>取り込み前に使いたい方は以下のコマンドを実行してください。
<code>processor_class_name</code>という項目が増えています。
デフォルトだと<code>processor_type</code>の<code>_</code>の部分を取り除きつつCamel Caseにしたものが入ります。</p>

<pre><code>cookiecutter gh:johtani/cookiecutter-elasticsearch-ingest-processor
</code></pre>

<h3>まとめ</h3>

<p>ということで、とりあえず作ってみましたというものになります。
特徴的な単語（固有名詞だけ）を抜き出して、別のフィールドにできるので、タグみたいなものをこれを使って前処理で作れるようになるかなぁと。</p>

<h2>参考ブログ（元ネタ？）</h2>

<p>インスパイア元となったブログです。</p>

<ul>
<li><a href="http://dev.classmethod.jp/server-side/elasticsearch/ingest-plugin-useragent/">User Agentを解析するIngest Pluginを書いてみた</a></li>
<li><a href="http://blog.cybozu.io/entry/2016/07/05/080000">Elasticsearch 5.0.0のIngest Node用プラグインを書いた話</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sonatypeのバージョン番号で困ったので]]></title>
    <link href="http://blog.johtani.info/blog/2014/10/15/versioning-of-sonatype/"/>
    <updated>2014-10-15T15:26:08+09:00</updated>
    <id>http://blog.johtani.info/blog/2014/10/15/versioning-of-sonatype</id>
    <content type="html"><![CDATA[<p><a href="http://blog.johtani.info/blog/2014/10/02/elasticsearch-1-4-0-beta-released-ja/">Elasticsearch 1.4.0.Beta1がリリース</a>されました。</p>

<p>個人で<a href="https://github.com/johtani/elasticsearch-extended-analyze">elasticsearch-extended-analyze</a>というプラグインを開発してます。
こちらも1.4.0.Beta1に対応するべく作業をしてて、少し戸惑ったことがあったので、メモをば。</p>

<!-- more -->


<p>ここ最近はプラグインのバージョン番号をElasticsearchのバージョン番号と同じものを利用していました。
（プラグインの機能追加をサボってる？？）
その時に、<code>1.4.0.Beta1</code>という番号を指定したのですが、意味不明なエラーに悩まされてしまいまして。</p>

<p>プラグインのリリースでは、以下のコマンドを実行します。</p>

<pre><code>$ mvn release:prepare
$ mvn release:perform
</code></pre>

<p>最初のコマンド（prepare）で、パッケージングを実施し、Githubにリリースタグを打ったバージョンがpushされます。
次のコマンド（perform）で、パッケージングされたzipファイルがsonatypeのサイトに公開するためにアップロードされます。</p>

<p><code>1.4.0.Beta1</code>というバージョン文字列を利用した場合、prepareは問題なく実行できたのですが、
performで以下の様なエラーが返ってきました。</p>

<pre><code>Return code is: 401, ReasonPhrase: Unauthorized.
</code></pre>

<p>バージョン番号が<code>1.3.0</code>では特に問題はなかったのですが、、、
結局、バージョン番号を<code>1.4.0-beta1</code>に変更すると問題なくリリースが完了しました。</p>

<p>mike_neckさんと話をしていて、<a href="http://semver.org">Semantic Versioning</a>に関係しているのかなぁという話にはなったのですが、
詳しく調べていません。。。</p>

<p>そのうち調べようかなぁ。。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[プロキシ環境でのpluginコマンドの実行]]></title>
    <link href="http://blog.johtani.info/blog/2014/08/01/plugin-using-under-proxy-env/"/>
    <updated>2014-08-01T15:24:00+09:00</updated>
    <id>http://blog.johtani.info/blog/2014/08/01/plugin-using-under-proxy-env</id>
    <content type="html"><![CDATA[<p>Proxy環境で働いている方も結構いると思います。
Twitter上で、Elasticsearchのpluginコマンドでプラグインがインストールできなくて困っている方がいたので、
調べてみたのでメモしておきます。</p>

<!-- more -->


<h2>プラグインコマンド</h2>

<p>Elasticsearchでは、プラグインという形でいくつかの便利な機能が公開されています。
<a href="https://github.com/elasticsearch/elasticsearch-analysis-kuromoji">形態素解析ライブラリのKuromoji</a>を使うためのプラグインや、<a href="https://github.com/lmenezes/elasticsearch-kopf">クラスタの管理がGUIで可能なkopf</a>プラグインなどがあります。
公式、サードパーティいろいろです。</p>

<p>これらのプラグインをElasticsearchにインストールする場合、以下のコマンドを実行すれば
自動的にダウンロードして<code>plugins</code>ディレクトリにインストールしてくれます。</p>

<pre><code>./bin/plugin -i elasticsearch/elasticsearch-analysis-kuromoji/2.3.0
</code></pre>

<p>ここで、<code>elasticsearch/elasticsearch-analysis-kuromoji/2.3.0</code>がプラグインのパスになります（例では、<code>提供元/プラグイン名/プラグインバージョン</code>となっています。）。</p>

<p>この<code>plugin</code>コマンドがダウンロード元にアクセスに行くのですが、プロキシ環境だとプロキシの設定が必要になります。</p>

<h2>プロキシの指定（Mac/LinuxとWindowsでの違い）</h2>

<h3>Mac/Linux(shコマンド)</h3>

<p><a href="http://blog.johtani.info/blog/2013/09/03/ja-wikipedia-with-kuromoji/">以前の記事</a>でプロキシのポート番号などの指定方法を
以下のように説明していました。
（※昔の記事のため、kuromojiプラグインのバージョンが古いです）</p>

<p>ElasticsearchのpluginコマンドはJavaで実装されています。（org.elasticsearch.common.http.client.HttpDownloadHelper）
プラグインのダウンロードには、java.net.URL.openConnection()から取得URLConnectionを使用しています。</p>

<p>ですので、pluginのインストールを行う際に、Proxy環境にある場合は以下のようにコマンドを実行します。</p>

<pre><code>./bin/plugin -DproxyPort=ポート番号 -DproxyHost=ホスト名 -i elasticsearch/elasticsearch-analysis-kuromoji/1.5.0
</code></pre>

<p>LinuxやMacの環境であれば、こちらのコマンドでプロキシの指定が可能です。
ただし、Windows環境ではうまくいきません。</p>

<p>Elasticsearchは、環境の違いにより、ダウンロードするファイルが異なります。
Windows環境の方は、zipファイルをダウンロードしてもらうようになっています。
elasticsearchコマンドおよびpluginコマンドがbat形式で提供されているのがzipファイルとなるからです。</p>

<h3>Windows(batコマンド)</h3>

<p>Windows環境では次のように指定します。</p>

<pre><code>set JAVA_OPTS="-DproxyHost=ホスト名 -DproxyPort=ポート番号"
bin\plugin -i elasticsearch/elasticsearch-analysis-kuromoji/2.3.0
</code></pre>

<p>コマンドの実装方法が少し異なるために、このようになっています。</p>

<h2>まとめ</h2>

<p>プロキシ環境で利用される場合は、プラグインコマンドは上記のように実行していただければと。</p>

<p>公式ガイドには、これらの情報を追記するPRを送る予定です。
また、WindowsのコマンドでもMac/Linuxと同様にできたほうがいい気がするので、Issueをあげようと思います。</p>

<p>不明点などあれば、コメントいただければと。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[elasticsearch-kopfの紹介（aliases画面）]]></title>
    <link href="http://blog.johtani.info/blog/2014/05/04/intro-elasticsearch-kopf-alias-percolator/"/>
    <updated>2014-05-04T01:01:00+09:00</updated>
    <id>http://blog.johtani.info/blog/2014/05/04/intro-elasticsearch-kopf-alias-percolator</id>
    <content type="html"><![CDATA[<p>今日はelasticsearch-kopfのAnalysis画面の紹介です。</p>

<p>（簡単なところから。。。その３）</p>

<!-- more -->


<p>ちょっとあいだが開いてしまいましたが、再開です。
メニューの<code>aliases</code>を選択すると、次のような画面が表示されます。</p>

<p><img src="/images/entries/20140504/kopf-aliases.jpg" title="Aliases画面" ></p>

<p>Elasticsearchの<code>alias</code>を画面で確認できます。</p>

<p>エイリアスは、インデックスに別名をつけることができるElasticsearchの機能です。
１エイリアス＝１インデックスでも良いですが、１エイリアスに対して複数のエイリアスを付与することもできます。
この機能を利用することで、次のようなことが可能となります。</p>

<ul>
<li>インデックスの切り替えをアプリ側に意識させずに実施（アプリはエイリアス名に対して検索すればOKなので）</li>
<li>直近１週間のログを検索するためのエイリアスの作成（複数のインデックスを１つのエイリアスに割り当て可能）</li>
<li>特定のルーティングによる検索（特定のデータに対する検索だけに絞るためにfilterを指定する）</li>
</ul>


<p>エイリアスについて詳しく知りたい方は<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-aliases.html">公式ガイド</a>をご覧いただくのが良いかと。</p>

<p>画面は非常にわかりやすい作りになっているので、特に説明必要ないんですよね。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[elasticsearch-kopfの紹介（analysis画面）]]></title>
    <link href="http://blog.johtani.info/blog/2014/04/09/intro-elasticsearch-kopf-analysis/"/>
    <updated>2014-04-09T11:41:00+09:00</updated>
    <id>http://blog.johtani.info/blog/2014/04/09/intro-elasticsearch-kopf-analysis</id>
    <content type="html"><![CDATA[<p>今日はelasticsearch-kopfのAnalysis画面の紹介です。</p>

<p>（簡単なところから。。。その２）</p>

<!-- more -->


<p>メニューの<code>analysis</code>を選択すると、次のような画面が表示されます。</p>

<p><img src="/images/entries/20140409/kopf-analysis.jpg" title="Analysis画面" ></p>

<p>Elasticsearchの<code>_analyze</code> APIを画面で確認できます。
画面で動作の確認ができるのは嬉しいですよね。</p>

<ol>
<li>入力文字列：入力となるドキュメントに含まれる文字列や検索キーワードを入力</li>
<li>フィールドの指定：対象とするインデックス名、タイプ名、フィールド名を選択</li>
<li>analyze：ボタンを押す</li>
<li>トークナイズされた結果：入力文字列がどのようなトークンに分割されるか

<ul>
<li>start、end：入力文字列中の文字列の位置</li>
<li>pos：トークンの位置</li>
</ul>
</li>
</ol>


<p>という形でElasticsearchが指定されたフィールドで入力文字をどのようにトークナイズしたかを確認することができます。</p>

<p>Elasticsearchは内部でこのトークナイズされた単語を元に転置インデックスを作成し、検索に利用します。
ですので、特定のデータが検索に上手くヒットしないときに、この画面でデータの文字列をトークナイズしてみるといった用途に使えます。</p>

<p>フィールドの設定がどのようにして入力文字列をトークンにしているかといった点については、今度のElasticsearch勉強会で話す予定です。</p>

<p>フィールドの設定を利用する以外に、アナライザを指定してどのようにトークナイズされるかを見ることもできます。
「ANALYZE BYANALYZER」をクリックすると利用できます。</p>

<p><img src="/images/entries/20140409/kopf-analysis-analyzer.jpg" title="ANALYZE BY ANALYZER" ></p>

<p>トークナイズしたい文字列を入力し、インデックス名と、インデックスに設定されているアナライザ名を選択してanalyzeボタンを押すと
結果が表示されます。
（例では、kuromojiアナライザを利用して出力になっています。また、出力結果のposの表示位置がFIELD TYPEの時と違うのが少し気になりました。）</p>

<p>ただ、残念ながら、インデックスのマッピングで指定したアナライザしか利用できないみたいなので、
どのアナライザがどんな挙動かを調べたい場合は、以前紹介した<a href="http://blog.johtani.info/blog/2013/09/23/intro-elasticsearch-inquisitor/">elasticsearch-inquisitor</a>を
利用したほうが良さそうです。</p>

<p>ということで、今日はanalysis画面の説明でした。</p>
]]></content>
  </entry>
  
</feed>
