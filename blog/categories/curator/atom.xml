<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: curator | @johtaniの日記 2nd]]></title>
  <link href="http://blog.johtani.info/blog/categories/curator/atom.xml" rel="self"/>
  <link href="http://blog.johtani.info/"/>
  <updated>2015-10-30T11:19:40+09:00</updated>
  <id>http://blog.johtani.info/</id>
  <author>
    <name><![CDATA[johtani]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Curator 1.2および1.1について]]></title>
    <link href="http://blog.johtani.info/blog/2014/07/28/curator-2-0-and-1-1/"/>
    <updated>2014-07-28T14:19:00+09:00</updated>
    <id>http://blog.johtani.info/blog/2014/07/28/curator-2-0-and-1-1</id>
    <content type="html"><![CDATA[<p><a href="http://www.elasticsearch.org/blog/curator-1-2-0-released/">Curatorの1.2.0がリリース</a>されました。</p>

<p><a href="http://blog.johtani.info/blog/2014/01/24/curator-tending-your-time-series-indices-in-japanese/">前回のCuratorの記事</a>が古くなってしまった（1.1.0からコマンドのI/Fが変更された）ので
1.1.0および1.2.0に関する記事を翻訳しておきます。</p>

<p>ちなみに、<a href="https://github.com/elasticsearch/curator/">Curator</a>とは、Elasticsearchに時系列のインデックス（例：LogstashやFluentdでログを保存）を保存している場合にそれらのインデックスを管理（削除したり、クローズしたり）するための便利なツールです。
Curatorの概要については、<a href="https://github.com/elasticsearch/curator/">GitHubリポジトリ</a>か<a href="http://blog.johtani.info/blog/2014/01/24/curator-tending-your-time-series-indices-in-japanese/">前回の記事</a>をご覧ください。</p>

<!-- more -->


<h1>Curator 1.1.0リリース (2014/06/13公開)<a name="curator_v110"/></h1>

<p>元記事：<a href="http://www.elasticsearch.org/blog/elasticsearch-curator-version-1-1-0-released/">elasticsearch curator - version 1.1.0 released</a></p>

<p>Elasticsearch 1.0.0がリリースされ、新しい機能、Snapshot &amp; Restoreが利用できるようになりました。
Snapshotはある時点でのインデックスの写真を撮るように、バックアップを作成することができます。
1.0.0が発表されてすぐに、この機能に関するリクエストが寄せられるようになりました。
「Curatorにスナップショットを追加して！」もしくは「いつCuratorでスナップショットが使えるようになる？」といった感じです。
これがあなたの要望なら、それはついに叶えられました。しかも他の追加機能も一緒にです。</p>

<h2>新機能</h2>

<p>Curatorの新機能は以下のとおりです。</p>

<ul>
<li>新CLI構造</li>
<li>スナップショット(Snapshot)</li>
<li>エイリアス(Aliases)</li>
<li>パターンによる除外インデックス指定</li>
<li>配置ルーティング(Allocation Routing)</li>
<li>インデックスとスナップショットの表示</li>
<li>リポジトリ管理(個別のスクリプトによる)</li>
<li><a href="https://github.com/elasticsearch/curator/wiki">ドキュメントWiki</a></li>
</ul>


<h3>新コマンドライン構造</h3>

<p><strong>注意</strong>：コマンドライン構造の変更とは、Curator 1.1.0以前のcron記述が動作しないことを意味します。Curator 1.1.0にアップグレードする場合はコマンドも修正が必要となるので注意してください。</p>

<p>シンプルにするために、<em>commands</em>という概念を追加しました。
また、ヘルプの出力もわかりやすくなっています。
前のバージョンと同じタスクをCuratorは実行できますが、異なるフォーマットを用いるようになりました。</p>

<p>旧コマンド：</p>

<pre><code>curator -d 30
</code></pre>

<p>新コマンド：</p>

<pre><code>curator delete --older-than 30
</code></pre>

<p>コマンドは、フラグとは異なりハイフンを前に付けないことに注意してください。
また、似たような名前のフラグがあることに気をつけてください。
例えば、<code>--older-than</code>フラグは多くのコマンドに利用できます。
指定される値は各ケースにおいて同一です。「指定された数よりも古いインデックス」となります。</p>

<p>新しいコマンドのリストは次のとおりです。</p>

<ul>
<li>alias</li>
<li>allocation</li>
<li>bloom</li>
<li>close</li>
<li>delete</li>
<li>optimize</li>
<li>show</li>
<li>snapshot</li>
</ul>


<p>コマンドのヘルプは次のコマンドで表示されます。</p>

<pre><code>curator [COMMAND] --help
</code></pre>

<p>コマンドに関係あるフラグがすべて表示されます。</p>

<h3>スナップショット(snapshots)</h3>

<p><code>snapshot</code>コマンドで、存在しているリポジトリにインデックスのスナップショットを保存することができます。</p>

<p>Curatorはインデックス毎に1つのスナップショットを作成し、インデックスから名前をつけます。
例えば、インデックスの名前が<code>logstash-2014.06.10</code>の場合、スナップショットの名前は<code>logstash-2014.06.10</code>となります。
指定した条件を元に、シーケンシャルに、1つずつインデックスのスナップショットを作成していきます。</p>

<pre><code>curator snapshot --older-than 20 --repository REPOSITORY_NAME
</code></pre>

<p>このコマンドは、20日以上古いインデックスすべてのスナップショットを作成し、<code>REPOSITORY_NAME</code>で指定されたリポジトリに保存します。</p>

<p><code>es_repo_mgr</code>と呼ばれるリポジトリ作成を支援するスクリプトがCuratorには含まれています。
ファイルシステムおよびS3タイプのリポジトリ両方の作成を支援します。</p>

<p>さらに、古いインデックスのスナップショットを取ることができることに加えて、Curatorは最新のインデックスをアップロードする方法も提供します。
これは、<a href="http://www.elasticsearch.org/overview/marvel/">Elasticsearch Marvel</a>のインデックスをアップロードするときに便利です。
トラブルシューティングを目的として、パフォーマンスデータを他の人に見せる場合などです。</p>

<pre><code>curator snapshot --most-recent 3 --prefix .marvel- --repository REPOSITORY_NAME
</code></pre>

<p>このコマンドでは、最新の3つのMarvelインデックスのスナップショットを指定されたリポジトリに保存できます。</p>

<h3>エイリアス(aliases)</h3>

<p>Curatorはすでに存在するエイリアスにインデックスを追加することも、削除することもできるようになりました。
ただし、エイリアスがすでに存在している必要があります。エイリアスの作成はできません。</p>

<p><code>last_week</code>という前の一週間のインデックスのエイリアスを保持していること想像してください。
この場合、次の2つのコマンドを利用することで、エイリアスを管理できます。</p>

<pre><code>curator alias --alias-older-than 7 --alias last_week
curator alias --unalias-older-than 14 --alias last_week
</code></pre>

<p>新しく作られたインデックスが<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-templates.html#indices-templates">インデックステンプレート</a>によって
自動的にエイリアスの一部となるようにElasticsearchに設定しておくと、さらに便利です。
この場合、新しいインデックスが自動的に<code>this_week</code>というエイリアスの一部になるようにしてあれば、以下のコマンドのみとなります。</p>

<pre><code>curator alias --unalias-older-than 7 --alias this_week
</code></pre>

<p><code>this_week</code>と<code>last_week</code>のエイリアスのアップデートを保持できます。</p>

<h3>パターンによる除外(exclude pattern)</h3>

<p>時には、指定したインデックスを操作から除外したくなる場合もあるでしょう。
ここまでは、プレフィックスや日付によって選択されたインデックスのみを対象にしてきました。
そこで、<code>--exclude-pattern</code>オプションです。これは、指定したインデックスを除いて処理を行うことができます。</p>

<p><code>logstash-2014.06.11</code>というインデックスを決して削除したくないとします。
この場合、次のコマンドのようになります。</p>

<pre><code>curator delete --older-than 15 --exclude-pattern 2014.06.11
</code></pre>

<p>Curatorはデフォルトで<code>logstash-</code>というプレフィックスにマッチしますが、<code>2014.06.11</code>というインデックスは対象外となります。</p>

<h3>配置ルーティング(allocation routing)</h3>

<p>Elasticsearchはノードにタグを付けることができます。
これらのタグはインデックスやシャードをクラスタのどこに配置するかをコントロールするために役立ちます。
一般的なユースケースだと、高性能なSSDドライブを持ったノードをインデキシングのために、ハードディスクを持った性能の低いマシンは検索頻度が低い古いインデックスを配置するといった場合です。
この場合、HDDノードには、<code>elasticsearch.yml</code>に<code>node.tag: hdd</code>、SSDノードには<code>node.tag: ssd</code>と設定されているべきです。
Curatorはこの時、インデックスをタグに基づいてオフピークの時間帯に再配置させることができます。</p>

<p>コマンド：</p>

<pre><code>curator allocation --older-than 2 --rule tag=hdd
</code></pre>

<p><code>index.routing.allocation.require.tag=hdd</code>という設定が２日よりも古いインデックスに適用されます。
これは、インデックスのシャードが<code>node.tag: hdd</code>というノードに再配置される必要があると、Elasticsearchに伝えます。</p>

<h3>インデックスとスナップショットの表示(show indices and snapshots)</h3>

<p>これは、単にあなたの持っているインデックスやスナップショットがどんなものかを表示します。</p>

<pre><code>curator show --show-indices
</code></pre>

<p>これは、デフォルトプレフィックスの<code>logstash-</code>にマッチするすべてのインデックスを表示します。</p>

<pre><code>curator show --show-snapshots --repository REPOSITORY_NAME
</code></pre>

<p>これは、指定されたリポジトリにある、デフォルトプレフィックスの<code>logstash-</code>にマッチするすべてのスナップショットを表示します。</p>

<h3>リポジトリ管理(repository management)</h3>

<p>前に説明したとおり、<code>es_repo_mgr</code>と呼ばれるヘルパースクリプトをCuratorは含んでいます。
現時点では、<code>fs</code>と<code>s3</code>タイプをサポートしています。
リポジトリを作る前に利用したいタイプのドキュメントを読むようにしてください。
例えば、<code>fs</code>タイプのリポジトリを各ノードで使う場合は、同じ共有ファイルシステムに、同じパスでアクセスできなければなりません。
パスの指定は<code>--location</code>です。</p>

<p><code>fs</code>タイプリポジトリの作成</p>

<pre><code>es_repo_mgr create_fs --location '/tmp/REPOSITORY_LOCATION' --repository REPOSITORY_NAME
</code></pre>

<p>削除</p>

<pre><code>es_repo_mgr delete --repository REPOSITORY_NAME
</code></pre>

<h3>ドキュメントWiki</h3>

<p><a href="https://github.com/elasticsearch/curator/wiki">Curatorのドキュメント</a>が更新され、オンラインにWiki形式でだれでも更新できるようになっています。
コマンドやフラグのより詳細の情報はこちらで見つけることができます。また、もし、興味があれば、ドキュメントを追加することもできます。</p>

<h2>インストールと更新</h2>

<p>Curator 1.1.0は<a href="https://pypi.python.org/pypi?%3Aaction=pkg_edit&amp;name=elasticsearch-curator">PyPi</a>リポジトリにあります。
インストールは以下のとおりです。</p>

<pre><code>pip install elasticsearch-curator
</code></pre>

<p>バージョン1.0.0からアップグレードする場合は以下のとおりです。</p>

<pre><code>pip uninstall elasticsearch-curator
pip install elasticsearch-curator
</code></pre>

<p>バージョン1.0.0よりも古いバージョンからのアップグレードは以下のとおりです。</p>

<pre><code>pip uninstall elasticsearch-curator
pip uninstall elasticsearch
pip install elasticsearch-curator
</code></pre>

<p><code>pip uninstall elasticsearch</code>で、古いパイションモジュールをを削除します。
適切なバージョンが依存関係により再インストールされます。</p>

<h2>まとめ</h2>

<p>Curatorの新機能は素晴らしいです！このリリースは大きな改善です。
もし、トラブルや足りないものを見つけた場合は<a href="http://github.com/elasticsearch/curator/issues">GitHub Issue</a>に報告してください。
また、Curatorが便利だと思ったら、私たちに伝えてください。<code>#elasticsearch</code>タグを付けてツイートしてください！</p>

<p>Curatorはまだ、始まったばかりです。Curator 2.0のロードマップを作業中です。ここまで読んでいただきありがとうございます。
Happy Curating!</p>

<hr />

<h1>Curator 1.2.0リリース(2014/07/24)</h1>

<p>元記事：<a href="http://www.elasticsearch.org/blog/curator-1-2-0-released/">curator 1.2.0 released</a></p>

<p><a href="#curator_v110">Curator v1.1.0</a>のリリースから、数週間が経ちました。
私たちは、Curator 1.2.0をリリースしました。</p>

<h2>新機能(new features)</h2>

<ul>
<li>ユーザ指定の日付パターン：長い間リクエストされていた機能</li>
<li>ウィークリーインデックスのサポート：これも長い間リクエストされていた機能</li>
<li>複数の<a href="https://github.com/elasticsearch/curator/wiki/Logformat">ログフォーマット</a>オプション：Logstashフォーマットが利用可能</li>
</ul>


<p>これらの変更は<a href="https://github.com/elasticsearch/curator/wiki">Curatorドキュメント</a>にも記載されています。</p>

<h2>更新(updates)</h2>

<ul>
<li>ログ出力の整理：デフォルトのログ出力を整理しました。デバッグログはすべて表示されます。</li>
<li>ドライランのログ出力の詳細化：テスト実行時に何が起きたかをわかりやすくしました。</li>
</ul>


<h2>日付パターンと<code>--timestring</code>(date patterns and &ndash;timestring)</h2>

<p>前のリリースで、セパレータ文字を利用して、インデックス名のエレメントを分離することで、日付を計算しました。
この設計の決定は、プログラムが管理するために設計されたLogstashのインデックスを使うのには簡単でした。
しかし、Curatorは時系列インデックス管理に成長しています。これは、異なる命名規則のインデックスを意味しています。</p>

<p>また、インターバルによって、日付の計算が必要になる場合もあります。
<code>--time-unit</code>オプションが残っており、<code>weeks</code>という単位を指定することもできます。
デフォルトの<code>--timestring</code>オプションは、以前のコマンドと同様の動作をしなければなりません。次のようになります。</p>

<table>
<thead>
<tr>
<th> Time Unit </th>
<th> Timestring </th>
</tr>
</thead>
<tbody>
<tr>
<td> days      </td>
<td> <code>%Y.%m.%d</code></td>
</tr>
<tr>
<td> hours     </td>
<td> <code>%Y.%m.%d.%H</code></td>
</tr>
<tr>
<td> weeks     </td>
<td> <code>%Y.%W</code></td>
</tr>
</tbody>
</table>


<p>これが意味するものは、もし、単位に<code>hours</code>をした場合、<code>--timestring</code>を指定しなかった場合は<code>%Y.%m.%d.%H</code>となります。
これは、<a href="https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior">Pythonのstrftimeフォーマット</a>で&#8221;年.月.日.時&#8221;を意味します。
同様に、<code>weeks</code>を単位に指定した場合、Curatorはデフォルトの<code>--timestring</code>は<code>%Y.%W</code>となります。</p>

<p>この機能は、日付の間にセパレーター文字のないインデックスでも機能します。
例えば、<code>production-20140724</code>のような日時インデックスがある場合、2日よりも古いインデックスに対する<a href="https://github.com/elasticsearch/curator/wiki/Disable-Bloom-Filter-Cache">ブルームフィルタっキャッシュのオフ</a>のコマンドは次のようになります。</p>

<pre><code>curator bloom --prefix production- --older-than 2 --timestring %Y%m%d
</code></pre>

<p>この例で、デフォルトの単位は<code>days</code>であることに注意してください。<code>hourly-2014072414</code>のような時間インデックスの場合は次のようになります。</p>

<pre><code>curator bloom --prefix hourly- --older-than 2 --time-unit hours --timestring %Y%m%d%H
</code></pre>

<h2><code>--separator</code>の置き換え</h2>

<p>もし、Curatorの前のバージョンでカスタムセパレータ文字を利用していた場合、次のように変更すべきです。
前のコマンドで<code>cerberus-2014-07-24</code>のようなインデックスがある場合、コマンドを<code>--separator -</code>の用に置き換える必要があります。
新しいコマンドは次のとおりです。</p>

<pre><code>curator delete --prefix cerberus- --older-than 30 --timestring %Y-%m-%d
</code></pre>

<p>年(<code>％Y</code>)と月(<code>%m</code>)と日(&lsquo;%d&rsquo;)の間にセパレータ文字を置くだけです。</p>

<p>これは、また、Curatorで以前は不可能であったことをできるようにもします。
異なるセパレータ文字の混在です。
<code>logs-2014.07.24-14</code>というようなインデックスを処理するときに<code>--timestring</code>は<code>%Y.%m.%d-%H</code>のようになります.</p>

<p><code>--timestring</code>の詳細は<a href="https://github.com/elasticsearch/curator/wiki/Timestring">Curatorのドキュメント</a>をご覧ください。</p>

<h2>フィードバック</h2>

<p>これらの新しい機能はユーザのコメントやリクエストから来ています。もし、機能のリクエストやバグを発見したら、<a href="https://github.com/elasticsearch/curator/issues">こちら</a>まで連絡してください。</p>

<p>また、Twitterでもお待ちしています。私たちのTwitter IDは<code>@elasticsearch</code>です。</p>

<p>Happy Curating!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Curator: 時系列インデックスの管理(日本語訳)]]></title>
    <link href="http://blog.johtani.info/blog/2014/01/24/curator-tending-your-time-series-indices-in-japanese/"/>
    <updated>2014-01-24T14:48:00+09:00</updated>
    <id>http://blog.johtani.info/blog/2014/01/24/curator-tending-your-time-series-indices-in-japanese</id>
    <content type="html"><![CDATA[<p>Elasticsearchのcuratorの<a href="http://www.elasticsearch.org/blog/curator-tending-your-time-series-indices/">ブログ記事</a>を読んで、日本語でツイートしたところ、Aaron Mildensteinさんから日本語（ローマ字）で返信を頂きました。
せっかくなので、ブログ記事を翻訳してもいいかを尋ねたところ、快くOKを頂いたので、翻訳してみました。参考になればと。（誤訳など見つけたらコメントください。）</p>

<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/johtani">@johtani</a> Kore no hou ga ii. Nihongo de no Curator RT, arigatou gozaimasu! <a href="https://twitter.com/search?q=%23elasticsearch&amp;src=hash">#elasticsearch</a> <a href="https://twitter.com/search?q=%23curator&amp;src=hash">#curator</a> <a href="https://twitter.com/search?q=%23logstash&amp;src=hash">#logstash</a></p>&mdash; Aaron Mildenstein (@theuntergeek) <a href="https://twitter.com/theuntergeek/statuses/426009968513277952">2014, 1月 22</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>




<!-- more -->


<h2>curator: 時系列インデックスの管理</h2>

<p>原文：<a href="http://www.elasticsearch.org/blog/curator-tending-your-time-series-indices/">curator: tending your time-series indices</a></p>

<h2>背景</h2>

<p>数年前、Elasticsearch、Logstash、Kibana(ELK)を管理し、ここ30日よりも古いインデックスを自動的に削除する方法を必要としていました。
APIドキュメントを読み、#logstashや#elasticsearchのIRCチャネルのコミュニティの助けを借りて、簡単なスクリプトとcronを用意するのが簡単であることを知りました。</p>

<pre><code>curl -XDELETE 'localhost:9200/logstash-2014.01.01?pretty'
</code></pre>

<p>もちろん、これも動作しますが、日付を生成するのがめんどくさいのでもっとエレガントな方法が欲しかったです。</p>

<h2>最初に</h2>

<p>pythonでスクリプトを書き始めました。特定の日数のインデックスを管理するだけのコマンドラインクリーナーを書いてコミュニティにシェアしました。他の人が、新しい機能を追加してくれました。私は、古いインデックスをoptimizeすることができる他のスクリプトも書きました。これは、シャードごとにnセグメント以上存在しないように各シャードのセグメントをマージすることです。これらのスクリプトで1つになるようにマージしたりエンハンスし、古いインデックスを管理する助けになるツールです。</p>

<h2>curatorの紹介</h2>

<p>Curatorで可能なインデックスオペレーション</p>

<ul>
<li>削除（日付もしくは、トータル容量による制限）</li>
<li>インデックスのクローズ(Close)</li>
<li>bloom filter cacheの無効化</li>
<li>Optimize(LuceneのforceMerge)</li>
</ul>


<h2>curatorのインストール</h2>

<p>この記事を書いている時点で、Curator は0.5.1がリリースされ、0.90.10に対応しています。Curatorはまた、Elasticsearchの1.0(現在はRC1)へも対応しています。各リリースへの互換性の保証のためのテストも行っています。</p>

<p>現時点では、gitリポジトリで配布しています。近い将来、pipによるインストール可能なパッケージにする予定です。利用することを恐れないでください。もし、pythonとpipがあなたのマシンにインストールされていれば、次のようにインストールは簡単です。</p>

<pre><code>git clone https://github.com/elasticsearch/curator.git
pip install -r requirements.txt
</code></pre>

<p>インストール後の確認は次のコマンドです。</p>

<pre><code>$ ./curator.py -v
curator.py 0.5.1
</code></pre>

<h3>利用方法とサンプル</h3>

<p>サンプルを示す前に、<a href="#arguments">オプションを見ておくとよいでしょう</a>。このリストは長いですが（この記事の最後に含まれています）、どのようなことがコントロールできるかを説明しています。デフォルトがどうなっているかに注意してください。もし、デフォルト値で良い場合は、フラグを指定する必要はありません。</p>

<p>では、簡単なサンプルを見ながら、CuratorがELKスタックをどうやって管理するかを見て行きましょう。</p>

<h3>削除(delete)</h3>

<p>90日以上のインデックスを保存したくないとしましょう。コマンドは次のようになります。</p>

<pre><code>$ curator.py --host my-elasticsearch -d 90
</code></pre>

<p><code>-d</code>で日数を指定しているだけです。簡単でしょ？</p>

<h4>容量による削除(delete by space)</h4>

<p>これは、指定したギガバイト数を超えたインデックスを場合に(最も古いものから)削除を行う特殊なケースです。</p>

<pre><code>$ curator.py --host my-elasticsearch -C space -g 10024
</code></pre>

<p><code>-C</code>でspaceによるcurationであること、<code>-g</code>でギガバイト数(10024、10TB)であることを指定しているのがわかります。<code>-g</code>は1.5や0.5という数値を指定できます。</p>

<p><em>その他のCuratorオプションは<code>space</code>による削除と組み合わせて使用できないことに注意してください。</em></p>

<h3>クローズ(close)</h3>

<p><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-open-close.html">Open/Close Index API</a>により、インデックスをクローズすることができます。</p>

<blockquote><p>open/close index APIを利用すると、インデックスをクローズしたり、あとでオープンしたりすることができます。クローズされたインデックスはクラスタのオーバヘッドにほとんどならず(メタデータの管理を除く)、読み書き操作の妨げにもなりません。クローズされたインデックスは、リカバリプロセス時に、オープンされます。</p></blockquote>

<p>インデックスをクローズすることは、存在はするが検索できないという意味です。何が便利なのでしょう？</p>

<p>90日のインデックスを保存する義務があるが、検索は過去30日のインデックスを対象にする以外は稀であるような場合を想像してください。このような状況で、価値のあるリソース(ヒープスペースなど)を節約するためにインデックスをクローズすることができます。これは、クラスタに検索やインデキシングのためのメモリを与えることができることを意味します。そして、もし、クローズしたインデックスのデータが必要になったら、APIを呼び出してインデックスをオープンすれば検索できます。</p>

<p><em>このような場合、今オープンしているインデックスが再び、クローズされないように、一時的にCuratorのスケジュール実行をオフにしておくのが懸命です。</em></p>

<pre><code>$ curator.py --host my-elasticsearch -c 30 -d 90
</code></pre>

<p>先ほど説明した例の実行方法です。これは、30日よりも古いインデックスはクローズし、90日より古いインデックスを削除します。本当に簡単でしょ？</p>

<h3>bloom filterの無効化</h3>

<p><a href="https://github.com/elasticsearch/elasticsearch/issues/4525">これは、0.90.9以降のバージョンで利用可能な機能です。(リンク先はIssue #4525)</a></p>

<p>心配しないでください。このスクリプトは操作を行う前に、elasticsearchが利用可能なバージョンであるかをチェックします。</p>

<p>bloom filterとは何でしょう？なぜ、無効化したくなるのでしょう？</p>

<p>bloom filterはインデキシング操作を高速化するためにリソースを割り当てられます。時系列データで、インデキシングしている間もこれは有用です。インデックスは2日後には、日付が変わると新しいデータはおそらくインデックスされません。そのインデックスにはもはや必要のないリソースをbloom filterはまだ持っています。Curatorはこれらのリソースを開放することができます！</p>

<pre><code>$ curator.py --host my-elasticsearch -b 2 -c 30 -d 90
</code></pre>

<p>これで、bloom filterのリソースは少なくとも2日(1にもできます)よりも古いインデックスについては利用せず、30日より古いインデックスはクローズし、90より古いインデックスは削除します。</p>

<h3>optimizeというよりもforcemerge</h3>

<p>コマンドの説明をする前に、<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-optimize.html">Elasticsearch APIのoptimize</a>を見ることは、生きているインデックスや&#8221;cold&#8221;インデックス(インデキシングがアクティブではないという意味)に実行する必要があるということを理解するために重要です。実際、<a href="http://blog.trifork.com/2011/11/21/simon-says-optimize-is-bad-for-you/">optimizeはLuceneではforceMergeと名前が変えられ</a>、インデックスを改善するためにoptimizeを呼び出す必要はなくなりました。Elasticsearchのセグメントをマージすることは利点がありますが、coldインデックス全てに対してoptimizeを開始する前に、コストを理解する必要があります。</p>

<p>forceMerge操作はインデックスにある各シャードのセグメントの数を少なくします。各セグメントはオーバヘッドがあるため、セグメントが多いということは、より多くのリソースを使うという意味です。良さそうですね？リソースが少ない？</p>

<p>それは、可能ですが、merge操作を実行するには多くのディスクやネットワークI/Oが必要で、ディスクやクラスタの通常の書き込み操作に悪影響を及ぼします。もし、これが必要なら私のアドバイスを良く考えてください。(数％ほど)検索を速くし、リソースの使用量も減らすことができます。また、管理しているセグメント数が小さくなるということは、クラスタのリカバリを速くすることにもなります。1つのインデックスをoptimizeするためにはおそらく1時間以上の時間がかかります。「使用する前に目立たない場所で試してください」というクリーニングボトル(訳注：洗剤とか漂白剤かな？)の注意書きと同様に、ディスクI/Oが低い時にテストし、もし操作とリソースがあなたのクラスタのユースケースにあっているかを見てください。デフォルトでは、シャードごとに2つのセグメントにマージしますが、<code>--max_num_segments</code>フラグで変更可能です。</p>

<p>ここまでのサンプルは次のようなコマンドになります。</p>

<pre><code>$ curator.py --host my-elasticsearch -b 2 -o 2 -c 30 -d 90
</code></pre>

<p>これで、bloom filterは2日より古いインデックスでは向こうにし、2日より古いインデックスは&#8221;optimize&#8221;し、30日より古いインデックスはクローズし、90日より古いインデックスは削除されます。</p>

<h3>操作の順序</h3>

<p>スクリプトは操作が衝突するのを防ぐために次の順序で実行されます。なぜ、クローズされたインデックスはoptimizeしないのでしょう？なぜ、削除予定のインデックスはクローズされないのでしょう？</p>

<ol>
<li>Delete (by space or time)</li>
<li>Close</li>
<li>Disable bloom filters</li>
<li>Optimize</li>
</ol>


<h3>使用の検討</h3>

<p>最後の例で、3つの操作を1つのコマンドで実行していますが、それらが連続ですべて実行されるのを望んでいないかもしれません。</p>

<pre><code>$ curator.py --host my-elasticsearch -b 2 -o 2 -c 30 -d 90
</code></pre>

<p>これは、次の操作と同様です。</p>

<pre><code>$ curator.py --host my-elasticsearch -d 90
$ curator.py --host my-elasticsearch -c 30
$ curator.py --host my-elasticsearch -b 2
$ curator.py --host my-elasticsearch -o 2
</code></pre>

<p>これらのコマンドを異なる時間に実行したり、異なるその他のオプション(特に、optimize実行で<code>--timeout 3600</code>を追加したり)を指定して実行するのは簡単です。</p>

<p>また、デフォルトの<code>logstash-</code>とは異なるプレフィックスのインデックスを持っているかもしれません。</p>

<pre><code>$ curator.py --host my-elasticsearch --prefix logstash- -d 30
$ curator.py --host my-elasticsearch --prefix othername- -d 30
</code></pre>

<h2>最後に</h2>

<p>Curatorは時系列インデックスの保存ポリシーを管理するのに役立ちます。豊富な設定オプションがインデックスを管理することを簡単にします。クラスタに存在するノードの数に関係なく。<a href="https://github.com/elasticsearch/curator">https://github.com/elasticsearch/curator</a>へのフィードバックやコントリビューションをお待ちしています！</p>

<h4><a name="arguments">参考(全引数とオプション)</h4>

<pre><code>$ curator.py -h
usage: curator.py [-h] [-v] [--host HOST] [--port PORT] [-t TIMEOUT]
                  [-p PREFIX] [-s SEPARATOR] [-C CURATION_STYLE]
                  [-T TIME_UNIT] [-d DELETE_OLDER] [-c CLOSE_OLDER]
                  [-b BLOOM_OLDER] [-g DISK_SPACE]
                  [--max_num_segments MAX_NUM_SEGMENTS] [-o OPTIMIZE] [-n]
                  [-D] [-l LOG_FILE]

Curator for Elasticsearch indices. Can delete (by space or time), close,
disable bloom filters and optimize (forceMerge) your indices.

optional arguments:
  -h, --help            show this help message and exit
  -v, --version         show program version number and exit
  --host HOST           Elasticsearch host. Default: localhost
  --port PORT           Elasticsearch port. Default: 9200
  -t TIMEOUT, --timeout TIMEOUT
                        Elasticsearch timeout. Default: 30
  -p PREFIX, --prefix PREFIX
                        Prefix for the indices. Indices that do not have this
                        prefix are skipped. Default: logstash-
  -s SEPARATOR, --separator SEPARATOR
                        Time unit separator. Default: .
  -C CURATION_STYLE, --curation-style CURATION_STYLE
                        Curate indices by [time, space] Default: time
  -T TIME_UNIT, --time-unit TIME_UNIT
                        Unit of time to reckon by: [days, hours] Default: days
  -d DELETE_OLDER, --delete DELETE_OLDER
                        Delete indices older than n TIME_UNITs.
  -c CLOSE_OLDER, --close CLOSE_OLDER
                        Close indices older than n TIME_UNITs.
  -b BLOOM_OLDER, --bloom BLOOM_OLDER
                        Disable bloom filter for indices older than n
                        TIME_UNITs.
  -g DISK_SPACE, --disk-space DISK_SPACE
                        Delete indices beyond n GIGABYTES.
  --max_num_segments MAX_NUM_SEGMENTS
                        Maximum number of segments, post-optimize. Default: 2
  -o OPTIMIZE, --optimize OPTIMIZE
                        Optimize (Lucene forceMerge) indices older than n
                        TIME_UNITs. Must increase timeout to stay connected
                        throughout optimize operation, recommend no less than
                        3600.
  -n, --dry-run         If true, does not perform any changes to the
                        Elasticsearch indices.
  -D, --debug           Debug mode
  -l LOG_FILE, --logfile LOG_FILE
                        log file
</code></pre>
]]></content>
  </entry>
  
</feed>
