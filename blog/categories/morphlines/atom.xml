<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: morphlines | @johtaniの日記 2nd]]></title>
  <link href="http://blog.johtani.info/blog/categories/morphlines/atom.xml" rel="self"/>
  <link href="http://blog.johtani.info/"/>
  <updated>2015-07-06T16:47:16+09:00</updated>
  <id>http://blog.johtani.info/</id>
  <author>
    <name><![CDATA[johtani]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MorphlinesのloadSolrをちょっとだけ調べてみた]]></title>
    <link href="http://blog.johtani.info/blog/2013/08/02/morphlines-loadsolr/"/>
    <updated>2013-08-02T18:02:00+09:00</updated>
    <id>http://blog.johtani.info/blog/2013/08/02/morphlines-loadsolr</id>
    <content type="html"><![CDATA[<p>宿題その2？かな。Solr勉強会でCloudera Searchのスキーマ周りってどうなってるの？という質問が出てて、
なんか調べることになってたので、関係しそうなMorphlinesの<a href="https://github.com/cloudera/cdk/blob/master/cdk-morphlines/cdk-morphlines-solr-core/src/main/java/com/cloudera/cdk/morphline/solr/LoadSolrBuilder.java">LoadSolr</a>コマンドを調べてみました。
こいつが、Solrへの書き込みを実行するコマンドみたいだったので。<br/>
（※Cloudera Searchのスキーマの設定方法とかは調べてないです。）<br/>
（※めんどくさかったので、パッケージ名すっ飛ばしてクラス名書いてます。githubへのリンクを代わりに貼ってます。）</p>

<!-- more -->


<h2>Record＝Solrのドキュメント</h2>

<p>convert()メソッドにて、MorphlinesのRecord（コマンドの処理するデータの１単位）に格納されているKey-ValueデータをSolrInputDocumentクラスのフィールドとして格納しています。
Recordにもフィールドという概念があり、Recordのフィールド＝Solrのフィールドという事みたいです。</p>

<p>ということで、Solrのフィールドは事前に定義しておき、Morphlinesの処理内部でSolrのフィールド名に値を詰めていく感じでしょうか。
別途、<a href="https://github.com/cloudera/cdk/blob/master/cdk-morphlines/cdk-morphlines-solr-core/src/main/java/com/cloudera/cdk/morphline/solr/SanitizeUnknownSolrFieldsBuilder.java">sanitizeUnknownSolrFilds</a>というコマンドが用意されていて、Solrのスキーマにないものはこのコマンドを使って、無視するフィールド名に変えたり、雑多なデータを入れるためのフィールド名にするといった処理ができるようです。このコマンド内部で、Solrのスキーマ設定を元に、Solrのフィールドに合致する物があるかをチェックして処理しています。</p>

<h2>Solrへの登録処理は？</h2>

<p>Solrへの登録処理自体はLoadSolrクラス内部でDocumentLoaderというクラスのload()メソッドを呼び出しているだけでした。ということで、<a href="https://github.com/cloudera/cdk/blob/master/cdk-morphlines/cdk-morphlines-solr-core/src/main/java/com/cloudera/cdk/morphline/solr/DocumentLoader.java">DocumentBuilder</a>クラスを少し調査。</p>

<h3>DocumentLoader</h3>

<p>IFでした。。。実クラスは次の条件</p>

<ol>
<li>SolrMorphlineContextにDocumentLoaderがあればそちらを採用（他の種類はなにがあるんだろ？）</li>
<li>なければ、<a href="https://github.com/cloudera/cdk/blob/b6f98cff4a027af04f97fdec9abf729785d74cf5/cdk-morphlines/cdk-morphlines-solr-core/src/main/java/com/cloudera/cdk/morphline/solr/SolrServerDocumentLoader.java">SolrServerDocumentLoader</a>をnewしたものを利用</li>
</ol>


<p>2.の場合がおそらくMapReduceではないパターンのloadSolrだと思われます。SolrServerDocumentBuilderはSolrJのAPIを利用して、Solrへデータ登録していく普通のアプリです。（対象とするSolrは外部に起動しているもののはず＝FlumeのSolrSinkではこちらを採用かな？）<br/>
Solrへの接続情報とか設定ファイルとかSolrCloud用のZooKeeperとかは<a href="https://github.com/cloudera/cdk/blob/master/cdk-morphlines/cdk-morphlines-solr-core/src/main/java/com/cloudera/cdk/morphline/solr/SolrLocator.java">SolrLocatorクラス</a>に設定される内容が利用されます。</p>

<p>1.のパターンは、どうやら、<a href="https://github.com/cloudera/search/blob/master/search-mr/src/main/java/org/apache/solr/hadoop/morphline/MorphlineMapper.java">Cloudera SearchのMapReduceIndexerToolのクラス</a>にあるMyDocumentLoaderかなぁと。
こちらは、MapReduceを利用する場合に、利用されてるっぽいです（ちゃんと見てないけど）
内部処理は、HadoopのContext.writeメソッドにでSolrInputDocument（＝MorphlinesのRecord）を書きだして、ReducerでSolrOutputFormatでインデックス作成の流れかなと。たぶん、<a href="https://github.com/cloudera/search/blob/master/search-mr/src/main/java/org/apache/solr/hadoop/morphline/MorphlineMapRunner.java">MorphlineMapRunner</a>あたりを読みこめば解読できるかと。
ちなみに、こちらは、2.とは異なり、SolrLocatorの設定は無視されそう。</p>

<h2>感想＋妄想？</h2>

<p>ということで、Morphlinesのデータ流れを考える上で、現時点ではSolrのスキーマを頭の片隅に置きつつ、
Recordの中にあるデータをゴニョゴニョしてデータを形成していくって感じになりそうです。
うまく処理できなかったものとかのカウントとかもとれたりするのかなぁ？とか、また色々と気になるところが出てきますが、一旦ここまでで。。。（だれか、続きを調べて書いてみてくれてもいいんですよ！コマンドもいっぱいあるし！）</p>

<p>とまぁ、こんなかんじでMorphlinesをちょっとだけ読みました。
よくよく考えたら、こんなの作ったことあるなぁと（こんなに汎用的じゃないけど）。
みんな同じ事考えるんですねぇ。
コマンドパターン？みたいな感じで、I/F決めてSolrとか別のシステムとかにデータ入れる処理を順番に記述できる的なバッチ処理良くかいてます（書いてましたのほうが正解かなぁ）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Morphlines入門？]]></title>
    <link href="http://blog.johtani.info/blog/2013/07/31/introduction-morphlines/"/>
    <updated>2013-07-31T19:12:00+09:00</updated>
    <id>http://blog.johtani.info/blog/2013/07/31/introduction-morphlines</id>
    <content type="html"><![CDATA[<p>Morphlinesについてちょっとだけ、さらに調べました。</p>

<h2>誤解</h2>

<p>Solr勉強会でなんとなく私の認識を話しましたが、ちょっと誤解してたみたいです。スミマセン。</p>

<!-- more -->


<h3>誤解：Morphlineというプラットフォーム/ミドルウェアがありそうなイメージ</h3>

<p>まぁ、書いてあるのでちゃんと読めって話ですが、Morphlineはあくまでライブラリだということでした。
私はなんとなくManifoldCFのようなミドルウェアorプラットフォームが存在して、
そこにFlumeのSinkとかMapReduceによるIndexerが動作するのかと思ってました。</p>

<p><img src="/images/entries/20130731/wrong_image.jpg" width="300" title="間違ってたイメージ" ></p>

<p>まぁ、これが間違いでした。正解のイメージはこっちですね。</p>

<p><img src="/images/entries/20130731/correct_image.jpg" width="300" title="たぶんこれが正解" ></p>

<p>各プラットフォーム（FlumeとかHadoopとか）に組み込んむライブラリで、
それぞれ組み込んだ先でMorphlineの設定を記述することで、パイプライン処理ができるっぽいです。</p>

<p>Flumeについては、MorphlineSolrSinkというクラスでMorphlineの設定ファイルを読み込み、いろいろ処理出来ます。</p>

<p>Map/ReduceだとCloudera Searchに含まれてる<a href="https://github.com/cloudera/search">MapReduceIndexerTool</a>がMorphlineの設定を読み込んでコマンド実行してくれるみたいです。
MapReduceIndexerToolはまだちゃんと読んでないのですが、MapperとしてMorphlineのコマンドが実行されるのかなぁ？という感じです。
（結構入り組んでるので、ちゃんと読まないとわからない。。。）</p>

<p>ということで、Morphlineというプラットフォームがあって、一元的にFlumeやMap/Reduceに対するコマンドをパイプライン化するという話でありませんでした。</p>

<p>※ちなみに、上の画像ですが、愛用しているNUBoardを使って書いてます。
考えをまとめるのにすごく役立つ一品です。持ち運び可能なノート型ホワイトボードです。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS1=1&nou=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=johtani-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=qf_sp_asin_til&asins=B00A08IVT4" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<h3>疑問点</h3>

<p>ただ、読んでてまだ不明な点があります。まぁ、ぼちぼち調べるかなぁと。。。</p>

<ul>
<li>Solrのschemaはどーなってんの？</li>
<li>MorphlineにSolrへロードするコマンド（loadSolr）があるけど、FlumeのMorphlineSolrSinkってのもSolrに書き込みそうだけど？</li>
<li>Map/ReduceでSolrに書き込むもMorphlineのコマンドとの違いは？（前にソースを見たときはSOLR-1301がベースになっていて、SolrOutputFormatってクラスがEmbeddedSolrServer起動してインデクシングしてた）</li>
<li>GoLiveってなんだろ？（MapReduceIndexerToolに入ってて、M/Rでインデックス作ったあとにSolrのクラスタに配布＋マージするやつっぽい）</li>
<li>どんなコマンドがあるの？（<a href="http://cloudera.github.io/cdk/docs/0.4.1/cdk-morphlines/morphlinesReferenceGuide.html">Cloudera Morphlines Ref Guide</a>）</li>
</ul>


<p>以下は、参考資料と参考資料にあるSlideshareの資料を一部訳したものになります。</p>

<h3>参考資料</h3>

<ul>
<li><a href="http://www.slideshare.net/cloudera/using-morphlines-for-onthefly-etl">Using Morphlines for On-the-Fly ETL(slideshare)</a></li>
<li><a href="https://github.com/cloudera/cdk/tree/master/cdk-morphlines">cloudera/cdk/cdk-morphlines(github)</a></li>
</ul>


<h2>メモ</h2>

<h3>現在のコマンドライブラリ（スライド 18-19ページ）</h3>

<ul>
<li>Solrへのインテグレートとロード</li>
<li>フレキシブルなログファイル解析</li>
<li>1行、複数行、CSVファイル</li>
<li>正規表現ベースのパターンマッチと展開</li>
<li>Avro、JSON、XML、HTMLのインテグレーション</li>
<li>Hadoop シーケンスファイルのインテグレーション</li>
<li>SolrCellとApache Tikaパーサすべてのインテグレーション</li>
<li>Tikaを利用したバイナリデータからMIMEタイプの自動判別</li>
<li>動的Javaコードのスクリプティングサポート</li>
<li>フィールドの割り当て処理、比較処理</li>
<li>リストやセット書式のフィールド処理</li>
<li>if-then-else条件分岐</li>
<li>簡易ルールエンジン（tryRules）</li>
<li>文字列とタイムスタンプの変換</li>
<li>slf4jロギング</li>
<li>Yammerメトリックとカウンター</li>
<li>ネストされたファイルフォーマットコンテナの解凍</li>
<li>などなど</li>
</ul>


<h3>プラグインコマンド（スライド　20ページ）</h3>

<ul>
<li>簡単に新しいI/Oや変換コマンドが追加可能</li>
<li>サードパーティや既存機能のインテグレード</li>
<li>CommandインタフェースかAbstractCommandのサブクラスを実装</li>
<li>Javaクラスパスに新規作成したものを追加</li>
<li>登録処理などは必要ない</li>
</ul>


<h3>新しいプラグインコマンドとして考えられるもの（22ページ）</h3>

<ul>
<li>RDBやKVSやローカルファイルなどの外部データソースをレコードにjoin</li>
<li>DNS名前解決とか短縮URLの展開とか</li>
<li>ソーシャル・ネットワークからリンクされたメタデータのフェッチ（？？）</li>
<li>レコードの感情分析とアノテーション？</li>
</ul>


<p>31ページの図がわかりやすいかも</p>

<p>以上。</p>
]]></content>
  </entry>
  
</feed>
