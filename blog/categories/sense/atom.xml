<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sense | @johtaniの日記 2nd]]></title>
  <link href="http://blog.johtani.info/blog/categories/sense/atom.xml" rel="self"/>
  <link href="http://blog.johtani.info/"/>
  <updated>2018-02-14T18:18:33+09:00</updated>
  <id>http://blog.johtani.info/</id>
  <author>
    <name><![CDATA[johtani]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Senseの歴史 - Sense 2.0.0-beta1の紹介(日本語訳)]]></title>
    <link href="http://blog.johtani.info/blog/2015/10/30/sense-2-0-0-beta1-ja/"/>
    <updated>2015-10-30T17:55:06+09:00</updated>
    <id>http://blog.johtani.info/blog/2015/10/30/sense-2-0-0-beta1-ja</id>
    <content type="html"><![CDATA[<p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>

<p>原文：<a href="https://www.elastic.co/blog/sense-2-0-0-beta1">The Story of Sense - Announcing Sense 2.0.0-beta1</a></p>

<!-- more -->


<h2>誕生</h2>

<p>よくある良いプロジェクト同様、Senseもビールを飲みながら考えつきました。
<a href="https://en.wikipedia.org/wiki/Amstel">Amstel</a>での手漕ぎボートのセッションの後で。
友人の<a href="https://twitter.com/jkaizer">Jasper</a>と私はJasperの<a href="http://q42.nl/">会社</a>で毎年行われる
<a href="http://w00t.camp/">ハッカソン</a>について話をしていました。
このハッカソンはどのようなアイデアでどんなチームで行うかを聞き取りされる、厳密なハッカソンです。
その時、私とJasperはChromeブラウザに別のヒストリーを表示するという作業をやると<a href="https://twitter.com/anneveling">Anne Veling</a>に話をしていました。</p>

<p>Jasperと私はElasticsearchのユーザでしたが、リッチなREST APIにリクエストを送信するための
便利なツールがないと知っていました。
恥ずべきことに、cURLコマンドを利用するターミナルがその時の一番良いツールでした。
皆さん、ターミナルでボディつきのリクエストをサブミットするのがどのくらい不便かというのをわかるために、
5秒ほどターミナルで実行してみてください。
タイプミスのような単純なことでさえ、すべてのコマンドを再タイプしなければならなかったり、
複数行サポートのターミナルと戦ったりです。
ウェブベースのJSONエディタを見つけ出して、それをベースにすることが必要でした。</p>

<h2>終わりなきウィークエンド</h2>

<p>リサーチをして、Anneに電話しました。
私は彼に、History Pageのプロジェクトにもコミットするが、
Elasticsearchユーザなので、便利なコンソールを開発する時間も欲しいという話をしました。
私たちは、<a href="https://ace.c9.io/">Ace</a>オンラインエディタを利用して、
自動でAPIを認識するナレッジベースを構築し、
コンテキストに沿ったサジェストを大なうようにしました。
Anneはすぐに、それが素晴らしいと同意してくれました。
しかし、彼は、ハッカソンの基本的なルール（週末にそれが終わる必要がある）に違反しているので、
そのアイデアを却下するしかありませんでした。
確かに、私たちが提案していたものは行えませんでした。
最後に、私たちは、ChromeのHistory Pageの素晴らしい置き換えについて実装しました。</p>

<p>それでも、私はチャレンジし、それが終わるであろうことを終わるであろうことを証明しなければなりませんでした。
次の週末（といくつかの終業後 :)）に、私はそれを作りました。
Senseの誕生です。
それは、まだバグだらけでしたが、動きました。
これを見せるとみんな興奮しました。</p>

<h2>初期</h2>

<p>Knowledge Baseの拡張とバグのフィックスで数日を過ごしました。
Senseは広まり始め、ずっと古いバグのあるバージョンを利用しないといけないのかと私は恐れました。
SenseをChromeのExtentionとしてリリースすることを決め、リリースすると自動的に更新されるようにしました。
History Panelのような機能を一つづつ追加するようにしました。</p>

<p>Elasticにジョインしてから、会社の人たちがSenseを使用しているということを聞き、とても幸せでした。
特に、<a href="https://twitter.com/clintongormley">Clint</a>と話をしたときのことを覚えています。
彼は、&#8221;You know what Sense should do? It should use this format and allow you to have multiple requests in the editor&#8221;
「Senseになにをすべきかわかる？フォーマットを使うべきだし、エディタで複数のリクエストを持つようにするべきだ」
と言いました。
もちろん、その他のチャレンジも行いました。これは、簡単なものではなく、Aceの詳細を知る必要がありました。
それは新しいAceモード（Aceによって利用されているハイライティングロジック）です。
これは、Senseのサジェストエンジンに密に統合されました。</p>

<p>次のものが古いSenseのスクリーンショットです。</p>

<p>画像あり。Figure 1. Sense 0.7
<a href="https://www.elastic.co/blog/sense-2-0-0-beta1">※画像に関しては原文をご覧ください。</a></p>

<p>APIのURLを入力すると、JSONのボディが入力されます。
うまく切り離すことができ、AceのスタンダードJSONモードを使っていました。
しかし、ここで、次のようなフォーマットをどうやってサポートするか考える必要がありました。</p>

<pre><code>GET _cluster/health
POST index/_settings
{
  "index": { "number_of_replicas": 3 }
}
</code></pre>

<p>これは、Aceが3つの異なるものをどうやってパースするかを知る必要があるということです。
HTTPメソッドとURLとJSONボディです。
また、困ったことに、前に説明した前に説明した通り、明らかに別々にはならないものでした。
JSONボディが完全であることを知る唯一の方法はかっこを数えることです。
それは、いくつかの作業とAceのカスタマイズが必要でしたが、それらを切り離すことができました。
そして、Senseのシンタックスが生まれたのです（Thanks Clint!）</p>

<h2>Marvel時代</h2>

<p>就業時間中、私の優先すべき仕事は<a href="https://www.elastic.co/products/marvel">Marvel</a>の開発になりました。
これは、Elasticsearchのための管理と監視のためのソリューションです。
（side note: Marvelは生まれ変わっています。（&#8221;<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">Shield, Watcher, and Marvel 2.0.0 GA Released</a>&ldquo;））
Marvelは開発環境ではフリーなので、MarvelにSenseを組み込むことにしました。
これにより、Senseの開発が日中も行えるようになり、多くのユーザに利用され始めました。
また、Senseは実際に真の<a href="https://twitter.com/spenceralger">JavaScript開発者</a>によって開発されました。
彼は、コードをクリーンにし、ブラウザにおける最新の技術を私に教えてくれました。</p>

<p>この期間のSenseは数回書き換えられています。
最も顕著なものは、個別のURLとJSONのサジェストエンジンを書き換えて、
1つのサジェストエンジンにしこれらのコンテキストで動作するようにし、さらに3つ目のコンテキスト（URLパラメータ）を追加したことです。</p>

<p>新しいエンジンはまた、複数のサジェストコンテキストをメンテナンスするのが簡単になりました。
例えば、<code>_search API</code>のソートパラメータを考えます。</p>

<pre><code>GET _search
{
  "sort": [
     "timestamp": "desc",
     "price": {
        "order": "desc".
        "missing": "last"
     },
     "nested_filter": { "term": { ... }},
     "_score"
  ]
}
</code></pre>

<p>ユーザがどこにいるかによって、Senseは単純な値（<code>_score</code>のような）か、
複雑な構造（<code>order</code>と<code>missing</code>のような）やフィルタ（<code>nested_filter</code>のような）も
サジェストする必要があります。
これらのサジェストのパスが一度に処理され、無関係なものは除外されます。</p>

<h2>Sense 2.0の紹介！</h2>

<p>Marvel 1.xはKibana 3.0をベースにしていました。
これは、データの探索やダッシュボードツールとして素晴らしいものでした。
しかし、Kibanaチームはさらに素晴らしいものを出しました。
Kibana 4.xはElasticsearchをバックエンドとするUIアプリを簡単に構築することができる
プラットフォームとして設計されています。
実際に、<a href="https://www.elastic.co/guide/en/marvel/current/index.html">Marvel 2.0</a>はKibanaの
プラットフォームで利用できる最初のアプリです。</p>

<p>Senseの話に戻します。
ElasticsearchのAPIとやりとりする一般的なコンソールです。
これをKibanaのアプリぴったりだと気付きました。
ということで、<a href="https://github.com/elastic/sense/">Sense 2.0</a>をKibanaアプリとしてオープンソースで公開しました。
開発及び本番環境で利用してください。</p>

<p>Figure 2. Screenshot Sense 2.0
<a href="https://www.elastic.co/blog/sense-2-0-0-beta1">※画像に関しては原文をご覧ください。</a></p>

<h2>リリースのハイライト</h2>

<p>Sense 2.0の新しい機能をここで簡単に紹介します。
（すべての変更点については<a href="https://www.elastic.co/guide/en/sense/current/release_notes.html#_2_0_0_beta1">こちら</a>をご覧ください。）</p>

<h4>Elasticsearch 2.0</h4>

<p>SenseのナレッジベースをElasticsearch 2.0サポートに更新しました。
新しいPipeline aggregationにも対応しています。</p>

<h4>複数リクエストの実行</h4>

<p>テストやいくつかの一連のコマンドを繰り返し実行したい時があるでしょう。
その時に、それら全てをSenseに記述し、
実行したいリクエストを選択状態にしてElasticsearchにリクエストできます。</p>

<p>Figure 3. Submit multiple requests
<a href="https://www.elastic.co/blog/sense-2-0-0-beta1">※画像に関しては原文をご覧ください。</a></p>

<p>Senseは、Elasticsearchにリクエストを一つずつ送信し、それぞれの出力結果を右のパネルに表示します。
これは、問題のデバッグや複数のシナリオでのクエリの組み合わせの実行に非常に便利です。</p>

<h4>複数リクエストのコピーペースト</h4>

<p>複数リクストを選択し、フォーマットしたり、cURLのコマンドとしてコピーすることも可能です。</p>

<p>Figure 4. Copy multiple requests as cURL
<a href="https://www.elastic.co/blog/sense-2-0-0-beta1">※画像に関しては原文をご覧ください。</a></p>

<pre><code># Delete all data in the `website` index
curl -XDELETE "http://localhost:9200/website"
# Create a document with ID 123
curl -XPUT "http://localhost:9200/website/blog/123" -d'
{
  "title": "My first blog entry",
  "text":  "Just trying this out...",
  "date":  "2014/01/01"
}'
</code></pre>

<p>もちろん、複数のcURLコマンドをコピーしてSenseにペースとすると、Senseはそれらをパースしてくれます。</p>

<h2>まとめ</h2>

<p>Sense 2.0.0のベータリリースです。
実際に多くの作業が終わった認識です。すぐにGAが出るでしょう。</p>

<p>Sense 2.0を知り、試していただくために、新しい<a href="https://www.elastic.co/guide/en/sense/current/index.html">ドキュメント</a>を参考にしてください。
バグやリクエストがある場合は、<a href="https://discuss.elastic.co/c/ecosystem">フォーラム</a>や<a href="https://github.com/elastic/sense/issues">GitHubのIssue</a>に登録をお願いします。</p>
]]></content>
  </entry>
  
</feed>
