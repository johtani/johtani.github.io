<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: elasticsearch | @johtaniの日記 2nd]]></title>
  <link href="http://blog.johtani.info/blog/categories/elasticsearch/atom.xml" rel="self"/>
  <link href="http://blog.johtani.info/"/>
  <updated>2016-07-22T15:37:39+09:00</updated>
  <id>http://blog.johtani.info/</id>
  <author>
    <name><![CDATA[johtani]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lucene Kuromoji for NEologdで指定した品詞の単語を抜き出すIngest Pluginを書いてみた #elasticsearchjp]]></title>
    <link href="http://blog.johtani.info/blog/2016/07/22/making-ingest-processor-plugin-with-cookiecutter/"/>
    <updated>2016-07-22T13:26:56+09:00</updated>
    <id>http://blog.johtani.info/blog/2016/07/22/making-ingest-processor-plugin-with-cookiecutter</id>
    <content type="html"><![CDATA[<p>久しぶりに、技術的なブログ書いてます。</p>

<p>Ingest Processorのプラグインを作ってみたくなったので、書いてみました。
ただ書いてみるんじゃ3番煎じになりそうなので、<a href="https://cookiecutter.readthedocs.io/en/latest/readme.html">cookiecutter</a>を使ってみました。</p>

<!-- more -->


<p>と言っても、同僚のAlexが<a href="https://discuss.elastic.co/t/cookiecutter-template-for-writing-ingest-processors/52985">cookiecutter-elasticsearch-ingest-processor</a>と言うテンプレートを作ってくれているのを使っただけですが。（<a href="https://discuss.elastic.co%E3%81%AB%E6%8A%95%E7%A8%BF%E3%81%95%E3%82%8C%E3%81%9F%E8%A8%98%E4%BA%8B%E3%81%A7%E3%80%81%E4%BD%BF%E3%81%84%E6%96%B9%E3%81%8C%E3%82%A2%E3%83%8B%E3%83%A1gif%E3%81%A7%E8%AA%AC%E6%98%8E%E3%81%95%E3%82%8C%E3%81%A6%E3%81%A6%E3%82%8F%E3%81%8B%E3%82%8A%E3%82%84%E3%81%99%E3%81%84%E3%81%A7%E3%81%99%EF%BC%89">https://discuss.elastic.co%E3%81%AB%E6%8A%95%E7%A8%BF%E3%81%95%E3%82%8C%E3%81%9F%E8%A8%98%E4%BA%8B%E3%81%A7%E3%80%81%E4%BD%BF%E3%81%84%E6%96%B9%E3%81%8C%E3%82%A2%E3%83%8B%E3%83%A1gif%E3%81%A7%E8%AA%AC%E6%98%8E%E3%81%95%E3%82%8C%E3%81%A6%E3%81%A6%E3%82%8F%E3%81%8B%E3%82%8A%E3%82%84%E3%81%99%E3%81%84%E3%81%A7%E3%81%99%EF%BC%89</a></p>

<p><a href="https://cookiecutter.readthedocs.io/en/latest/readme.html">cookiecutter</a>とは、コマンドラインで質問に答えると、テンプレートからプロジェクトが生成できるツールです。
Elasticでは、カスタムBeatを作る時に利用する例がいつかの日本語ブログや発表資料で話題になっていました。
これのIngest Processorのプラグインバージョンです。</p>

<p>今回は、NEologdも使ってみたかったので、Lucene Kuromoji for NEologdを利用して
指定した品詞の単語だけを抽出するProcessorを作ってみました。</p>

<p>GitHubのプロジェクト：<a href="https://github.com/johtani/elasticsearch-ingest-kuromoji-pos-extract">https://github.com/johtani/elasticsearch-ingest-kuromoji-pos-extract</a></p>

<h3>Cookiecutterの使い方</h3>

<p><a href="https://cookiecutter.readthedocs.io/en/latest/readme.html">Cookiecutterのインストールはサイト</a>をご覧ください。</p>

<pre><code>cookiecutter gh:spinscale/cookiecutter-elasticsearch-ingest-processor
</code></pre>

<p>あとは、出てくる以下の項目を指定するだけです。</p>

<ul>
<li><code>processor_type</code> : Ingest Processorのタイプ名です。<code>kuromoji_part_of_speech_extract</code>としました。（Alexのだと<code>_</code>を使うとちょっと問題があるので後述）</li>
<li><code>description</code> : readme.mdに利用されます。</li>
<li><code>developer_name</code> : 名前を記載。Javaのファイルのヘッダに利用</li>
<li><code>elasticsearch_version</code> : デフォルトで<code>5.0.0-alpha4</code>が指定されているので、特に指定せず</li>
</ul>


<p>以上の質問に答えたら、プロジェクトのディレクトリ構造が出来上がってます。
プロジェクトのビルドなどにはGradleを利用します。</p>

<h3>プロジェクトのIntelliJ IDEA用のファイルを生成</h3>

<p>build.gradleファイルでGradleのideaプラグインがapplyされているので、以下のコマンドを叩けばIntelliJ IDEAのプロジェクトファイル（？）が生成され、IntelliJで開けばすぐに開発ができる状態にできます。</p>

<pre><code>gradle idea
</code></pre>

<h3>コーディング</h3>

<p>あとは、必要処理をコーディングします。
実際にコーディングするクラスは<code>org.elasticsearch.plugin.ingest.kuromoji_part_of_speech_extract</code>のパッケージにある以下の2つです。（パッケージ名にはprocessor_typeの名前が指定されている）</p>

<ul>
<li>IngestKuromojiPartOfSpeechExtractPlugin</li>
<li>KuromojiPartOfSpeechExtractProcessor</li>
</ul>


<h4>IngestKuromojiPartOfSpeechExtractPlugin</h4>

<p>Pluginというクラスは、プラグインをNodeのModuleとして登録する処理を書くクラスとなります。
生成してすぐは、次のような形になっています。（※importやクラス定義の部分は省略しています。）</p>

<pre><code class="Java">...
    public static final Setting&lt;String&gt; YOUR_SETTING =
            new Setting&lt;&gt;("ingest.kuromoji_part_of_speech_extract.setting", "foo", (value) -&gt; value, Setting.Property.NodeScope);

    @Override
    public List&lt;Setting&lt;?&gt;&gt; getSettings() {
        return Arrays.asList(YOUR_SETTING);
    }

    public void onModule(NodeModule nodeModule) throws IOException {
        nodeModule.registerProcessor(KuromojiPartOfSpeechExtractProcessor.TYPE,
                (registry) -&gt; new KuromojiPartOfSpeechExtractProcessor.Factory());
    }
...
</code></pre>

<p><code>YOUR_SETTING</code>プロパティと<code>getSettings()</code>メソッドは<code>elasticsearch.yml</code>で指定したい設定を記述する場合の例になります。今回は特に必要ないので両方削除しました。
最終系は<a href="https://github.com/johtani/elasticsearch-ingest-kuromoji-pos-extract">GitHubのコード</a>をご覧ください。</p>

<h4>KuromojiPartOfSpeechExtractProcessor</h4>

<p>Processorは実際にIngest Nodeで行う処理を書くところです。</p>

<pre><code class="Java">
    public static final String TYPE = "kuromoji_part_of_speech_extract";

    private final String field;
    private final String targetField;

    public KuromojiPartOfSpeechExtractProcessor(String tag, String field, String targetField) throws IOException {
        super(tag);
        this.field = field;
        this.targetField = targetField;
    }

    @Override
    public void execute(IngestDocument ingestDocument) throws Exception {
        String content = ingestDocument.getFieldValue(field, String.class);
        // TODO implement me!
        ingestDocument.setFieldValue(targetField, content);
    }

    @Override
    public String getType() {
        return TYPE;
    }

    public static final class Factory extends AbstractProcessorFactory&lt;KuromojiPartOfSpeechExtractProcessor&gt; {

        @Override
        public KuromojiPartOfSpeechExtractProcessor doCreate(String processorTag, Map&lt;String, Object&gt; config) throws Exception {
            String field = readStringProperty(TYPE, processorTag, config, "field");
            String targetField = readStringProperty(TYPE, processorTag, config, "target_field", "default_field_name");

            return new KuromojiPartOfSpeechExtractProcessor(processorTag, field, targetField);
        }
    }
</code></pre>

<p><code>TYPE</code>が<a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/put-pipeline-api.html">Ingest APIのPipelineでProcessorを指定するときに使う名前</a>になります。ここは、cookiecutterの時にprocessor_typeに入力した文字列になっています。
<code>kuromoji_part_of_speech_extract</code>だと長いので、<code>kuromoji_pos_extract</code>に変えました。</p>

<p><code>execute()</code>メソッドに<code>// TODO implement me!</code>とあります。
この部分に実際の処理を記述していきます。</p>

<p>あとは、<code>Factory</code>クラスでIngest APIで指定された設定項目を読み込みます。
今回作成した<code>elasticsearch-ingest-kuromoji-pos-extract</code>では品詞を指定する必要があるので、<code>pos_tags</code>を指定できるように処理を追加しました。</p>

<p>私が実装したものの説明をするとちょっと長くなりそうなので、<a href="https://github.com/johtani/elasticsearch-ingest-kuromoji-pos-extract">GitHubのコード</a>をご覧ください。</p>

<h3>テストのコーディング</h3>

<p>テストのクラスもテンプレートで生成されています。</p>

<ul>
<li>KuromojiPartOfSpeechExtractProcessorTests</li>
<li>KuromojiPartOfSpeechExtractRestIT</li>
</ul>


<h4>KuromojiPartOfSpeechExtractProcessorTests</h4>

<p>Processorクラスのテストになります。生成直後は次のような感じです。</p>

<pre><code class="Java">public void testThatProcessorWorks() throws Exception {
    Map&lt;String, Object&gt; document = new HashMap&lt;&gt;();
    document.put("source_field", "fancy source field content");
    IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document);

    KuromojiPartOfSpeechExtractProcessor processor = new KuromojiPartOfSpeechExtractProcessor(randomAsciiOfLength(10), "source_field", "target_field");
    processor.execute(ingestDocument);
    Map&lt;String, Object&gt; data = ingestDocument.getSourceAndMetadata();

    assertThat(data, hasKey("target_field"));
    assertThat(data.get("target_field"), is("fancy source field content"));
    // TODO add fancy assertions here
}
</code></pre>

<p>テストメソッドも実装されていますが、パラメータの追加の設定処理やアサーションが書かれてません。
実装に合わせて、アサーションや設定処理を追加しましょう。</p>

<h4>KuromojiPartOfSpeechExtractRestIT</h4>

<p>こちらはIntegration Testになります。
実際にElasticsearchに対して外部からAPIを叩くような感じです。
APIを叩くときに利用するJSONの設定やアサーションは<code>src/test/resources</code>にyamlファイルがあります。</p>

<ul>
<li>10_basic.yaml</li>
<li>20_kuromoji_part_of_speech_extract_processor.yaml</li>
</ul>


<p><code>10_basic.yaml</code>はプラグインがインストールされているかの確認のテストです。特に変更する必要はないです。</p>

<p><code>20_kuromoji_part_of_speech_extract_processor.yaml</code>は実際にコーディングしたProcessorが動くかどうかのテストです。</p>

<p>テストの内容については、<a href="https://github.com/johtani/elasticsearch-ingest-kuromoji-pos-extract">GitHubのコード</a>をご覧ください。</p>

<h3>テストの実行とZipの生成</h3>

<p>テストの実行とZipの生成は次のコマンドを実行すればOKです。</p>

<pre><code>gradle check
</code></pre>

<p>テストに問題があった場合は、コケますし、問題なければ<code>SUCCESS</code>と表示が出ます。
成功した場合は<code>build/distributions/</code>というディレクトリにzipファイルができています。
これをElasticsearchのpluginコマンドでインストールすれば動きます。</p>

<pre><code>bin/plugin install file:///path/to/elasticsearch-ingest-kuromoji-pos-extract/build/distribution/ingest-kuromoji_part_of_speech_extract-0.0.1-SNAPSHOT.zip
</code></pre>

<h3>kuromoji_pos_extractの利用方法</h3>

<p>Ingest APIには便利な<a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/simulate-pipeline-api.html">Simulate Pipeline API</a>があります。</p>

<p>ということで、<a href="https://github.com/neologd/mecab-ipadic-neologd/blob/master/README.ja.md">mecab-ipadic-NEologd</a>にあったサンプルの文章を使って、使い方の説明です。</p>

<pre><code class="JSON">POST _ingest/pipeline/_simulate
{
  "pipeline" : {
    "description" : "kuromoji neologd extract test",
    "processors" : [
      {
        "kuromoji_pos_extract" : {
        "field" : "body",
        "target_field" : "noun_field",
        "pos_tags" : [
          "名詞-固有名詞-組織",
          "名詞-固有名詞-一般",
          "名詞-固有名詞-人名-一般",
          "名詞-固有名詞-地域-一般",
          "名詞-固有名詞-地域-国"
          ]
        }
      }
      ]
  },
  "docs" : [
    {
      "_index": "index",
      "_type": "type",
      "_id": "id",
      "_source": {
        "body" : "10日放送の「中居正広のミになる図書館」（テレビ朝日系）で、SMAPの中居正広が、篠原信一の過去の勘違いを明かす一幕があった。"
      }
    }
    ]
}
</code></pre>

<p>結果はこちら。</p>

<pre><code class="JSON">{
  "docs": [
    {
      "doc": {
        "_index": "index",
        "_id": "id",
        "_type": "type",
        "_source": {
          "noun_field": [
            "10日",
            "中居正広のミになる図書館",
            "テレビ朝日",
            "SMAP",
            "中居正広",
            "篠原信一"
          ],
          "body": "10日放送の「中居正広のミになる図書館」（テレビ朝日系）で、SMAPの中居正広が、篠原信一の過去の勘違いを明かす一幕があった。"
        },
        "_ingest": {
          "timestamp": "2016-07-22T06:18:49.007+0000"
        }
      }
    }
  ]
}
</code></pre>

<p><code>noun_field</code>に固有名詞の単語が抜き出せているのがわかるかと思います。</p>

<h3>Alexのテンプレートで困った点</h3>

<p>テンプレートは便利だったのですが、<code>processor_type</code>に<code>_</code>を使用したタイプ名を指定すると次のような問題（？）が発生しました。</p>

<ul>
<li>クラス名が<code>Kuromoji_part_of_speech_extractProcessor</code>となってしまう</li>
</ul>


<p>深刻な問題ではないのですが、JavaだとCamel Caseが普通なのでちょっと気になって。
ということで、<a href="https://github.com/spinscale/cookiecutter-elasticsearch-ingest-processor/pull/1">プルリク</a>作って出してみました。まだ取り込まれてないかな。</p>

<p>取り込み前に使いたい方は以下のコマンドを実行してください。
<code>processor_class_name</code>という項目が増えています。
デフォルトだと<code>processor_type</code>の<code>_</code>の部分を取り除きつつCamel Caseにしたものが入ります。</p>

<pre><code>cookiecutter gh:johtani/cookiecutter-elasticsearch-ingest-processor
</code></pre>

<h3>まとめ</h3>

<p>ということで、とりあえず作ってみましたというものになります。
特徴的な単語（固有名詞だけ）を抜き出して、別のフィールドにできるので、タグみたいなものをこれを使って前処理で作れるようになるかなぁと。</p>

<h2>参考ブログ（元ネタ？）</h2>

<p>インスパイア元となったブログです。</p>

<ul>
<li><a href="http://dev.classmethod.jp/server-side/elasticsearch/ingest-plugin-useragent/">User Agentを解析するIngest Pluginを書いてみた</a></li>
<li><a href="http://blog.cybozu.io/entry/2016/07/05/080000">Elasticsearch 5.0.0のIngest Node用プラグインを書いた話</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第16回Elasticsearch勉強会を開催しました。 #elasticsearchjp]]></title>
    <link href="http://blog.johtani.info/blog/2016/06/28/16th-elasticsearch-meetup/"/>
    <updated>2016-06-28T13:55:55+09:00</updated>
    <id>http://blog.johtani.info/blog/2016/06/28/16th-elasticsearch-meetup</id>
    <content type="html"><![CDATA[<p><a href="https://elasticsearch.doorkeeper.jp/events/46539">第16回Elasticsearch勉強会</a>を開催しました。
スタッフの皆さん、スピーカーの皆さん、会場提供していただいた<a href="http://recruit-tech.co.jp">リクルートテクノロジーズさん</a>、ありがとうございました！
今回は、司会だけに注力してみました（）。</p>

<!-- more -->


<h3>チェックイン数など</h3>

<ul>
<li>チェックインした人：141名</li>
<li>キャンセルしなかった人：67名</li>
</ul>


<p>でした。</p>

<p>今回は、参加希望者が多くて、当日にも100名近いキャンセル待ちの方がいたので、
240名まで、参加者枠を増枠（会場キャパ190名程度）して対応しました。
まぁ、読み通り、1/3の方はキャンセルしない形でした。
天気も良く電車の遅延などもなさそうだったので、ちょっとドキドキしてたのですが。</p>

<p>以下は簡単なメモです。</p>

<h2>「LogstashとElasticsearchで作るEnterprise Search Platform」/ Elastic Kosho Owa</h2>

<p>スライド：<a href="https://speakerdeck.com/kosho/enabling-enterprise-search-platform-with-elastic-stack">https://speakerdeck.com/kosho/enabling-enterprise-search-platform-with-elastic-stack</a></p>

<ul>
<li>使ってるLogstashの設定ファイルを elastic-japan at elastic dot co に送るとTシャツがもらえるらしい。</li>
<li>Logstashの<a href="https://github.com/logstash-plugins/logstash-filter-ruby/blob/master/lib/logstash/filters/ruby.rb">filter-ruby</a>はここで、evalしてcallしてるから、特にforkとかしてないかと。</li>
</ul>


<h2>「企業・業界情報プラットフォームSPEEDAにおけるElasticsearchの活用」 / 株式会社ユーザベース 北内 啓さん</h2>

<p>スライド：<a href="http://www.slideshare.net/tau3000/speedaelasticsearch-63510388">http://www.slideshare.net/tau3000/speedaelasticsearch-63510388</a></p>

<ul>
<li>アルゴリズム関連の開発担当</li>
<li>企業データをいろんな軸で検索したい

<ul>
<li>データ数が約70億レコードになりそう（通貨 x MySQL）</li>
</ul>
</li>
<li>300万企業データ＋Nestedとかで持ってる。

<ul>
<li>11万フィールド？？？</li>
<li>10台の物理サーバに24仮想マシン</li>
</ul>
</li>
<li>企業名の検索

<ul>
<li>recall重視</li>
</ul>
</li>
<li>NewsPicksの検索機能

<ul>
<li>「日本 化粧品 売上高」業界のデータとかも観れるのかな？有料会員向け機能</li>
<li>登録済みキーワードかどうかをRDB＋Esに検索して、ID化するっぽい

<ul>
<li>ID（Analyze必要ない）検索だから、termクエリだった、サンプルが。</li>
</ul>
</li>
</ul>
</li>
<li>ノードの役割分担

<ul>
<li>更新はMasterNode経由でDataNodeへ。</li>
<li>検索はClientNode経由でDataNodeへ。</li>
</ul>
</li>
<li>1.xかぁ。。。</li>
</ul>


<h2>「Elasticsearchベースの全文検索システムFess」 / 株式会社エヌツーエスエム 菅谷信介さん</h2>

<p>スライド：<a href="http://www.slideshare.net/shinsuke/elasticsearchfess">http://www.slideshare.net/shinsuke/elasticsearchfess</a></p>

<ul>
<li>10.xからSolrをやめてElasticsearchへ。</li>
<li>日本語検索

<ul>
<li>bigram＋形態素（1文字検索とかに対応するため）</li>
</ul>
</li>
<li>NeologDに対応したkuromojiを利用</li>
<li>DBFluteをESFluteとしてEs対応</li>
<li>KOPFを組み込んで使ってる</li>
<li>configをREST API経由で更新できるプラグインあり</li>
</ul>


<h2>LT</h2>

<h3>「ElasticsearchとGCPのネットワークでハマった話」 株式会社サイバーエージェント 平田大地 さん @daichild</h3>

<p>スライド：<a href="https://speakerdeck.com/daic_h/gcpfalsenetutowakudehamatutahua">https://speakerdeck.com/daic_h/gcpfalsenetutowakudehamatutahua</a></p>

<ul>
<li>hhkb2 2刀流！</li>
<li>networkのKeep-alive周りで困ったよというお話。</li>
<li>後で聞いたけど、<a href="https://www.elastic.co/guide/en/elasticsearch/plugins/current/cloud-gce.html">GCE Cloud Plugin</a>は使ってるそうです。</li>
</ul>


<p><strong>06/28 17:00追記</strong></p>

<ul>
<li>Pingを定期的に実行させることで回避も出来るようです。</li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.3/modules-transport.html#_tcp_transport">transport.ping_schedule</a>に時間を指定します。通常のNode（Transport以外）は&#8217;-1&#8217;が指定してあり、動作してません。</li>
</ul>


<h3>「スクリプトフィールドで作るランキングみたいな何か」iwag さん</h3>

<p>スライド：<a href="https://speakerdeck.com/iwag/elasticsearch-dezuo-rurankingu">https://speakerdeck.com/iwag/elasticsearch-dezuo-rurankingu</a></p>

<ul>
<li>1.xかぁ。。。</li>
<li>あとは、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html">function_score</a>とかも面白いですよ！</li>
</ul>


<h2>その他、感想などのブログ</h2>

<ul>
<li><a href="http://tsuyoshi-nakamura.hatenablog.com/entry/2016/06/28/115244">第16回elasticsearch勉強会に参加してきた</a></li>
<li><a href="https://masutaka.net/chalow/2016-06-28-1.html">第16回Elasticsearch勉強会に参加してきた </a></li>
</ul>


<h2>まとめ＋宣伝？</h2>

<p>1.xがまだまだいますねぇ、早く2.xにアップしましょう！（5.0ももう直ぐだし）。懇親会でも色々と話しましたが、<a href="https://discuss.elastic.co">https://discuss.elastic.co</a> というフォーラムあるので、ぜひ活用してください。</p>

<p>次回は8月末か9月頭かでしょうか。
<a href="http://www.ospn.jp/osc2016-kyoto/">7月末にOSC京都</a>に出没するので、京都で勉強会やりたいと思ってます！
会場とかスピーカーとか興味ある人連絡ください。</p>

<p>東京の勉強会のスピーカーも随時募集中ですので、連絡ください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第15回Elasticsearch勉強会を開催しました。 #elasticsearchjp]]></title>
    <link href="http://blog.johtani.info/blog/2016/03/17/15th-elasticsearch-jp/"/>
    <updated>2016-03-17T12:43:00+09:00</updated>
    <id>http://blog.johtani.info/blog/2016/03/17/15th-elasticsearch-jp</id>
    <content type="html"><![CDATA[<p><a href="https://elasticsearch.doorkeeper.jp/events/40444">第15回Elasticsearch勉強会</a>を開催しました。
スタッフの皆さん、スピーカーの皆さん、会場提供していただいた<a href="http://recruit-tech.co.jp">リクルートテクノロジーズさん</a>、ありがとうございました！
今回は、Elastic{on} 2016開催直後ということで、大半はElastic{on}に関する話でした。</p>

<!-- more -->


<h3>チェックイン数など</h3>

<ul>
<li>チェックインした人：114名</li>
<li>キャンセルしなかった人：62名</li>
</ul>


<p>でした。
今回は、少しおそめで1時間前にキャンセル待ちがいない状態にしました。
まぁ、いつもの感じでしょうか。数値も安定してきた感じですかね。</p>

<h2>&ldquo;Elasticsearchと機械学習を実際に連携させる&rdquo; / <a href="https://www.preferred-networks.jp">Preferred Networks America, Inc.</a> CTO 久保田展行(Kubota Nobuyuki) さん</h2>

<p>スライド：<a href="http://www.slideshare.net/nobu_k/elasticsearch-59627321">Elasticsearchと機械学習を実際に連携させる</a></p>

<p><a href="http://blog.johtani.info/blog/2016/01/08/14th-elasticcsearch-jp/">前回の続き</a>の話で、今回が本題でした。</p>

<p>勉強会直前に発表された<a href="http://sensorbee.io">SensorBee</a>をElasticsearchと一緒に使うとどんなことができるかというお話です。
まぁ、前処理重要ですよねというのが、いつものことですが、印象的でした。
いつものようにわかりやすい説明だったので、使ってブログを書いて欲しいなと。</p>

<p>発表の中で、説明に出てきたデモとか。
* <a href="https://research.preferred.jp/2016/01/ces2016/">CES2016でロボットカーのデモを展示してきました</a></p>

<h2>&ldquo;Elastic{ON} 2016レポート&rdquo; / Elastic Jun Ohtani</h2>

<p>スライド：<a href="https://speakerdeck.com/johtani/elastic-on-2016-repoto">elastic{on} 2016 レポート</a></p>

<p>写真多めで、キーノートをメインに話をしました。</p>

<p>簡単なまとめとしては</p>

<ul>
<li>プロダクトロゴができました。<a href="https://www.elastic.co/brand">ロゴ画像などはこちら</a></li>
<li>次のメインバージョンは全て5.0。（<a href="https://www.elastic.co/v5">5.0に関する通知が欲しい人はこちらで登録できます</a>）</li>
<li><a href="https://www.elastic.co/elasticon/conf/2016/sf">elastic{on} 2016のビデオなどはこちら</a></li>
<li>BBL始めます。連絡ください</li>
</ul>


<h2>&ldquo;Elastic{ON}の過ごし方&rdquo; / クラスメソッド株式会社 藤本 真司 さん</h2>

<p>スライド：<a href="http://dev.classmethod.jp/server-side/elasticsearch/elasticsearch-study-15-lt/">Elastic{ON}の過ごし方</a></p>

<p>印象に残ったのは</p>

<ul>
<li>「自他共に認めるブログの会社」</li>
<li>4/12にSAPさんに会場を借りてElastic＆クラスメソッドでイベントやります。</li>
</ul>


<p>やっぱりご飯が美味しいんですねぇ。
早速<a href="http://dev.classmethod.jp/server-side/elasticsearch/elasticsearch-study-15-lt/">ブログ</a>が書かれてました。</p>

<h2>&ldquo;Elastic{ON} 2016 見るべきセッション資料 7選&rdquo; / Acroquest Technology株式会社 谷本 心 さん</h2>

<p>スライド：<a href="https://speakerdeck.com/shintanimoto/elastic-on-2016-jian-rubekisetusiyonzi-liao-7xuan-number-elasticsearchjp">Elastic{ON} 2016 見るべきセッション資料 7選 #elasticsearchjp</a></p>

<p>印象に残ったのは</p>

<ul>
<li>東京でハンズオンやる会場提供者募集中！</li>
<li>Ingest Node（参考：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/ingest.html">Ingest Nodeのドキュメントは公開中。</a>）</li>
<li>Reindex API（参考：<a href="https://github.com/elastic/elasticsearch/pull/17060">Backport reindex to 2.x </a>）</li>
</ul>


<h2>その他、感想などのブログ</h2>

<ul>
<li><a href="http://dev.classmethod.jp/server-side/elasticsearch/elasticsearch-study-15-lt/">第15回elasticsearch勉強会にLTで登壇しました #elasticsearch #elasticsearchjp</a></li>
<li><a href="http://d.hatena.ne.jp/Kazuhira/20160316/1458142636">第15回elasticsearch勉強会に参加してきました #elasticsearch #elasticsearchjp</a></li>
</ul>


<h2>まとめ＋宣伝</h2>

<p>来年のElastic{ON}に参加したいと思っていただけたらよかったなと。</p>

<p>4/12にクラスメソッドさんとイベントを行います。また、ツイートすると思います。</p>

<p>次回はいつも通りだと5月中旬になるかと思います（大丈夫かな？<a href="http://www.ospn.jp/osc2016-nagoya/">OSC 2016 Nagoya</a>でしゃべったり、ブース出したりとかするけど）。
5末に名古屋に出没します。名古屋で勉強会できればやりたいと思ってます。会場とかスピーカーとか興味がある方は連絡ください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第14回Elasticsearch勉強会を開催しました。 #elasticsearchjp]]></title>
    <link href="http://blog.johtani.info/blog/2016/01/08/14th-elasticcsearch-jp/"/>
    <updated>2016-01-08T11:34:56+09:00</updated>
    <id>http://blog.johtani.info/blog/2016/01/08/14th-elasticcsearch-jp</id>
    <content type="html"><![CDATA[<p>あけましておめでとうございます、johtaniです。</p>

<p><a href="https://elasticsearch.doorkeeper.jp/events/36330">第14回Elasticsearch勉強会</a>を開催しました。
スタッフの皆さん、スピーカーの皆さん、会場提供していただいた<a href="http://recruit-tech.co.jp">リクルートテクノロジーズさん</a>、ありがとうございました！
今年もよろしくお願いします！参加していただき盛り上げていただいた参加者の皆さんもありがとうございました。</p>

<!-- more -->


<h3>チェックイン数など</h3>

<ul>
<li>チェックインした人：122名</li>
<li>キャンセルしなかった人：58名</li>
</ul>


<p>でした。
今回も当日の昼の時点でキャンセル待ちがない状態にしていました。
いくつか電車が止まっていたという話を聞いていたので、開始を5分遅らせ、
受付は45分くらいまで開けておくという対応をしてもらいました。</p>

<h3>&ldquo;ココが辛いよelasticsearch&rdquo; / 株式会社リクルートテクノロジー @tatakaba さん</h3>

<p>スライド：<a href="http://www.slideshare.net/takahitotakabayashi/elasticsearch-56936397">ココが辛いよelasticsearch</a></p>

<p>実際にいくつかのサービスで運用されている内容とどういった機能を利用しているか、
どういったものを独自に作っているかという話をしていただきました。</p>

<ul>
<li>独自PluginでA/Bテストしてる</li>
<li>Snapshotの活用</li>
<li>Index作成は環境に合わせて行っている。</li>
<li>バージョンは混在</li>
<li>PusnaRSのバージョンアップの話。

<ul>
<li>2つのバージョンのクラスタを用意してリアルタイムに切り替え。</li>
</ul>
</li>
<li>Elasticsearchの活用

<ul>
<li>QueryのRewrite：</li>
<li>SolrのリクエストをEsで受け付けたり。</li>
</ul>
</li>
<li>辛い話。

<ul>
<li>バージョンアップが辛い</li>
<li>Riverなくなるのつらい</li>
<li>データずれるのつらい</li>
</ul>
</li>
</ul>


<p>補足：</p>

<h4>バージョンアップについて</h4>

<p>1.x系から2.x系にアップされるのであれば、こちらを必ず試してください。</p>

<p><a href="https://github.com/elastic/elasticsearch-migration">https://github.com/elastic/elasticsearch-migration</a></p>

<p>「.」が使えなくなるという話は、Solrとの大きな違いになるのかもなぁと。
ネスト構造のデータの表記を「.」で行うというのを厳密に行えるように、
「.」を使えなくしたというのがあるかと。</p>

<h4>Riverについて</h4>

<p>Riverがなくなった理由については、<a href="https://www.elastic.co/blog/deprecating-rivers">https://www.elastic.co/blog/deprecating-rivers</a> で記載があります。
便利なのですが、負荷が偏ったり、スケールしないとかいう問題点があるかなと。</p>

<p>良いサンプルとしては、JDBC Riverなどは、Javaのプログラムとして起動できるように変更されていたりします。</p>

<p><a href="https://github.com/jprante/elasticsearch-jdbc/wiki/jdbc-plugin-feeder-mode-as-an-alternative-to-the-deprecated-elasticsearch-river-api">https://github.com/jprante/elasticsearch-jdbc/wiki/jdbc-plugin-feeder-mode-as-an-alternative-to-the-deprecated-elasticsearch-river-api</a></p>

<p>（<strong>個人的</strong> には、SolrのDIHもRiverもあんまり好きではなかったです。データの変換処理と、ロード処理は別々にしたい人だったので。）</p>

<h4>データのズレなど</h4>

<p>耐障害性とか信頼性に関しては、どういった問題点があるのか、どういった対応をしているのかというのがまとめられたページが用意されています。</p>

<p><a href="https://www.elastic.co/guide/en/elasticsearch/resiliency/current/index.html">https://www.elastic.co/guide/en/elasticsearch/resiliency/current/index.html</a></p>

<h3>「機械学習を利用したちょっとリッチな検索」 / Preferred Networks America, Inc. CTO 久保田展行(Kubota Nobuyuki) さん</h3>

<p>スライド：<a href="http://www.slideshare.net/nobu_k/ss-56810268">機械学習を利用したちょっとリッチな検索</a></p>

<p>来日していただき、機械学習と検索の話をしてもらいました。
本編は次回の発表かもw</p>

<ul>
<li>機械学習を元に、検索対象の情報を元の情報から増やしてあげる。</li>
<li>増えた情報を検索できるようにする</li>
</ul>


<h4>今日のゴール：</h4>

<ul>
<li>機械学習とはどういうものか？</li>
<li>データの集め方とか、アノテーションとか</li>
<li>学習の方法（ツールやライブラリに依存）</li>
</ul>


<h4>Esでの活用方法</h4>

<ul>
<li>オフラインで学習させて、情報を付与した後に、Elasticsearchに入れる</li>
<li>Jubatus＋fluentdで</li>
<li>ChainerサポートのOSSのツールを公開予定</li>
</ul>


<p>「ここからが本当の地獄だ。。。」ってのが聴きたいw</p>

<h3>「Lucene Query 再考 - Domain Specific Query 実装 -」 / Supership株式会社 インフラ事業開発本部検索グループ 大川真吾 さん</h3>

<p>スライド：<a href="http://www.slideshare.net/ShingoOKAWA/elasticsearch-20150107-56772462">Lucene Query 再考 - Domain Specific Query 実装 -</a></p>

<p>Luceneのクエリに関する話と、クエリパーサーに関する話でした。
こういった濃い話も勉強会でしてもらえると、色々な参加者に楽しんでいただけるかなぁと。
次回も続きを話してもらう予定です。</p>

<p>補足：</p>

<p>参考までにですが、Elasticsearchに入門したての人向けに、
Analyzerとか転置インデックスとかの話をした時のスライドになります。
<a href="https://speakerdeck.com/johtani/lucenetori-ben-yu-falsejian-suo">https://speakerdeck.com/johtani/lucenetori-ben-yu-falsejian-suo</a></p>

<h3>LT:</h3>

<h4>Fluentd meets Beats / @repeatedly さん</h4>

<p>スライド：<a href="http://www.slideshare.net/repeatedly/fluentpluginbeats-at-elasticsearch-meetup-14">http://www.slideshare.net/repeatedly/fluentpluginbeats-at-elasticsearch-meetup-14</a></p>

<p>参考Qiita：<a href="http://qiita.com/repeatedly/items/77af41788f0b3ccdefd2">http://qiita.com/repeatedly/items/77af41788f0b3ccdefd2</a></p>

<p>Beatsの説明をTDの人からしてもらうなどw
FluentdにBeatsからのデータを流し込めるようにしたプラグインが出たという話でした。</p>

<p>filebeatの性能の件は社内で聞いてみようかと。</p>

<h4>Elasticsearchインデクシングのパフォーマンスを測ってみた / 日本IBM　黒澤亮二さん</h4>

<p>スライド：<a href="http://www.slideshare.net/kuron99/elasticsearch-56784623">Elasticsearchインデクシングのパフォーマンスを測ってみた</a></p>

<p>参考Qiita：<a href="http://qiita.com/rjkuro/items/e79eec7ffb0511b7c678">http://qiita.com/rjkuro/items/e79eec7ffb0511b7c678</a></p>

<p>細かな性能測定の結果を駆け足で話してもらいました。
皆さんもこの指標をもとに、手元の環境を計測してみたりしてみてもらえればと。</p>

<p>あとは、2.x系になってるので、同じ方法で計測してもらってまた
発表してもらえると嬉しいなー（棒）</p>

<h2>その他、感想などのブログ</h2>

<ul>
<li><a href="http://acro-engineer.hatenablog.com/entry/2016/01/08/123857">Elasticsearch勉強会　第14回フィードバック</a></li>
</ul>


<h2>まとめ＋宣伝</h2>

<p>久々に（初めてかな？）、ゲストがいないのに自分が喋りませんでした。
次回は3月中旬を予定してます。
次回は、Elastic{ON}16の報告をする予定です。いろいろと発表あるだろうし。</p>

<p>あと、今月末の1/29に<a href="http://www.ospn.jp/osc2016.enterprise-osaka/">オープンソースカンファレンス 2016.enterprise@Osaka</a>にブース出展します。
セミナー枠でも弊社OSSプロダクトの概要を話しする予定です。
関西の方は、ぜひ参加していただければと。ブースでお待ちしております。</p>

<p>また、スピーカーや場所が用意できたら、出張勉強会もまたやりたいなと思っています。
興味ある方は、連絡ください！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015年のElasticsearch]]></title>
    <link href="http://blog.johtani.info/blog/2015/12/25/about-elasticsearch-in-2015/"/>
    <updated>2015-12-25T13:29:54+09:00</updated>
    <id>http://blog.johtani.info/blog/2015/12/25/about-elasticsearch-in-2015</id>
    <content type="html"><![CDATA[<p>今年最後のAdvent Calendarとなります。</p>

<p>この記事は<a href="http://qiita.com/advent-calendar/2015/elasticsearch">Elasticsearch Advent Calendar 2015</a>の最終日のエントリです。</p>

<p>簡単に今年の変遷を、Elasticsearchをベースに振り返ってみようかと思います。</p>

<!-- more -->


<h2>Kibana 4リリース（2月）</h2>

<ul>
<li><a href="http://blog.johtani.info/blog/2015/02/20/kibana-4-literally-ja/">Kibana 4（日本語訳）</a></li>
</ul>


<p>いきなり、Elasticsearchではない話題ですが。
AggregationベースのKibanaがリリースされました。
画面が黒くないというので、話題になりましたw
12月末時点では、4.3.1になっています。
Sub Aggregationによる強力なグラフ表示や異なるインデックスに対するグラフを
一つのダッシュボードに表示できるといったことができるようになりました。</p>

<h2>セキュリティ向けプラグインShieldのリリース（2月）</h2>

<ul>
<li><a href="http://blog.johtani.info/blog/2015/02/27/you-know-for-security-shield-goes-ga-ja/">セキュリティ向けプラグインShieldのリリース（日本語訳）</a></li>
</ul>


<p>商用向けのプラグインの第2弾です。
セキュリティ強化のためのプラグインで、いろいろなところで引き合いがあったりします。</p>

<h2>初のユーザカンファレンス、Elastic{ON}開催（3月）</h2>

<ul>
<li><a href="http://blog.johtani.info/blog/2015/03/11/attend-elasticon/">#elasticon に参加中</a></li>
</ul>


<p>サンフランシスコで、弊社初のカンファレンスが開催されました。（来年（2016年）もサンフランシスコで開催されます。）
また、ここで、以下の2点の発表がありました。</p>

<ul>
<li>ロゴ及びドメイン名などの変更</li>
<li>Foundのジョイン</li>
</ul>


<p>約1300名が参加する大イベントでした。
初の渡米で楽しんできましたが、ドメインの切り替えなどは大変でした。。。
まだ、ロゴを変えて1年経ってないということが実感できてないです。</p>

<p><a href="https://www.elastic.co/found">Found</a>のジョインはまだまだ、日本で知名度が出てないかもなぁと。
もっと広めないと。
利点としては以下の通りです。</p>

<ul>
<li>新バージョンがすぐに利用可能に。また、バージョンアップも画面で指定可能</li>
<li>公式プラグイン＋その他いくつかのプラグインが利用可能</li>
</ul>


<h2>Elasticsearch 1.5 リリース（4月）</h2>

<ul>
<li><a href="http://blog.johtani.info/blog/2015/04/01/elasticsearch-1-5-0-released-ja/">Elasticsearch 1.5.0リリース（日本語訳）</a></li>
</ul>


<p>主に、resiliencyに関する改良になります。
毎リリースで信頼性向上につながる改良が含まれる形になっています。
このリリースの近くで初の東京の外での勉強会を<a href="http://blog.johtani.info/blog/2015/04/04/elasticsearch-study-session-at-nagoya/">名古屋で開催</a>したりもしました。</p>

<h2>discuss.elastic.coをオープン（5月）</h2>

<ul>
<li><a href="https://discuss.elastic.co">https://discuss.elastic.co</a></li>
</ul>


<p>これまでは、Google Groupsを使っていましたが、Elasticが提供しているプロダクトが
別々のグループであったために、プロダクトにまたがった質問がやりにくかったり、検索がしにくかったりという問題点がありました。
今では、過去のGoogle Groupsのデータも移行されているので、是非参加して、質問・回答してみてください。
<a href="https://discuss.elastic.co/c/in-your-native-tongue/18-category">日本語でやりとりできるカテゴリ</a>もあるので、どんどん、やりとりしていただければ。</p>

<h2>Elasticsearch 1.6 リリース（6月）</h2>

<ul>
<li><a href="http://blog.johtani.info/blog/2015/06/10/elasticsearch-1-6-0-released-ja/">Elasticsearch 1.6.0リリース（日本語訳）</a></li>
</ul>


<p>2.0に向けたUpgrade APIが含まれるなど、次期リリースに向けた準備が整いつつあるリリースでした。
他にもsynced flushの取り込みやレスポンスのJSONのフィルタリングなど細かな改善も取り込まれています。</p>

<h2>Found PremiumとStandardリリース（7月）</h2>

<ul>
<li><a href="http://blog.johtani.info/blog/2015/07/07/we-just-made-found-more-awesome-ja/">さらに進化したFound（日本語訳）</a></li>
</ul>


<p>Foundに弊社のサポートチームがサポートできるプレミアムが追加されました。
これにより、商用プラグインとして提供しているShieldが（現在はWatcherも）利用できるなど、
より便利になりました。また、Kibana 4も無料で提供されていたりします。</p>

<p><a href="https://www.elastic.co/found/pricing">小さなサイズのものですと、無料で試していただける</a>ものもあるので、試してみてもらえればと。</p>

<h2>Elasticsearch 1.7 リリース（7月）</h2>

<ul>
<li><a href="http://blog.johtani.info/blog/2015/07/22/elasticsearch-1-7-0-and-1-6-1-released-ja/">Elasticsearch 1.7.0 および 1.6.1リリース（日本語訳）</a></li>
</ul>


<p>1.x系、最後のリリースでした。
小さい改善ですが、セキュリティフィックス、クラスタの安定化に寄与する機能改善が含まれています。</p>

<p>この<a href="http://blog.johtani.info/blog/2015/07/16/kansai-1st-elasticsearch-jp/">リリース直前に大阪、京都で勉強会も開催してみました。</a></p>

<h2>Elasticsearch 2.0.0-beta1 リリース（8月）</h2>

<ul>
<li><a href="http://blog.johtani.info/blog/2015/08/27/elasticsearch-2-0-0-beta1-released-ja/">Elasticsearch 2.0.0-beta1リリース（日本語訳）</a></li>
</ul>


<p>待ちに待った、Lucene 5ベースのElasticsearchの登場でした。
doc_valuesがデフォルトになったり、エラーが構造化されて見やすくなったり、
Pipeline Aggregationが導入されたりしています。
また、問題点の洗い出しも兼ねて、ベータリリースとして、本リリースまでに多くのIssueをあげていただきました。</p>

<h2>Elasticsearch 2.0.0 リリース（10月）</h2>

<p>2.0の本リリースです。リリースまでに、beta1、2及び、rc1がリリースされました。</p>

<p>追加された機能や目玉の改善については「<a href="https://speakerdeck.com/johtani/elasticsearch-2-dot-0falseshao-jie">Elasticsearch 2.0の紹介</a>」のスライドを参考にしていただければと。</p>

<p>また、Elasticsearch 2.0のリリースに合わせて、商用プラグインやLogstash、Kibanaの新しいバージョンがリリースされました。
Kibanaなどは、プラットフォームとしての機能を備え、Senseや<a href="http://blog.johtani.info/blog/2015/12/01/introduction-timelion/">Timelion</a>と言ったプラグインアプリもリリースされています。</p>

<ul>
<li><a href="http://blog.johtani.info/blog/2015/10/29/logstash-2-0-0-released-ja/">Logstash 2.0.0リリース（日本語訳）
</a></li>
<li><a href="http://blog.johtani.info/blog/2015/10/29/kibana-4-2-0-ja/">Kibana 4.2.0リリース（日本語訳）
</a></li>
<li><a href="http://blog.johtani.info/blog/2015/10/30/sense-2-0-0-beta1-ja/">Senseの歴史 - Sense 2.0.0-beta1の紹介(日本語訳)</a></li>
<li><a href="http://blog.johtani.info/blog/2015/10/30/shield-watcher-and-marvel-2-0-ga-released-ja/">Shield、Watcher、Marvel 2.0.0 GAリリース（日本語訳）</a></li>
</ul>


<h2>Elasticsearch 2.1.0 リリース（11月）</h2>

<ul>
<li><a href="https://www.elastic.co/blog/elasticsearch-2-1-0-and-2-0-1-released">Elasticsearch 2.1.0 and 2.0.1 released</a></li>
</ul>


<h2>Beats 1.0.0のリリース（11月）</h2>

<ul>
<li><a href="https://www.elastic.co/blog/beats-1-0-0">The Beats 1.0.0</a></li>
</ul>


<p>Go言語で書かれた軽量データシッパーになります。
パケットをキャプチャしてElasticsearchに送る<a href="https://www.elastic.co/downloads/beats/packetbeat">Packetbeat</a>、
topコマンドで取れるデータなどを<a href="https://www.elastic.co/downloads/beats/topbeat">Topbeat</a>、
ログファイルなどを取り込み配送する<a href="https://www.elastic.co/downloads/beats/filebeat">Filebeat</a>がリリースされました。</p>

<p><a href="https://www.elastic.co/guide/en/beats/libbeat/current/index.html">libbeat</a>と呼ばれる、
ベースとなるライブラリを元にしたプロダクトで、Logstashのエージェントのような使い方もできるようになっています。</p>

<p>Go言語に興味のある方などは、調べてみてはいかがでしょう？</p>

<h2>来年は？</h2>

<p>日本では、<a href="https://elasticsearch.doorkeeper.jp/events/36330">1/7に第14回Elasticsearch勉強会</a>を開催します。
すでに、38名のキャンセル待ちとなっていますが、おそらく、年明けにキャンセルがそこそこ出ると思うので、まだ間に合うんじゃないかなぁと。</p>

<p>会社としては、<a href="https://www.elastic.co/elasticon/conf/2016/sf">Elastic{ON}16</a>が控えています。参加される方は、ぜひ現地で声をかけてください！！</p>

<p>その他にもイベント、オープンソースカンファレンス（まずは、<a href="https://www.ospn.jp/osc2016.enterprise-osaka/">大阪</a>、<a href="http://www.ospn.jp/osc2016-spring/">東京</a>）などに出没する予定ですので、こちらも参加していただければと。</p>

<p>では、また来年のAdvent Calendarでお会いしましょう！</p>
]]></content>
  </entry>
  
</feed>
