<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: elasticsearch | @johtaniの日記 2nd]]></title>
  <link href="http://blog.johtani.info/blog/categories/elasticsearch/atom.xml" rel="self"/>
  <link href="http://blog.johtani.info/"/>
  <updated>2015-11-11T02:10:31+09:00</updated>
  <id>http://blog.johtani.info/</id>
  <author>
    <name><![CDATA[johtani]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[第13回Elasticsearch勉強会を開催しました。#elasticsearchjp]]></title>
    <link href="http://blog.johtani.info/blog/2015/11/10/13th-elasticsearch-jp/"/>
    <updated>2015-11-10T17:22:58+09:00</updated>
    <id>http://blog.johtani.info/blog/2015/11/10/13th-elasticsearch-jp</id>
    <content type="html"><![CDATA[<p><a href="https://elasticsearch.doorkeeper.jp/events/33631">第13回Elasticsearch勉強会</a>を開催しました。
スタッフの皆さん、スピーカーの皆さん、会場提供していただいた<a href="http://recruit-tech.co.jp">リクルートテクノロジーズさん</a>、ありがとうございました！
来年もよろしくお願いします！参加していただき盛り上げていただいた参加者の皆さんもありがとうございました。</p>

<p>7月同様、<a href="http://samuraism.com">サムライズム</a>の<a href="https://twitter.com/yusuke">@yusuke</a>さんに
テキスト翻訳していただき、大変助かりました。</p>

<!-- more -->


<h3>チェックイン数など</h3>

<ul>
<li>チェックインした人：100名</li>
<li>キャンセルしなかった人：36名</li>
</ul>


<p>でした。
今回は当日の時点でキャンセル待ちがない状態にしていました。
雨もあって、これなかった人もいるのでしょうか。</p>

<h2>&ldquo;Beyond the basics with Elasticsearch&rdquo; / Honza Král / Elastic</h2>

<p>スライド：<a href="https://speakerdeck.com/elasticsearch/beyond-the-basics-with-elasticsearch  ">https://speakerdeck.com/elasticsearch/beyond-the-basics-with-elasticsearch  </a>
参考ビデオ（別のカンファレンスで話した時のビデオ）：<a href="https://www.youtube.com/watch?v=yIixWzjTNog">https://www.youtube.com/watch?v=yIixWzjTNog</a></p>

<p>Pycon HKでアジアに来ていたHonzaに、ついでに日本で話をしてもらうという企画で、
前回から1カ月足らずでの開催となりました。
Elasticsearchの基本的な検索機能とは別の機能に関して少し話をしてもらった感じです。
<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-percolate.html">Percolator</a>と<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html">Aggregation</a>の話でした。</p>

<p>詳しくはビデオやスライドを見てもらうのがいいかなと。</p>

<h2>&ldquo;How did we use Found.no for our services?&rdquo; / 株式会社アイリッジ　Takuya Noguchi さん @tn961ir</h2>

<p>スライド：未定</p>

<ul>
<li>Foundユーザー。1.7までの話。</li>
<li>社内で独自にクラスタを構築していたが、managed serviceを利用したいと思っていた。</li>
<li>Found用のACLがShieldに</li>
<li>マルチバイトのインデックス名とかも使いたいが、Nginxとの連携でちょっと。。。</li>
<li>セキュリティ関連の話も。Securityに関する報告はこういうものも用意されてるので、こちらに相談してもらうのがいいかも。<a href="https://www.elastic.co/community/security">https://www.elastic.co/community/security</a></li>
<li>要望がいくつか。</li>
</ul>


<h2>&ldquo;ログ収集の仕組みを再考しよう！　あとマウンテンビューに行ってきました。&rdquo; / Acroquest Technology株式会社 谷本 心さん @cero_t</h2>

<p>スライド：<a href="http://www.slideshare.net/shintanimoto/lets-reconsider-about-collecting-logs-plus-visiting-elasticmoutain-view">http://www.slideshare.net/shintanimoto/lets-reconsider-about-collecting-logs-plus-visiting-elasticmoutain-view</a></p>

<p>ログの小話から始まり、ログに関する考え方とかを披露してもらいました。
さらに踏み込んだログの活用の方法の話になるかと思いきや、
思いっきり話が飛んで、マウンテンビューのElasticオフィスに遊びに行った写真が出てきましたw</p>

<p>写真の後は、弊社のTanya（<a href="https://www.elastic.co/elasticon/tour/2015/tokyo">来月のElastic{ON} Tour Tokyo</a>で来日予定）から
聞いた弊社製品に関する話をしていただきました。
きっと、Beatsに関して次は話してくれるんだろうなぁ（棒）。
流れ的には、<a href="https://www.elastic.co/elasticon/conf/2016/sf">来年の2月にサンフランシスコで開催されるElastic{ON}16</a>につながりそうだったので、ここで宣伝しときますね。
今年3月に開催されたイベントには残念ながら日本の方はいなかったので、次回は日本の方がいると嬉しいなぁと。</p>

<h2>LT &ldquo;「Elasticsearch を使った単語共起頻度の計算」&rdquo; / 株式会社はてな　id:takuya-a さん</h2>

<p>スライド：未定</p>

<p>一風変わったElasticsearchの使い方的な話でした。
検索用にデータを登録してあるElasticsearchから単語の頻度情報を抜き出して、
別のインデックスに登録するという感じでしょうか。
こういうのが、実は、Elasticsearchに機能としてあると便利だったりするのかもなぁと思ってみたり。</p>

<p>LTよりはちょっと長かったですかねw</p>

<h2>その他、感想などのブログ</h2>

<ul>
<li><a href="http://arika.hateblo.jp/entry/2015/11/09/204652">elasticsearch勉強会</a></li>
</ul>


<h2>まとめ＋宣伝</h2>

<p>今回も@yusukeさんのテキスト翻訳に助けていただきました。ほんとありがとうございます。
今年の勉強会はこれがラストになります。
来月は、トレーニングと<a href="https://www.elastic.co/elasticon/tour/2015/tokyo">Elastic{ON} Tour Tokyo</a>があるので忙しくなりそうですが、
参加予定の方は楽しみにしていてください！</p>

<ul>
<li>Operations : <a href="http://training.elastic.co/class/Operations/Japan/Dec">http://training.elastic.co/class/Operations/Japan/Dec</a></li>
<li>Developer : <a href="http://training.elastic.co/class/Developer/Japan/Dec">http://training.elastic.co/class/Developer/Japan/Dec</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Senseの歴史 - Sense 2.0.0-beta1の紹介(日本語訳)]]></title>
    <link href="http://blog.johtani.info/blog/2015/10/30/sense-2-0-0-beta1-ja/"/>
    <updated>2015-10-30T17:55:06+09:00</updated>
    <id>http://blog.johtani.info/blog/2015/10/30/sense-2-0-0-beta1-ja</id>
    <content type="html"><![CDATA[<p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>

<p>原文：<a href="https://www.elastic.co/blog/sense-2-0-0-beta1">The Story of Sense - Announcing Sense 2.0.0-beta1</a></p>

<!-- more -->


<h2>誕生</h2>

<p>よくある良いプロジェクト同様、Senseもビールを飲みながら考えつきました。
<a href="https://en.wikipedia.org/wiki/Amstel">Amstel</a>での手漕ぎボートのセッションの後で。
友人の<a href="https://twitter.com/jkaizer">Jasper</a>と私はJasperの<a href="http://q42.nl/">会社</a>で毎年行われる
<a href="http://w00t.camp/">ハッカソン</a>について話をしていました。
このハッカソンはどのようなアイデアでどんなチームで行うかを聞き取りされる、厳密なハッカソンです。
その時、私とJasperはChromeブラウザに別のヒストリーを表示するという作業をやると<a href="https://twitter.com/anneveling">Anne Veling</a>に話をしていました。</p>

<p>Jasperと私はElasticsearchのユーザでしたが、リッチなREST APIにリクエストを送信するための
便利なツールがないと知っていました。
恥ずべきことに、cURLコマンドを利用するターミナルがその時の一番良いツールでした。
皆さん、ターミナルでボディつきのリクエストをサブミットするのがどのくらい不便かというのをわかるために、
5秒ほどターミナルで実行してみてください。
タイプミスのような単純なことでさえ、すべてのコマンドを再タイプしなければならなかったり、
複数行サポートのターミナルと戦ったりです。
ウェブベースのJSONエディタを見つけ出して、それをベースにすることが必要でした。</p>

<h2>終わりなきウィークエンド</h2>

<p>リサーチをして、Anneに電話しました。
私は彼に、History Pageのプロジェクトにもコミットするが、
Elasticsearchユーザなので、便利なコンソールを開発する時間も欲しいという話をしました。
私たちは、<a href="https://ace.c9.io/">Ace</a>オンラインエディタを利用して、
自動でAPIを認識するナレッジベースを構築し、
コンテキストに沿ったサジェストを大なうようにしました。
Anneはすぐに、それが素晴らしいと同意してくれました。
しかし、彼は、ハッカソンの基本的なルール（週末にそれが終わる必要がある）に違反しているので、
そのアイデアを却下するしかありませんでした。
確かに、私たちが提案していたものは行えませんでした。
最後に、私たちは、ChromeのHistory Pageの素晴らしい置き換えについて実装しました。</p>

<p>それでも、私はチャレンジし、それが終わるであろうことを終わるであろうことを証明しなければなりませんでした。
次の週末（といくつかの終業後 :)）に、私はそれを作りました。
Senseの誕生です。
それは、まだバグだらけでしたが、動きました。
これを見せるとみんな興奮しました。</p>

<h2>初期</h2>

<p>Knowledge Baseの拡張とバグのフィックスで数日を過ごしました。
Senseは広まり始め、ずっと古いバグのあるバージョンを利用しないといけないのかと私は恐れました。
SenseをChromeのExtentionとしてリリースすることを決め、リリースすると自動的に更新されるようにしました。
History Panelのような機能を一つづつ追加するようにしました。</p>

<p>Elasticにジョインしてから、会社の人たちがSenseを使用しているということを聞き、とても幸せでした。
特に、<a href="https://twitter.com/clintongormley">Clint</a>と話をしたときのことを覚えています。
彼は、&#8221;You know what Sense should do? It should use this format and allow you to have multiple requests in the editor&#8221;
「Senseになにをすべきかわかる？フォーマットを使うべきだし、エディタで複数のリクエストを持つようにするべきだ」
と言いました。
もちろん、その他のチャレンジも行いました。これは、簡単なものではなく、Aceの詳細を知る必要がありました。
それは新しいAceモード（Aceによって利用されているハイライティングロジック）です。
これは、Senseのサジェストエンジンに密に統合されました。</p>

<p>次のものが古いSenseのスクリーンショットです。</p>

<p>画像あり。Figure 1. Sense 0.7
<a href="https://www.elastic.co/blog/sense-2-0-0-beta1">※画像に関しては原文をご覧ください。</a></p>

<p>APIのURLを入力すると、JSONのボディが入力されます。
うまく切り離すことができ、AceのスタンダードJSONモードを使っていました。
しかし、ここで、次のようなフォーマットをどうやってサポートするか考える必要がありました。</p>

<pre><code>GET _cluster/health
POST index/_settings
{
  "index": { "number_of_replicas": 3 }
}
</code></pre>

<p>これは、Aceが3つの異なるものをどうやってパースするかを知る必要があるということです。
HTTPメソッドとURLとJSONボディです。
また、困ったことに、前に説明した前に説明した通り、明らかに別々にはならないものでした。
JSONボディが完全であることを知る唯一の方法はかっこを数えることです。
それは、いくつかの作業とAceのカスタマイズが必要でしたが、それらを切り離すことができました。
そして、Senseのシンタックスが生まれたのです（Thanks Clint!）</p>

<h2>Marvel時代</h2>

<p>就業時間中、私の優先すべき仕事は<a href="https://www.elastic.co/products/marvel">Marvel</a>の開発になりました。
これは、Elasticsearchのための管理と監視のためのソリューションです。
（side note: Marvelは生まれ変わっています。（&#8221;<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">Shield, Watcher, and Marvel 2.0.0 GA Released</a>&ldquo;））
Marvelは開発環境ではフリーなので、MarvelにSenseを組み込むことにしました。
これにより、Senseの開発が日中も行えるようになり、多くのユーザに利用され始めました。
また、Senseは実際に真の<a href="https://twitter.com/spenceralger">JavaScript開発者</a>によって開発されました。
彼は、コードをクリーンにし、ブラウザにおける最新の技術を私に教えてくれました。</p>

<p>この期間のSenseは数回書き換えられています。
最も顕著なものは、個別のURLとJSONのサジェストエンジンを書き換えて、
1つのサジェストエンジンにしこれらのコンテキストで動作するようにし、さらに3つ目のコンテキスト（URLパラメータ）を追加したことです。</p>

<p>新しいエンジンはまた、複数のサジェストコンテキストをメンテナンスするのが簡単になりました。
例えば、<code>_search API</code>のソートパラメータを考えます。</p>

<pre><code>GET _search
{
  "sort": [
     "timestamp": "desc",
     "price": {
        "order": "desc".
        "missing": "last"
     },
     "nested_filter": { "term": { ... }},
     "_score"
  ]
}
</code></pre>

<p>ユーザがどこにいるかによって、Senseは単純な値（<code>_score</code>のような）か、
複雑な構造（<code>order</code>と<code>missing</code>のような）やフィルタ（<code>nested_filter</code>のような）も
サジェストする必要があります。
これらのサジェストのパスが一度に処理され、無関係なものは除外されます。</p>

<h2>Sense 2.0の紹介！</h2>

<p>Marvel 1.xはKibana 3.0をベースにしていました。
これは、データの探索やダッシュボードツールとして素晴らしいものでした。
しかし、Kibanaチームはさらに素晴らしいものを出しました。
Kibana 4.xはElasticsearchをバックエンドとするUIアプリを簡単に構築することができる
プラットフォームとして設計されています。
実際に、<a href="https://www.elastic.co/guide/en/marvel/current/index.html">Marvel 2.0</a>はKibanaの
プラットフォームで利用できる最初のアプリです。</p>

<p>Senseの話に戻します。
ElasticsearchのAPIとやりとりする一般的なコンソールです。
これをKibanaのアプリぴったりだと気付きました。
ということで、<a href="https://github.com/elastic/sense/">Sense 2.0</a>をKibanaアプリとしてオープンソースで公開しました。
開発及び本番環境で利用してください。</p>

<p>Figure 2. Screenshot Sense 2.0
<a href="https://www.elastic.co/blog/sense-2-0-0-beta1">※画像に関しては原文をご覧ください。</a></p>

<h2>リリースのハイライト</h2>

<p>Sense 2.0の新しい機能をここで簡単に紹介します。
（すべての変更点については<a href="https://www.elastic.co/guide/en/sense/current/release_notes.html#_2_0_0_beta1">こちら</a>をご覧ください。）</p>

<h4>Elasticsearch 2.0</h4>

<p>SenseのナレッジベースをElasticsearch 2.0サポートに更新しました。
新しいPipeline aggregationにも対応しています。</p>

<h4>複数リクエストの実行</h4>

<p>テストやいくつかの一連のコマンドを繰り返し実行したい時があるでしょう。
その時に、それら全てをSenseに記述し、
実行したいリクエストを選択状態にしてElasticsearchにリクエストできます。</p>

<p>Figure 3. Submit multiple requests
<a href="https://www.elastic.co/blog/sense-2-0-0-beta1">※画像に関しては原文をご覧ください。</a></p>

<p>Senseは、Elasticsearchにリクエストを一つずつ送信し、それぞれの出力結果を右のパネルに表示します。
これは、問題のデバッグや複数のシナリオでのクエリの組み合わせの実行に非常に便利です。</p>

<h4>複数リクエストのコピーペースト</h4>

<p>複数リクストを選択し、フォーマットしたり、cURLのコマンドとしてコピーすることも可能です。</p>

<p>Figure 4. Copy multiple requests as cURL
<a href="https://www.elastic.co/blog/sense-2-0-0-beta1">※画像に関しては原文をご覧ください。</a></p>

<pre><code># Delete all data in the `website` index
curl -XDELETE "http://localhost:9200/website"
# Create a document with ID 123
curl -XPUT "http://localhost:9200/website/blog/123" -d'
{
  "title": "My first blog entry",
  "text":  "Just trying this out...",
  "date":  "2014/01/01"
}'
</code></pre>

<p>もちろん、複数のcURLコマンドをコピーしてSenseにペースとすると、Senseはそれらをパースしてくれます。</p>

<h2>まとめ</h2>

<p>Sense 2.0.0のベータリリースです。
実際に多くの作業が終わった認識です。すぐにGAが出るでしょう。</p>

<p>Sense 2.0を知り、試していただくために、新しい<a href="https://www.elastic.co/guide/en/sense/current/index.html">ドキュメント</a>を参考にしてください。
バグやリクエストがある場合は、<a href="https://discuss.elastic.co/c/ecosystem">フォーラム</a>や<a href="https://github.com/elastic/sense/issues">GitHubのIssue</a>に登録をお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shield、Watcher、Marvel 2.0.0 GAリリース（日本語訳）]]></title>
    <link href="http://blog.johtani.info/blog/2015/10/30/shield-watcher-and-marvel-2-0-ga-released-ja/"/>
    <updated>2015-10-30T16:21:31+09:00</updated>
    <id>http://blog.johtani.info/blog/2015/10/30/shield-watcher-and-marvel-2-0-ga-released-ja</id>
    <content type="html"><![CDATA[<p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>

<p>原文：<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">Shield, Watcher, and Marvel 2.0.0 GA Released</a></p>

<!-- more -->


<p>本日（10/28）Shield、WatcherおよびMarvel 2.0をリリースしました。
これが、<a href="https://www.elastic.co/blog/elasticsearch-2-0-0-released">Elasticsearch 2.0</a>に対応したこれらのプラグインの最初のリリースです。</p>

<p>Elasticsearch 2.0対応のほかに、ShieldとWatcher 2.0は、
セキュリティとアラートを拡張するいくつかの新しい素敵な機能も備えています。</p>

<h2>Shield</h2>

<ul>
<li><p>拡張可能なレルム - Sheild 1.xはユーザ認証のコア的なものを定義するのにフォーカスし
3つの認証メカニズム（<em>esusers</em>、LDAP/AD、PKI）を提供しました。
これらを提供することで、多くのユーザおよびユースケースをカバー出来ましたが、
追加の認証メカニズムを統合する必要があることもわかっていました。
ということで、Shieldのレルムベースの認証システムをユーザが利用、拡張できるようにオープンにし、
ユーザ認証を扱うためのレルム実装をプラグインとして拡張できるようにしました。
特定もしくはプロプライエタリな認証メカニズムが必要なユーザもShieldの強力な
セキュリティ機能（ロールベースの認証、セキュアな通信など）をフルに活用できるようになりました。
カスタムレルムの詳細については、<a href="https://www.elastic.co/guide/en/shield/current/custom-realms.html">こちら</a>をご覧ください。</p></li>
<li><p>フィールドとドキュメントのACL - Shield 2.0はフィールドとドキュメントレベルのアクセス制御機能を提供します。
これは、ロールごとにアクセス可能なフィールドやドキュメントを定義できます。
この新しい機能は、設定の変更するよりも便利です。
このアクセス制御はElasticsearchのLuceneインデックスという最も低レベルで実装されています。
その結果として、このメンテナンスがより簡単であるだけでなく、より良くなっています。
詳細については<a href="https://www.elastic.co/guide/en/shield/current/setting-up-field-and-document-level-security.html">こちら</a>をご覧ください。</p></li>
<li><p>ユーザなりすまし - Shield 2.0で、ユーザなりすましの機能が実装されました。
これは、ユーザ（適切なパーミッションを持った）が、他のユーザになることができ、
それらのユーザのためにリクエストを実行できます。
これは、Elasticsearch上に構築されたアプリケーションがすでにユーザ認証を行いますが、
認可はElasticsearchサイドで行う必要があるような場合に有用です。
このシナリオで、アプリケーションの&#8221;main&#8221;ユーザを設定でき、正しくなりすましを割り当て、
ElasticsearchにアプリケーションユーザとしてリクエストをElasticsearchに実行させることができます。
詳細については、<a href="https://www.elastic.co/guide/en/shield/current/submitting-requests-for-other-users.html">こちら</a>をご覧ください。</p></li>
</ul>


<h2>Watcher</h2>

<ul>
<li><p>SlackとHipChatインテグレーション - SlackとHipChatはチーム/グループコラボレーションツールです。
これらは、急速に主流になり、組織の主な内部コミュニケーションハブとなっています。
Watcher 2.0はチャンネル/ルームやユーザにこれらのコミュニケーションチャネル経由で、Watchの通知を行うことができるアクションを
実装しました。
<a href="https://www.elastic.co/guide/en/watcher/current/configuring-slack.html">slack</a>や<a href="https://www.elastic.co/guide/en/watcher/current/configuring-hipchat.html">hipchat</a>アクションについてはドキュメントをご覧ください。</p></li>
<li><p>Array Compare Condition - 新しいconditionはタイムシリーズのデータのスパイクを検知するのを簡単にします。
<a href="https://www.elastic.co/guide/en/watcher/current/condition.html#condition-compare">compare</a> conditionは1.xで導入されましたが、このコンディションはElasticsearchのダイナミックスクリプト機能を有効にする必要がアンク使えます。
詳細については<a href="https://www.elastic.co/guide/en/watcher/current/condition.html#condition-array-compare">array_compare</a> conditionをご覧ください。</p></li>
<li><p>Watchの有効・無効化 - ユーザからの多かったリクエストとして、Watchの無効化がありました。
1.xには、登録済みのWatchを無効にする機能がありませんでした。
これは、Watchを消すか、Watchのトリガーを変更することで回避していました。
これは、全体としてはWatchを管理するのを難しくする回避方法でしかありません。
2.0では、APIを呼び出すだけで、Watchの変更をすることなく、簡単にWatchの有効化・無効化が可能になりました。
これは1.0からあるべき基本的な機能でしたが、ついにこの問題を解決しました。
詳細は<a href="https://www.elastic.co/guide/en/watcher/current/watch-active-state.html#watch-active-state">こちら</a>をご覧ください。</p></li>
</ul>


<h2>Marvel</h2>

<p>Marvel 2.0を紹介するのに興奮しています。
Kibana 4をベースとした、再設計されたUIを持っています。
Marvel 1.xで学んだ多くのことを導入し、より使いやすく監視しやすいUIになっています。
ShieldとWatcherと同様に、最初のMarvelのリリースは将来的な成長の基盤となり
Elasticsearch2.0を効率的に管理するための主要なメトリックにフォーカスしています。</p>

<p>画像あり。
<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">※画像に関しては原文をご覧ください。</a></p>

<p>再設計により、インタフェースを6ページに減らしています。</p>

<h3>Cluster list</h3>

<p>画像あり。
<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">※画像に関しては原文をご覧ください。</a></p>

<p>ユーザやカスタマーの多くは複数のクラスタを利用しています。
新しいMarvelはそれらを集中的にモニタリングする一つのクラスタからそれらを簡単に監視できます。
各クラスタのデータ送信先をこのモニタリングクラスタにするだけです。</p>

<h3>Cluster Overview</h3>

<p>画像あり。
<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">※画像に関しては原文をご覧ください。</a></p>

<p>クラスタオーバービューはある一つのクラスタの主要な性能メトリックを見ることができ、
素早くスパイクを発見できます。
このページはまた、アクティブなシャードのリカバリやリロケーションも見ることができます。</p>

<h3>Indices List</h3>

<p>画像あり。
<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">※画像に関しては原文をご覧ください。</a></p>

<p>インデックスのリストにはクラスタにあるすべてのインデックスとその属性が表示されます。
テーブルはライブでアップデートされ、フィルタリングやソートも可能です。
一番大きなインデックスは？といったことも調べられます。</p>

<h3>Index Detail</h3>

<p>画像あり。
<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">※画像に関しては原文をご覧ください。</a></p>

<p>インデックス詳細ページはインデックスの主な性能メトリックを見ることができ、シャードの配置についても表示します。</p>

<h3>Nodes List</h3>

<p>画像あり。
<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">※画像に関しては原文をご覧ください。</a></p>

<p>ノードリストはクラスタにあるノードとその主な性能メトリックを見ることができます。
テーブルはライブでアップデートされ、フィルタリングも可能です。
高いCPU利用率やディスクの残り容量なども簡単にわかるようになっています。</p>

<h3>Node Detail</h3>

<p>画像あり。
<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">※画像に関しては原文をご覧ください。</a></p>

<p>ノード詳細ページは個別のノードに関する主な性能メトリックを見ることができ、ノードにあるシャードのリストも見ることができます。</p>

<p>新しいMarvelはKibana 4の上に構築されたので、管理方法が変わっています。
Marvelのインストールは2つのステップがあります。
marvel-agentとmarvel user interfaceです。</p>

<h2>Marvel Agent</h2>

<p>marvel-agentはElasticsearchクラスタにプラグインとしてインストールします。
主なパフォーマンス情報を取得し、ローカルもしくは分離されたモニタリングクラスタにデータを保存・送信します。</p>

<h2>Marvel User Interface</h2>

<p>Marvel UIはKibanaのプラグインとしてインストールします。
これは、Kibana 4.2の新しいプラグインインフラを利用し、
Marvel Appとして、Kibanaのインタフェースとは個別に提供されます。
Kibanaのアプリの切り替えは次の画像の通りです。</p>

<p>画像あり。
<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">※画像に関しては原文をご覧ください。</a></p>

<p>2.0リリースは私たちのプロダクトの大きな一歩です。またユーザの意見を常にお待ちしています。
ぜひ、Webフォーラム（<a href="https://discuss.elastic.co%EF%BC%89%E3%82%84%E3%83%A1%E3%83%BC%E3%83%AB%EF%BC%88info@elastic.co%EF%BC%89%E3%81%A7%E3%81%94%E6%84%8F%E8%A6%8B%E3%82%92%E3%80%82">https://discuss.elastic.co%EF%BC%89%E3%82%84%E3%83%A1%E3%83%BC%E3%83%AB%EF%BC%88info@elastic.co%EF%BC%89%E3%81%A7%E3%81%94%E6%84%8F%E8%A6%8B%E3%82%92%E3%80%82</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elasticsearch 2.0.0リリース(日本語訳)]]></title>
    <link href="http://blog.johtani.info/blog/2015/10/29/elasticsearch-2-0-0-released-ja/"/>
    <updated>2015-10-29T16:20:43+09:00</updated>
    <id>http://blog.johtani.info/blog/2015/10/29/elasticsearch-2-0-0-released-ja</id>
    <content type="html"><![CDATA[<p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>

<p>原文：<a href="https://www.elastic.co/blog/elasticsearch-2-0-0-released">Elasticsearch 2.0.0 GA released</a></p>

<!-- more -->


<p>Elasticsearch 1.0.0のリリース以降、
477のコミッター2,799のpull requestがあった、
<strong>Elasticsearch 2.0.0 GA（Lucene 5.2.1ベース）</strong>をリリースしました。</p>

<p>それだけでなく、<a href="#shield-watcher">Shield（セキュリティプラグイン）とWatcher（アラーティングプラグイン）</a>、
新しくなった<a href="#marvel">Marvel（モニタリングプラグイン）</a>（プロダクション環境でフリー！）、
また、新しくオープンソースとなった<a href="#sense">Sense editor</a>の2.0.0もリリースしました。</p>

<p><a href="https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0">Elasticsearch 2.0.0</a>のダウンロードはこちらから。
また、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.0/breaking-changes-2.0.html">2.0.0での重要な変更点についてはこちら</a>をご覧ください。
全ての変更点については、次をご覧ください。</p>

<ul>
<li><a href="https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0">Changes list for Elasticsearch 2.0.0</a></li>
<li><a href="https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0-rc1">Changes list for Elasticsearch 2.0.0-rc1</a></li>
<li><a href="https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0-beta2">Changes list for Elasticsearch 2.0.0-beta2</a></li>
<li><a href="https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0-beta1">Changes list for Elasticsearch 2.0.0-beta1</a></li>
</ul>


<p>商用プラグインについてはこちらです。</p>

<ul>
<li><a href="https://www.elastic.co/guide/en/shield/2.0.0/release-notes.html#_2_0_0">Shield 2.0.0 change logs</a></li>
<li><a href="https://www.elastic.co/guide/en/watcher/2.0.0/release-notes.html#_2_0_0">Watcher 2.0.0 change logs</a></li>
</ul>


<h2>Elasticsearchの新機能</h2>

<p>Elasticsearch 2.0.0には素晴らしい新機能があります。</p>

<h4>Pipeline Aggregations</h4>

<p>Aggregationsで導関数や移動平均のような他のAggregationの結果に対する計算が可能となります。
この機能はクライアントサイドで実装しなければなりませんでしたが、
Elasticsearchに計算させることで、より強力な解析のクエリを簡単に組み立て、クライアントのコードを簡略化できます。
これは、予測解析や予測解析や例外検知といった可能性をもたらします。
Pipeline Aggregationについては次をご覧ください。</p>

<ul>
<li><a href="https://www.elastic.co/blog/out-of-this-world-aggregations">Out of this world aggregations.</a></li>
<li><a href="https://www.elastic.co/blog/staying-in-control-with-moving-averages-part-1">Staying in Control with Moving Averages - Part 1.</a></li>
<li><a href="https://www.elastic.co/blog/staying-in-control-with-moving-averages-part-2">Staying in Control with Moving Averages - Part 2.</a></li>
</ul>


<h4>Query/Filter merging</h4>

<p>フィルタはもうありません。
全てのフィルタ条件はクエリとなりました。
クエリコンテキストで使用した場合、関連度のスコアに影響し、フィルタコンテキストで使用した場合、
これまでのフィルタのように、ヒットしなかったドキュメントを除外するだけとなります。
この変更はクエリの実行時に自動的に最も効率的な順序で実行するように最適化されることを意味します。
例えば、遅いクエリ（フレーズやgeo）の最初の実行は速い近似フェーズで実行され、
それから、遅い正確なフェーズで結果を修正します。
フィルタコンテキストでは、直近でよく使われた条件が自動的にキャッシュされます。
詳細については、&#8221;<a href="https://www.elastic.co/blog/better-query-execution-coming-elasticsearch-2-0">Better query execution coming to Elasticsearch 2.0</a>&ldquo;をご覧ください。</p>

<h4>設定可能な圧縮率</h4>

<p><code>_source</code>のようなStored fieldsは高速なLZ4（デフォルト）で圧縮するか、インデックスサイズを小さくできるDEFLATE
で圧縮できます。
これは、特にロギングのケースで便利です。
古いインデックスをオプティマイズする前に<code>best_compression</code>に変更することができます。
詳細については&#8221;<a href="https://www.elastic.co/blog/store-compression-in-lucene-and-elasticsearch">Store compression in Lucene and Elasticsearch</a>&ldquo;をご覧ください。</p>

<h4>堅牢に</h4>

<p>新しいElasticsearchはJava Security Managerの元で実行されます。
これは、セキュリティの観点で大きな前進です。
Seciruty ManagerはElastcsearchにより制限をかけ、ハッカーによりシステムに対して何でもできるようなものを制限します。
Elasticsearchはまた、インデキシングの観点でも堅牢になっています。</p>

<ul>
<li>ドキュメントはインデキシングリクエストに答える前に、耐久性のためにディスクに<code>fsync</code>されます。</li>
<li>すべてのファイルはチェックサムにより、早期に障害を検知します。</li>
<li>すべてのファイルはどんなファイルへの書き込みもアトミックです</li>
</ul>


<p>最後に、システム管理者から要請の多かった変更として、
設定されて居ないノードがパブリックなネットワークから参加しないようになりました。
Elasticsearchは<a href="https://manage.contentstack.io/blog/elasticsearch-unplugged">デフォルトではローカルホストのみにバインド</a>します。マルチキャストは無くなりました。（プラグインとして残っています。）</p>

<h4>パフォーマンスと信頼性</h4>

<p>上記以外にも細かな修正がElasticsearchとLuceneにはあります。
より安定し、信頼性をあげ、簡単に設定できるようにするものです。例えば、次のようなものです。</p>

<ul>
<li>ヒープの使用率の低減（doc valuesがデフォルト、マージ時のメモリ使用率の削減、
roaring bitsetsによるフィルタキャッシュ）</li>
<li>構造化され読みやすくなった例外</li>
<li>設定の代わりに、フィードバックループを使用した自動調整</li>
<li>安全で明確で信頼性のあるタイプマッピングの大きな修正</li>
<li>クラスタ状態の差分変更による伝搬の高速化および、大きなクラスタでのより安定的に</li>
<li>normsの圧縮の改善。これまではヒープスペースを大きく利用していた。</li>
<li>マージの自動的な調整（不可解な設定の微調整が必要ない）</li>
<li>より詳細なLuceneのメモリリポート</li>
<li>最適化されたクエリ実行を活用するためにParent/childを書き換え</li>
</ul>


<h4>コアプラグイン</h4>

<p>公式にサポートされたコアプラグインはElasticsearchと同じバージョン番号で同じタイミングでリリースされます。
インストールするプラグインとElasticsearchの複雑なバージョンの対応表に悩まされる必要はもうありません。
コアプラグインのインストールは次のように簡略化されています。</p>

<pre><code>bin/plugin install analysis-icu
</code></pre>

<h2><a name="shield-watcher">ShieldとWatcherの新機能</a></h2>

<p>商用プラグインも新しい機能をリリースしました。</p>

<h4>Shield</h4>

<ul>
<li>フィールドおよびドキュメントレベルのアクセス制御</li>
<li>ユーザのなりすまし</li>
<li>カスタム拡張可能な認証レルム</li>
</ul>


<h4>Watcher</h4>

<ul>
<li>個別のWatchを有効/無効に</li>
<li>SlackやHipChatへの通知</li>
</ul>


<p>これらの詳細については“<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">Shield, Watcher, and Marvel 2.0.0 GA Released</a>”をご覧ください。</p>

<p>コアプラグイン同様、商用プラグインもElasticsearchのバージョンと同じものが同時にリリースされます。
インストールは次の通りです。</p>

<pre><code>bin/plugin install license
bin/plugin install shield
bin/plugin install watcher
</code></pre>

<h2><a name="marvel">Marvel 2.0.0はプロダクションでの利用もフリーに</a></h2>

<p>Marvelモニタリングプラグインはカスタマに非常に価値のあるもので、
ユーザの発展とともに問題を診断したり見つけたりするのに役に立ってきました。
私たちは、何を改善でき、Mαrvelを一から書き直すことで、いろいろとわかったことがあります。</p>

<ul>
<li>Marvel UIを新しい<a href="https://www.elastic.co/blog/kibana-4-2-0">Kibanaプラットフォーム</a>上に構築</li>
<li>ダッシュボードにはより簡単に問題を発見するために、最も重要なメトリックを可視化</li>
<li>1つのインストールで、複数のクラスタのモニタリングをサポート（商用サポート対象）</li>
</ul>


<p>一番良い点はMarvelがすべてのElasticsearchユーザに対してプロダクション環境でフリーになったことです！
ライセンスが必要ですが、課金の必要はありません。
もし、マルチクラスタモニタリングサポートが必要な場合、それは商用サポート対象となります。</p>

<p>詳細に関しては“<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">Shield, Watcher, and Marvel 2.0.0 GA Released</a>”をご覧ください。</p>

<h2><a name="sense">Sense editorがオープンソースに</a></h2>

<p>Sense（ブラウザベースのElasticsearchリクエストとDSL向けのエディタ）を
<a href="https://www.elastic.co/blog/kibana-4-2-0">Kibanaプラットフォーム</a>のアプリとして、オープンソースにしました。
また、このリリースで新しい機能が追加されています。</p>

<ul>
<li>複数のcURLリクエストをペースとすると、Sense表記に変更</li>
<li>複数のSenseリクエストをcURL表記にしてコピー</li>
<li>複数のリクエストを一度に実行可能</li>
<li>Elasticsearch 2.0サポートとなった自動補完機能</li>
</ul>


<p>SenseはKibanaのアプリとして次のようにインストールします。</p>

<pre><code>./bin/kibana plugin --install elastic/sense
</code></pre>

<p>Senseの詳細については、&#8221;<a href="https://www.elastic.co/blog/sense-2-0-0-beta1">The Story of Sense - Announcing Sense 2.0.0-beta1</a>&ldquo;をご覧ください。</p>

<h2>Elasticsearch Migration Plugin</h2>

<p>Elasticsearch Migration PluginはElasticsearch 1.xから2.0にアップグレードする時の良い出発点となります。
1.xのElasticsearchクラスタにサイトプラグインとしてインストールすると、
アップグレードする前に解決すべき問題があるかどうかを検知してくれます。
（例えば、Lucene 3のような古いインデックスや、2.0.0にした場合に動作しない問題のある
マッピング（<a href="https://www.elastic.co/blog/great-mapping-refactoring">The Great Mapping Refactoring</a>）のような問題）</p>

<p>プラグインに関して<a href="http://github.com/elastic/elasticsearch-migration">Elasticsearch Migration repository</a>をご覧ください。</p>

<h2>まとめ</h2>

<p>ぜひ、<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0">Elasticsearch 2.0.0</a>をダウンロードして、試してみてください。
そして、感想をTwitter(<a href="https://twitter.com/elastic">@elastic</a>)や<a href="https://discuss.elastic.co/c/elasticsearch">Webフォーラム</a>などで教えて下さい。
また、問題がありましたら、<a href="https://github.com/elastic/elasticsearch/issues">GitHub issues page</a>で報告をお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Release, we have（日本語訳）]]></title>
    <link href="http://blog.johtani.info/blog/2015/10/29/release-we-have-ja/"/>
    <updated>2015-10-29T14:18:59+09:00</updated>
    <id>http://blog.johtani.info/blog/2015/10/29/release-we-have-ja</id>
    <content type="html"><![CDATA[<p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>

<p>原文：<a href="https://www.elastic.co/blog/release-we-have">Relase, we have</a>
※画像に関しては原文をご覧ください。</p>

<!-- more -->


<p>Elasticにとって大きな1日（社内では「release bonanza」と呼んでいる）です。
多くの主要なプロダクトを新たにリリースしました。
そして、本日、それらを一緒に利用する時にそれらを一緒に利用する時にユーザの体験についてまとめてみました。</p>

<p>次の通りです。</p>

<p><a href="https://www.elastic.co/blog/elasticsearch-2-0-0-released">Elasticsearch 2.0</a>リリース。
大きなマイルストーン、チームによる改善、そして、コミュニティからの素晴らしい貢献。
Pipeline Aggsと呼ばれる新しいタイプのaggregations、
クエリとフィルタのコンセプトを統合することにより簡素化されたクエリDSL、
better compressionオプション、
JavaのSecurity Managerを有効にすることによる強化されたセキュリティ、
FSの挙動に関する強化（fsync、checksum、atmicなリネーム）、
パフォーマンス、マッピングの挙動の一貫性などなどです。
また、我々のチームによる改善も含まれているLucene 5ベースにアップグレードしています。</p>

<p><a href="https://www.elastic.co/blog/kibana-4-2-0">Kibana 4.2</a>リリース。
Elasticsearch 2.0対応、ダークテーマ、カスタマイズ可能な地図、多くの改善。
Kibana 4.2の多くに作業については外部プラグインサポートといった、内蔵に関するものでした。
この後の説明に続きます。</p>

<p><a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">Marvel 2.0</a>リリース。
Elasticsearch 2.0対応、合理化されたメトリックス、簡素化されたUI、
多くはKibanaプラグイン（Kibanaプラットフォーム上に構築）としての書き換えです。
このKibana拡張の最初の努力は、Kibanaのプラグインをどうやって書くか、
Kibanaユーザに公式に何をする必要があるかといったものを特定するのに役立ちました。
おっと、忘れるところでした、Marvelを全てのユーザにフリーで使えるようにしました。
マルチクラスタサポートについては有償となります。</p>

<p><a href="https://www.elastic.co/blog/sense-2-0-0-beta1">Sense 2.0</a>リリース。
2つ目のKibanaプラグインがこれです。
SenseをKibanaプラグインとして書き換えました。
Elasticsearch 2.0サポート、複数リクエストの実行、
curlへのコピーなどです。
おっと、忘れるところでした。オープンソースとすることにしました！</p>

<p><a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">Shield + Watcher 2.0</a>リリース。ElasticsearchのためのセキュリティプラグインであるShieldと、アラート管理のためのプラグインであるWatcherにも
多くの結果が入っています。
最も要求のあった機能である、フィールドお呼びドキュメントレベルでのセキュリティについて、Luceneに落とし込んで実装しました。
また、セキュリティの操作についてプラガブルに実装できるように変更しました。
Watcherは監視の無効化、SlackやHipChatへの通知（bot ops向け）が可能です。</p>

<p><a href="https://www.elastic.co/blog/logstash-2-0-0-released">Logstash 2.0</a>リリース。
Elasticsearch 2.0のサポート、クリーンな停止、全面的なパフォーマンス改善、<a href="https://www.elastic.co/products/beats">Beats</a>サポート。</p>

<p>ご覧の通り、すべてのプロダクトに関する大きな結果です。
チーム間およびFoundの開発者との間での密な連携に感謝します。
これらが私たちが公式にElasticsearch / Kibanaをホストしている<a href="https://www.elastic.co/found">Found</a>で
利用可能です。</p>

<p>ひゅう、息切れしました。
チームがしてきたことは、感動的で、謙虚で、刺激的です！
Elasticが会社として、全てのユーザ、コントリビュータがどのように私たちの大きなミッションに対する結果をもたらしたかという素晴らしい良い例です。
ユーザに愛され、楽しまれ、成功に導き、革新させる製品を是非ご利用ください。ありがとうございます。</p>

<p>&ldquo;A Lion, in Africa?&rdquo; - まだまだ終わりではありません。この文言で終わりにしますが、すぐに（本当にすぐに）戻ってきます。;)</p>
]]></content>
  </entry>
  
</feed>
