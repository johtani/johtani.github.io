<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: elasticsearch | @johtaniの日記 2nd]]></title>
  <link href="http://blog.johtani.info/blog/categories/elasticsearch/atom.xml" rel="self"/>
  <link href="http://blog.johtani.info/"/>
  <updated>2015-07-31T16:21:30+09:00</updated>
  <id>http://blog.johtani.info/</id>
  <author>
    <name><![CDATA[johtani]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[第11回Elasticsearch勉強会を開催しました。#elasticsearchjp]]></title>
    <link href="http://blog.johtani.info/blog/2015/07/31/11th-elasticsearch-jp/"/>
    <updated>2015-07-31T14:41:53+09:00</updated>
    <id>http://blog.johtani.info/blog/2015/07/31/11th-elasticsearch-jp</id>
    <content type="html"><![CDATA[<p><a href="https://elasticsearch.doorkeeper.jp/events/28321">第11回Elasticsearch勉強会</a>を開催しました。
スタッフの皆さん、スピーカーの皆さん、会場提供していただいた<a href="http://recruit-tech.co.jp">リクルートテクノロジーズさん</a>、そして、Shayありがとうございました！
次回もよろしくお願いします！参加していただき盛り上げていただいた参加者の皆さんもありがとうございました。</p>

<p>今回は、CTOのShayが来日していたので、英語でいろいろと喋ってもらいました。
4月同様、<a href="http://samuraism.com">サムライズム</a>の<a href="https://twitter.com/yusuke">@yusuke</a>さんに
テキスト翻訳していただき、大変助かりました。
今回はQAベースのトークだったのでちょっときつかったですね、申し訳ない。。。</p>

<!-- more -->


<h3>チェックイン数など</h3>

<ul>
<li>チェックインした人：141名</li>
<li>キャンセルしなかった人：51名</li>
</ul>


<p>でした。
今回はあらかじめ220名（全員が来たらキャパオーバー）としていたので、キャンセル待ちの人は
当日の午後にはいなくなっていた状態です。まぁ、こんなもんかな。結構入りましたね。ありがたいです。</p>

<h2>LT</h2>

<p>今回は、少し趣向を変えて、4社の方達にLTをしていただきました。
Shayが来日しているのもあり、事前に英語でスライドを作っていただけると助かりますとお願いさせていただきました。
英語でスライドを作っていただいていたので、伝わりやすくて助かりました、スピーカーの方々ありがとうございました！<br/>
（海外のユーザにもリンクを紹介しやすいので、英語でスライド作ってもらえるといろいろと知ってもらえるのかも。）</p>

<h3>Elasticsearch and Recruit Technologies Co., Ltd. / 株式会社リクルートテクノロジーズ　守谷 純之介さん</h3>

<p>スライド：未定</p>

<p>N-Gramと形態素のハイブリッドの話などをしていただきました。
@ITで連載もされてますね。ありがとうございます。</p>

<ul>
<li><a href="http://www.atmarkit.co.jp/ait/articles/1507/08/news009.html">リクルート全社検索基盤のアーキテクチャ、採用技術、開発体制はどうなっているのか (&frac12;)</a></li>
<li><a href="http://www.atmarkit.co.jp/ait/articles/1507/29/news010.html">ElasticsearchとKuromojiを使った形態素解析とN-Gramによる検索の適合率と再現率の向上 (1/3)</a></li>
</ul>


<p>Shayからは、<a href="https://www.elastic.co/products/hadoop">elasticsearch-hadoop</a>があるから検討してねと質問（お願い？）がありましたw。</p>

<h3>Elasticsearch as a DMP / 株式会社インティメート・マージャー　松田和樹さん　@mats116</h3>

<p>スライド：<a href="http://www.slideshare.net/im_docs/elasticsearch-as-a-dmp">Elasticsearch as a DMP</a></p>

<p>いくつかのデータソースからAEROSPIKE経由でelasticsearchにデータを登録しているようです。
Data Management Platformのエンジンの一部として、elasticsearchを利用しているようです。</p>

<p>Shayからの質問：「どの機能を使って関心のある単語を抽出していますか？」<br/>
回答：「<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-significantterms-aggregation.html">Significant Term Aggregation</a>」です。<br/>
Shay：「おぉ、チェックしてみますw」。</p>

<h3>Real-time social big data analytics using elasticsearch / 株式会社ホットリンク宮田洋毅さん　@kakka_jp</h3>

<p>スライド：未定</p>

<p>ソーシャルメディアのデータを解析するのにelasticsearchにデータを入れて解析。
時間軸での解析やテキストマイニングなんかをしているみたいでした。
いろいろと独自のプラグインを作ってるようです。（興味あるなぁ）</p>

<p>Shayからの質問：「ノード数は？」「30ノードで30シャード」</p>

<h3>Elasticsearch in Hatena Bookmark / 株式会社はてな　id:skozawa</h3>

<p>スライド：<a href="http://www.slideshare.net/shunsukekozawa5/elasticsearch-in-hatena-bookmark">Elasticsearch in Hatena Bookmark</a></p>

<ul>
<li>はてなブックマークの検索の歴史（MySQL -> Sedue -> Solr -> Elasticsearch）</li>
<li>はてなブックマークの検索（ユーザが利用）と社内利用と、ログ解析で利用してる</li>
</ul>


<p>Shayからの質問：「昨年会いましたよね？今はクラスタのサイズはどのくらいのサイズですか？」「メインクラスタは9データノード」</p>

<h2>Open QA with Shay</h2>

<p>思い出せるものだけ。。。（あとで追記します）</p>

<ul>
<li>Elasticsearch 2.0の話

<ul>
<li><a href="https://www.elastic.co/blog/out-of-this-world-aggregations">Pipeline Aggregation</a>とか。</li>
</ul>
</li>
<li>Spark Streaming対応してる？

<ul>
<li>まだ検討中</li>
</ul>
</li>
<li>elasticsearch-hadoopってどんなもの？HDFSにインデックス作ったりするの？

<ul>
<li>いえ、Hadoopの入出力先としてelasticsearchが使える感じ</li>
</ul>
</li>
<li>個人的にAWSのCloudSearchとAWSでElasticsearchはどっちがいい？

<ul>
<li>時系列データはCloudSearchだと難しいだろうし、AWS上なら<a href="http://found.no">found.no</a>があるよ！</li>
</ul>
</li>
<li>PostgreSQLみたいに信頼性の高いデータストアを目指してる（まだ、プライマリデータストアには使わないで）</li>
</ul>


<h2>その他、感想などのブログ</h2>

<ul>
<li><a href="http://tech.im-dmp.net/archives/4941">Elasticsearch勉強会でLTしてきました | Intimate Merger Engineer Blog </a></li>
<li><a href="http://togetter.com/li/853331">『第11回elasticsearch勉強会』のまとめ #elasticsearchjp</a></li>
<li><a href="http://suzuki.tdiary.net/20150728.html#p01">[Elasticsearch] 第11回 Elasticsearch 勉強会へ参加してきた - 雑文発散(2015-07-28)</a></li>
<li><a href="http://kakakakakku.hatenablog.com/entry/2015/07/27/224203">第11回 Elasticsearch 勉強会に参加したら英語力に危機感を覚えて最高だった</a></li>
</ul>


<h3>まとめ</h3>

<p>今回はShayが来日したので特別バージョンでした。
もっと英語を翻訳するサポートしないとですね、反省してます。。。ぜんぜん流暢じゃないしw</p>

<p>次回は9月に開催予定ですが、12月にまたShayが再度来日する予定です。
丸1日のイベントを検討中で、Shay以外にも開発者が来日すると思います。
どんな話が聞きたい、どんな人と話をしたいなどあれば、コメントいただければ（対応できるかは。。。）</p>

<p>勉強会のスピーカーは随時募集中ですので、コメント、メール、ツイートなど、コンタクトしていただければと思います。 よろしくお願いいたします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elasticsearch 1.7.1 および 1.6.2リリース（日本語訳）]]></title>
    <link href="http://blog.johtani.info/blog/2015/07/29/elasticsearch-1-7-1-and-1-6-2-released-ja/"/>
    <updated>2015-07-29T21:35:53+09:00</updated>
    <id>http://blog.johtani.info/blog/2015/07/29/elasticsearch-1-7-1-and-1-6-2-released-ja</id>
    <content type="html"><![CDATA[<p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>

<p>原文：<a href="https://www.elastic.co/blog/elasticsearch-1-7-1-and-1-6-2-released">Elasticsearch 1.7.1 and 1.6.2 released</a></p>

<p>本日（7/29）、<strong>Lucene 4.10.4</strong>ベースの<strong>Elasticsearch 1.7.1</strong>および<strong>Elasticsearch 1.6.2</strong> のバグフィックス版をリリースしました。
これらのリリースは稀ですが、データの欠損が発生する重要なバグのフィックスを含んでいます。
<strong>すべてのユーザにアップグレードを推奨します。</strong></p>

<p>ダウンロードおよびすべての変更については次のリンクをごらんください。</p>

<ul>
<li>最新安定版：<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-7-1">Elasticsearch 1.7.1</a></li>
<li>1.6系バグフィックス：<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-6-2">Elasticsearch 1.6.2</a></li>
</ul>


<!-- more -->


<p>問題のバグ(<a href="https://github.com/elastic/elasticsearch/pull/12487">#12487</a>)は、
同時に複数のノードが故障またはリスタートをした場合の非常にまれな状況で、
シャードのすべてのコピーがクラスタから削除されてしまう状況を発生させます。
このバグは1.5.0から含まれています。</p>

<p>このリリースはまた、IPv4アドレスのCIDRマスクのバグのフィックス、
Shieldユーザがmore-like-this APIを利用できないバグのフィックスなど、
いくつかの変更も含んでいます（詳細は<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-7-1">更新リスト</a>をごらんください）。</p>

<p>ぜひ、<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-7-1">Elasticsearch 1.7.1</a>をダウンロードして、試してみてください。
そして、感想をTwitter(<a href="https://twitter.com/elastic">@elastic</a>)などで教えて下さい。
また、問題がありましたら、<a href="https://github.com/elastic/elasticsearch/issues">GitHub issues page</a>で報告をお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elasticsearch 1.7.0 および 1.6.1リリース（日本語訳）]]></title>
    <link href="http://blog.johtani.info/blog/2015/07/22/elasticsearch-1-7-0-and-1-6-1-released-ja/"/>
    <updated>2015-07-22T15:33:37+09:00</updated>
    <id>http://blog.johtani.info/blog/2015/07/22/elasticsearch-1-7-0-and-1-6-1-released-ja</id>
    <content type="html"><![CDATA[<p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>

<p>原文：<a href="https://www.elastic.co/blog/elasticsearch-1-7-0-and-1-6-1-released">Elasticsearch 1.7.0 and 1.6.1 released</a></p>

<p>本日（7/16）、<strong>Lucene 4.10.4</strong>ベースの<strong>Elasticsearch 1.7.0</strong>および<strong>Elasticsearch 1.6.1</strong> のバグフィックス版をリリースしました。
これらのリリースはセキュリティフィックスを含んでおり、<strong>すべてのユーザにアップグレードを推奨します。</strong></p>

<p>ダウンロードおよびすべての変更については次のリンクをごらんください。</p>

<ul>
<li>最新安定版：<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-7-0">Elasticsearch 1.7.0</a></li>
<li>1.6系バグフィックス：<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-6-1">Elasticsearch 1.6.1</a></li>
</ul>


<!-- more -->


<p>1.7.0が1.x系の最後のリリースとなります。
今後の新機能については、Elasticsearch 2.0以降で取り込まれる予定です。</p>

<p>Elasticsearch 1.7.0は小さなリリースですが、2つの重要なセキュリティフィックスと
クラスタの安定化とリカバリに関する2つの重要な機能を含んでいます。</p>

<ul>
<li><a href="#security">セキュリティフィックス</a></li>
<li><a href="#delayed">シャードアロケーションを遅らせる</a></li>
<li><a href="#prioritization">インデックスリカバリの優先度</a></li>
</ul>


<h2><a name="security">セキュリティフィックス</a></h2>

<p>Elasticsearch 1.6.1 と 1.7.0 は次の2つのセキュリティフィックスを含んでいます。</p>

<h3>リモートコード実行の脆弱性</h3>

<p>Elasticsearch 1.6.1より前のバージョンには、transport protocol（ノードとJavaクライアント間での通信に利用）により、
リモートでコードが実行される脆弱性があります。
これは、<a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3253">CVE-2015-3253</a>でのGroovyに関係しています。</p>

<p>Groovyのダイナミックスクリプティングがオフでも脆弱性があります。
アップグレードをしないユーザは、transport protocol のポート（デフォルトで9300）信頼したエージェントからのみの
アクセスに限定することで、脆弱性から保護できます。</p>

<p>この問題を<a href="https://www.elastic.co/community/security">CVE-2015-5377</a>としました。</p>

<h3>ディレクトリ探索の脆弱性</h3>

<p>Elasticsearch 1.0.0から1.6.0までのバージョンで、ElasticsearchのJVMプロセスによって読み込みが可能なファイルを
取得することができるディレクトリ探索攻撃の脆弱性があります。
アップグレードをしないユーザは、信頼できない場所からの<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html">Snapshot-Restore API</a>の呼び出しを防ぐためにファイアウォール、リバースプロキシやShieldを使用することができます。</p>

<p>この問題を<a href="https://www.elastic.co/community/security">CVE-2015-5531</a>としました。</p>

<h2><a name="delayed">シャードアロケーションを遅らせる</a></h2>

<p>Elasticsearch 1.6.0で<a href="https://www.elastic.co/blog/elasticsearch-1-6-0-released#synced-flush">Synced Flushing</a>が導入されました。
これは、ノードのリスタート時に、更新が止まっているシャードのリカバリを劇的にスピードアップします。
しかし、この変更は、シャードの配置を無効にしている環境でのみうまく実行されます。
ノードが一時的にクラスタから外れている場合や予期せぬリブートの場合には役に立ちません。</p>

<p>このシナリオとは次のようなものです。</p>

<ul>
<li>ノードの想定外のシャットダウン</li>
<li>マスタがたのノードにシャードを再配置</li>
<li>各シャードが新しい場所にネットワーク越しにコピー</li>
<li>その間に、外れていたノードが再度クラスタにジョイン</li>
<li>マスタは新しいノードにシャードを再配置。新しいノードに存在する既存のシャードが全く再利用されない可能性がある</li>
</ul>


<p>ノードレベルとクラスタレベルの両方の並列的なリカバリを抑制しても、
この&#8221;シャードシャッフル&#8221;がクラスタに対して負荷をかける可能性があります。
これは、外れたノードが再度ジョインするのを単に待つことにより防げるかもしれません。</p>

<h3>待ちましょう！</h3>

<p>Elasticsearch 1.7.0は<a href="https://www.elastic.co/guide/en/elasticsearch/reference/1.7/delayed-allocation.html"><code>index.unassigned.node_left.delayed_timeout</code></a>設定を追加しました。デフォルトでは1分です。
これは、ノードがクラスタから外れたとき、ほかのノードにこれらのノードを再配置するまでマスタが1分待つということです。
ノードがこの1分の間に復帰した場合、マスタはローカルにあるシャードを再度配置します。</p>

<h3>なぜ1分？</h3>

<p>ノードがシャットダウンし、リスタートし、復帰するために十分な時間が1分だからです。
しかし、ノードが復帰しない場合にはまだ再配置が発生することを意味します。
デフォルト値を決定するのは難しいです。
この設定をどのくらいに減らすか、増やすかを決める必要があるかもしれません。</p>

<p>このデフォルト値は、<code>config/elasticsearch.yml</code>ファイルに設定できますが、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-update-settings.html">インデックス設定の更新API</a>を使って設定することも可能です。</p>

<p>このデフォルトに関する知見をぜひフィードバックしてください。</p>

<h2><a name="prioritization">インデックスリカバリの優先度</a></h2>

<p>1.7.0の2つ目の重要な機構はフルクラスタリスタートのような後に、
どの順番でインデックスをリカバリするかという優先度をつけることができるという機能です。</p>

<p>電源故障による、ロギング用のクラスタのダウンを想像してください。
クラスタが普及した場合、500個のインデックスをリカバリするような場合、499個のインデックスのデータは古く、
500番目のインデックスが重要です。
もっとも最近作成されたインデックスがリカバリされるまで、インデキシングを待つというようなことはできません。</p>

<p>これまでは、インデックスはランダムな順序でリカバリされ、重要なインデックスがリカバリされるまで待つしかありませんでした。
1.7.0では、インデックスは優先度の順番でリカバリされます。
この優先度は次のプロパティで指定できます。</p>

<ul>
<li><code>index.priority</code>設定（大きな値が優先度が高い）</li>
<li>インデックス作成日（新しいものが優先度が高い）</li>
<li>インデックス名</li>
</ul>


<p>既存のクラスタについて特に変更せずとも、最も最近作成されたインデックスが古いものよりも復旧されます。
古いインデックスの優先度を上げるためには、<code>index.priority</code>設定に0よりも大きな値を設定します。</p>

<pre><code>PUT important_index/_settings
{
  "index.priority": 5
}
</code></pre>

<p>この設定は、存在するインデックスに対して更新できます。リカバリ中にもです。</p>

<h2>まとめ</h2>

<p>ぜひ、<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-7-0">Elasticsearch 1.7.0</a>をダウンロードして、試してみてください。
そして、感想をTwitter(<a href="https://twitter.com/elastic">@elastic</a>)などで教えて下さい。
また、問題がありましたら、<a href="https://github.com/elastic/elasticsearch/issues">GitHub issues page</a>で報告をお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[大阪と京都でElasticsearch勉強会を開催しました。 #elasticsearchjp]]></title>
    <link href="http://blog.johtani.info/blog/2015/07/16/kansai-1st-elasticsearch-jp/"/>
    <updated>2015-07-16T10:40:57+09:00</updated>
    <id>http://blog.johtani.info/blog/2015/07/16/kansai-1st-elasticsearch-jp</id>
    <content type="html"><![CDATA[<p>東京以外での勉強会の第2弾として、関西で勉強会を開催してきました。</p>

<ul>
<li><a href="https://elasticsearch.doorkeeper.jp/events/27555">Elasticsearch勉強会 in 大阪</a></li>
<li><a href="https://elasticsearch.doorkeeper.jp/events/27553">Elasticsearch勉強会 in 京都</a></li>
</ul>


<p>会場提供をしていただいた、Yahoo!大阪、はてなのみなさん、ご協力ありがとうございました！</p>

<p><img src="/images/entries/20150715/osaka.jpg"></p>

<!-- more -->


<p><img src="/images/entries/20150715/kamogawa.jpg"></p>

<p>ここからはいつものメモです。
ちなみに、大阪の勉強会に、<a href="https://twitter.com/takuya_a">@takuya_a</a>さんと<a href="https://twitter.com/5kozawa">@5kozawa</a>さんの両名にお越しいただき話をしていただきました。
なので、勉強会の内容はほぼ同一になります。</p>

<h2>Introduction Elastic @johtani</h2>

<p>スライド：<a href="https://speakerdeck.com/johtani/introduction-elastic-1">Introduction Elasticsearch</a></p>

<p>初めての関西での勉強会ということで、ElasticsearchのOSSおよび商用プラグインの紹介をしてきました。
もちろん、Kibanaのデモもちょっとだけ。スプラトゥーンに関するデータをKibanaでちょっとだけ。
突貫でデータをかき集めたのでもう少し改良しないとですが。</p>

<h2>Elasticsearch での類似文書検索と More Like This API 詳解 / 株式会社はてな　id:takuya-a</h2>

<p>スライド：<a href="https://speakerdeck.com/takuyaa/elasticsearch-defalselei-si-wen-shu-jian-suo-to-more-like-this-query-api-xiang-jie">Elasticsearch での類似文書検索と More Like This Query API 詳解</a></p>

<p>Elasticsearchの<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-mlt-query.html">More Like This</a>のソースコードリーディングみたいな感じで、
内部でどうやって処理されているかの説明を詳しくしてもらいました。</p>

<p>前のはてなエンジニアセミナーで話をされていた検索精度の件に絡んだ内容になっているかと。
（大阪で発表してもらった時より京都での発表が分かりやすくなってました。1日で改善されたのすごい！）
MoreLikeThisだとチューニングつらいので、自分で作るために<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-termvectors.html">TermVectorAPI</a>でやってみたという流れかと。</p>

<p>以下は発表後に出てきた質問のいくつかです。</p>

<p>Q:MoreLikeThisに対してTermVectorで柔軟にできる？
A:TermVectorのAPIで統計情報が取れるので、それを使うことでさらなるデータの更新ができる。</p>

<p>Q:TFとかの統計情報が必要なら、すべてインデックスをしたあとじゃないとちゃんとした値はとれないのでは？
A:TermVectorで取得したものをどうやって使うか</p>

<p>Q:TermVectorAPi&hellip;聞こえなかった
A:。。。</p>

<h2>Elasticsearchを用いたはてなブックマークのトピック生成 / 株式会社はてな　id:skozawa</h2>

<p>スライド：<a href="http://www.slideshare.net/shunsukekozawa5/elasticsearch-in">Elasticsearchを用いたはてなブックマークのトピック生成</a></p>

<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-significantterms-aggregation.html">Significant Terms Aggregation</a>を活用してる話。
トピックページの生成のために、Significant Terms Aggregationをどうやって利用しているかなどのお話でした。</p>

<p>トピックの集合の重複だったり、精度の判定方法とかいろいろ詳しく説明していただきました。</p>

<p>Q:2011年と12年で11年の方が多いのは？
A:ブックマークの件数に比例</p>

<p>Q:Significant terms aggsのsizeはいくつをつかってますか？
A:20を指定してます。</p>

<p>Q:Yahooとかニュースをストップワードとしてますが、Yahoo自体のニュースに関してはどーしてるんですか？
A:本文とタイトルから別々に作っていて、タイトルからは弾かれますが、本文から作った時に出てきます。</p>

<h2>はてなブックマークにおける Elasticsearch の運用まわりの話 / 株式会社はてな　id:hagihala</h2>

<p>スライド：未定（おそらく公開される）</p>

<p>体調が回復しきっていない中の発表ありがとうございました。
大幅に修正された資料が出てくるかなと。（ツイートできない数値がちらほらあったので）</p>

<p>Elasticsearchのクラスタの構成、どういった点で困ってたのでどういう調べ方をしたのか、どういった対処をしたのか。
どのあたりが次の課題かなどの話もありました。</p>

<h2>感想・反省点など</h2>

<p>大阪、京都ともに30名弱の方の参加をしていただきました。ありがとうございました。
反省点としては、ハッシュタグを告知し忘れてました。。。</p>

<p>勉強会はやはり、東京が異常に活発で、大阪や京都はまだそれほどでもないのかなぁとも。
大阪はエンジニアの人や会社も多い気がするんですが。私の告知の仕方もあるかもなぁと。
次回があれば、大阪での事例も聞きたいので、スピーカーをもっと探さないとなと。</p>

<h2>関連ブログなど</h2>

<p>見つけたら、リンク追加していきます。</p>

<ul>
<li><a href="http://skozawa.hatenablog.com/entry/2015/07/17/194709">Elasticsearch勉強会 in 大阪/京都で発表しました</a></li>
<li><a href="http://stop-the-world.hatenablog.com/entry/2015/07/22/014047">「Elasticsearch での類似文書検索と More Like This Query API 詳解」というタイトルで発表しました</a></li>
</ul>


<h2>その他（余談）</h2>

<p>大阪のYahoo!さんは立地条件（梅田のすぐそば）がよく、</p>

<p><img src="/images/entries/20150715/yahoo_osaka.jpg" width="300"></p>

<p>夜景も綺麗でした。大阪城とかも見えてました。（夜景じゃないけど。。。）</p>

<p><img src="/images/entries/20150715/view_from_yahoo.jpg" width="600"></p>

<p>京都は祇園祭の真っ最中。</p>

<p><img src="/images/entries/20150715/naginata2.jpg" width="300"></p>

<p>水曜日はお休みをいただいて、観光してました。ちょっと日焼けが。。。
おかげで、リフレッシュできました。三十三間堂とか良かった:)</p>

<p>あまり、関西に縁がない（大阪15年ぶり、京都10年ぶり）ので、
もっとユーザが増えて勉強会の機運が高まると嬉しいなと。:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mappingのすばらしいリファクタリング（日本語訳）]]></title>
    <link href="http://blog.johtani.info/blog/2015/07/08/great-mapping-refactoring-ja/"/>
    <updated>2015-07-08T18:11:31+09:00</updated>
    <id>http://blog.johtani.info/blog/2015/07/08/great-mapping-refactoring-ja</id>
    <content type="html"><![CDATA[<p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>

<p>原文：<a href="https://www.elastic.co/blog/great-mapping-refactoring">The Great Mapping Refactoring</a></p>

<!-- more -->


<p>Elasticsearchのユーザの悩みの最も大きなものの一つは、
タイプとフィールドのマッピングに関する多義性です。
この多義性は、インデックス時の例外やクエリ時の例外、
正しくない結果、リクエストからリクエストへ変化する結果、
また、インデックスの故障やデータのロスを結果として引き起こします。</p>

<p>Elasticsearchをより強固で予測可能な振る舞いをするようにする作業において、
フィールドやタイプのマッピングをより厳格でより信頼性を高くするかといったことに
多くの変更を費やしました。
多くのケースで、Elasticsearch v2.0で新しいインデックスを作るときにのみ、
新しいルールを強制し、これまでのインデックスに関しては後方互換性を保つようにします。</p>

<p>しかし、幾つかのケースでは、先ほど説明したようなフィールドマッピングの
コンフリクトなどが存在するため、それらを利用できないです。</p>

<blockquote><p>コンフリクトしたフィールドのマッピングをもつインデックスはElasticsearch v2.0にはアップグレードできません。</p></blockquote>

<p>もし、これらのインデックスのデータが必要ない場合は、インデックスを消せばいいです。
そうでない場合はマッピングを正しくして再度インデックスする必要があるでしょう。</p>

<p>マッピングを正しく変更することは、私たちが簡単に決めることではありません。
ここからは、現在ある問題点と、私たちがどのように実装して解決したかについて説明します。</p>

<ul>
<li><a href="#conflicting-field-mappings">フィールドマッピングのコンフリクト</a></li>
<li><a href="#ambiguous-field-lookup">あいまいなフィールドのルックアップ</a></li>
<li><a href="#type-meta-fields">タイプのメタフィールド</a></li>
<li><a href="#analyzer-settings">アナライザ設定</a></li>
<li><a href="#index_name-and-path"><code>index_name</code>と<code>path</code></a></li>
<li><a href="#mapping-update">同期的なマッピングの更新</a></li>
<li><a href="#delete-mapping">マッピングの削除</a></li>
<li><a href="#prepare-2_0">2.0のための準備</a></li>
</ul>


<h2><a name="conflicting-field-mappings">フィールドマッピングのコンフリクト</a></h2>

<p>これまで、わたしたちはドキュメントのタイプは「データベースのテーブルのようなもの」と説明していました。
タイプの目的を説明する簡単な方法だったからです。
しかし、残念なことにこれは、真実ではありません。
「同じ」インデックスの「異なるタイプ」にある同じ名前のフィールドは、
内部的に、Luceneのフィールド名が同じものになります。</p>

<p>もし<code>error</code>フィールドとして、ドキュメントタイプが<code>apache</code>のものには数値（integer）を、
ドキュメントタイプが<code>nginx</code>のものには文字列（string）を割り当てた場合、
Elasticsearchは同じLuceneのフィールドに数値と文字列のデータをもつことになります。
このフィールドに対して、検索やaggregationを行う場合、おかしな結果を受け取るか、例外が帰ってくるか、
インデックスが破損することになります。</p>

<p>この問題を解決するために、まず、ドキュメントタイプの名前をフィールドの名前の前に追加することを考えました。
各フィールドは完全に別のものとなります。
このアプローチの利点はドキュメントタイプが実際のテーブルのようになることです。</p>

<p>しかし、この方法には多くの欠点があります。</p>

<ul>
<li>フィールドは常に、他のタイプとは異なるものであると区別するためもしくは、複数のタイプに同じフィールドのクエリのためにワイルドカードをつけた場合、
ドキュメントタイプを前につける必要があります。</li>
<li>複数のドキュメントタイプに対して同じフィールド名で検索する場合、クエリを個別に発行しなければならなく遅くなります。</li>
<li>多くの検索で、既存の多くのクエリを壊してしまうために、単純な<code>match</code>や<code>term</code>クエリの代わりに、multi-fieldクエリを使う必要があります。</li>
<li>圧縮の効率の悪さから、ヒープ利用量、ディスク使用量、I/Oなどが、増加します。</li>
<li>複数のドキュメントタイプに対するaggregationは、global ordinalの利点を利用できなくなるために、遅くなり、メモリの使用量も増えます。</li>
</ul>


<h3>解決方法</h3>

<p>最終的に、同じインデックスの同じ名前を持つ全てのフィールドは、同じマッピングを持つ必要があるというルールを採用することに決めました。
ただ、<code>copy_to</code>や<code>enabled</code>のようなパラメータはタイプごとに指定することができるようになっています。
これにより、データの破損、クエリ時の例外そして、おかしな結果が発生する問題を防ぎます。
クエリとaggregationは現在でも高速なままで、圧縮率を最大化し、ヒープ使用量やディスク使用率の低減させます。</p>

<p>この解決方法の欠点は、個別のテーブルとしてタイプを扱いたいユーザが彼らの考え方を変える必要があるということです。
これは、思ったよりも問題ではありません。
実際には、多くのフィールド名はデータの明確なタイプを表現しています。
<code>created_date</code>は常に、日付ですし、<code>number_of_hits</code>フィールドはいつも数値です。
フィールドマッピングがコンフリクトしているユーザはデータを失ったり、おかしなデータを受け取ったり、データを欠損させています。
ベストプラクティスにユーザが従っているかどうかによらず、インデックス時に正しい振る舞いを強制することが現在の違いです。</p>

<p>ユーザの多くがコンフリクトしていないフィールドマッピングをもっていれば、
コンフリクトが起きた場合、技術がこれらのシチュエーションを扱うことが可能になると思いませんか？
そこにはいくつかの解決方法があります。</p>

<h4>タイプの代わりにインデックスを別々に</h4>

<p>最も簡単な解決方法です。インデックスを別々のインデックスとし、実際のデータベーステーブルのようにします。
インデックスをまたいだ検索はタイプをまたいだ検索のように動作しますし、
ソートやaggregationも同じデータタイプへのクエリのように動作します。これまでと同じ制限です。</p>

<h4>コンフリクトしたフィールドの名前の変更</h4>

<p>コンフリクトがごくわずかな場合、（Logstashやアプリケーションで使っているものも一緒に）よりわかりやすいフィールド名に変更することで解決できます。
例えば、2つの<code>error</code>フィールドがあった場合に、<code>error_code</code>と<code>error_message</code>に変更します。</p>

<h4><code>copy_to</code>もしくはmulti-fieldsを利用</h4>

<p>異なるドキュメントタイプのフィールドは別々の<code>copy_to</code>を設定できます。
元の<code>error</code>フィールドは<code>index</code>の設定に<code>no</code>が設定してあり、全てのドキュメントタイプで無効化されていますが、
特定のタイプだけ、<code>error</code>フィールドの値を数値の<code>error_code</code>フィールドにコピーすることができます。</p>

<pre><code>PUT my_index/_mapping/mapping_one
{
  "properties": {
    "error": {
      "type": "string",
      "index": "no",
      "copy_to": "error_code"
    },
    "error_code": {
      "type": "integer"
    }
  }
}
</code></pre>

<p>他のタイプでは文字列の<code>error_message</code>にコピーします。</p>

<pre><code>PUT my_index/_mapping/mapping_two
{
  "properties": {
    "error": {
      "type": "string",
      "index": "no",
      "copy_to": "error_message"
    },
    "error_message": {
      "type": "string"
    }
  }
}
</code></pre>

<p>同様の解決方法として<a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/mapping-core-types.html#multi-fields">multi-field</a>も使えます。</p>

<h4>各データタイプに対してネストしたフィールドに</h4>

<p>ときどき、Elasticsearchに送ったドキュメントやドキュメントがもっているフィールドを制御できない場合があります。
部分的なコンフリクトに加え、闇雲に、ユーザが送ってきたフィールドを受け入れると、マッピングが肥大化します。
タイムスタンプやIPアドレスをフィールド名に使うようなドキュメントがあると考えてください。</p>

<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-nested-type.html"><code>nested</code> フィールド</a>にすることで、<code>str_val</code>、<code>int_val</code>、<code>date_val</code>というような各データタイプを利用できます。</p>

<p>このアプローチによって、次のドキュメントは</p>

<pre><code>{
  "message": "some string",
  "count":   1,
  "date":    "2015-06-01"
}
</code></pre>

<p>アプリケーションによって、次のようにフォーマットしなおす必要があります。</p>

<pre><code>{
  "data": [
    {"key": "message", "str_val":  "some_string" },
    {"key": "count",   "int_val":  1             },
    {"key": "date",    "date_val": "2015-06-01"  }
  ]
}
</code></pre>

<p>この解決方法は、アプリケーションサイドでより多くの作業が必要ですが、コンフリクトの問題とマッピングの肥大化の問題を同時に解決します。</p>

<h2><a name="#ambiguous-field-lookup">あいまいなフィールドのルックアップ</a></h2>

<p>現在、フィールドの指定には&#8221;short name&#8221;、フルパス、ドキュメントタイプを前につけたフルパスが利用できます。
これらのオプションがあいまいさをもたらしています。
サンプルとして次のマッピングをご覧ください。</p>

<pre><code>{
  "mappings": {
    "user": {
      "properties": {
        "title": {
          "type": "string"
        }
      }
    },
    "blog": {
      "properties": {
        "title": {
          "type": "string"
        },
        "user": {
          "type": "object",
          "fields": {
            "title": {
              "type": "string"
            }
          }
        }
      }
    }
  }
}
</code></pre>

<ul>
<li><code>title</code>は<code>user.title</code>、<code>blog.title</code>、<code>blog.user.title</code>のどれでしょう？</li>
<li><code>user.title</code>は<code>user.title</code>または<code>blog.user.title</code>のどちらでしょう？</li>
</ul>


<p>答えは「場合によります。」です。Elasticsearchが最初に見つけたものになります。
フィールドはリクエストごとに変わるため、各ノードでマッピングがどのようにシリアライズされたかに依存します。</p>

<p>2.0では、フィールドを指定する時に、ドキュメントタイプを除いたフルパス名を使用するべきでしょう。</p>

<ul>
<li><code>user.title</code>は、<code>blog</code>タイプの<code>user.title</code>を意味します。</li>
<li><code>title</code>は、<code>user</code>と<code>blog</code>タイプの<code>title</code>フィールドを意味します。</li>
<li><code>*title</code>は<code>user.title</code>と<code>title</code>フィールドの両方にマッチします。</li>
</ul>


<p><code>user</code>タイプの<code>title</code>フィールドと<code>blog</code>タイプの<code>title</code>の違いはどのように指定するのでしょう？</p>

<p>指定できません。<a href="#conflicting-field-mappings">フィールドマッピングのコンフリクト</a>で説明した変更により、
<code>title</code>フィールドは両方のタイプで同じフィールドになります。
本質的に<code>title</code>と呼ばれる1つのフィールドになります。</p>

<p><code>user.</code>や<code>blog.</code>のようなタイプのプレフィックスはタイプを指定することによるフィルタリングで効果があります。
クエリの<code>blog.title</code>フィールドは<code>blog</code>タイプのドキュメントだけを検索し、<code>user</code>タイプのドキュメントを検索しません。
このシンタックスは誤解を招きやすいです。なぜなら、いつでも動作するわけではないからです。
aggregationやsuggestionはすべてのタイプに関する結果を含みます。
この利用のため、上記の例のあいまいさがあるので、タイプのプレフィックスはサポートしません。</p>

<p><strong>重要</strong> short nameやタイププレフィックスを利用したpercolatorは更新する必要があります。</p>

<h2><a name="type-meta-fields">タイプのメタフィールド</a></h2>

<p>すべてのタイプはメタフィールドを持っています。<code>_id</code>、<code>_index</code>、<code>_routing</code>、<code>_parent</code>、<code>_timestamp</code>などです。
これらのほとんどは<code>index</code>、<code>store</code>、<code>path</code>のような幾つかの設定をサポートしています。
これらの設定について次のようにシンプルにしました。</p>

<ul>
<li><code>_id</code>と<code>_type</code>は変更不可</li>
<li><code>_index</code>は、ドキュメントのもつインデックスを保存するために<code>enabled</code></li>
<li><code>_routing</code>は<code>required</code>のみを指定</li>
<li><code>_size</code>は<code>enabled</code>のみ</li>
<li><code>_timestamp</code>はデフォルトで保存される</li>
<li><code>_boost</code>と<code>_analyzer</code>は廃止。古いインデックスのものは無視される</li>
</ul>


<p>ドキュメントのフィールドから<code>_id</code>と<code>_routing</code>と<code>_timestamp</code>の値を抽出することができました。
この機能は廃止されます。これは、ドキュメントのパースとコンフリクトを起こすためです。
代わりに、これらの値はURLもしくはquery stringで指定可能です。</p>

<p><code>_boost</code>と<code>_analyzer</code>フィールドは例外で、すでにあるメタフィールドの設定は古いインデックスのものが採用されます。</p>

<h2><a name="analyzer-settings">アナライザ設定</a></h2>

<p>これまで、indexとsearchのアナライザがインデックス、タイプ、フィールド、ドキュメント（<code>_analyzer</code>フィールドで）の
それぞれのレベルで指定可能でした。
同じフィールドに対して異なるanalysis chainの組み合わせができることにより、おかしな関連度を引き起こしていました。
フィールドマッピングのコンフリクトを解消することに加え、アナライザの設定も簡略化します。</p>

<ul>
<li>Analyzedな文字列フィールドは、<code>analyzer</code>設定と<code>search_analyzer</code>設定（<code>analyzer</code>設定の値をデフォルトとする）を指定できます。<code>index_analyzer</code>設定は<code>analyzer</code>となります。</li>
<li>複数のタイプで同じ名前のフィールドがある場合、フィールドはすべて、同じアナライザの設定を持たなければなりません。</li>
<li>タイプレベルのデフォルト設定の<code>analyzer</code>、<code>index_analyzer</code>、<code>search_analyzer</code>設定は廃止されます。</li>
<li>デフォルトアナライザはインデックスごとにインデックスの<code>analysis</code>設定で設定します。これらは<code>default</code>もしくは<code>default_search</code>という名前で設定します。</li>
<li>ドキュメントごとの<code>_analyzer</code>フィールドはサポートしません。既存のインデックスのものは無視されます。</li>
</ul>


<h2><a name="index_name-and-path"><code>index_name</code>と<code>path</code></a></h2>

<p><code>index_name</code>と<code>path</code>設定は（Elasticsearch v1.0.0から利用できる）<code>copy_to</code>によって置き換わりました。
既存のインデックスについてはこれらは機能しますが、新しいインデックスでは指定できません。</p>

<h2><a name="mapping-update">同期的なマッピングの更新</a></h2>

<p>現在、これまで存在していないフィールドを含むドキュメントをインデキシングするとき、
フィールドはローカルのマッピングに追加され、それから、マスターに変更（新しいマッピングをすべてのシャードに適用する更新）が送信されていました。
同時に2つのシャードに同じフィールドを追加することができます。
また、そのとき、異なる2つのマッピングがある可能性があります。
1つは<code>double</code>でもう1つは<code>long</code>だったり、<code>string</code>と<code>date</code>だったりと。</p>

<p>このような場合、マスターに最初に届いたマッピングが採用されます。
しかし、「負けた」マッピングをもつシャードでは、すでに異なるデータのタイプを利用しているため、
これを利用し続けます。
そのご、ノードをリスタートしたときに、シャードが別のノードに移動し、マスターにあるマッピングを適用します。
このとき、インデックスが破損したりデータを失ったりします。</p>

<p>これを防ぐために、シャードはインデキシングを続ける前に、新しいマッピングがマスターによって採用されるかどうかを待つようになりました。
これはすべてのマッピングが安全に更新されます。
新しいフィールドをもっているドキュメントをインデキシングすると、前よりも処理が遅くなるでしょう。
受け入れられることを待つ必要があるためです。
しかし、クラスタの状態の更新処理のスピードが次の2つの新しい機能によって大きく改善されています。</p>

<ul>
<li><strong>クラスタ状態の差分</strong>：可能であれば、クラスタの状態の変更はクラスタ状態全体の変更ではなく、部分的なものとする。</li>
<li><strong>シャードへのリクエストの非同期化</strong>：シャードアロケーション処理中に、マスタノードは、
割り当てられていないシャードのコピーの日付が最新のものを持っているかを見つけるために、リクエストをデータノードに対して送信します。
ここで、クラスタ状態を変更する呼び出しがブロッキングで行われていました。v1.6.0から、このリクエストはバックグラウンドで非同期で実行されます。
これにより、マッピング更新のようなペンディングタスクをより早く処理できるようになります。</li>
</ul>


<h2><a name="delete-mapping">マッピングの削除</a></h2>

<p>（そのタイプのドキュメントがある場合）タイプマッピングを削除できないようにします。
マッピングを削除した後に、削除されたフィールドの情報は、Luceneレベルでは存在し続け、
もし、後から同じ名前のフィールドが追加されたときにインデックスの破損を引き起こします。
そのようなマッピングは残しておくか、新しいインデックスに再インデックスすることができます。</p>

<h2><a name="prepare-2_0">2.0のための準備</a></h2>

<p>マッピングがコンフリクトしているかどうかを決めることは、手動で行うには慎重に行う必要があります。
私たちは、<a href="https://github.com/elastic/elasticsearch-migration">Elasticsearch Migration Plugin</a>を提供します。
これは、2.0で非推奨になったり廃止された機能を利用しているかどうかを見つけるために役に立つでしょう。</p>

<p>もし、コンフリクトしたマッピングを持っている場合、
正しいマッピングを持つ新しいインデックスにデータを再インデックスするか、
必要ないなら削除します。
これらのコンフリクトを解決しない限り2.0にはアップグレードできないでしょう。</p>
]]></content>
  </entry>
  
</feed>
