<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: elasticsearch | @johtaniの日記 2nd]]></title>
  <link href="http://blog.johtani.info/blog/categories/elasticsearch/atom.xml" rel="self"/>
  <link href="http://blog.johtani.info/"/>
  <updated>2015-05-26T18:03:33+09:00</updated>
  <id>http://blog.johtani.info/</id>
  <author>
    <name><![CDATA[johtani]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Logstashを使ったElasticsearchの再インデックス（日本語訳）]]></title>
    <link href="http://blog.johtani.info/blog/2015/05/26/reindex-elasticsearch-with-logstash-ja/"/>
    <updated>2015-05-26T16:08:10+09:00</updated>
    <id>http://blog.johtani.info/blog/2015/05/26/reindex-elasticsearch-with-logstash-ja</id>
    <content type="html"><![CDATA[<p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>

<p>原文：<a href="http://david.pilato.fr/blog/2015/05/20/reindex-elasticsearch-with-logstash/">Reindex Elasticsearch With Logstash</a></p>

<p>Thanks David!</p>

<!-- more -->


<p>マッピングを変更したり、インデックスの設定を変更したり、あるサーバから他のサーバや、
あるクラスタから他のクラスタ（例えば複数のデータセンターのような場合）にデータを再インデックスしたくなることがあるでしょう。</p>

<p>後者のような場合は<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html">SnapshotやRestoreの機能</a>を利用することもできますが、インデックスの設定を変更をしたい場合は
その他の方法が必要になります。</p>

<p><a href="https://www.elastic.co/blog/logstash-1-5-0-ga-released">Logstash 1.5.0</a>で、
<a href="https://www.elastic.co/guide/en/logstash/current/plugins-inputs-elasticsearch.html">elasticsearch input</a>と<a href="https://www.elastic.co/guide/en/logstash/current/plugins-outputs-elasticsearch.html">elasticsearch output</a>を使うことで、とても簡単に再インデックスができます。</p>

<p>ではやってみましょう。</p>

<h2>古いクラスタ</h2>

<p>elasticsearch 1.5.2 はすでにダウンロード済みとして、<code>localhost:9200</code>で<code>old</code>という名前のクラスタを起動します。</p>

<pre><code class="bash">bin/elasticsearch --cluster.name=old
</code></pre>

<p>クラスタに<code>person</code>という名前のインデックスが存在します。
これは、5シャードで、100万件のドキュメントを持っています。</p>

<p><img class="<a" src="href="http://david.pilato.fr/blog/images/reindex-es01/sense01.png">http://david.pilato.fr/blog/images/reindex-es01/sense01.png</a>&#8221;></p>

<h2>新しいクラスタ</h2>

<p>次に新しいクラスタを起動します。
<code>localhost:9201</code>で<code>new</code>という名前のクラスタを起動します。</p>

<pre><code class="bash">bin/elasticsearch --cluster.name=new
</code></pre>

<p>こちらは、空です。</p>

<pre><code class="bash">curl -XGET "http://localhost:9201/person"
</code></pre>

<pre><code class="json">{
   "error": "IndexMissingException[[person] missing]",
   "status": 404
}
</code></pre>

<h2>Logstashのインストール</h2>

<p>次に、Logstash 1.5.0をダウンロードして、インストールします。</p>

<pre><code class="bash">wget http://download.elastic.co/logstash/logstash/logstash-1.5.0.tar.gz
tar xzf logstash-1.5.0.tar.gz
cd logstash-1.5.0
</code></pre>

<p>logstashの設定ファイル<code>logstash.conf</code>を次のように設定します。</p>

<pre><code>input {
  # We read from the "old" cluster
  elasticsearch {
    hosts =&gt; [ "localhost" ]
    port =&gt; "9200"
    index =&gt; "person"
    size =&gt; 500
    scroll =&gt; "5m"
    docinfo =&gt; true
  }
}

output {
  # We write to the "new" cluster
  elasticsearch {
    host =&gt; "localhost"
    port =&gt; "9201"
    protocol =&gt; "http"
    index =&gt; "%{[@metadata][_index]}"
    index_type =&gt; "%{[@metadata][_type]}"
    document_id =&gt; "%{[@metadata][_id]}"
  }
  # We print dots to see it in action
  stdout {
    codec =&gt; "dots"
  }
}
</code></pre>

<h2>実行と修正</h2>

<p>実行します。</p>

<pre><code class="bash">bin/logstash -f logstash.conf
</code></pre>

<h3>ドキュメントのチェックと修正</h3>

<p>何が起きたでしょう？</p>

<pre><code class="bash">curl -XGET "http://localhost:9200/person/person/AU1wqyQWZJKU8OibfxgH"
</code></pre>

<pre><code class="json">{
   "_index": "person",
   "_type": "person",
   "_id": "AU1wqyQWZJKU8OibfxgH",
   "_version": 1,
   "found": true,
   "_source": {
      "name": "Tali Elyne",
      "dateOfBirth": "1955-05-03",
      "gender": "female",
      "children": 2,
      "marketing": {
         "cars": null,
         "shoes": null,
         "toys": null,
         "fashion": null,
         "music": null,
         "garden": null,
         "electronic": null,
         "hifi": null,
         "food": 846
      },
      "address": {
         "country": "Germany",
         "zipcode": "0099",
         "city": "Bonn",
         "countrycode": "DE",
         "location": [
            7.075943707068682,
            50.72883500730124
         ]
      }
   }
}
</code></pre>

<p>もう一方のクラスタと比較してみましょう。</p>

<pre><code class="bash">curl -XGET "http://localhost:9201/person/person/AU1wqyQWZJKU8OibfxgH"
</code></pre>

<pre><code class="json">{
   "_index": "person",
   "_type": "person",
   "_id": "AU1wqyQWZJKU8OibfxgH",
   "_version": 1,
   "found": true,
   "_source": {
      "name": "Tali Elyne",
      "dateOfBirth": "1955-05-03",
      "gender": "female",
      "children": 2,
      "marketing": {
         "cars": null,
         "shoes": null,
         "toys": null,
         "fashion": null,
         "music": null,
         "garden": null,
         "electronic": null,
         "hifi": null,
         "food": 846
      },
      "address": {
         "country": "Germany",
         "zipcode": "0099",
         "city": "Bonn",
         "countrycode": "DE",
         "location": [
            7.075943707068682,
            50.72883500730124
         ]
      },
      "@version": "1",
      "@timestamp": "2015-05-20T09:53:44.089Z"
   }
}
</code></pre>

<p>Logstashは<code>@version</code>と<code>@timestamp</code>フィールドを追加してしました。
これらを除去したいので、<a href="http://www.elastic.co/guide/en/logstash/current/plugins-filters-mutate.html">Mutate filter plugin</a>の<a href="http://www.elastic.co/guide/en/logstash/current/plugins-filters-mutate.html#plugins-filters-mutate-remove_field"><code>remove_field</code></a>を使います。</p>

<pre><code>filter {
  mutate {
    remove_field =&gt; [ "@timestamp", "@version" ]
  }
}
</code></pre>

<h3>マッピングのチェックと修正</h3>

<p>実際に、logstashは<code>_source</code>フィールドを既存のドキュメントから読み込み、
それらを新しいクラスタに直接投入しています。
しかし、logstashはマッピングについてはケアしていません。</p>

<p>古いマッピングと新しいマッピングを比較するために、マッピングを取得してみましょう。</p>

<pre><code class="bash">curl -XGET "http://localhost:9200/person/person/_mapping"
</code></pre>

<pre><code class="json">{
   "person": {
      "mappings": {
         "person": {
            "properties": {
               "address": {
                  "properties": {
                     "city": {
                        "type": "string",
                        "index": "not_analyzed"
                     },
                     "country": {
                        "type": "string",
                        "index": "not_analyzed"
                     },
                     "countrycode": {
                        "type": "string",
                        "index": "not_analyzed"
                     },
                     "location": {
                        "type": "geo_point"
                     },
                     "zipcode": {
                        "type": "string"
                     }
                  }
               },
               "children": {
                  "type": "long"
               },
               "dateOfBirth": {
                  "type": "date",
                  "format": "dateOptionalTime"
               },
               "gender": {
                  "type": "string",
                  "index": "not_analyzed"
               },
               "marketing": {
                  "properties": {
                     "cars": {
                        "type": "long"
                     },
                     "electronic": {
                        "type": "long"
                     },
                     "fashion": {
                        "type": "long"
                     },
                     "food": {
                        "type": "long"
                     },
                     "garden": {
                        "type": "long"
                     },
                     "hifi": {
                        "type": "long"
                     },
                     "music": {
                        "type": "long"
                     },
                     "shoes": {
                        "type": "long"
                     },
                     "toys": {
                        "type": "long"
                     }
                  }
               },
               "name": {
                  "type": "string"
               }
            }
         }
      }
   }
}
</code></pre>

<pre><code class="bash">curl -XGET "http://localhost:9201/person/person/_mapping"
</code></pre>

<pre><code class="json">{
   "person": {
      "mappings": {
         "person": {
            "properties": {
               "address": {
                  "properties": {
                     "city": {
                        "type": "string"
                     },
                     "country": {
                        "type": "string"
                     },
                     "countrycode": {
                        "type": "string"
                     },
                     "location": {
                        "type": "double"
                     },
                     "zipcode": {
                        "type": "string"
                     }
                  }
               },
               "children": {
                  "type": "long"
               },
               "dateOfBirth": {
                  "type": "date",
                  "format": "dateOptionalTime"
               },
               "gender": {
                  "type": "string"
               },
               "marketing": {
                  "properties": {
                     "cars": {
                        "type": "long"
                     },
                     "electronic": {
                        "type": "long"
                     },
                     "fashion": {
                        "type": "long"
                     },
                     "food": {
                        "type": "long"
                     },
                     "garden": {
                        "type": "long"
                     },
                     "hifi": {
                        "type": "long"
                     },
                     "music": {
                        "type": "long"
                     },
                     "shoes": {
                        "type": "long"
                     },
                     "toys": {
                        "type": "long"
                     }
                  }
               },
               "name": {
                  "type": "string"
               }
            }
         }
      }
   }
}
</code></pre>

<p>これにより、いくつかの相違を発見できます。</p>

<pre><code class="json"> "location": {
    "type": "geo_point"
 }
</code></pre>

<pre><code class="json"> "location": {
    "type": "double"
 }
</code></pre>

<p>データをインデックスする「前」に、実際に利用したいマッピングでインデックスを作成しておくことで、
この問題に対処できます。
この時点で、オリジナルのマッピングを望んだ形に変更することができます。例えば、アナライザを変更したりです。
また、インデックスの設定を新しく定義することもできます。
デフォルトでは、Elasticsearchは5つのシャードと各シャードに対して1つのレプリカを作成します。
しかし、この時点でもう一度変更することが可能です。</p>

<pre><code class="bash">curl -XDELETE "http://localhost:9201/person"
curl -XPUT "http://localhost:9201/person" -d'
{
  "settings": {
    "number_of_shards": 1,
    "number_of_replicas": 0
  }
}'
curl -XPUT "http://localhost:9201/person/person/_mapping" -d'
{
  "person": {
    "properties": {
      "address": {
        "properties": {
          "city": {
            "type": "string",
            "index": "not_analyzed"
          },
          "country": {
            "type": "string",
            "index": "not_analyzed"
          },
          "countrycode": {
            "type": "string",
            "index": "not_analyzed"
          },
          "location": {
            "type": "geo_point"
          },
          "zipcode": {
            "type": "string"
          }
        }
      },
      "children": {
        "type": "long"
      },
      "dateOfBirth": {
        "type": "date",
        "format": "dateOptionalTime"
      },
      "gender": {
        "type": "string",
        "index": "not_analyzed"
      },
      "marketing": {
        "properties": {
          "cars": {
            "type": "long"
          },
          "electronic": {
            "type": "long"
          },
          "fashion": {
            "type": "long"
          },
          "food": {
            "type": "long"
          },
          "garden": {
            "type": "long"
          },
          "hifi": {
            "type": "long"
          },
          "music": {
            "type": "long"
          },
          "shoes": {
            "type": "long"
          },
          "toys": {
            "type": "long"
          }
        }
      },
      "name": {
        "type": "string"
      }
    }
  }
}'
</code></pre>

<p>さて、もう一度再インデックスしましょう！</p>

<pre><code class="bash">bin/logstash -f logstash.conf
</code></pre>

<p><img class="<a" src="href="http://david.pilato.fr/blog/images/reindex-es01/sense02.png">http://david.pilato.fr/blog/images/reindex-es01/sense02.png</a>&#8221;></p>

<h2>インデックスやタイプ名の変更</h2>

<p>もちろん、インデックス名やタイプ名、IDを変更したい場合も変更が可能です！:)</p>

<pre><code class="json">  elasticsearch {
    host =&gt; "localhost"
    port =&gt; "9201"
    protocol =&gt; "http"
    index =&gt; "europe_people"
    index_type =&gt; "someone"
    document_id =&gt; "%{[@metadata][_id]}"
  }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elasticsearch 1.5.2 および 1.4.5リリース（日本語訳）]]></title>
    <link href="http://blog.johtani.info/blog/2015/04/28/elasticsearch-1-5-2-and-1-4-5-released-ja/"/>
    <updated>2015-04-28T15:14:08+09:00</updated>
    <id>http://blog.johtani.info/blog/2015/04/28/elasticsearch-1-5-2-and-1-4-5-released-ja</id>
    <content type="html"><![CDATA[<p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>

<p>原文：<a href="https://www.elastic.co/blog/elasticsearch-1-5-2-and-1-4-5-released">Elasticsearch 1.5.2 Released</a></p>

<p>本日（4/27）、<strong>Lucene 4.10.4</strong>ベースの<strong>Elasticsearch 1.5.1</strong>および<strong>Elasticsearch 1.4.5</strong> をセキュリティバグフィックス版をリリースしました。
ダウンロードおよびすべての変更については次のリンクをごらんください。</p>

<ul>
<li>最新安定版：<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-5-2">Elasticsearch 1.5.2</a></li>
<li>1.4系バグフィックス：<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-4-5">Elasticsearch 1.4.5</a></li>
</ul>


<p><em>本リリースはディレクトリトラバーサルの脆弱性のフィックスです。すべてのユーザにアップグレードを勧めます。</em></p>

<!-- more -->


<p>過去のリリースに関するブログは以下のリンクを参照してください。</p>

<ul>
<li><em>1.5</em>:<a href="http://www.elasticsearch.org/blog/elasticsearch-1-5-1-released/">1.4.1</a>,
<a href="http://www.elasticsearch.org/blog/elasticsearch-1-5-0-released/">1.5.0</a></li>
<li><em>1.4</em>:<a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-4-released/">1.4.4</a>,<a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-3-released/">1.4.3</a>,
<a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-2-released/">1.4.2</a>,<a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-1-released/">1.4.1</a>,
<a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-0-released/">1.4.0</a>, <a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-0-beta-released/">1.4.0.Beta1</a></li>
</ul>


<p>すべての<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-5-2">1.5.2</a>および<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-4-5">1.4.5</a>の変更についてはリンクをごらんください。以下では、セキュリティの問題について紹介します。</p>

<h2>ディレクトリトラバーサル脆弱性の発見</h2>

<p>1.5.2および1.4.5以前の全バージョンのElasticsearchで、ディレクトリトラバーサル攻撃に対する脆弱性がみつかりました。
攻撃者はElasticsearchを実行しているサーバからファイルを取得することができます。
この脆弱性はインストールしたばかりのElasticsearchには存在しません。
この脆弱性は&#8221;site plugin&#8221;がインストールされると露呈します。
ElasticのMarvelプラグインおよびコミュニティサポートの多くのプラグイン（例：Kopf、BigDesk、Head）がsite pluginです。
Elastic Shield、Licensing、Cloud-AWS、Cloud-GCE、Cloud-Azure、analysis pluginおよびriverプラグインはsite pluginでは<em>ありません</em>。</p>

<p>この問題を<a href="https://www.elastic.co/community/security">CVE-2015-3337</a>としました。</p>

<p>バージョン1.5.2と1.4.5はこの脆弱性に対して対策済みで、私たちはすべてのユーザにアップグレードを勧めています。</p>

<p>アップグレードを望まないユーザはいくつかの方法でこの脆弱性に対して対応可能ですが、これらの方法はsite pluginを動作させなくします。</p>

<ul>
<li>site pluginをインストールしているノードの<code>elasticsearch.yml</code>の<code>http.disable_sites</code>を<code>true</code>に設定し、Elasticsearchのノードを再起動</li>
<li>ファイアウォールもしくはプロキシを利用して、<code>/_plugin</code>へのHTTPリクエストをブロック</li>
<li>すべてのsite pluginをすべてのElasticsearchノードからアンインストール</li>
</ul>


<p>この問題を報告していただいた、DocuSignのJohn Heasmanに感謝いたします。</p>

<h2>他の変更について</h2>

<ul>
<li><a href="https://github.com/elastic/elasticsearch/pull/10526">インデックスされたスクリプトおよびテンプレート</a>を上書きもしくは削除時に、キャッシュからも完全に削除する。</li>
<li>geo-shapeの多数のフィックス（<code>distance_error_pct</code>を利用した場合の、重要な<a href="https://github.com/elastic/elasticsearch/pull/10679">precisionに関するフィックス</a>を含む）</li>
<li>インデックステンプレートのデフォルトマッピングがバルクインデキシング中にも考慮するように修正</li>
<li>Shadowレプリカが<a href="https://github.com/elastic/elasticsearch/pull/10688">ファイルシステムの遅延</a>に対する対障害性を向上し、プライマリシャードの<a href="https://github.com/elastic/elasticsearch/pull/10585">よりスムーズなリロケーション</a>をサポート</li>
<li><a href="http://github.com/elastic/elasticsearch/issues/10602">geo-contexts</a>をcompletion suggesterで使用した場合のマッピングのリフレッシュループを改善</li>
</ul>


<p>いくつかの重要な変更がv1.4.5にバックポートされています。</p>

<ul>
<li><a href="http://github.com/elastic/elasticsearch/issues/10463">大きなシャードのリカバリを早くする</a>ためのシャードリカバリ中のマージを可能に</li>
<li><a href="http://github.com/elastic/elasticsearch/issues/9797">truncated translogs</a>の操作をグレースフルに</li>
<li>マージが遅くなる場合に、<a href="http://github.com/elastic/elasticsearch/issues/9986">delete-by-queryを減速</a></li>
</ul>


<p>ぜひ、<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-5-2">Elasticsearch 1.5.2</a>をダウンロードして、試してみてください。
そして、感想をTwitter(<a href="https://twitter.com/elastic">@elastic</a>)などで教えて下さい。
また、問題がありましたら、<a href="https://github.com/elastic/elasticsearch/issues">GitHub issues page</a>で報告をお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第9回Elasticsearch勉強会を開催しました。#elasticsearchjp]]></title>
    <link href="http://blog.johtani.info/blog/2015/04/17/9th-elasticsearch-jp/"/>
    <updated>2015-04-17T14:41:54+09:00</updated>
    <id>http://blog.johtani.info/blog/2015/04/17/9th-elasticsearch-jp</id>
    <content type="html"><![CDATA[<p><a href="https://elasticsearch.doorkeeper.jp/events/23012">第9回Elsticsearch勉強会</a>を開催しました。
スタッフの皆さん、スピーカーの皆さん、開場提供していただいた<a href="http://recruit-tech.co.jp">リクルートテクノロジーズさん</a>、ありがとうございました！
次回もよろしくお願いします！参加していただき盛り上げていただいた参加者の皆さんもありがとうございました。</p>

<!-- more -->


<p>今回はトレーニングで来日していたIgorとNathanによる特別公演でした。
昨年同様、<a href="http://samuraism.com">サムライズム</a>の<a href="https://twitter.com/yusuke">@yusuke</a>さんに
テキスト翻訳していただき、大変助かりました。ほんとうにすごかった。。。</p>

<h3>チェックイン数など</h3>

<ul>
<li>今回はチェックインした人：119名</li>
<li>キャンセルしなかった人：45名</li>
</ul>


<p>でした。今回はキャンセル待ちのまま当日を迎えた人もいなかったので良かったかなと。
今回から懇親会ページを別にしてみました。本編の勉強会に参加登録していた方には何度かメールを出していたので、
見つけていなかった人は以内とは思うのですが、勉強会のページと間違える人がいたらしいという話を聞きました。
Doorkeeperで1イベントで複数のチケットにそれぞれの参加者数を設定できるようになると嬉しいかもなぁ。</p>

<p>さて、いつもの通り簡単なメモです。
本当に簡単にですが。</p>

<h2>Resiliency in Elasticsearch and Lucene / Igor Motov</h2>

<p>スライド：<a href="https://speakerdeck.com/elastic/resiliency-in-elasticsearch-and-lucene">https://speakerdeck.com/elastic/resiliency-in-elasticsearch-and-lucene</a></p>

<p>※上記スライドは少し古いバージョンです。公開されたら差し替える予定です。</p>

<p>サンフランシスコで行われた<a href="https://www.elastic.co/elasticon">Elastic{ON}</a>（弊社初のカンファレンス）で行われたセッションの
改良版といったところでしょうか。
話の中で登場した機能などのリンクをざっとアップしておきます。</p>

<ul>
<li><a href="http://www.elastic.co/guide/en/elasticsearch/guide/current/fielddata.html">Fielddata</a></li>
<li><a href="http://www.elastic.co/guide/en/elasticsearch/guide/current/doc-values.html">Doc Values</a></li>
<li><a href="http://www.elastic.co/guide/en/elasticsearch/resiliency/current/index.html">Resiliency Status</a></li>
</ul>


<h2>Kibana4: What&rsquo;s New ? / Nathan Zamecnik</h2>

<p>スライド：未定</p>

<p>Kibana4の紹介をデモを交えてという感じでした。
こちらは、スライドよりもデモを見てもらうのが一番いいのですが。。。</p>

<p>いくつかQAがあったので補足を。ちなみに、Issueのラベルに実装される予定のバージョンが付与されてたりします。</p>

<ul>
<li>Q：グラフをPDFでエクスポートとかできますか？

<ul>
<li>A：4.3.0で実装される予定です。関連Issueはこちら。<a href="https://github.com/elastic/kibana/issues/509">https://github.com/elastic/kibana/issues/509</a></li>
</ul>
</li>
<li>Q：巨大な数値の場合にKB、MBなどといった表示は可能ですか？

<ul>
<li>A：4.1.0で実装される予定です。関連Issueはこちら。<a href="https://github.com/elastic/kibana/issues/1543">https://github.com/elastic/kibana/issues/1543</a></li>
</ul>
</li>
<li>Q：地図のズームを固定することはできますか？

<ul>
<li>A：4.1.0で実装される予定です。関連Issueはこちら。<a href="https://github.com/elastic/kibana/issues/1442">https://github.com/elastic/kibana/issues/1442</a></li>
</ul>
</li>
</ul>


<h2>その他、感想などのブログ</h2>

<ul>
<li><a href="http://suzuki.tdiary.net/20150415.html#p01">[Elasticsearch] 第9回 Elasticsearch 勉強会へ参加してきた</a></li>
</ul>


<h2>まとめ</h2>

<p>今回は特別バージョンでした。かなり詳しい話だったので面白かったと思います。
Kibanaはデモを見ていただけましたし。また、海外から人を呼べるといいなぁ。</p>

<p>次回は6月ごろをめどに計画しようかと。
スピーカーは随時募集中ですので、コメント、メール、ツイートなど、コンタクトしていただければと思います。 よろしくお願いいたします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elasticsearch 1.5.1リリース（日本語訳）]]></title>
    <link href="http://blog.johtani.info/blog/2015/04/13/elasticsearch-1-5-1-released-ja/"/>
    <updated>2015-04-13T11:34:31+09:00</updated>
    <id>http://blog.johtani.info/blog/2015/04/13/elasticsearch-1-5-1-released-ja</id>
    <content type="html"><![CDATA[<p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>

<p>原文：<a href="https://www.elastic.co/blog/elasticsearch-1-5-1-released">Elasticsearch 1.5.1 Released</a></p>

<p>本日（4/9）、<strong>Lucene 4.10.4</strong>ベースの<strong>Elasticsearch 1.5.1</strong> をリリースしました。
このリリースはElasticsearchの最新の安定バージョンとなります。</p>

<p>すべての変更については<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-5-1">download Elasticsearch 1.5.1 here</a>をごらんください。</p>

<!-- more -->


<p>本リリースはシャードを新しいノードに配置するスピードを改善するためのバグフィックスを含んでいます。
シャードのリカバリーの最初のフェーズで、コピー元のノードからコピー先のノードへすべてのセグメントをコピーします。
このフェーズ中には登録、更新削除のリクエストはトランザクションログに記録され、リカバリが終了したあとに
コピー先のノードでトランザクションログが再生されます。
シャードが大きい場合、トランザクションログに多数のイベントがたまってしまいます。</p>

<p>以前では、新しいセグメントのマージはリカバリ中のコピー先のノードでは、実行できませんでした。
大きなトランザクションログは結果として、小さな新しいセグメントを多く生成し、リカバリのスピードに非常に影響を与えます。
Issue <a href="https://github.com/elastic/elasticsearch/pull/10463">#10463</a>は
リカバリ中のコピー先のシャードのマージを可能にする変更です。</p>

<p>その他の注目すべきバグフィックスは次のものになります。</p>

<ul>
<li>多くの削除によりバージョンマップがいっぱいになった場合にrefreshを実行するように変更(<a href="https://github.com/elastic/elasticsearch/pull/10312">#10312</a>)</li>
<li>多数のスナップショットを含んだリポジトリの管理の改善(<a href="https://github.com/elastic/elasticsearch/pull/10366">#10366</a>)</li>
<li>実験的な機能である<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-inner-hits.html">inner hits</a>のバグフィックス(<a href="https://github.com/elastic/elasticsearch/pull/10388">#10388</a>, <a href="https://github.com/elastic/elasticsearch/pull/10353">#10353</a>, <a href="https://github.com/elastic/elasticsearch/pull/10309">#10309</a>, <a href="https://github.com/elastic/elasticsearch/pull/10235">#10235</a>)</li>
</ul>


<p>最後に、<a href="https://www.elastic.co/blog/deprecating_rivers">Riverが非推奨となりました</a>、まだ見ていない場合は記事をご覧ください。</p>

<p>ぜひ、<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-5-1">Elasticsearch 1.5.1</a>をダウンロードして、試してみてください。
そして、感想をTwitter(<a href="https://twitter.com/elastic">@elastic</a>)などで教えて下さい。
また、問題がありましたら、<a href="https://github.com/elastic/elasticsearch/issues">GitHub issues page</a>で報告をお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elasticsearch勉強会 in 名古屋を開催しました。#elasticsearch #elasticsearchjp]]></title>
    <link href="http://blog.johtani.info/blog/2015/04/04/elasticsearch-study-session-at-nagoya/"/>
    <updated>2015-04-04T09:47:19+09:00</updated>
    <id>http://blog.johtani.info/blog/2015/04/04/elasticsearch-study-session-at-nagoya</id>
    <content type="html"><![CDATA[<p><a href="https://elasticsearch.doorkeeper.jp/events/21984">Elasticsearch勉強会 in 名古屋</a>を開催しました。
初の東京以外での勉強会です。
企画、セッションなどお手伝いいただいた<a href="https://twitter.com/smogami">@smogami</a>さん、<a href="https://twitter.com/mzp">@mzp</a>さんありがとうございました！</p>

<p><img src="/images/entries/20150406/nagoya.jpg" width="500"></p>

<!-- more -->


<h2>Elasticsearch/ELK stack紹介 @johtani</h2>

<p>スライド：<a href="https://speakerdeck.com/johtani/introduction-elasticsearch-and-elk-elasticsearchmian-qiang-hui-in-nagoya">Introduction Elasticsearch</a></p>

<p>初回（次回があるかはわかりませんが。。。）ということもあり、Elasticsearchの説明を行いました。
あと、LogstashとKibanaも。
Kibanaについては、手元の環境でいつものアクセスログのデモやなどを行いました。
また、LTの後に時間があったので、前回の勉強会で利用したチェックリストの説明なども。</p>

<h2>スタンドファームにおけるElasticsearch導入事例 <a href="https://twitter.com/mzp">@mzp</a> さん</h2>

<p>スライド：後日アップ？</p>

<ul>
<li>使ってるのはKibana3</li>
<li>アクセスログが保存されてたけど、活用できてなかった。</li>
<li>Fluentd、Elasticsearch、Kibanaをいれて、可視化してみた。</li>
<li>普通にログ検索が簡単にできて嬉しい</li>
<li>システムのレスポンスの性能値などを可視化できるようにして性能改善中</li>
</ul>


<h2>Kibanaでログ分析を1年続けてみたら業務システムの保守と運用が捗った(仮) <a href="https://twitter.com/smogami">@smogami</a> さん</h2>

<p>スライド：「<a href="https://speakerdeck.com/exoego/how-and-why-i-have-been-leveraging-kibana-for-devops">Kibanaでログ分析を1年続けてみたら業務システムの保守と運用が捗った</a>」</p>

<ul>
<li>名古屋でJavaの勉強会を主催してみたり（最近できてないけど）</li>
<li>導入するのになかなか大変だった（ファイアウォールだったりが）。。。</li>
</ul>


<p>Kibanaを使ってどんなことをしてるのか？</p>

<ul>
<li>既存システムなどの機能の実行回数やレスポンス時間の推移</li>
<li>曜日ごとにもチェック</li>
<li>どの機能がよく使われるのか？</li>
<li>対象となっているシステムはJavaのシステム。</li>
</ul>


<p>QA</p>

<ul>
<li>Q：ログの出力は新規に追加したのか？

<ul>
<li>A : ログの出力自体はLog4Jの設定を変更しただけ。もともと、各メソッドの開始と終了にそれぞれ時間が出力される仕組みがある。<br/>
ログの読み込み自体は自作ツールを利用。</li>
</ul>
</li>
</ul>


<h2>飛び込みLT <a href="https://twitter.com/dabits">@dabits</a> さん</h2>

<p>スライド：未定</p>

<p>Kibanaの使い道</p>

<ul>
<li>KPIツール</li>
<li>エゴサーチツール - Twitterや2chなどのデータを解析ソーシャル分析みたいな感じ？</li>
<li>ダッシュボードを用意してあげる場合もあるが、触っていろんな機能を試す人も。</li>
</ul>


<h2>感想・反省点など</h2>

<p>30名弱の方に参加していただきました。ありがとうございました。
東京の勉強会でもそうですが、半分くらいが検索、半分くらいがログ解析関連に興味がある感じでした。
飛び込みLTもしていただけましたし。会場内限定の話もいくつか。</p>

<h4>場所</h4>

<p>場所が少しわかりにくかったかなと。。。建物の入り口に看板がないので、1名に看板役として立っていただきました。
ただ、設備は充実していましたし、室内も綺麗でよかったです。</p>

<p><img src="/images/entries/20150406/seminar_room.jpg" width="300"></p>

<h4>懇親会</h4>

<p>11名（+私）でした。美味しい手羽先などをいただきながら、Elasticsearch以外のことでも盛り上がりましたw。
また、名古屋の観光名所なども教えてもらったりと有意義な時間でしたw。</p>

<p>ということで、少しでもElasticsearch、Kibana、Logstashなどのユーザが増えてくれればうれしいかなと。
私抜きでも勉強会はできると思うので、今後も開いてもらえるとうれしいかぎりです。
初めての東京以外での勉強会でどんな感じの方が利用しているのか、興味があるのかといったことも知ることができました。</p>

<h2>関連ブログなど</h2>

<ul>
<li><a href="http://blog.exoego.net/2015/04/kibana4-use-case.html">Kibana4活用事例を話しました</a></li>
</ul>


<h2>その他（余談）</h2>

<p>コンパルという喫茶店のアイスコーヒー。ちょっと新鮮な体験でした。
<img src="/images/entries/20150406/ice_coffee.jpg" width="300"></p>

<p>あとは、日曜日に観光場所として教えてもらった、<a href="http://www.tcmit.org/">トヨタ産業技術記念館</a>にも行ってみました。
一人だったけど、非常に楽しめました。実演とかあって、わかりやすいし。
トヨタが自動織機の会社が始まりだってのは知らなかった。</p>
]]></content>
  </entry>
  
</feed>
