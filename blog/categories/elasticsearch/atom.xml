<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: elasticsearch | @johtaniの日記 2nd]]></title>
  <link href="http://blog.johtani.info/blog/categories/elasticsearch/atom.xml" rel="self"/>
  <link href="http://blog.johtani.info/"/>
  <updated>2017-09-21T11:00:06+09:00</updated>
  <id>http://blog.johtani.info/</id>
  <author>
    <name><![CDATA[johtani]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[データ分析基盤構築入門 を一部執筆しました。]]></title>
    <link href="http://blog.johtani.info/blog/2017/09/21/release-intro-logging-analysis-system/"/>
    <updated>2017-09-21T10:02:30+09:00</updated>
    <id>http://blog.johtani.info/blog/2017/09/21/release-intro-logging-analysis-system</id>
    <content type="html"><![CDATA[<p>久々に執筆しました。といっても、<a href="http://blog.johtani.info/blog/2014/08/04/release-magazine-book-of-log-aggs-and-viz/">以前の書籍</a>の更新版です。
まぁ、更新版といっても、私以外の方々は結構な量を書き直しor新規書き起こしされてますが。。。</p>

<p>ということで、みなさん「買って」から感想をいただけるとうれしいです！（以下の画像でAmazonにジャンプできます！Kindle版も発売中です。）</p>

<p><a target="_blank"  href="https://www.amazon.co.jp/gp/product/477419218X/ref=as_li_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=477419218X&linkCode=as2&tag=johtani-22&linkId=f7cbe8130343ea340b18b53eba20d4b7"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&MarketPlace=JP&ASIN=477419218X&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL250_&tag=johtani-22" ></a><img src="//ir-jp.amazon-adsystem.com/e/ir?t=johtani-22&l=am2&o=9&a=477419218X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<!-- more -->


<p>今回もElasticsearchの章を担当しました。
5.4ベースで書きましたが、ちょっとずつ6でどう変わるかなども記載してあります。
また、付録ではLogstashやBeatsにもちょっと触れています。
また、自分が一番好きなKibanaの機能であるDev ToolsのConsoleについても記載してあります。こちらも合わせて目を通していただければと。</p>

<p>みなさんのフィードバック（ツイート、ブログ、Amazonのコメントなどなど）をお待ちしております！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2016年のElastic Stack]]></title>
    <link href="http://blog.johtani.info/blog/2016/12/25/elasticsearch-6-features/"/>
    <updated>2016-12-25T00:03:50+09:00</updated>
    <id>http://blog.johtani.info/blog/2016/12/25/elasticsearch-6-features</id>
    <content type="html"><![CDATA[<p>Merry Christmas!
<a href="http://qiita.com/advent-calendar/2016/elastic">Elastic stack Advent Calendar 2016</a> 最終日の記事になります。</p>

<p>簡単に今年の変遷を振り返ってみます。</p>

<!-- more -->


<h2>Elasticsearch 2.2 (2月)</h2>

<ul>
<li><a href="https://www.elastic.co/jp/blog/elasticsearch-2-2-0-and-2-1-2-and-1-7-5-released">Elasticsearch 2.2.0、2.1.2、1.7.5リリース</a></li>
</ul>


<p>クエリプロファイラやGeo系の性能改善などが取り込まれました。
また、同時期にリリースされたKibana 4.4ではColor pickerやShare用のURLの短縮化機能なども追加されました。</p>

<h2>第2回目のユーザカンファレンス、Elastic{ON}開催（2月）</h2>

<p>サンフランシスコで、弊社第2回目のカンファレンスが開催されました。
2015年の会場よりも大きくなり、多数の方に参加いただきました。
ここで、以下の発表がありました。</p>

<h3>Elastic StackとX-Packの紹介</h3>

<p>これまで、ELK stackと呼ばれて意味明日が、Beatsチームの参加により、ELKだけではなくなったこともあり、Elastic Stackと呼び名を変える事になりました。
また、Marvel、Shield、Watcherなどの商用の拡張機能についても、
単体の名称ではなく、X（Extension）-Packと1つの名前になる事に。
詳細については<a href="https://www.elastic.co/jp/blog/heya-elastic-stack-and-x-pack">公式のブログ</a>をご覧ください。</p>

<h3>Elastic CloudとElastic Cloud Enterpriseの発表</h3>

<p>2015年にElasticにジョインし、
これまでFound.no（Found）と呼ばれていた弊社のElasticsearch as a Serviceが<a href="https://www.elastic.co/jp/blog/introducing-elastic-cloud-and-elastic-cloud-enterprise">Elastic Cloudと名称変更</a>しました。
また、Elastic Cloudで培っているノウハウを詰め込んだElastic Cloud Enterpriseも発表しました。実際に利用可能になるまでには
まだもう少しかかってしまいますが、アルファ版が公開されていますので、興味のある方は触ってみてください。</p>

<p>Elastic{ON}2016で撮影された、<a href="https://www.elastic.co/blog/life-without-elasticsearch-elasticon16">「Elasticsearchがないあなたの人生はどうなりますか？」</a> といった面白い動画も公開されています。</p>

<h2>Elasticsearch 2.3リリース（3月）</h2>

<ul>
<li><a href="https://www.elastic.co/jp/blog/elasticsearch-2-3-0-and-2-2-2-released">Elasticsearch 2.3.0および2.2.2をリリース</a></li>
</ul>


<p>Reindex APIが登場し、Mappingの変更やShard数の変更など、色々とデータの更新などがやりやすくなりました。
また、Task Managementの機能も追加され、長時間かかる処理を間違った場合などの対処が楽になりました。
個人的には、Deprecation Loggingの機能が導入されたことが嬉しいこととなります。次期メジャーバージョンで廃止される機能についてログに出力されるようになりました。
実際に運用されているアプリで利用している機能が今後なくなるかどうかをログを見るとわかるという仕組みです。</p>

<h2>Rally登場（4月）</h2>

<ul>
<li><a href="https://www.elastic.co/jp/blog/announcing-rally-benchmarking-for-elasticsearch">Rally登場：Elasticsearchのベンチマークツール</a></li>
</ul>


<p>Elasticsearchのベンチマークツールがリリースされました。
定期的にElasticsearchの性能を計測することは問題点を見つける事に役に立ちます。そういった手助けをしてくれるツールが公開されることは非常に便利なことかと。</p>

<h2>Elastic Stack 5 alpha1 リリース（4月）</h2>

<ul>
<li><a href="https://www.elastic.co/jp/blog/elastic-stack-release-5-0-0-alpha-1">Elastic Stack 5.0.0 alpha 1 リリース</a></li>
</ul>


<p>Ingest NodeやLucene 6、新しいKibanaのUIなど多くのものが詰まっていました。ここから多くのユーザにテストしてもらい、5.0の正式リリースを迎えることができました。</p>

<h2>Elasticsearch 2.4.0リリース（8月）</h2>

<ul>
<li><a href="https://www.elastic.co/jp/blog/release-bonanza-elasticsearch-graph-shield-watcher-marvel-reporting-logstash-2-4-beats-1-3-and-kibana-4-6-are-now-available"></a></li>
</ul>


<p>2.xの最後のマイナーバージョンリリースです。
Reportingなどの追加とドットつきフィールド名の復活がありました。</p>

<h2>Elastic Stack 5.0.0 beta1 リリース（9月）</h2>

<ul>
<li><a href="https://www.elastic.co/jp/blog/elastic-stack-release-5-0-0-beta1">Elastic Stack Release - 5.0.0-beta1</a></li>
</ul>


<p>ついにベータです。Painlessがスクリプトのデフォルトになったり、TimelionがKibanaに取り込まれるなど、正式リリースまであと少し！</p>

<h2>Prelertチームジョイン（9月）</h2>

<ul>
<li><a href="https://www.elastic.co/blog/welcome-prelert-to-the-elastic-team">Welcome Prelert to the Elastic Team</a></li>
</ul>


<p>Machine Learningエンジンを開発し、Elasticsearch,Kibanaとの組み合わせの製品をリリースしていたPrelertという会社がジョインしました。
Elasticsearchに保存された多くのデータをより活用していただくことができるかと思います。
Elastic{ON} Tour 2016 Tokyoで弊社SAの大輪の発表も人気があるものでした。まだベータ段階ですが、利用して見ることも可能です。
ビデオなどが公開されたらまたツイートしようと思います。</p>

<h2>Elastic{ON} Tour Tokyo 2016開催（12月）</h2>

<p>今年で2回目のTokyoローカルの1日イベントでした。
ブログは「まだ」書いてませんが、、、今回も盛りだくさんのイベントになりました。
早朝のトレーニング（ハンズオンではない）にも80名近くの方に参加していただけましたし、私はKibanaのキーノート＋デモという大役をもらいましたし、ちょっと大変でした。
今年もAMA（Ask Me Anything）ブースが大盛況でした。
色々な方から、弊社のサポート、開発者が色々な質問を受け、それに答えるという形です。楽しんでいただけたかと思います。
来年もぜひ開催したいなと思っています。</p>

<p>また、<a href="https://www.elastic.co/blog/first-wave-of-elasticon-17-sessions-revealed">Elastic{ON}17のセッションも</a>いくつか発表されています。
ぜひ、サンフランシスコで行われる本場のカンファレンスにもご参加ください！</p>

<h2>来年は？</h2>

<p>1月後半か2月に<a href="https://www.meetup.com/ja-JP/Tokyo-Elastic-Fantastics/">Elasticsearch勉強会</a>を検討しようと思っています。スピーカーに興味のある方は連絡いただければと。</p>

<p>会社としては、<a href="https://www.elastic.co/elasticon/conf/2017/sf">Elastic{ON}2017</a>が3月にまた開催されます。これで3回目となります。もちろん私も参加予定なので、参加される方は、現地で会いましょう！</p>

<p>そのほかにも<a href="http://www.bigdatacon.jp/ja/">BIG DATA ANALYTICS TOKYO</a>やオープンソースカンファレンス（<a href="http://www.ospn.jp/osc2017-osaka/">大阪</a>）、<a href="http://event.shoeisha.jp/devsumi/20170216/">デブサミ</a>といったカンファレンスに参加（登壇・ブースなど）予定です。
参加される方は、ぜひブースまでお越しください。</p>

<p>では、また来年のAdvent Calendarでお会いしましょう！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elasticsearch 5.0の便利機能紹介？]]></title>
    <link href="http://blog.johtani.info/blog/2016/12/01/elasticsearch-5-dot-0-highlight/"/>
    <updated>2016-12-01T17:34:30+09:00</updated>
    <id>http://blog.johtani.info/blog/2016/12/01/elasticsearch-5-dot-0-highlight</id>
    <content type="html"><![CDATA[<p>Elastic stack Advent Calendar 1日目の記事になります。</p>

<p><a href="https://www.elastic.co/jp/blog/elasticsearch-5-0-0-released">Elasticsearch 5.0</a>が10月末にリリースされました。
リリースのブログでいくつか紹介されているのですが、そこでは紹介されていない機能について2、3紹介しようと思います。</p>

<!-- more -->


<p>その前に、5.0、あれ？その前は2.xじゃなかったっけ？？と困惑されている方もいるかと思うので、簡単に5となった経緯の紹介をしようかと。</p>

<h3>バージョン番号</h3>

<p>なぜ2から5に飛んだのかという話ですが、このスライドがその紹介になっています。</p>

<p><a href="https://speakerdeck.com/johtani/elastic-stack-5-dot-0-alpha1-alpha5?slide=5">https://speakerdeck.com/johtani/elastic-stack-5-dot-0-alpha1-alpha5?slide=5</a></p>

<p><a href="https://www.elastic.co/elasticon/conf/2016/sf/opening-keynote">Elastic{ON} 2016のキーノート</a>でも紹介がありましたが、KibanaやLogstashとElasticsearchを組み合わせて使うときにバージョンのミスマッチで動かないというユーザの声が上がっていました。
2.xのリリースから、同じ日にKibana、Logstash、Beatsもリリースするようになったのですが、
やはり、バージョン番号が異なるため、ミスマッチで動かないというユーザが時々いました。</p>

<p>Elastic Stackという名称にもなったため、バージョン番号をそろえようという事になり、
Elasticsearch、Kibana、Logstash、Beats全てが5.0.0としてリリースされ、
今後は同じバージョン番号になります。</p>

<p>ちなみに、「5」になった理由はKibanaのメジャーバージョンが「4」だったためです。</p>

<p>さて、では、いくつか機能の紹介を。</p>

<h3>Reindex from remote cluster</h3>

<p>Reindexが2.3から導入されました。データの再登録ができるようになり、マッピングの変更や
Shardの数の変更などが柔軟に行えるようになりました。
便利でしたが、あくまでも同一のクラスタでデータを登録し直す形でした。</p>

<p>5.0からはこの機能に加えて、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html#reindex-from-remote">異なるクラスタからデータを取得してReindex</a>を行うことができるようになりました。
こんな形になります。</p>

<pre><code>POST _reindex
{
  "source": {
    "remote": {
      "host": "http://otherhost:9200",
      "username": "user",
      "password": "pass"
    },
    "index": "source",
    "query": {
      "match": {
        "test": "data"
      }
    }
  },
  "dest": {
    "index": "dest"
  }
}
</code></pre>

<p><code>username</code>と<code>password</code>はリモートのクラスタに認証の気候が存在する場合に利用できるオプションです。
また、ReindexのAPIはクエリを使用して、必要なデータだけを取得することが可能です。
この機能により、1.xや2.xのクラスタからデータを移行することが可能になります。</p>

<h3>Custom analyzer test using Analyze API</h3>

<p>もう一つ、ちょっとだけ便利な機能を紹介します。
独自にAnalyzerを定義（TokenizerとToken Filterなどを個別に設定）して、その挙動を確認するとき、2.xまでは、インデックスを作成してそのインデックスに対して<code>_analyze</code> APIを呼び出す必要がありました。</p>

<p>5.xからは<code>_analyze</code> APIの読み出しのパラメータで指定できるようになりました。
こんな感じです。ここでは、<code>lowercase</code>フィルタのあとに、<code>{...}</code>で<code>stop</code>フィルタを
パラメータの中で、指定しています。</p>

<pre><code>curl -XGET 'localhost:9200/_analyze' -d '
{
  "tokenizer" : "whitespace",
  "filter" : ["lowercase", {"type": "stop", "stopwords": ["a", "is", "this"]}],
  "text" : "this is a test"
}'
</code></pre>

<p>ちょっとだけですが、Analyzerなどを試すのが楽になるのではないでしょうか？</p>

<p>ということで、以上が1日目の記事でした。
Logstashなど、他の5.0.0に関する記事もAdvent Calendarに空きがあるようなので、個別にかこうかなと思います。お楽しみに！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lucene Kuromoji for NEologdで指定した品詞の単語を抜き出すIngest Pluginを書いてみた #elasticsearchjp]]></title>
    <link href="http://blog.johtani.info/blog/2016/07/22/making-ingest-processor-plugin-with-cookiecutter/"/>
    <updated>2016-07-22T13:26:56+09:00</updated>
    <id>http://blog.johtani.info/blog/2016/07/22/making-ingest-processor-plugin-with-cookiecutter</id>
    <content type="html"><![CDATA[<p>久しぶりに、技術的なブログ書いてます。</p>

<p>Ingest Processorのプラグインを作ってみたくなったので、書いてみました。
ただ書いてみるんじゃ3番煎じになりそうなので、<a href="https://cookiecutter.readthedocs.io/en/latest/readme.html">cookiecutter</a>を使ってみました。</p>

<!-- more -->


<p>と言っても、同僚のAlexが<a href="https://discuss.elastic.co/t/cookiecutter-template-for-writing-ingest-processors/52985">cookiecutter-elasticsearch-ingest-processor</a>と言うテンプレートを作ってくれているのを使っただけですが。（<a href="https://discuss.elastic.co">https://discuss.elastic.co</a> に投稿された記事で、使い方がアニメgifで説明されててわかりやすいです）</p>

<p><a href="https://cookiecutter.readthedocs.io/en/latest/readme.html">cookiecutter</a>とは、コマンドラインで質問に答えると、テンプレートからプロジェクトが生成できるツールです。
Elasticでは、カスタムBeatを作る時に利用する例がいつかの日本語ブログや発表資料で話題になっていました。
これのIngest Processorのプラグインバージョンです。</p>

<p>今回は、NEologdも使ってみたかったので、Lucene Kuromoji for NEologdを利用して
指定した品詞の単語だけを抽出するProcessorを作ってみました。</p>

<p>GitHubのプロジェクト：<a href="https://github.com/johtani/elasticsearch-ingest-kuromoji-pos-extract">https://github.com/johtani/elasticsearch-ingest-kuromoji-pos-extract</a></p>

<h3>Cookiecutterの使い方</h3>

<p><a href="https://cookiecutter.readthedocs.io/en/latest/readme.html">Cookiecutterのインストールはサイト</a>をご覧ください。</p>

<pre><code>cookiecutter gh:spinscale/cookiecutter-elasticsearch-ingest-processor
</code></pre>

<p>あとは、出てくる以下の項目を指定するだけです。</p>

<ul>
<li><code>processor_type</code> : Ingest Processorのタイプ名です。<code>kuromoji_part_of_speech_extract</code>としました。（Alexのだと<code>_</code>を使うとちょっと問題があるので後述）</li>
<li><code>description</code> : readme.mdに利用されます。</li>
<li><code>developer_name</code> : 名前を記載。Javaのファイルのヘッダに利用</li>
<li><code>elasticsearch_version</code> : デフォルトで<code>5.0.0-alpha4</code>が指定されているので、特に指定せず</li>
</ul>


<p>以上の質問に答えたら、プロジェクトのディレクトリ構造が出来上がってます。
プロジェクトのビルドなどにはGradleを利用します。</p>

<h3>プロジェクトのIntelliJ IDEA用のファイルを生成</h3>

<p>build.gradleファイルでGradleのideaプラグインがapplyされているので、以下のコマンドを叩けばIntelliJ IDEAのプロジェクトファイル（？）が生成され、IntelliJで開けばすぐに開発ができる状態にできます。</p>

<pre><code>gradle idea
</code></pre>

<h3>コーディング</h3>

<p>あとは、必要処理をコーディングします。
実際にコーディングするクラスは<code>org.elasticsearch.plugin.ingest.kuromoji_part_of_speech_extract</code>のパッケージにある以下の2つです。（パッケージ名にはprocessor_typeの名前が指定されている）</p>

<ul>
<li>IngestKuromojiPartOfSpeechExtractPlugin</li>
<li>KuromojiPartOfSpeechExtractProcessor</li>
</ul>


<h4>IngestKuromojiPartOfSpeechExtractPlugin</h4>

<p>Pluginというクラスは、プラグインをNodeのModuleとして登録する処理を書くクラスとなります。
生成してすぐは、次のような形になっています。（※importやクラス定義の部分は省略しています。）</p>

<pre><code class="Java">...
    public static final Setting&lt;String&gt; YOUR_SETTING =
            new Setting&lt;&gt;("ingest.kuromoji_part_of_speech_extract.setting", "foo", (value) -&gt; value, Setting.Property.NodeScope);

    @Override
    public List&lt;Setting&lt;?&gt;&gt; getSettings() {
        return Arrays.asList(YOUR_SETTING);
    }

    public void onModule(NodeModule nodeModule) throws IOException {
        nodeModule.registerProcessor(KuromojiPartOfSpeechExtractProcessor.TYPE,
                (registry) -&gt; new KuromojiPartOfSpeechExtractProcessor.Factory());
    }
...
</code></pre>

<p><code>YOUR_SETTING</code>プロパティと<code>getSettings()</code>メソッドは<code>elasticsearch.yml</code>で指定したい設定を記述する場合の例になります。今回は特に必要ないので両方削除しました。
最終系は<a href="https://github.com/johtani/elasticsearch-ingest-kuromoji-pos-extract">GitHubのコード</a>をご覧ください。</p>

<h4>KuromojiPartOfSpeechExtractProcessor</h4>

<p>Processorは実際にIngest Nodeで行う処理を書くところです。</p>

<pre><code class="Java">
    public static final String TYPE = "kuromoji_part_of_speech_extract";

    private final String field;
    private final String targetField;

    public KuromojiPartOfSpeechExtractProcessor(String tag, String field, String targetField) throws IOException {
        super(tag);
        this.field = field;
        this.targetField = targetField;
    }

    @Override
    public void execute(IngestDocument ingestDocument) throws Exception {
        String content = ingestDocument.getFieldValue(field, String.class);
        // TODO implement me!
        ingestDocument.setFieldValue(targetField, content);
    }

    @Override
    public String getType() {
        return TYPE;
    }

    public static final class Factory extends AbstractProcessorFactory&lt;KuromojiPartOfSpeechExtractProcessor&gt; {

        @Override
        public KuromojiPartOfSpeechExtractProcessor doCreate(String processorTag, Map&lt;String, Object&gt; config) throws Exception {
            String field = readStringProperty(TYPE, processorTag, config, "field");
            String targetField = readStringProperty(TYPE, processorTag, config, "target_field", "default_field_name");

            return new KuromojiPartOfSpeechExtractProcessor(processorTag, field, targetField);
        }
    }
</code></pre>

<p><code>TYPE</code>が<a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/put-pipeline-api.html">Ingest APIのPipelineでProcessorを指定するときに使う名前</a>になります。ここは、cookiecutterの時にprocessor_typeに入力した文字列になっています。
<code>kuromoji_part_of_speech_extract</code>だと長いので、<code>kuromoji_pos_extract</code>に変えました。</p>

<p><code>execute()</code>メソッドに<code>// TODO implement me!</code>とあります。
この部分に実際の処理を記述していきます。</p>

<p>あとは、<code>Factory</code>クラスでIngest APIで指定された設定項目を読み込みます。
今回作成した<code>elasticsearch-ingest-kuromoji-pos-extract</code>では品詞を指定する必要があるので、<code>pos_tags</code>を指定できるように処理を追加しました。</p>

<p>私が実装したものの説明をするとちょっと長くなりそうなので、<a href="https://github.com/johtani/elasticsearch-ingest-kuromoji-pos-extract">GitHubのコード</a>をご覧ください。</p>

<h3>テストのコーディング</h3>

<p>テストのクラスもテンプレートで生成されています。</p>

<ul>
<li>KuromojiPartOfSpeechExtractProcessorTests</li>
<li>KuromojiPartOfSpeechExtractRestIT</li>
</ul>


<h4>KuromojiPartOfSpeechExtractProcessorTests</h4>

<p>Processorクラスのテストになります。生成直後は次のような感じです。</p>

<pre><code class="Java">public void testThatProcessorWorks() throws Exception {
    Map&lt;String, Object&gt; document = new HashMap&lt;&gt;();
    document.put("source_field", "fancy source field content");
    IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document);

    KuromojiPartOfSpeechExtractProcessor processor = new KuromojiPartOfSpeechExtractProcessor(randomAsciiOfLength(10), "source_field", "target_field");
    processor.execute(ingestDocument);
    Map&lt;String, Object&gt; data = ingestDocument.getSourceAndMetadata();

    assertThat(data, hasKey("target_field"));
    assertThat(data.get("target_field"), is("fancy source field content"));
    // TODO add fancy assertions here
}
</code></pre>

<p>テストメソッドも実装されていますが、パラメータの追加の設定処理やアサーションが書かれてません。
実装に合わせて、アサーションや設定処理を追加しましょう。</p>

<h4>KuromojiPartOfSpeechExtractRestIT</h4>

<p>こちらはIntegration Testになります。
実際にElasticsearchに対して外部からAPIを叩くような感じです。
APIを叩くときに利用するJSONの設定やアサーションは<code>src/test/resources</code>にyamlファイルがあります。</p>

<ul>
<li>10_basic.yaml</li>
<li>20_kuromoji_part_of_speech_extract_processor.yaml</li>
</ul>


<p><code>10_basic.yaml</code>はプラグインがインストールされているかの確認のテストです。特に変更する必要はないです。</p>

<p><code>20_kuromoji_part_of_speech_extract_processor.yaml</code>は実際にコーディングしたProcessorが動くかどうかのテストです。</p>

<p>テストの内容については、<a href="https://github.com/johtani/elasticsearch-ingest-kuromoji-pos-extract">GitHubのコード</a>をご覧ください。</p>

<h3>テストの実行とZipの生成</h3>

<p>テストの実行とZipの生成は次のコマンドを実行すればOKです。</p>

<pre><code>gradle check
</code></pre>

<p>テストに問題があった場合は、コケますし、問題なければ<code>SUCCESS</code>と表示が出ます。
成功した場合は<code>build/distributions/</code>というディレクトリにzipファイルができています。
これをElasticsearchのpluginコマンドでインストールすれば動きます。</p>

<pre><code>bin/plugin install file:///path/to/elasticsearch-ingest-kuromoji-pos-extract/build/distribution/ingest-kuromoji_part_of_speech_extract-0.0.1-SNAPSHOT.zip
</code></pre>

<h3>kuromoji_pos_extractの利用方法</h3>

<p>Ingest APIには便利な<a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/simulate-pipeline-api.html">Simulate Pipeline API</a>があります。</p>

<p>ということで、<a href="https://github.com/neologd/mecab-ipadic-neologd/blob/master/README.ja.md">mecab-ipadic-NEologd</a>にあったサンプルの文章を使って、使い方の説明です。</p>

<pre><code class="JSON">POST _ingest/pipeline/_simulate
{
  "pipeline" : {
    "description" : "kuromoji neologd extract test",
    "processors" : [
      {
        "kuromoji_pos_extract" : {
        "field" : "body",
        "target_field" : "noun_field",
        "pos_tags" : [
          "名詞-固有名詞-組織",
          "名詞-固有名詞-一般",
          "名詞-固有名詞-人名-一般",
          "名詞-固有名詞-地域-一般",
          "名詞-固有名詞-地域-国"
          ]
        }
      }
      ]
  },
  "docs" : [
    {
      "_index": "index",
      "_type": "type",
      "_id": "id",
      "_source": {
        "body" : "10日放送の「中居正広のミになる図書館」（テレビ朝日系）で、SMAPの中居正広が、篠原信一の過去の勘違いを明かす一幕があった。"
      }
    }
    ]
}
</code></pre>

<p>結果はこちら。</p>

<pre><code class="JSON">{
  "docs": [
    {
      "doc": {
        "_index": "index",
        "_id": "id",
        "_type": "type",
        "_source": {
          "noun_field": [
            "10日",
            "中居正広のミになる図書館",
            "テレビ朝日",
            "SMAP",
            "中居正広",
            "篠原信一"
          ],
          "body": "10日放送の「中居正広のミになる図書館」（テレビ朝日系）で、SMAPの中居正広が、篠原信一の過去の勘違いを明かす一幕があった。"
        },
        "_ingest": {
          "timestamp": "2016-07-22T06:18:49.007+0000"
        }
      }
    }
  ]
}
</code></pre>

<p><code>noun_field</code>に固有名詞の単語が抜き出せているのがわかるかと思います。</p>

<h3>Alexのテンプレートで困った点</h3>

<p>テンプレートは便利だったのですが、<code>processor_type</code>に<code>_</code>を使用したタイプ名を指定すると次のような問題（？）が発生しました。</p>

<ul>
<li>クラス名が<code>Kuromoji_part_of_speech_extractProcessor</code>となってしまう</li>
</ul>


<p>深刻な問題ではないのですが、JavaだとCamel Caseが普通なのでちょっと気になって。
ということで、<a href="https://github.com/spinscale/cookiecutter-elasticsearch-ingest-processor/pull/1">プルリク</a>作って出してみました。まだ取り込まれてないかな。</p>

<p>取り込み前に使いたい方は以下のコマンドを実行してください。
<code>processor_class_name</code>という項目が増えています。
デフォルトだと<code>processor_type</code>の<code>_</code>の部分を取り除きつつCamel Caseにしたものが入ります。</p>

<pre><code>cookiecutter gh:johtani/cookiecutter-elasticsearch-ingest-processor
</code></pre>

<h3>まとめ</h3>

<p>ということで、とりあえず作ってみましたというものになります。
特徴的な単語（固有名詞だけ）を抜き出して、別のフィールドにできるので、タグみたいなものをこれを使って前処理で作れるようになるかなぁと。</p>

<h2>参考ブログ（元ネタ？）</h2>

<p>インスパイア元となったブログです。</p>

<ul>
<li><a href="http://dev.classmethod.jp/server-side/elasticsearch/ingest-plugin-useragent/">User Agentを解析するIngest Pluginを書いてみた</a></li>
<li><a href="http://blog.cybozu.io/entry/2016/07/05/080000">Elasticsearch 5.0.0のIngest Node用プラグインを書いた話</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第16回Elasticsearch勉強会を開催しました。 #elasticsearchjp]]></title>
    <link href="http://blog.johtani.info/blog/2016/06/28/16th-elasticsearch-meetup/"/>
    <updated>2016-06-28T13:55:55+09:00</updated>
    <id>http://blog.johtani.info/blog/2016/06/28/16th-elasticsearch-meetup</id>
    <content type="html"><![CDATA[<p><a href="https://elasticsearch.doorkeeper.jp/events/46539">第16回Elasticsearch勉強会</a>を開催しました。
スタッフの皆さん、スピーカーの皆さん、会場提供していただいた<a href="http://recruit-tech.co.jp">リクルートテクノロジーズさん</a>、ありがとうございました！
今回は、司会だけに注力してみました（）。</p>

<!-- more -->


<h3>チェックイン数など</h3>

<ul>
<li>チェックインした人：141名</li>
<li>キャンセルしなかった人：67名</li>
</ul>


<p>でした。</p>

<p>今回は、参加希望者が多くて、当日にも100名近いキャンセル待ちの方がいたので、
240名まで、参加者枠を増枠（会場キャパ190名程度）して対応しました。
まぁ、読み通り、1/3の方はキャンセルしない形でした。
天気も良く電車の遅延などもなさそうだったので、ちょっとドキドキしてたのですが。</p>

<p>以下は簡単なメモです。</p>

<h2>「LogstashとElasticsearchで作るEnterprise Search Platform」/ Elastic Kosho Owa</h2>

<p>スライド：<a href="https://speakerdeck.com/kosho/enabling-enterprise-search-platform-with-elastic-stack">https://speakerdeck.com/kosho/enabling-enterprise-search-platform-with-elastic-stack</a></p>

<ul>
<li>使ってるLogstashの設定ファイルを elastic-japan at elastic dot co に送るとTシャツがもらえるらしい。</li>
<li>Logstashの<a href="https://github.com/logstash-plugins/logstash-filter-ruby/blob/master/lib/logstash/filters/ruby.rb">filter-ruby</a>はここで、evalしてcallしてるから、特にforkとかしてないかと。</li>
</ul>


<h2>「企業・業界情報プラットフォームSPEEDAにおけるElasticsearchの活用」 / 株式会社ユーザベース 北内 啓さん</h2>

<p>スライド：<a href="http://www.slideshare.net/tau3000/speedaelasticsearch-63510388">http://www.slideshare.net/tau3000/speedaelasticsearch-63510388</a></p>

<ul>
<li>アルゴリズム関連の開発担当</li>
<li>企業データをいろんな軸で検索したい

<ul>
<li>データ数が約70億レコードになりそう（通貨 x MySQL）</li>
</ul>
</li>
<li>300万企業データ＋Nestedとかで持ってる。

<ul>
<li>11万フィールド？？？</li>
<li>10台の物理サーバに24仮想マシン</li>
</ul>
</li>
<li>企業名の検索

<ul>
<li>recall重視</li>
</ul>
</li>
<li>NewsPicksの検索機能

<ul>
<li>「日本 化粧品 売上高」業界のデータとかも観れるのかな？有料会員向け機能</li>
<li>登録済みキーワードかどうかをRDB＋Esに検索して、ID化するっぽい

<ul>
<li>ID（Analyze必要ない）検索だから、termクエリだった、サンプルが。</li>
</ul>
</li>
</ul>
</li>
<li>ノードの役割分担

<ul>
<li>更新はMasterNode経由でDataNodeへ。</li>
<li>検索はClientNode経由でDataNodeへ。</li>
</ul>
</li>
<li>1.xかぁ。。。</li>
</ul>


<h2>「Elasticsearchベースの全文検索システムFess」 / 株式会社エヌツーエスエム 菅谷信介さん</h2>

<p>スライド：<a href="http://www.slideshare.net/shinsuke/elasticsearchfess">http://www.slideshare.net/shinsuke/elasticsearchfess</a></p>

<ul>
<li>10.xからSolrをやめてElasticsearchへ。</li>
<li>日本語検索

<ul>
<li>bigram＋形態素（1文字検索とかに対応するため）</li>
</ul>
</li>
<li>NeologDに対応したkuromojiを利用</li>
<li>DBFluteをESFluteとしてEs対応</li>
<li>KOPFを組み込んで使ってる</li>
<li>configをREST API経由で更新できるプラグインあり</li>
</ul>


<h2>LT</h2>

<h3>「ElasticsearchとGCPのネットワークでハマった話」 株式会社サイバーエージェント 平田大地 さん @daichild</h3>

<p>スライド：<a href="https://speakerdeck.com/daic_h/gcpfalsenetutowakudehamatutahua">https://speakerdeck.com/daic_h/gcpfalsenetutowakudehamatutahua</a></p>

<ul>
<li>hhkb2 2刀流！</li>
<li>networkのKeep-alive周りで困ったよというお話。</li>
<li>後で聞いたけど、<a href="https://www.elastic.co/guide/en/elasticsearch/plugins/current/cloud-gce.html">GCE Cloud Plugin</a>は使ってるそうです。</li>
</ul>


<p><strong>06/28 17:00追記</strong></p>

<ul>
<li>Pingを定期的に実行させることで回避も出来るようです。</li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.3/modules-transport.html#_tcp_transport">transport.ping_schedule</a>に時間を指定します。通常のNode（Transport以外）は&#8217;-1&#8217;が指定してあり、動作してません。</li>
</ul>


<h3>「スクリプトフィールドで作るランキングみたいな何か」iwag さん</h3>

<p>スライド：<a href="https://speakerdeck.com/iwag/elasticsearch-dezuo-rurankingu">https://speakerdeck.com/iwag/elasticsearch-dezuo-rurankingu</a></p>

<ul>
<li>1.xかぁ。。。</li>
<li>あとは、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html">function_score</a>とかも面白いですよ！</li>
</ul>


<h2>その他、感想などのブログ</h2>

<ul>
<li><a href="http://tsuyoshi-nakamura.hatenablog.com/entry/2016/06/28/115244">第16回elasticsearch勉強会に参加してきた</a></li>
<li><a href="https://masutaka.net/chalow/2016-06-28-1.html">第16回Elasticsearch勉強会に参加してきた </a></li>
</ul>


<h2>まとめ＋宣伝？</h2>

<p>1.xがまだまだいますねぇ、早く2.xにアップしましょう！（5.0ももう直ぐだし）。懇親会でも色々と話しましたが、<a href="https://discuss.elastic.co">https://discuss.elastic.co</a> というフォーラムあるので、ぜひ活用してください。</p>

<p>次回は8月末か9月頭かでしょうか。
<a href="http://www.ospn.jp/osc2016-kyoto/">7月末にOSC京都</a>に出没するので、京都で勉強会やりたいと思ってます！
会場とかスピーカーとか興味ある人連絡ください。</p>

<p>東京の勉強会のスピーカーも随時募集中ですので、連絡ください。</p>
]]></content>
  </entry>
  
</feed>
