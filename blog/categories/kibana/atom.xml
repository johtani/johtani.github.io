<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: kibana | @johtaniの日記 2nd]]></title>
  <link href="http://blog.johtani.info/blog/categories/kibana/atom.xml" rel="self"/>
  <link href="http://blog.johtani.info/"/>
  <updated>2018-04-20T18:44:40+09:00</updated>
  <id>http://blog.johtani.info/</id>
  <author>
    <name><![CDATA[johtani]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Analyze UIとKibanaのプラグインの作成方法（第3回）]]></title>
    <link href="http://blog.johtani.info/blog/2018/04/20/directory-layout-and-architecture/"/>
    <updated>2018-04-20T15:30:01+09:00</updated>
    <id>http://blog.johtani.info/blog/2018/04/20/directory-layout-and-architecture</id>
    <content type="html"><![CDATA[<p><a href="http://blog.johtani.info/blog/2018/02/09/getting-started-template-kibana-plugin/">第2回</a>から少し間が空いてしまいましたが、templateで作成したプラグインのディレクトリ構成とどういう流れでデータがやり取りされるかについてみていきます。
（2018/02月時点で作成したディレクトリ構成にしたがって説明します）
ちなみに、JavaScriptの優れた開発者ではないので、誤解している点や、効率の悪い書き方などがあるかもしれません。見つけた場合は、連絡をいただければと思います。</p>

<!-- more -->


<p>では、まずは作成したディレクトリ構成についてみていきましょう。</p>

<h2>ディレクトリ構成</h2>

<p><code>simple-sample-kibana-plugin</code>がプラグインのプロジェクトのトップディレクトリになります。このディレクトリに次のような構成でサブディレクトリが存在します(なお、画像はIntelliJに取り込んだ後のディレクトリになっているので、<code>.iml</code>など、不要なファイル/ディレクトリが存在しています)。</p>

<p><img src="/images/entries/20180420/directories.jpg" width="400"></p>

<p>主要なディレクトリ、ファイルについて簡単に一覧で説明します(順不同)。</p>

<table>
<thead>
<tr>
<th> ファイル/ディレクトリ名 </th>
<th> 説明 </th>
</tr>
</thead>
<tbody>
<tr>
<td> index.js </td>
<td> プラグインの本体。Kibanaはこのファイルのオブジェクトを読み込みプラグインを起動。設定などの読み込みもこちら。 </td>
</tr>
<tr>
<td> package.json </td>
<td> npm/yarnのパッケージに関する情報を定義するファイル </td>
</tr>
<tr>
<td> README.md </td>
<td> README。プラグインの説明などを記載する。インストール方法なども記載すると便利 </td>
</tr>
<tr>
<td> public </td>
<td> ブラウザ側に配布されるプログラムや画像一式 </td>
</tr>
<tr>
<td> public/less/main.less </td>
<td> LESS用のファイル。アプリ固有のスタイルなどを記載 </td>
</tr>
<tr>
<td> public/app.js </td>
<td> ブラウザ側で読み込まれるプラグインのモジュールなど。 </td>
</tr>
<tr>
<td> public/template/index.html </td>
<td> HTMLのテンプレート。ブラウザ上での描画に利用 </td>
</tr>
<tr>
<td> server/routes </td>
<td> Kibanaサーバー側で動作するプラグイン。hapi.jsを利用してREST APIを実装する </td>
</tr>
</tbody>
</table>


<p>重要なファイルについて少しだけ説明します。</p>

<h4>package.json</h4>

<p>npmやyarnでビルドなどをするときに使用するパッケージ情報を記載するためのファイルです。
プラグインの名前、バージョン、説明などを記載します。
Kibanaのバージョンについてもこちらで管理します。この情報を
また、ライブラリなどの依存関係についてもこちらで記載しています。
以下、抜粋。</p>

<pre><code class="json">{
  "name": "simple-sample-kibana-plugin",
  "version": "0.0.0",
  "description": "Sample plugin for explaining how to make kibana app",
  "main": "index.js",
  "kibana": {
    "version": "6.2.1",
    "templateVersion": "7.2.4"
  },
  "scripts": {
    "lint": "eslint **/*.js",
...
  },
  "devDependencies": {
    "@elastic/eslint-config-kibana": "^0.14.0",
    "@elastic/eslint-import-resolver-kibana": "^0.9.0",
    "@elastic/plugin-helpers": "^7.1.3",
...
    "expect.js": "^0.3.1"
  }
}
</code></pre>

<p>ちなみに私は、<code>version</code>などをリリースするたびに変更しています。</p>

<h4>index.js</h4>

<p>最初にKibanaに読み込まれるオブジェクトになります。
Kibanaのアプリの名前や、必要なモジュールなどを記載します。</p>

<p>また、<code>kibana.yml</code>から設定など読み込む処理なども書くことができます。</p>

<p>2行目の<code>exampleRoute</code>はサーバー側のAPIとして利用するhapi.js用のファイルのパスになります。</p>

<p><code>uiExports</code>はこのアプリの画面に関する設定などの記載になります。
<code>app</code>の部分が実際にアプリの情報で、
<code>main</code>があとで説明するこのプラグインのUIのためのJavaScriptファイル(public/app.js)になります。mainですので、最初に読み込まれる処理が記載されているものを指定します。<code>app.js</code>というファイル名を変更する場合は、こちらの<code>app</code>の部分を変更したファイルに合わせましょう。</p>

<p><code>config(Joi)</code>の関数が設定ファイルの読み込みなどの処理を記載する場所です。</p>

<p><code>init(server, options)</code>の関数が初期化処理を記載する場所になります。
このサンプルアプリでは、2行目の<code>import</code>で読み込んだhapi.js用のファイルの関数を呼び出しています。引数で渡している<code>server</code>がhapi.jsの<code>server</code>オブジェクトになります。
<code>route</code>メソッドを使用して作成しているプラグイン用のREST APIを追加しています。</p>

<pre><code class="javascript">import { resolve } from 'path';
import exampleRoute from './server/routes/example';

export default function (kibana) {
  return new kibana.Plugin({
    require: ['elasticsearch'],
    name: 'simple-sample-kibana-plugin',
    uiExports: {

      app: {
        title: 'Simple Sample Kibana Plugin',
        description: 'Sample plugin for explaining how to make kibana app',
        main: 'plugins/simple-sample-kibana-plugin/app'
      },

...
    },

    config(Joi) {
      return Joi.object({
        enabled: Joi.boolean().default(true),
      }).default();
    },

    init(server, options) {
      // Add server routes and initialize the plugin here
      exampleRoute(server);
    }
  });
};
</code></pre>

<h4>public/app.js</h4>

<p>画面用のモジュールです。
<code>uiRoutes</code>という機能を使用して、アプリの呼び出しURLを定義します。テンプレートで作成したばかりの場合は、<code>/</code>というURLが追加されるのみです。</p>

<p>実際に画面を表示する際に動くコントローラーの部分はその下の
<code>uiModules.controller</code>に指定してあるfunctionが画面描画の
処理を書く部分になります。
templateで作成したプラグインでは、&#8221;title&#8221;など表示に必要なデータを<code>$scope</code>というオブジェクトに詰め込んでいます。
これはAngularJS(1系)でのモデルオブジェクトになります。</p>

<pre><code class="javascript">import moment from 'moment';
import { uiModules } from 'ui/modules';
import uiRoutes from 'ui/routes';

import 'ui/autoload/styles';
import './less/main.less';
import template from './templates/index.html';

uiRoutes.enable();
uiRoutes
  .when('/', {
    template,
    resolve: {
...
    }
  });

uiModules
  .get('app/simple-sample-kibana-plugin', [])
  .controller('simpleSampleKibanaPluginHelloWorld', function ($scope, $route, $interval) {
    $scope.title = 'Simple Sample Kibana Plugin';
    $scope.description = 'Sample plugin for explaining how to make kibana app';
...
    $scope.$watch('$destroy', unsubscribe);
  });
</code></pre>

<h4>server/routes/example.js</h4>

<p><a href="https://hapijs.com">hapi.js</a>というNode.jsのためのサーバーフレームワークです。
このフレームワークをKibanaは使っており、Kibanaのサーバーとブラウザとのやり取りに使用するREST APIを記述するために使用しています。
例えば、Elasticsearchとのやり取りを実際に行うAPIなどをこのREST API内部で記述します。</p>

<pre><code class="javascript">export default function (server) {

  server.route({
    path: '/api/simple-sample-kibana-plugin/example',
    method: 'GET',
    handler(req, reply) {
      reply({ time: (new Date()).toISOString() });
    }
  });

}
</code></pre>

<p><code>path</code>の部分がブラウザ側からアクセスするURLになります。
実際にElasticsearchとやり取りする処理の書き方については、次回の記事で説明します。</p>

<h2>アーキテクチャ（簡易版）</h2>

<p>ざっくりですが、ファイルやディレクトリについて説明しました。
簡単なデータのやり取りについての流れを説明します。</p>

<p>Kibana自体はNode.jsで実装されサーバーとして動作していますが、ブラウザでアクセスすることで画面を描画しています。
簡単なコンポーネントを並べるとデータのやり取りはこのような形です。</p>

<p><img src="/images/entries/20180420/architecture.jpg" width="600"></p>

<p>すごく簡易で大雑把な絵ですが。。。</p>

<p>実際のプラグインとしては大きく、2つの処理があります。</p>

<ul>
<li>ブラウザ上の処理

<ul>
<li>クリックなどのイベント処理</li>
<li>HTMLなどのレンダリング処理</li>
</ul>
</li>
<li>Kibanaサーバー上の処理(Elasticsearchなどとの通信が必要な場合)

<ul>
<li>外部との通信処理</li>
<li>ブラウザ上では重い処理</li>
</ul>
</li>
</ul>


<p>絵に記載しましたが、ブラウザ上の処理についてはAngularJSが主なフレームワークで、サーバー上の処理についてはhapi.jsがフレームワークとなっています。</p>

<h2>まとめ</h2>

<p>ということで、今回はディレクトリ構造とファイルの説明、どういったフレームワークが使われ、データのやり取りがどのように行われているか説明しました。</p>

<p>次回からは、実際に私が作成した<a href="https://github.com/johtani/analyze-api-ui-plugin">Analyze UI</a>を元にElasticsearchとのデータのやり取りなどについて紹介していきます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Analyze UIとKibanaのプラグインの作成方法（第2回）]]></title>
    <link href="http://blog.johtani.info/blog/2018/02/09/getting-started-template-kibana-plugin/"/>
    <updated>2018-02-09T18:17:37+09:00</updated>
    <id>http://blog.johtani.info/blog/2018/02/09/getting-started-template-kibana-plugin</id>
    <content type="html"><![CDATA[<p>第1回では、<a href="https://github.com/johtani/analyze-api-ui-plugin">Analyze UIというプラグイン</a>の紹介をしました、ごく簡単にですが。</p>

<p>第2回では、Kibanaのプラグインの作成方法を順を追って見ていこうと思います。今回は、プラグインのプロジェクトの作り方を説明します。
どんなファイルがあるのかなどについては第3回で説明します（2018/02月現在の方法になります。残念ながら、Kibanaのプラグイン作成自体はまだExperimentalな話になっていますので、変更がある可能性があります）。</p>

<!-- more -->


<p>実はそれほど難しいというわけではありません。Kibanaのプラグインを作成するためのテンプレートが用意されています。<a href="https://github.com/elastic/template-kibana-plugin/">template-kiban-plugin</a>です。
テンプレートのリポジトリのREADMEに作業手順の記載があります。</p>

<ol>
<li>KibanaのリポジトリをClone、Checkout</li>
<li>Node.jsの環境を用意する</li>
<li>Kibanaを起動できるようにする</li>
<li>SAOのインストール</li>
<li>テンプレートによるプロジェクトファイルの生成</li>
</ol>


<p>順を追って説明します。
<code>PLUGIN_DEV_DIR</code>というディレクトリ配下で作業をしている想定になります。</p>

<h2>1. KibanaのリポジトリをClone、Checkout</h2>

<p>開発環境として、Kibanaが必要です。Kibanaのプラグインを作るので。
手順などは<a href="https://github.com/elastic/kibana/blob/6.2/CONTRIBUTING.md#contributing-code">KibanaのCONTRIBUTING.md</a>に記載があります。
ということで、まずはKibanaのリポジトリをCloneします。</p>

<pre><code>cd PLUGIN_DEV_DIR
git clone git@github.com:elastic/kibana.git
</code></pre>

<p>このままだと、masterブランチなので、開発したい対象のKibanaのバージョンのブランチもしくはタグをcloneします。今回は6.2.1向けということで、次のようになります。</p>

<pre><code>git checkout v6.2.1
</code></pre>

<p>これで、ソースが6.2.1向けになりました。</p>

<h2>2. Node.jsの環境を用意する</h2>

<p>Node.jsをインストールします。
Kibanaのリポジトリに<code>.node-version</code>というファイルがあります。
こちらにNode.jsのバージョンが記載されています。
Kibanaが使用しているNode.jsを利用できるようにします。ローカルでは<a href="https://github.com/creationix/nvm#installation">nvm</a>利用してインストールしました。後から、切り替えが可能だからです。
nvm自体のインストールについては<a href="https://github.com/creationix/nvm">nvmのサイト</a>をご覧ください。
nvmがインストールできたら、次のコマンドで、Kibanaが使用しているバージョンをインストールします。</p>

<pre><code>cd kibana
nvm install "$(cat .node-version)"
</code></pre>

<p>すでにnvmを利用している場合などは、Kibana起動時にKibanaのバージョンに合わせたNode.jsに切り替えるようにしてください。</p>

<h2>3. Kibanaを起動できるようにする</h2>

<p>Kibanaでは<a href="https://yarnpkg.com/lang/en/">yarn</a>というjavascript向けのパッケージマネージャーを利用して起動やビルドなどを行います。まずはyarnをインストールします。<a href="https://github.com/elastic/kibana/pull/15485">最近npmからyarnに切り替えた</a>ようです。
私はMacだったので、<a href="https://yarnpkg.com/en/docs/install">brewでインストール</a>しました。
インストールできたら、次のコマンドを実行します。</p>

<pre><code>yarn
</code></pre>

<p>これにより、package.jsonから必要なライブラリなどをダウンロードして来てくれます。
問題なければ「✨  Done in 439.30s.」というような表示がされます（結構時間かかりますね）。
では、Kibanaを起動できるか確認してみましょう。
さらに、Elasticsearchも起動してみます。
Kibanaのpackage.jsonの中にはElasticsearchを起動するためのスクリプトも用意されています。実際には<a href="https://gruntjs.com">grunt</a>を利用してタスクを実行しているようです。Elasticsearchの起動にはJavaが必要になります。
今回は6.2.1なので、JDK 8以降がインストールされている必要があります。
こちらはインストールされているものとします。</p>

<pre><code>yarn elasticsearch
</code></pre>

<p>で起動できます。</p>

<pre><code>&gt;&gt; Started 1 Elasticsearch nodes.
</code></pre>

<p>という表示が出てればOKです。
次にKibanaです。別のTerminalを起動して、以下のコマンドで起動できます。</p>

<pre><code>yarn start
</code></pre>

<p>これだけです。
<code>
server    log   [06:58:56.930] [info][listening] Server running at http://localhost:5603
</code>
この辺りが出てればKibanaのServerは起動済みです。また、Elasticsearchに接続できていれば、次のログが出ているはずです。</p>

<pre><code>server    log   [07:02:18.010] [info][status][plugin:elasticsearch@6.2.1] Status changed from red to green - Ready
</code></pre>

<p>Elasticsearch接続用のKibanaのプラグインの状態になります。
これで、Kibanaの環境が整ったことが確認できました。
もちろん、Elasticsearchに関しては、yarnで起動せずに、tar.gzなどでダウンロードして来たElasticsearchを起動しておき、アクセスするといったことも可能です。プラグインなどをElasticsearchにもいれてテストしたい場合などはそちらの方が便利かもしれません。</p>

<h2>4. SAOのインストール</h2>

<p>では、一度、ElasticsearchとKibanaを停止しましょう。フォワグラウンドで起動しているので、それぞれのTerminalでCtrl+Cで停止できます。
Kibanaのプラグイン作成むけに、テンプレートが作られています。<a href="https://sao.js.org">sao.js</a>というGitHubのリポジトリやnpmのパッケージをテンプレートとして使うことができるツールを利用してプラグインのプロジェクト（リポジトリ）を作成します。
実際にテンプレートとなるリポジトリは<a href="https://github.com/elastic/template-kibana-plugin">template-kibana-plugin</a>になります。
まずはSaoのインストールです。</p>

<pre><code>npm install -g sao
</code></pre>

<p>プラグインのテンプレートのページには上記のようにnpmを利用したインストール方法になっていますが、次のようにyarnでも可能です。</p>

<pre><code>yarn global add sao
</code></pre>

<p>これで、saoがインストールできました。</p>

<h2>5. テンプレートによるプロジェクトファイルの生成</h2>

<p>あとは、テンプレートを元にプロジェクトを作成します。
<code>PLUGIN_DEV_DIR</code>ディレクトリ配下に、kibanaと同じ階層で作成するプラグイン用のディレクトリを作成します。</p>

<pre><code>mkdir simple-sample-kibana-plugin
</code></pre>

<p>以下のような構成になります。</p>

<pre><code>kibana                      simple-sample-kibana-plugin
</code></pre>

<p>次にテンプレートを適用していきます。
<code>
cd simple-sample-kibana-plugin
sao kibana-plugin@7.2.4
</code></p>

<p>2行目がsaoを利用してプロジェクトを作成しているコマンドになります。
すると、次のような質問が出て来ます。
これらに答えるとプロジェクトに必要なファイル（package.jsonやREADME.mdなど）に入力した情報を適用したものを作ってくれます。</p>

<pre><code>? Name of your plugin?
? Provide a short description
? What Kibana version are you targeting?
? Should an app component be generated?
? Should translation files be generated?
? Should an hack component be generated?
? Should a server API be generated?
</code></pre>

<p>実際に答えた内容はこちら。</p>

<pre><code>? Name of your plugin? simple-sample-kibana-plugin
? Provide a short description Sample plugin for explaining how to make kibana app
? What Kibana version are you targeting? 6.2.1
? Should an app component be generated? Yes
? Should translation files be generated? Yes
? Should an hack component be generated? Yes
? Should a server API be generated? Yes
</code></pre>

<p>プラグインの名前などは、ディレクトリ名と同じものを入力補完してくれているので、そのままEnterでもOKです。
Descriptionについてはわかりやすいものを入力しましょう。
バージョンは、先ほどのKibanaのリポジトリに合わせて、<code>6.2.1</code>にしてあります。
あとは、作るプラグインの種類に応じて、必要なコンポーネントを作るかどうかの質問にYes/Noで答えます。
今回はサンプルの説明ということもあるので、全てYesで答えました。
ちなみに、私が実際に作成した<a href="https://github.com/johtani/analyze-api-ui-plugin/">analyze-api-ui-plugin</a>では、<code>app</code>と<code>translation</code>と<code>server</code>の3つを作成しました。
ただし、<code>translation</code>については現在はテンプレートで作成したままのファイルが入っており、実際には利用してないです。</p>

<p>完了したら、プラグインのサンプル入りのプロジェクトが完成です。
もう一度、Elasticsearchを立ち上げて、プラグインのプロジェクトからKibanaを起動してアクセスしてみます。まずは、<code>PLUGIN_DEV_DIR/kibana</code>ディレクトリの下で、Elasticsearchを起動します。</p>

<pre><code>yarn elasticsearch
</code></pre>

<p>次に、<code>PLUGIN_DEV_DIR/simple-sample-kibana-plugin</code>ディレクトリの下で、以下のコマンドを実行し、プラグインが入った状態のKibanaを起動します。</p>

<pre><code>yarn start
</code></pre>

<p>問題なく起動すれば、ブラウザでアクセスすると次のような画面が表示されるはずです。</p>

<p><img src="/images/entries/20180214/sample_start.jpg" width="800"></p>

<p>左側にメニューが1つ増えています。
クリックすると、上記画像のような画面が表示されるはずです。</p>

<p>これで、カスタムプラグインの開発ができる環境ができました！
次回は、プロジェクトのディレクトリ構成や、どんなツールが内部で使用されてデータのやり取りが行われているかについて説明します。お楽しみに。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Analyze UIとKibanaのプラグインの作成方法（第1回）]]></title>
    <link href="http://blog.johtani.info/blog/2018/01/19/how-to-make-kibana-plugin-example-analysis-ui/"/>
    <updated>2018-01-19T15:36:46+09:00</updated>
    <id>http://blog.johtani.info/blog/2018/01/19/how-to-make-kibana-plugin-example-analysis-ui</id>
    <content type="html"><![CDATA[<p>あけましておめでとうございます。今年はサボりがちだったブログをちょっとずつ復活させようかと。
ということで、第1弾として、昨年少し作っていたKibanaのプラグインを何度かに分けて紹介したいと思います。</p>

<p>今回は<a href="https://github.com/johtani/analyze-api-ui-plugin">Analyze UIというプラグイン</a>の紹介です。</p>

<!-- more -->


<p>今回はインストール方法と簡単な機能紹介です。
細かな紹介は個別にやりたいと思います。</p>

<h3>Analyze UI pluginとは？</h3>

<p>Elasticsearchの<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-analyze.html"><code>_analyze</code>というAPI</a>(個人的に好きなAPIです)をご存知でしょうか？</p>

<p>Elasticsearchは全文検索エンジンで、データの検索には<a href="https://ja.wikipedia.org/wiki/%E8%BB%A2%E7%BD%AE%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9">転置インデックス</a>というものを使用します。
Elasticsearchにデータを登録する際に、<code>text</code>型のデータの場合、この転置インデックスのキーとなる単語を決める処理のことを<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis.html">Analysis</a>と呼びます（Analysisの詳細については割愛します。後日説明するかも？）。
このAnalysisの処理が、入力されたデータの文字列に対してどのように行われて、結果としてどんな単語がキーとして用いられているかを確認できる機能が<code>_analyze</code> APIです。検索で単語がうまくヒットしないな？とか、なんで、こんなので検索結果に出てくるんだ？といった場合、このAPIを利用すると、どのような単語で転置インデックスが作られているかがわかるので、検索にヒットしない/する理由を見つけることができます。</p>

<p>Elasticsearchの便利な点はRESTfulなAPI＋JSONでやりとりができる点なのですが、<code>_analyze</code> APIの結果をJSONで受け取っても、見るのにちょっと苦労します。。。こんな感じ。</p>

<p>リクエスト：
<code>
POST _analyze
{
  "analyzer": "kuromoji",
  "text": "今年はブログをいっぱい書きますよ！"
}
</code></p>

<p>レスポンス：
<code>
{
  "tokens": [
    {
      "token": "今年",
      "start_offset": 0,
      "end_offset": 2,
      "type": "word",
      "position": 0
    },
    {
      "token": "ブログ",
      "start_offset": 3,
      "end_offset": 6,
      "type": "word",
      "position": 2
    },
    {
      "token": "いっぱい",
      "start_offset": 7,
      "end_offset": 11,
      "type": "word",
      "position": 4
    },
    {
      "token": "書く",
      "start_offset": 11,
      "end_offset": 13,
      "type": "word",
      "position": 5
    }
  ]
}
</code></p>

<p>このくらいの量であればまだなんとかなりますが、文章が長くなると辛いですよね。</p>

<p>ということで、GUIがあると便利だろうなぁと。で、作ってみましたというのが今日紹介するKibana用のAnalyze UIプラグインです。
こんな感じで、Kibanaのアプリの一部として動作しブラウザ上で、入力テキストの文字列がどのようにanalyzeされて、単語になるかがわかります。</p>

<p><img src="/images/entries/20180119/analyze_ui_sample_1.jpg" width="800"></p>

<p>（先ほどのAPIのサンプルと同じものを画面で入力した結果になります）。</p>

<h3>インストール方法</h3>

<p>現時点の最新版Kibana（6.1.2）に対応しています。
Kibanaのディレクトリで<code>kibana-plugin</code>コマンドを利用してインストールします。</p>

<pre><code>./bin/kibana-plugin install https://github.com/johtani/analyze-api-ui-plugin/releases/download/6.1.2/analyze-api-ui-plugin-6.1.2.zip
</code></pre>

<p>これだけです。
で、Kibanaを起動していただくと、左のメニューに「Analyze UI」という項目が増えています。</p>

<p><img src="/images/entries/20180119/kibana_menu.jpg" width="400"></p>

<p>クリックすると、Analyze UIが表示されます。</p>

<p>初期画面は入力された文字を特定のAnalyzerで処理した場合の結果を見るための画面です。綱目の説明は画像をご覧ください。</p>

<p><img src="/images/entries/20180119/intro_analyze_ui_1.jpg" width="800"></p>

<p>先ほどのJSONよりは見やすくなったかと思います。
そのほかにもいくつか画面や機能があるのですが、今日はこの辺りで。
「<code>_analyze</code> API便利なんだけど、JSONは。。。」とか「検索うまくできないなぁなんでだろう？」と思っている方は、ぜひ試して見ていただければと。
問題点などありましたら、GitHubのIssueを登録してください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[データ分析基盤構築入門 を一部執筆しました。]]></title>
    <link href="http://blog.johtani.info/blog/2017/09/21/release-intro-logging-analysis-system/"/>
    <updated>2017-09-21T10:02:30+09:00</updated>
    <id>http://blog.johtani.info/blog/2017/09/21/release-intro-logging-analysis-system</id>
    <content type="html"><![CDATA[<p>久々に執筆しました。といっても、<a href="http://blog.johtani.info/blog/2014/08/04/release-magazine-book-of-log-aggs-and-viz/">以前の書籍</a>の更新版です。
まぁ、更新版といっても、私以外の方々は結構な量を書き直しor新規書き起こしされてますが。。。</p>

<p>ということで、みなさん「買って」から感想をいただけるとうれしいです！（以下の画像でAmazonにジャンプできます！Kindle版も発売中です。）</p>

<p><a target="_blank"  href="https://www.amazon.co.jp/gp/product/477419218X/ref=as_li_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=477419218X&linkCode=as2&tag=johtani-22&linkId=f7cbe8130343ea340b18b53eba20d4b7"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&MarketPlace=JP&ASIN=477419218X&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL250_&tag=johtani-22" ></a><img src="//ir-jp.amazon-adsystem.com/e/ir?t=johtani-22&l=am2&o=9&a=477419218X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<!-- more -->


<p>今回もElasticsearchの章を担当しました。
5.4ベースで書きましたが、ちょっとずつ6でどう変わるかなども記載してあります。
また、付録ではLogstashやBeatsにもちょっと触れています。
また、自分が一番好きなKibanaの機能であるDev ToolsのConsoleについても記載してあります。こちらも合わせて目を通していただければと。</p>

<p>みなさんのフィードバック（ツイート、ブログ、Amazonのコメントなどなど）をお待ちしております！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Timelionの紹介 - Elasticsearch Advent Calendar 2015 1日目]]></title>
    <link href="http://blog.johtani.info/blog/2015/12/01/introduction-timelion/"/>
    <updated>2015-12-01T11:28:11+09:00</updated>
    <id>http://blog.johtani.info/blog/2015/12/01/introduction-timelion</id>
    <content type="html"><![CDATA[<p>こんにちは、<a href="https://twitter.com/johtani">@johtani</a>です。</p>

<p>早いもので、師走です。今年もあと少しとなりました（今月が一番忙しかったりしますが。。。）。
ということで、Advent Calendarの季節が始まりました。</p>

<p>この記事は<a href="http://qiita.com/advent-calendar/2015/elasticsearch">Elasticsearch Advent Calendar 2015</a>の1日目のエントリです。</p>

<p>今日は、最近公開された<a href="https://github.com/elastic/timelion">Timelion</a>の紹介をしたいと思います。</p>

<!-- more -->


<h2>Timelion?</h2>

<p>11/12に公開されたばかりのアプリになります。（<a href="https://www.elastic.co/blog/timelion-timeline">公式のブログはこちら</a>。ブログでは動画による説明もあり）</p>

<p>Kibanaにプラグインとしてインストールすることで使用することができるようになるアプリです。
Timelionと書いて「Timeline」と読むようです。
Kibanaとは異なるグラフ描画のプラグインになっています。</p>

<h3>Kibana 4.2からプラットフォーム化</h3>

<p>Kibana 4.2から、Kibanaにプラグイン機構が導入されました。
Kibanaとしての機能以外にも、プラグインとして、アプリを追加できるようになっています。
Timelionもその一つです。</p>

<h3>インストール</h3>

<p>Timelionを試してみるには、ElasticsearchとKibanaが必要になります。（こちらは、すでにインストールされているとして。。。）</p>

<p>Kibanaのコマンドを利用して、プラグインをインストールします。</p>

<pre><code>bin/kibana plugin -i kibana/timelion
</code></pre>

<p>インストールしたら、Kibanaにアクセスして、Timelionを呼び出します。</p>

<h3>Timelionへアクセス</h3>

<p>ブラウザで<code>localhost:5601</code>にアクセスすると、Kibanaが出てきます。
Kibanaのプラグイン選択のアイコンをクリックし、Timelionのアイコンをクリックします。</p>

<p><img src="/images/entries/20151201/switch_to_timelion.jpg" title="" ></p>

<p>すると、初期画面はこんな感じです。
直近15分のElasticsearchに入っているデータがが全部出てきます。
チュートリアルも出てきてます（初回起動時に出たはず）</p>

<p><img src="/images/entries/20151201/tutrial_timelion.jpg" title="" ></p>

<p>Kibanaでの検索窓の部分に関数を指定していくことで、グラフが描画できるツールになっています。</p>

<h3>サンプル：気温データを可視化</h3>

<p>百聞は一見に如かずということで、
<a href="http://www.data.jma.go.jp/gmd/risk/obsdl/index.php">気象庁のデータ</a>を使って、
ちょっとしたグラフを書いてみました。
1年間の気温の推移と日照時間になります。</p>

<p><img src="/images/entries/20151201/tenperature_naha_and_sapporo.jpg" title="" ></p>

<p>上のグラフが那覇、下グラフが札幌の気温のグラフになります。</p>

<ul>
<li>赤いライン：最高気温</li>
<li>青いライン：最低気温</li>
<li>黄色い棒グラフ：日照時間</li>
</ul>


<p>最低気温と日照時間はグラフは次のような式で描画しています。</p>

<h5>青いラインの最低気温</h5>

<p>気温のグラフになります。</p>

<pre><code>.es(index='tenki2', q='city:naha', metric='avg:temperature_min').label('min'),
</code></pre>

<p><code>.es()</code>がelasticsearchに対するデータ取得の関数です。
引数は次のような意味になります。
* index：対象とするインデックス名
* q：検索クエリ。ここでは、cityというフィールドにnahaで検索。
* metric：描画対象となっているデータの入ったフィールド。temperature_minというフィールドの1日毎の平均値を取得</p>

<p>最低気温と最高気温は別々のフィールドに格納してあります。最高気温の場合は（temperature_max）を指定します。</p>

<p><code>.label(min)</code>で、グラフの凡例の指定です。
残念ながら、日本語の指定は現時点（2015年12月01日時点）ではうまくいかなかったです。（<a href="https://github.com/elastic/timelion/issues/17%EF%BC%89">https://github.com/elastic/timelion/issues/17%EF%BC%89</a></p>

<p>デフォルトでは、線グラフが選択されているので、グラフの種類は特に指定はしていません。
明確に指定する場合は<code>lines()</code>を指定します。</p>

<h5>黄色い棒グラフの日照時間</h5>

<pre><code>.es(index='tenki2', q='city:naha', metric='avg:sunlight').label(sunlight).bars()
</code></pre>

<p><code>.es()</code>に関しては最低気温のグラフとほぼ一緒です。異なるのは、metricの取得対象のフィールド名です。</p>

<p><code>.label()</code>で凡例を指定しています。先程と同様です。</p>

<p>最後に、棒グラフにしたいため、<code>.bars()</code>を指定しています。</p>

<p>その他に用意されている関数について知りたい場合は、Timelionのヘルプを表示すると説明が出てきます。
<code>cusum()</code>のような値を累積して表示するような関数も用意されています。</p>

<p><img src="/images/entries/20151201/about_help.jpg" title="" ></p>

<h3>まとめ</h3>

<p>Kibanaとは少し違うアプローチで時系列データを描画するためのツールとなっています。
線グラフと棒グラフを一つのグラフに描画したりもできますし、
累積のグラフなんかも描画できるようになっています。</p>

<p>実験的なプロジェクトである、Timelionの紹介でした。
ここでのノウハウがkibanaにフィードバックされると色々と面白いことになるんじゃないかなと。</p>

<h3>ということで、</h3>

<p>明日は、<a href="http://qiita.com/zoetro">zoetro</a>さんの「Kibanaのプラグインの話」になります。
お楽しみに！</p>
]]></content>
  </entry>
  
</feed>
