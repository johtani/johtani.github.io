<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">

  <channel>
    <title>music on @johtaniの日記 3rd</title>
    <link>https://blog.johtani.info/tags/music/</link>
    <description>Recent content in music on @johtaniの日記 3rd</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 07 Dec 2023 15:00:00 +0000</lastBuildDate><atom:link href="https://blog.johtani.info/tags/music/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GoでSlackのボットを作った話</title>
      <link>https://blog.johtani.info/blog/2023/12/07/smarthome-bot/</link>
      <pubDate>Thu, 07 Dec 2023 15:00:00 +0000</pubDate>
      
      <guid>https://blog.johtani.info/blog/2023/12/07/smarthome-bot/</guid>
      <description>PySpaアドベントカレンダーの12/08のエントリーです。昨日は渋川さんのアンラーニングで失敗した話でした。 私は、今年は昨年の続きっぽい話</description>
      <content:encoded>&lt;p&gt;PySpaアドベントカレンダーの12/08のエントリーです。昨日は&lt;a href=&#34;https://gist.github.com/shibukawa/af62f192033cb6d500017505f503ca18&#34;&gt;渋川さんのアンラーニングで失敗した話&lt;/a&gt;でした。&lt;/p&gt;
&lt;p&gt;私は、今年は&lt;a href=&#34;https://blog.johtani.info/blog/2022/12/15/music-server-on-mac-mini/&#34;&gt;昨年の続き&lt;/a&gt;っぽい話を。&lt;/p&gt;
&lt;h2 id=&#34;音楽の再生とか停止とか&#34;&gt;音楽の再生とか停止とか&lt;/h2&gt;
&lt;p&gt;今年もリモートで仕事を継続しています。
昨年、OwnToneという音楽サーバーを導入しましたが、ミーティング開始時や終了後に音楽の停止や再生をするのに、ブラウザで操作するのはちょっと面倒です。
加えて、ミーティングする際には実際には&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;音楽を止める&lt;/li&gt;
&lt;li&gt;電気をつける&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;といったことをっやります。
音楽再生についても&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;音楽を再生する&lt;/li&gt;
&lt;li&gt;アンプの音は音楽再生用の音量にする&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;といった複数のことを行います。&lt;/p&gt;
&lt;p&gt;基本的にPCの前にいるし、Slackを常に開いているからSlackのBotを作ると便利になるのでは？
ということで、自分専用のSlack Botを作ってみました。&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.johtani.info/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:400&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20231208/slack-bot-start-music.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20231208/slack-bot-start-music.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&#34;githubリポジトリ&#34;&gt;GitHubリポジトリ&lt;/h3&gt;
&lt;p&gt;全く誰の役にも立たないけど、公開しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/johtani/smarthome&#34;&gt;https://github.com/johtani/smarthome&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;goで実装&#34;&gt;Goで実装&lt;/h3&gt;
&lt;p&gt;知り合いに勧められたということもあり、Goをあまり触ったことがなかったので、Goでやってみました。時々新しい言語を触ってみたくなるので。。。&lt;/p&gt;
&lt;p&gt;コマンドパターンのような作りで、コマンド（操作）を増やしていく感じで実装してはみたのですが、この書き方がいいのかはまだよくわかっていないです。&lt;/p&gt;
&lt;p&gt;Actionという単体の操作(例：&lt;a href=&#34;https://github.com/johtani/smarthome/blob/master/subcommand/action/owntone/pause.go&#34;&gt;OwnToneの一時停止&lt;/a&gt;)を、操作したい機器の操作ごとに作成しています。
インターフェースとしてはRunだけを定義しています。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Action&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Run&lt;/span&gt;() (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;それらの操作（Action）をひとまとめにしたものをSubcommandという形で定義して、SlackのBotにはSubcommandの名前を送って処理を実行する形にしています。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Subcommand&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Definition&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;actions&lt;/span&gt;     []&lt;span style=&#34;color:#a6e22e&#34;&gt;action&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Action&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;ignoreError&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;やりたいことを追加するタイミングで時々リファクタしたりもしていますが、基本はこんな感じです。
細かな実装はさておき、今回ボットを作るときの観点をいくつか。&lt;/p&gt;
&lt;h3 id=&#34;宅内ネットワーク&#34;&gt;宅内ネットワーク&lt;/h3&gt;
&lt;p&gt;音楽サーバーのOwnToneもですが、YAMAHAのアンプのAPIも見つけたのでこれらの操作をボットから行っています。どちらも自宅のネットワークにあるので、今回作成したボットも同じネットワークで動作します。&lt;/p&gt;
&lt;p&gt;外部に公開されたHTTPのエンドポイントがあればよいのですが、今回は用意していません。
SlackのAPIではこれに対応したアプリを作るときのために&lt;a href=&#34;https://api.slack.com/apis/connections/socket&#34;&gt;Socket Mode&lt;/a&gt;を用意してくれています。&lt;/p&gt;
&lt;p&gt;ドキュメントがしっかりしているのもあり、チュートリアルなどを見つつ特に迷うことなく構築できました。&lt;/p&gt;
&lt;p&gt;基本的には「特定のチャンネルでボットがメンションされたら動作する」という挙動だけしか実装していないので、特に今回はこれで困ることもありませんでした（世の中の人たちはもっとすごいSlackの使い方をしていそうだけど。。。）。&lt;/p&gt;
&lt;h3 id=&#34;対象となるものたち&#34;&gt;対象となるものたち&lt;/h3&gt;
&lt;p&gt;ボットから操作しているのは今のところ3種類です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SwitchBot&lt;/li&gt;
&lt;li&gt;OwnTone&lt;/li&gt;
&lt;li&gt;YAMAHAのアンプ&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;switchbot&#34;&gt;SwitchBot&lt;/h4&gt;
&lt;p&gt;SwitchBotについては、&lt;a href=&#34;https://github.com/nasa9084/go-switchbot&#34;&gt;go-siwtchbot&lt;/a&gt;を利用しています。
電気、エアコン、空気清浄機、サーキュレーターのオンオフをSwitchBot経由でやっています。&lt;/p&gt;
&lt;p&gt;室内灯の明るさのために、SwitchBot側でシーンを設定している（一番暗い明るさで電気をつける）ので、そこが少しと特殊でしょうか？&lt;/p&gt;
&lt;p&gt;あとは、SwitchBotの温湿度計を3つ（室内2つ、室外1つ）おいてあるので、これらの温度を表示するコマンドも用意しました。&lt;/p&gt;


&lt;div class=&#34;box&#34; style=&#34;max-width:400&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20231208/display-temperature.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20231208/display-temperature.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;それぞれの機器の電池残量（電池の絵文字の右側）を表示してます（書斎が2つあるように見えますが、温湿度計の名前なので、同じ部屋においてあります。。。温度が高いほうがデスクトップPCの近くにある）。
防水の温湿度計があるので、外の気温もわかるのは便利です。&lt;/p&gt;
&lt;h4 id=&#34;owntone&#34;&gt;OwnTone&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://owntone.github.io/owntone-server/json-api/&#34;&gt;JSONのAPIが用意されています&lt;/a&gt;が、特にクライアントライブラリなどは用意されていません。
今回は、用意されているAPIのごく一部だけを利用するので、net/httpのClientでJSONを投げています。
必要になったらowntone/clientにメソッドを追加していく感じです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/johtani/smarthome/blob/master/subcommand/action/owntone/client.go#L45&#34;&gt;https://github.com/johtani/smarthome/blob/master/subcommand/action/owntone/client.go#L45&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再生、一時停止、プレイリストの取得、音量指定あたりを実装しています。
音の出力先はAirPlay（次に出てくるYamahaのアンプ）になっています。&lt;/p&gt;
&lt;p&gt;あと、JSON APIのサンプルをChatGPTに渡して、「このJSONをレスポンスに受け取る処理をGoで書いてください」と聞いて処理を書いたりしました（細かいのはどう聞いたか覚えてないけど）。&lt;/p&gt;
&lt;h4 id=&#34;yamahaのアンプ&#34;&gt;YAMAHAのアンプ&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/rsc-dev/pyamaha/blob/master/doc/YXC_API_Spec_Basic_v2.0.pdf&#34;&gt;ググって探してきましたが&lt;/a&gt;、利用しているYAMAHAのアンプにYXC（Yamaha Extented Control）と呼ばれるAPIが用意されていました。
PDFでAPIの仕様が公開されていたので、この資料とにらめっこしながら、必要そうなAPIを実行するクライアントを実装しました。
こちらは、OwnToneのAPIの処理をすでに書いた後だったので、それをもとに必要な実装を追加しただけです。&lt;/p&gt;
&lt;p&gt;ちなみに、アンプの電源をONにするAPIは実装していません。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OwnToneで音楽を再生する(AirPlayで信号が送られるみたい)&lt;/li&gt;
&lt;li&gt;シーン選択（Nintendo SwitchやPS5のシーンを用意している）のAPIを呼び出す&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という処理をすると自動で電源がONになりました。スタンバイしている状態でもAPIはリクエストを受け付ける状態になっているようです。
また、PS5のシーンを呼び出したら、PS5自体も起動するのが便利だったりします。HDMI経由で信号が飛んでるのかな？
「ミーティング開始」や「音楽停止」コマンドではアンプの電源をオフするAPIを呼び出すようにしています。&lt;/p&gt;
&lt;h3 id=&#34;タイポ対応&#34;&gt;タイポ対応&lt;/h3&gt;
&lt;p&gt;「入力間違いしちゃうんです、人間だもの。。。」&lt;/p&gt;
&lt;p&gt;ということで、&lt;a href=&#34;https://github.com/johtani/smarthome/pull/34&#34;&gt;10月にタイポ対応の処理&lt;/a&gt;を入れてみました。
タイポ対応前の実装では、入力された文字列がコマンドの文字列と完全一致した場合にだけ、コマンドが実行される形になっていました。
結構タイポしちゃうので、完全一致で見つからない場合の処理として、入力された文字列とコマンド名のレーベンシュタイン距離が&lt;strong&gt;2&lt;/strong&gt;以下のものを探し、その中で距離が一番小さな値のコマンドを実行する形にしてみました。
コマンド数はたかが知れているのでコマンドのリストを全部チェックする形にしています。
タイポするとこんな感じ。&lt;/p&gt;


&lt;div class=&#34;box&#34; style=&#34;max-width:400&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20231208/did-you-mean.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20231208/did-you-mean.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;レーベンシュタイン距離の計算には&lt;a href=&#34;https://pkg.go.dev/github.com/hbollon/go-edlib#section-readme&#34;&gt;Go-edlib&lt;/a&gt;を利用しています。OSS便利ですね。&lt;/p&gt;
&lt;h2 id=&#34;やってよかったこと&#34;&gt;やってよかったこと&lt;/h2&gt;
&lt;p&gt;ミーティング開始時などのいくつかの手順が簡素化できたので満足しています。
SwitchBotの操作もスマホをわざわざ操作しなくてもいいですし（仕事してるとキーボードとSlackは常に使ってるし）。
また、副次的な効果として、部屋の外から電源を切り忘れていたり、エアコンの切り忘れなどの場合に、スマホから遠隔でまとめた処理ができるのが便利です。&lt;/p&gt;
&lt;h2 id=&#34;今後やってみたいこと&#34;&gt;今後やってみたいこと&lt;/h2&gt;
&lt;p&gt;こういうのがあるともうちょっと便利かもなぁ？というのもあるので今後も気が向いたらコマンドなどを追加していく予定です。
今のところこんなことやりたいなというのがいくつかあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;キーワードに関連する曲の再生
&lt;ul&gt;
&lt;li&gt;OwnTone自体に検索の仕組みがついているので、キーワードを受け付けてそれに関する曲を流す&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.johtani.info/blog/2020/09/08/update-working-facility/#%E3%83%87%E3%82%B9%E3%82%AF&#34;&gt;Flexispotの操作&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;ミーティングの時は立ち上がっているので、机をスタンディングの状態にしたい&lt;/li&gt;
&lt;li&gt;電子工作しないとだめかも？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://amzn.to/3GxIw94&#34;&gt;Webカメラ用ライト&lt;/a&gt;の点灯
&lt;ul&gt;
&lt;li&gt;ミーティング時に明かりが必要なのですが、物理スイッチのOn/Off&lt;/li&gt;
&lt;li&gt;これも電子工作かな？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;定期的に温度をBotに表示させるとと面白いかも？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;ということで、新しいプログラミング言語にも触れたし、作業環境も便利になって一石二鳥でした。
新しいプログラミング言語触るのはやっぱたのしいですね。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>仕事中のBGM環境</title>
      <link>https://blog.johtani.info/blog/2022/12/15/music-server-on-mac-mini/</link>
      <pubDate>Thu, 15 Dec 2022 00:05:58 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2022/12/15/music-server-on-mac-mini/</guid>
      <description>PySpaアドベントカレンダーの12/15のエントリーです。昨日はtaichiさんでした。 今年はDIYではなく、PCにまつわる話を。 仕事中は</description>
      <content:encoded>&lt;p&gt;PySpaアドベントカレンダーの12/15のエントリーです。昨日は&lt;a href=&#34;https://blog.satotaichi.info/working-area/&#34;&gt;taichiさん&lt;/a&gt;でした。
今年はDIYではなく、PCにまつわる話を。&lt;/p&gt;
&lt;h2 id=&#34;仕事中はbgmが基本&#34;&gt;仕事中はBGMが基本&lt;/h2&gt;
&lt;p&gt;フリーランスを始めて（2020年初頭）からすぐに、自宅で仕事をする情勢になりました。
打合せをしていないとき、カンファレンスの発表などの動画を見ていないときは基本的にBGMをかけて作業をしています。
音源としては、CDなどから音楽ファイルにしたり、AmazonやSonyのサイトで購入した音楽ファイルなどがNASにあります。&lt;/p&gt;
&lt;h3 id=&#34;今年10月までの環境&#34;&gt;今年10月までの環境&lt;/h3&gt;
&lt;p&gt;2020年の後半に次のような環境を構築して今年の10月まで使っていました。&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;LibreELECをラズパイ4に入れて、Kodiのリモコンをスマホに入れたら快適になった&lt;/p&gt;&amp;mdash; Jun Ohtani (@johtani) &lt;a href=&#34;https://twitter.com/johtani/status/1318412334138761217?ref_src=twsrc%5Etfw&#34;&gt;October 20, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href=&#34;https://kodi.tv/&#34;&gt;KODI&lt;/a&gt;と呼ばれるマルチメディアセンター？のようなソフトで、それを動かす最小限のOSとして、&lt;a href=&#34;https://wiki.libreelec.tv/&#34;&gt;LibreELEC&lt;/a&gt;が公開されています。
これをラズパイ4に入れて、NASからファイルをSSDにコピーしてそれをラズパイに接続して音楽を聞いていました。
毎回ラズパイの画面を見に行くのも面倒なので、再生などの操作には&lt;a href=&#34;https://play.google.com/store/apps/details?id=org.xbmc.kore&#34;&gt;Android用のKodiのリモコンアプリ&lt;/a&gt;を使っていました。&lt;/p&gt;
&lt;p&gt;場所も取らないのでよかったのですが、使っているといくつか問題点が。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;時々調子悪（音が出ない、リモコンからつながらない、無反応など）くなって、ラズパイ再起動&lt;/li&gt;
&lt;li&gt;音楽ファイルを購入して増えた時に、外付けSSDを取り外してPCでコピーしたり&lt;/li&gt;
&lt;li&gt;スマホじゃないと再生できない（PCのクライアントもあったのかもだけど調べてなかった）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ubuntu-on-mac-mini&#34;&gt;Ubuntu on Mac mini&lt;/h2&gt;
&lt;p&gt;10月に模様替えをして、2012年製のMac Miniが宙ぶらりんになりました。
さすがに古いしメインマシンがWindowsになっているのもあり、macOSである必要も特にないので、Ubuntu 22.04を入れて何かに使えるのでは？と。
また、1TBのSSDに内臓ディスクを乗せ換えていたのもあり、音楽再生に使ってみようということに。
なので、Kodiの環境で困っていた点も考慮して、ほしい機能を元にちょっと探してみました。&lt;/p&gt;
&lt;h3 id=&#34;音楽再生-on-ubuntu&#34;&gt;音楽再生 on Ubuntu&lt;/h3&gt;
&lt;p&gt;音楽再生でほしい要件としては次のようなものです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntuで音楽再生できるソフト（あたりまえ）&lt;/li&gt;
&lt;li&gt;PCから操作したい（できればブラウザ）&lt;/li&gt;
&lt;li&gt;音楽ファイルの更新（ローカルでもいいけどNASからもってきたり）&lt;/li&gt;
&lt;li&gt;日本語の曲情報も表示&lt;/li&gt;
&lt;li&gt;対象音楽ファイルが豊富（そんなに制限があるものはないだろうなぁ）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記の要件をもとに適当にググって見つけてきたのが&lt;a href=&#34;https://owntone.github.io/owntone-server/&#34;&gt;OwnTone&lt;/a&gt;というソフトでした。&lt;/p&gt;
&lt;h3 id=&#34;owntone&#34;&gt;OwnTone&lt;/h3&gt;
&lt;p&gt;OwnToneの説明は公式サイトを見ていただくとして、OwnToneにしてよかったなというのが以下の点です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;インストールが簡単（&lt;a href=&#34;https://owntone.github.io/owntone-server/installation/#quick-version-for-debianubuntu-users&#34;&gt;apt-getでインストールできる&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://owntone.github.io/owntone-server/library/#supported-formats&#34;&gt;サポートフォーマットが豊富&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Web UIがついてる（ブラウザで見えるし、スマホでもOK。どのブラウザから見ても今の状況も分かる）&lt;/li&gt;
&lt;li&gt;簡単だけど検索できる&lt;/li&gt;
&lt;li&gt;プレイリスト対応（ファイルパスを入れるだけ）&lt;/li&gt;
&lt;li&gt;サムネイルとかも出てくる（どうやってんだろう？ｗ）&lt;/li&gt;
&lt;li&gt;AirPlayで再生できる（AVアンプを利用しており、そこにAirPlayで再生できてる）&lt;/li&gt;
&lt;li&gt;OSS（まだソースは見たことないですがｗ）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再生画面例&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.johtani.info/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:600&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20221215/music-play.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20221215/music-play.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;やっぱ検索も気になるよね？&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;日本語も検索できるな。 &lt;a href=&#34;https://t.co/EF6WHkJKli&#34;&gt;pic.twitter.com/EF6WHkJKli&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jun Ohtani (@johtani) &lt;a href=&#34;https://twitter.com/johtani/status/1582736512583860225?ref_src=twsrc%5Etfw&#34;&gt;October 19, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;とりあえず、インストールして画面もすぐに出て操作も簡単で、便利な世の中になったなーと感動しましたｗ&lt;/p&gt;
&lt;p&gt;ただ、音がヘッドフォン端子に刺したアナログ出力先のスピーカーではなく、本体のスピーカーで最初はなってしまいましたｗｗ&lt;br/&gt;
Linuxの音周りが全然わかってない問題が発覚。&lt;/p&gt;
&lt;p&gt;幸い、先週の&lt;a href=&#34;https://aodag.dev/posts/2022-12-09-mpd/&#34;&gt;Pyspa Advent Calendarのエントリーを書いていたaodag先生&lt;/a&gt;に助言をいただき、alsamixerで音の設定を見たところ、ヘッドフォン端子がミュートされていたので、ミュートを外して無事再生できました。
インストール当初はYAMAHAのアクティブスピーカーにJust Mixer経由でヘッドフォン端子（アナログ）で出力して音楽再生をしていました。
今は（この記事を書いてる現時点で）、AVアンプのAirPlayにOwnToneから音を流している形で聞いています（便利なんだけど、当初の想定とは異なる、理由は後述）。&lt;/p&gt;
&lt;h3 id=&#34;ファイルのコピーとか&#34;&gt;ファイルのコピーとか&lt;/h3&gt;
&lt;p&gt;さて、上にも書きましたが、NASにバックアップもかねて音楽ファイルを保存してあります。
新しく買ったファイルもここに置くようになっています。
OwnToneのMac MiniからNASをネットワーク経由で見に行くのもいいのですが、できればローカルにあったほうがネットに影響も出ないなと。&lt;/p&gt;
&lt;p&gt;ということで、定期的にNASをウォッチしてMac Miniにファイルをコピーするようなプログラム（Bashスクリプト）を書いてみました。
毎回購入後に手で実行もめんどくさいので毎日夜中にcron実行するような設定になっています。&lt;/p&gt;
&lt;p&gt;スクリプトの中身は次のような感じです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;findコマンドで特定の日時（最近コピーしたファイルの日付）以降(&lt;code&gt;-newermt&lt;/code&gt;オプション)のファイルのリスト（音楽ファイルの拡張子に限定）を取得&lt;/li&gt;
&lt;li&gt;取得したリストをもとに以下の操作
&lt;ul&gt;
&lt;li&gt;ファイルをコピー&lt;/li&gt;
&lt;li&gt;コピーしたファイルをコピーした日付のプレイリストを作って入れる（プレイリストはパスだけ書けばOK）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mp4&lt;/code&gt;形式だと聞けない端末もあるので、&lt;code&gt;soundconverter&lt;/code&gt;コマンドで&lt;code&gt;mp3&lt;/code&gt;に変換してNASに戻す&lt;/li&gt;
&lt;li&gt;最新のファイルの日付を保存（次回のfindコマンド）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ファイルがあったら、&lt;a href=&#34;https://owntone.github.io/owntone-server/json-api/#trigger-rescan&#34;&gt;OwnToneの再読み込みのエンドポイント&lt;/a&gt;を&lt;code&gt;curl&lt;/code&gt;でキック&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NASはSambaでマウントして、見えるようにしてあります。
やっぱり、自動化便利ですねぇ。
気に入った曲を買ってNASに入れとけば聞けるようになるのは本当に便利。&lt;/p&gt;
&lt;p&gt;他にもスマートプレイリストとかもあるので、活用しないとな。&lt;/p&gt;
&lt;h2 id=&#34;今後の課題&#34;&gt;今後の課題&lt;/h2&gt;
&lt;p&gt;さて、すごく便利になったのですが、課題も残っています。&lt;/p&gt;
&lt;h3 id=&#34;音声出力問題&#34;&gt;音声出力問題&lt;/h3&gt;
&lt;p&gt;アナログ出力はaodag先生の助言ですぐに解決したのですが、takabowから譲り受けたAVアンプを導入してから実は音の出力がうまくいっていません。&lt;/p&gt;
&lt;p&gt;HDMI、光端子出力でAVアンプにつなごうとしたのですが、私のUbuntu力（Linux力？）が全然不足しているのでうまくいっていません。ググりつつ、HDMI、光出力で&lt;code&gt;amixer&lt;/code&gt;というコマンドで音声ファイルを鳴らすところまでは行ったのですが、OwnToneに設定するとうまくいかない状況です。
結局、解決してないのですが、AVアンプのAirPlayのレシーバー経由で音楽再生ができてしまったので、とりあえずAirPlayで運用することにしました。時間を見つけてaodag先生の記事を読み直して再チャレンジしないとな（けど、鳴ってるしなぁ、音ｗ）。&lt;/p&gt;
&lt;h3 id=&#34;文字化け問題&#34;&gt;文字化け問題&lt;/h3&gt;
&lt;p&gt;これは、OwnToneというよりはもともとあった問題です。
古い音楽ファイルだったり、Wav形式のファイルなど、様々な形式のファイルを持っています。
音楽サーバーとは別に、音楽ファイルの検索をできるようにしつつ、付加的な情報（Wikimediaなどのデータとか）を付与して、検索できるようにしてみようと思い、音楽ファイルからメタデータを抜き出して、ElasticのApp Searchにいれるデータを作るツールを書いたりしています。
この時にも文字化けに遭遇しました。&lt;/p&gt;
&lt;p&gt;様々な音楽ファイルにはメタデータを付与することができる仕様が決まっています（&lt;a href=&#34;https://ja.wikipedia.org/wiki/ID3%E3%82%BF%E3%82%B0&#34;&gt;ID3タグ - Wikipedia&lt;/a&gt;など）。
ただ、文字コードの情報が入っていなかったり、デフォルトとは違う文字コードでデータを付与したファイルがあったり、いろいろな原因で文字化けしているものがあります。
昨年Amazonで購入したmp3の中にも文字化けしているものもあったりします。Wavファイルに付与されたタグなどは、容赦なくShift-JISだったりしますが、読み込むソフトはUTF-8で読もうとしたり。。。&lt;/p&gt;
&lt;p&gt;検索サーバーにデータを抜き出して入れるツールを書いているときは、元のファイルを変更することなく、抜き出す時点でいくつかの文字化けに対応した処理を書いたのですが、今回のOwnToneで曲を流すと結局、元のファイルをきれいにしないとダメだということに気づきました（すぐわかるだろ。。。）&lt;/p&gt;
&lt;p&gt;ということで、書いている途中のツールをもとに、根本的な文字化けのファイルのメタデータをきれいにするプログラムを書かないといけないなぁと。&lt;/p&gt;
&lt;p&gt;ちなみに、メタデータの抜き出しにはJavaでプログラムを書いており、&lt;a href=&#34;https://jthink.net/jaudiotagger/index.jsp&#34;&gt;JAudiotagger&lt;/a&gt;というライブラリを利用しています。
Pythonや他のJavaのライブラリを試そうとしたのですが、文字コードが決め打ちで抜かれているものが多く、ライブラリから読みだした時点ですでにどうしようもない状態のものが多いといった問題からこのライブラリにたどり着きました（まぁ、まだちゃんとしたものができていないんですけどね）。&lt;/p&gt;
&lt;h3 id=&#34;検索サーバー&#34;&gt;検索サーバー&lt;/h3&gt;
&lt;p&gt;OwnToneのUIはブラウザでうごきます。
検索窓もついています。
が、先ほども書いたように、他にもデータを追加して、いろんな検索をしてみたいなぁと（ドラマに使われてたとか、CMにつかわれてたとかとか）。
検索が好きでいろいろとやってるので、その辺も遊んでみたいなぁと思っているところです（実際、ElasticのApp SearchにWikidataから生成した類義語を入れてみたりしている）。&lt;/p&gt;
&lt;p&gt;こうやってブログにしてしまったので、課題をつぶしていなかったら、Twitterなどでつついてくださいｗ&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;構成図とかは書かなかったですが、OwnToneを使うと簡単にWeb UIが入った音楽サーバーが使えるようになって、仕事がはかどりますよという記事でした。
他にもこれに関するネタを募集してますので、コメントもらえるとうれしいです（Twitterでメンションも大歓迎）。&lt;/p&gt;
</content:encoded>
    </item>
    
  </channel>
</rss>
