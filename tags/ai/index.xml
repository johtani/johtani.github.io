<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">

  <channel>
    <title>Ai on @johtaniの日記 3rd</title>
    <link>https://blog.johtani.info/tags/ai/</link>
    <description>Recent content in Ai on @johtaniの日記 3rd</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 05 Dec 2024 15:00:00 +0000</lastBuildDate><atom:link href="https://blog.johtani.info/tags/ai/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AI活用しきれていない話</title>
      <link>https://blog.johtani.info/blog/2024/12/05/with-ai/</link>
      <pubDate>Thu, 05 Dec 2024 15:00:00 +0000</pubDate>
      
      <guid>https://blog.johtani.info/blog/2024/12/05/with-ai/</guid>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;https://adventar.org/calendars/10523&#34;&gt;pyspa アドベントカレンダー 2024&lt;/a&gt;の6日目です。&lt;/p&gt;
&lt;p&gt;公私ともにAIを活用しきれてないけど、こんな感じで使いましたというお話です。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;elasticsearchのハンズオン&#34;&gt;Elasticsearchのハンズオン&lt;/h2&gt;
&lt;p&gt;お客さん向けにElasticsearchのハンズオンを1時間 x 15回という形で提供しました。
新しい人も入ってきたので慣れてもらうために、また、知ってる人もハンズオンすることで普段は触らない・知らない機能を触って刺激になってアイデアが浮かぶかもしれないしという感じのモチベーションです。&lt;/p&gt;</description>
      <content:encoded>&lt;p&gt;この記事は&lt;a href=&#34;https://adventar.org/calendars/10523&#34;&gt;pyspa アドベントカレンダー 2024&lt;/a&gt;の6日目です。&lt;/p&gt;
&lt;p&gt;公私ともにAIを活用しきれてないけど、こんな感じで使いましたというお話です。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;elasticsearchのハンズオン&#34;&gt;Elasticsearchのハンズオン&lt;/h2&gt;
&lt;p&gt;お客さん向けにElasticsearchのハンズオンを1時間 x 15回という形で提供しました。
新しい人も入ってきたので慣れてもらうために、また、知ってる人もハンズオンすることで普段は触らない・知らない機能を触って刺激になってアイデアが浮かぶかもしれないしという感じのモチベーションです。&lt;/p&gt;
&lt;p&gt;ただ、資料作成にそれほど時間をかけるのももったいないですよねとお客さんとの会話にも出たので、そういう時にこそAIでしょ！となり、使ってみました。&lt;/p&gt;
&lt;p&gt;こんな感じで。&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Google AI StudioのGeminiに壁打ちの相手してもらってるところだけど、賢いなぁ（驚き屋みたいになってるな） &lt;a href=&#34;https://t.co/swyvbTdYxt&#34;&gt;pic.twitter.com/swyvbTdYxt&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jun Ohtani (@johtani) &lt;a href=&#34;https://twitter.com/johtani/status/1785521250955346202?ref_src=twsrc%5Etfw&#34;&gt;May 1, 2024&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;p&gt;このツイートではGoogleのAI Studioを使っていますが、ChatGPTでも同じように作ってもらって、最終的にはChatGPTで最後の回までを作ってもらいました。
プロンプトを工夫したりはできていないので、まだまだ使い切れてる感じはしないですが。。。&lt;/p&gt;
&lt;p&gt;流れとしては、次のような感じで作ってもらいました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;15回で初心者向けのハンズオンの流れを考えてもらう
&lt;ul&gt;
&lt;li&gt;「Elasticsearchのハンズオンを15回程度で考えているところです。全文検索のユースケースを想定しています。カリキュラムを考えてみてください」&lt;/li&gt;
&lt;li&gt;戻ってきた答えにはロギングなどのユースケースも混ざっちゃってたので何度かやり取りして直してもらいました&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;大体出来上がったらそれぞれの回のハンズオンについて詳しく書き下してもらいます
&lt;ul&gt;
&lt;li&gt;最初の流れでは、1行程度の説明しかなかったので、ここでそれぞれのハンズオンでの流れが出来上がります&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;あとは、個別にさらにいくつか会話をしていって、仕上げていきました
&lt;ul&gt;
&lt;li&gt;「図を用いて説明して」「手順を書いて」「Dockerを使う形のインストールだと？」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;題材がElasticsearchということもあり、世の中に資料がたくさんあって学習されているようで、REST APIやクエリもなんとなく作ってくれます。
おかげでハンズオン資料もそれなりの形にできたのではかどりました（出てきたクエリなどは個別に確認しますが、ざっくりした項目は上げてあるのであとは説明すればいい）。&lt;/p&gt;
&lt;p&gt;ただ、Elasticsearchはバージョンアップも頻繁なので、「資料があふれている＝古いバージョンの書き方もある」という状況がよく起こります。
私はある程度知っている内容なので、「ここがおかしい」「これは古い」という形で自分ですぐに修正が入れられるので良いのですが、知らない分野だとそれぞれの調査で時間がかかるだろうなぁという感じです。&lt;/p&gt;
&lt;p&gt;慣れてる内容を再度まとめたり、文章を書いてもらってちょっと修正などは作業がすごく楽になって助かりました。&lt;/p&gt;
&lt;h2 id=&#34;goでslackのボット作成第2弾&#34;&gt;GoでSlackのボット作成（第2弾）&lt;/h2&gt;
&lt;p&gt;もう一つの使い方としてプログラムも書いてもらいました。
こっちはうまく指示が出せずに失敗という感じになってしまいましたが。。。&lt;/p&gt;
&lt;p&gt;3月に&lt;a href=&#34;https://blog.johtani.info/blog/2024/03/22/daily-routine/&#34;&gt;「続ける思考」を読んだ&lt;/a&gt;記事を書きました。
で、本をちょっとずつ読んだり、ガンプラをちょっとずつ作ったりしています。
それらの記録をつけるのに、Slackのボットを作ってみるか→じゃあ、AIに手伝ってもらいながらコーディング？という流れで、壁打ちしながらコードも書いてもらってみたのですが。。。&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;ペアプロってこんな感じなのだろうか？ &lt;a href=&#34;https://t.co/KWxYERNgX3&#34;&gt;pic.twitter.com/KWxYERNgX3&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jun Ohtani (@johtani) &lt;a href=&#34;https://twitter.com/johtani/status/1785487886374285768?ref_src=twsrc%5Etfw&#34;&gt;May 1, 2024&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;p&gt;G.W.に壁打ちしながらコードは書いてもらったんですが、実際にGoLandにもってきて動かそうとすると、まぁ、うごかないのです。。。
（そもそもmainの関数なのにpackage mainになってないとか。。。）
結局、お蔵入りして8月に骨格をもとにしながら最低限（Google Driveじゃなくてローカルファイルに保存）の実装にして動くようになって活用していますが。&lt;/p&gt;
&lt;p&gt;反省点はこんな感じ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;複数ファイルにまたがるような形で設計してもらおうとしたのがよくなかった&lt;/li&gt;
&lt;li&gt;そもそも指示の出し方がよくない？（プロンプト書くのが下手？）&lt;/li&gt;
&lt;li&gt;GitHub CopilotのようなIDEで使えるもののほうがよさそう（もってきて動かすのがめんどくさい）&lt;/li&gt;
&lt;li&gt;テストとか書いてもらうのがいいのかなぁ？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;もちろん、メリットもありました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プロジェクト、プログラムの命名
&lt;ul&gt;
&lt;li&gt;「こんなプログラムを作りたいんだけど名前をいくつか考えて？」「もっと中二っぽい名前がいいな」という感じ会話をして10個くらい名前を考えてもらってそこから採用した&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;変数名、関数名などの命名&lt;/li&gt;
&lt;li&gt;READMEの記述&lt;/li&gt;
&lt;li&gt;REST APIのレスポンスJSONとかをもとに構造体作ってもらったり&lt;/li&gt;
&lt;li&gt;書いてもらったプログラムの個々のパーツは書き方の参考になった&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あとは、JetBrainsのAIアシスタントに課金はしていないのですが、GoLandの補完が賢くなっており、定型的なエラー処理やログメッセージなどを予測して補完してくれるのがすごく楽ですね。テストケース書く時もいい感じに補完してくれるのかしら？（書きなさいよテストケース）&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;まだまだうまく使えてない自信があります（なんだそれ）。
プロンプトを工夫したりなどはしていないので、なんとなく会話してもらってAIに壁打ちしてもらう形程度にしか使えてないと思っています。
あとは、プログラミングでの活用も課金してたりはしていないので、試してみないとなぁ。&lt;/p&gt;
&lt;p&gt;世の中的には、プロンプトエンジニアリング、RAG、エージェントRAG、グラフRAG、画像生成などいろいろ流行っていますが、なんとなく概念を知っているかな？くらいになっています。
来年はRAGだとかエージェントRAGだとかをもっと触って使ってみたり作ってみたりしないとですね。
（本も買って積んでるし。。。）&lt;/p&gt;
</content:encoded>
    </item>
    
  </channel>
</rss>
