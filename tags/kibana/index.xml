<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kibana on @johtaniの日記 3rd</title>
    <link>https://blog.johtani.info/tags/kibana/</link>
    <description>Recent content in kibana on @johtaniの日記 3rd</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 20 Apr 2018 15:30:01 +0900</lastBuildDate><atom:link href="https://blog.johtani.info/tags/kibana/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Analyze UIとKibanaのプラグインの作成方法（第3回）</title>
      <link>https://blog.johtani.info/blog/2018/04/20/directory-layout-and-architecture/</link>
      <pubDate>Fri, 20 Apr 2018 15:30:01 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2018/04/20/directory-layout-and-architecture/</guid>
      <description>第2回から少し間が空いてしまいましたが、templateで作成したプラグインのディレクトリ構成とどういう流れでデータがやり取りされるかについ</description>
      <content:encoded><p><a href="http://blog.johtani.info/blog/2018/02/09/getting-started-template-kibana-plugin/">第2回</a>から少し間が空いてしまいましたが、templateで作成したプラグインのディレクトリ構成とどういう流れでデータがやり取りされるかについてみていきます。
（2018/02月時点で作成したディレクトリ構成にしたがって説明します）
ちなみに、JavaScriptの優れた開発者ではないので、誤解している点や、効率の悪い書き方などがあるかもしれません。見つけた場合は、連絡をいただければと思います。</p>
<!-- more -->
<p>では、まずは作成したディレクトリ構成についてみていきましょう。</p>
<h2 id="ディレクトリ構成">ディレクトリ構成</h2>
<p><code>simple-sample-kibana-plugin</code>がプラグインのプロジェクトのトップディレクトリになります。このディレクトリに次のような構成でサブディレクトリが存在します(なお、画像はIntelliJに取り込んだ後のディレクトリになっているので、<code>.iml</code>など、不要なファイル/ディレクトリが存在しています)。</p>

<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" style="max-width:400">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20180420/directories.jpg" />
    </div>
    <a href="/images/entries/20180420/directories.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<p>主要なディレクトリ、ファイルについて簡単に一覧で説明します(順不同)。</p>
<table>
<thead>
<tr>
<th>ファイル/ディレクトリ名</th>
<th>説明</th>
</tr>
</thead>
<tbody>
<tr>
<td>index.js</td>
<td>プラグインの本体。Kibanaはこのファイルのオブジェクトを読み込みプラグインを起動。設定などの読み込みもこちら。</td>
</tr>
<tr>
<td>package.json</td>
<td>npm/yarnのパッケージに関する情報を定義するファイル</td>
</tr>
<tr>
<td>README.md</td>
<td>README。プラグインの説明などを記載する。インストール方法なども記載すると便利</td>
</tr>
<tr>
<td>public</td>
<td>ブラウザ側に配布されるプログラムや画像一式</td>
</tr>
<tr>
<td>public/less/main.less</td>
<td>LESS用のファイル。アプリ固有のスタイルなどを記載</td>
</tr>
<tr>
<td>public/app.js</td>
<td>ブラウザ側で読み込まれるプラグインのモジュールなど。</td>
</tr>
<tr>
<td>public/template/index.html</td>
<td>HTMLのテンプレート。ブラウザ上での描画に利用</td>
</tr>
<tr>
<td>server/routes</td>
<td>Kibanaサーバー側で動作するプラグイン。hapi.jsを利用してREST APIを実装する</td>
</tr>
</tbody>
</table>
<p>重要なファイルについて少しだけ説明します。</p>
<h4 id="packagejson">package.json</h4>
<p>npmやyarnでビルドなどをするときに使用するパッケージ情報を記載するためのファイルです。
プラグインの名前、バージョン、説明などを記載します。
Kibanaのバージョンについてもこちらで管理します。この情報を
また、ライブラリなどの依存関係についてもこちらで記載しています。
以下、抜粋。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;simple-sample-kibana-plugin&#34;</span>,
  <span style="color:#f92672">&#34;version&#34;</span>: <span style="color:#e6db74">&#34;0.0.0&#34;</span>,
  <span style="color:#f92672">&#34;description&#34;</span>: <span style="color:#e6db74">&#34;Sample plugin for explaining how to make kibana app&#34;</span>,
  <span style="color:#f92672">&#34;main&#34;</span>: <span style="color:#e6db74">&#34;index.js&#34;</span>,
  <span style="color:#f92672">&#34;kibana&#34;</span>: {
    <span style="color:#f92672">&#34;version&#34;</span>: <span style="color:#e6db74">&#34;6.2.1&#34;</span>,
    <span style="color:#f92672">&#34;templateVersion&#34;</span>: <span style="color:#e6db74">&#34;7.2.4&#34;</span>
  },
  <span style="color:#f92672">&#34;scripts&#34;</span>: {
    <span style="color:#f92672">&#34;lint&#34;</span>: <span style="color:#e6db74">&#34;eslint **/*.js&#34;</span>,
<span style="color:#960050;background-color:#1e0010">...</span>
  },
  <span style="color:#f92672">&#34;devDependencies&#34;</span>: {
    <span style="color:#f92672">&#34;@elastic/eslint-config-kibana&#34;</span>: <span style="color:#e6db74">&#34;^0.14.0&#34;</span>,
    <span style="color:#f92672">&#34;@elastic/eslint-import-resolver-kibana&#34;</span>: <span style="color:#e6db74">&#34;^0.9.0&#34;</span>,
    <span style="color:#f92672">&#34;@elastic/plugin-helpers&#34;</span>: <span style="color:#e6db74">&#34;^7.1.3&#34;</span>,
<span style="color:#960050;background-color:#1e0010">...</span>
    <span style="color:#f92672">&#34;expect.js&#34;</span>: <span style="color:#e6db74">&#34;^0.3.1&#34;</span>
  }
}
</code></pre></div><p>ちなみに私は、<code>version</code>などをリリースするたびに変更しています。</p>
<h4 id="indexjs">index.js</h4>
<p>最初にKibanaに読み込まれるオブジェクトになります。
Kibanaのアプリの名前や、必要なモジュールなどを記載します。</p>
<p>また、<code>kibana.yml</code>から設定など読み込む処理なども書くことができます。</p>
<p>2行目の<code>exampleRoute</code>はサーバー側のAPIとして利用するhapi.js用のファイルのパスになります。</p>
<p><code>uiExports</code>はこのアプリの画面に関する設定などの記載になります。
<code>app</code>の部分が実際にアプリの情報で、
<code>main</code>があとで説明するこのプラグインのUIのためのJavaScriptファイル(public/app.js)になります。mainですので、最初に読み込まれる処理が記載されているものを指定します。<code>app.js</code>というファイル名を変更する場合は、こちらの<code>app</code>の部分を変更したファイルに合わせましょう。</p>
<p><code>config(Joi)</code>の関数が設定ファイルの読み込みなどの処理を記載する場所です。</p>
<p><code>init(server, options)</code>の関数が初期化処理を記載する場所になります。
このサンプルアプリでは、2行目の<code>import</code>で読み込んだhapi.js用のファイルの関数を呼び出しています。引数で渡している<code>server</code>がhapi.jsの<code>server</code>オブジェクトになります。
<code>route</code>メソッドを使用して作成しているプラグイン用のREST APIを追加しています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">resolve</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;path&#39;</span>;
<span style="color:#66d9ef">import</span> <span style="color:#a6e22e">exampleRoute</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;./server/routes/example&#39;</span>;

<span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span> <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">kibana</span>) {
  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">kibana</span>.<span style="color:#a6e22e">Plugin</span>({
    <span style="color:#a6e22e">require</span><span style="color:#f92672">:</span> [<span style="color:#e6db74">&#39;elasticsearch&#39;</span>],
    <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;simple-sample-kibana-plugin&#39;</span>,
    <span style="color:#a6e22e">uiExports</span><span style="color:#f92672">:</span> {

      <span style="color:#a6e22e">app</span><span style="color:#f92672">:</span> {
        <span style="color:#a6e22e">title</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;Simple Sample Kibana Plugin&#39;</span>,
        <span style="color:#a6e22e">description</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;Sample plugin for explaining how to make kibana app&#39;</span>,
        <span style="color:#a6e22e">main</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;plugins/simple-sample-kibana-plugin/app&#39;</span>
      },

...
    },

    <span style="color:#a6e22e">config</span>(<span style="color:#a6e22e">Joi</span>) {
      <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">Joi</span>.<span style="color:#a6e22e">object</span>({
        <span style="color:#a6e22e">enabled</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">Joi</span>.<span style="color:#66d9ef">boolean</span>().<span style="color:#66d9ef">default</span>(<span style="color:#66d9ef">true</span>),
      }).<span style="color:#66d9ef">default</span>();
    },

    <span style="color:#a6e22e">init</span>(<span style="color:#a6e22e">server</span>, <span style="color:#a6e22e">options</span>) {
      <span style="color:#75715e">// Add server routes and initialize the plugin here
</span><span style="color:#75715e"></span>      <span style="color:#a6e22e">exampleRoute</span>(<span style="color:#a6e22e">server</span>);
    }
  });
};

</code></pre></div><h4 id="publicappjs">public/app.js</h4>
<p>画面用のモジュールです。
<code>uiRoutes</code>という機能を使用して、アプリの呼び出しURLを定義します。テンプレートで作成したばかりの場合は、<code>/</code>というURLが追加されるのみです。</p>
<p>実際に画面を表示する際に動くコントローラーの部分はその下の
<code>uiModules.controller</code>に指定してあるfunctionが画面描画の
処理を書く部分になります。
templateで作成したプラグインでは、&ldquo;title&quot;など表示に必要なデータを<code>$scope</code>というオブジェクトに詰め込んでいます。
これはAngularJS(1系)でのモデルオブジェクトになります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">moment</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;moment&#39;</span>;
<span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">uiModules</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;ui/modules&#39;</span>;
<span style="color:#66d9ef">import</span> <span style="color:#a6e22e">uiRoutes</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;ui/routes&#39;</span>;

<span style="color:#66d9ef">import</span> <span style="color:#e6db74">&#39;ui/autoload/styles&#39;</span>;
<span style="color:#66d9ef">import</span> <span style="color:#e6db74">&#39;./less/main.less&#39;</span>;
<span style="color:#66d9ef">import</span> <span style="color:#a6e22e">template</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;./templates/index.html&#39;</span>;

<span style="color:#a6e22e">uiRoutes</span>.<span style="color:#a6e22e">enable</span>();
<span style="color:#a6e22e">uiRoutes</span>
  .<span style="color:#a6e22e">when</span>(<span style="color:#e6db74">&#39;/&#39;</span>, {
    <span style="color:#a6e22e">template</span>,
    <span style="color:#a6e22e">resolve</span><span style="color:#f92672">:</span> {
...
    }
  });

<span style="color:#a6e22e">uiModules</span>
  .<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;app/simple-sample-kibana-plugin&#39;</span>, [])
  .<span style="color:#a6e22e">controller</span>(<span style="color:#e6db74">&#39;simpleSampleKibanaPluginHelloWorld&#39;</span>, <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">$scope</span>, <span style="color:#a6e22e">$route</span>, <span style="color:#a6e22e">$interval</span>) {
    <span style="color:#a6e22e">$scope</span>.<span style="color:#a6e22e">title</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Simple Sample Kibana Plugin&#39;</span>;
    <span style="color:#a6e22e">$scope</span>.<span style="color:#a6e22e">description</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Sample plugin for explaining how to make kibana app&#39;</span>;
...
    <span style="color:#a6e22e">$scope</span>.<span style="color:#a6e22e">$watch</span>(<span style="color:#e6db74">&#39;$destroy&#39;</span>, <span style="color:#a6e22e">unsubscribe</span>);
  });

</code></pre></div><h4 id="serverroutesexamplejs">server/routes/example.js</h4>
<p><a href="https://hapijs.com">hapi.js</a>というNode.jsのためのサーバーフレームワークです。
このフレームワークをKibanaは使っており、Kibanaのサーバーとブラウザとのやり取りに使用するREST APIを記述するために使用しています。
例えば、Elasticsearchとのやり取りを実際に行うAPIなどをこのREST API内部で記述します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span> <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">server</span>) {

  <span style="color:#a6e22e">server</span>.<span style="color:#a6e22e">route</span>({
    <span style="color:#a6e22e">path</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;/api/simple-sample-kibana-plugin/example&#39;</span>,
    <span style="color:#a6e22e">method</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;GET&#39;</span>,
    <span style="color:#a6e22e">handler</span>(<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">reply</span>) {
      <span style="color:#a6e22e">reply</span>({ <span style="color:#a6e22e">time</span><span style="color:#f92672">:</span> (<span style="color:#66d9ef">new</span> Date()).<span style="color:#a6e22e">toISOString</span>() });
    }
  });

}
</code></pre></div><p><code>path</code>の部分がブラウザ側からアクセスするURLになります。
実際にElasticsearchとやり取りする処理の書き方については、次回の記事で説明します。</p>
<h2 id="アーキテクチャ簡易版">アーキテクチャ（簡易版）</h2>
<p>ざっくりですが、ファイルやディレクトリについて説明しました。
簡単なデータのやり取りについての流れを説明します。</p>
<p>Kibana自体はNode.jsで実装されサーバーとして動作していますが、ブラウザでアクセスすることで画面を描画しています。
簡単なコンポーネントを並べるとデータのやり取りはこのような形です。</p>


<div class="box" style="max-width:600">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20180420/architecture.jpg" />
    </div>
    <a href="/images/entries/20180420/architecture.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<p>すごく簡易で大雑把な絵ですが。。。</p>
<p>実際のプラグインとしては大きく、2つの処理があります。</p>
<ul>
<li>ブラウザ上の処理
<ul>
<li>クリックなどのイベント処理</li>
<li>HTMLなどのレンダリング処理</li>
</ul>
</li>
<li>Kibanaサーバー上の処理(Elasticsearchなどとの通信が必要な場合)
<ul>
<li>外部との通信処理</li>
<li>ブラウザ上では重い処理</li>
</ul>
</li>
</ul>
<p>絵に記載しましたが、ブラウザ上の処理についてはAngularJSが主なフレームワークで、サーバー上の処理についてはhapi.jsがフレームワークとなっています。</p>
<h2 id="まとめ">まとめ</h2>
<p>ということで、今回はディレクトリ構造とファイルの説明、どういったフレームワークが使われ、データのやり取りがどのように行われているか説明しました。</p>
<p>次回からは、実際に私が作成した<a href="https://github.com/johtani/analyze-api-ui-plugin">Analyze UI</a>を元にElasticsearchとのデータのやり取りなどについて紹介していきます。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Analyze UIとKibanaのプラグインの作成方法（第2回）</title>
      <link>https://blog.johtani.info/blog/2018/02/09/getting-started-template-kibana-plugin/</link>
      <pubDate>Fri, 09 Feb 2018 18:17:37 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2018/02/09/getting-started-template-kibana-plugin/</guid>
      <description>第1回では、Analyze UIというプラグインの紹介をしました、ごく簡単にですが。 第2回では、Kibanaのプラグインの作成方法を順を追って</description>
      <content:encoded><p>第1回では、<a href="https://github.com/johtani/analyze-api-ui-plugin">Analyze UIというプラグイン</a>の紹介をしました、ごく簡単にですが。</p>
<p>第2回では、Kibanaのプラグインの作成方法を順を追って見ていこうと思います。今回は、プラグインのプロジェクトの作り方を説明します。
どんなファイルがあるのかなどについては第3回で説明します（2018/02月現在の方法になります。残念ながら、Kibanaのプラグイン作成自体はまだExperimentalな話になっていますので、変更がある可能性があります）。</p>
<!-- more -->
<p>実はそれほど難しいというわけではありません。Kibanaのプラグインを作成するためのテンプレートが用意されています。<a href="https://github.com/elastic/template-kibana-plugin/">template-kiban-plugin</a>です。
テンプレートのリポジトリのREADMEに作業手順の記載があります。</p>
<ol>
<li>KibanaのリポジトリをClone、Checkout</li>
<li>Node.jsの環境を用意する</li>
<li>Kibanaを起動できるようにする</li>
<li>SAOのインストール</li>
<li>テンプレートによるプロジェクトファイルの生成</li>
</ol>
<p>順を追って説明します。
<code>PLUGIN_DEV_DIR</code>というディレクトリ配下で作業をしている想定になります。</p>
<h2 id="1-kibanaのリポジトリをclonecheckout">1. KibanaのリポジトリをClone、Checkout</h2>
<p>開発環境として、Kibanaが必要です。Kibanaのプラグインを作るので。
手順などは<a href="https://github.com/elastic/kibana/blob/6.2/CONTRIBUTING.md#contributing-code">KibanaのCONTRIBUTING.md</a>に記載があります。
ということで、まずはKibanaのリポジトリをCloneします。</p>
<pre><code>cd PLUGIN_DEV_DIR
git clone git@github.com:elastic/kibana.git
</code></pre><p>このままだと、masterブランチなので、開発したい対象のKibanaのバージョンのブランチもしくはタグをcloneします。今回は6.2.1向けということで、次のようになります。</p>
<pre><code>git checkout v6.2.1
</code></pre><p>これで、ソースが6.2.1向けになりました。</p>
<h2 id="2-nodejsの環境を用意する">2. Node.jsの環境を用意する</h2>
<p>Node.jsをインストールします。
Kibanaのリポジトリに<code>.node-version</code>というファイルがあります。
こちらにNode.jsのバージョンが記載されています。
Kibanaが使用しているNode.jsを利用できるようにします。ローカルでは<a href="https://github.com/creationix/nvm#installation">nvm</a>利用してインストールしました。後から、切り替えが可能だからです。
nvm自体のインストールについては<a href="https://github.com/creationix/nvm">nvmのサイト</a>をご覧ください。
nvmがインストールできたら、次のコマンドで、Kibanaが使用しているバージョンをインストールします。</p>
<pre><code>cd kibana
nvm install &quot;$(cat .node-version)&quot;
</code></pre><p>すでにnvmを利用している場合などは、Kibana起動時にKibanaのバージョンに合わせたNode.jsに切り替えるようにしてください。</p>
<h2 id="3-kibanaを起動できるようにする">3. Kibanaを起動できるようにする</h2>
<p>Kibanaでは<a href="https://yarnpkg.com/lang/en/">yarn</a>というjavascript向けのパッケージマネージャーを利用して起動やビルドなどを行います。まずはyarnをインストールします。<a href="https://github.com/elastic/kibana/pull/15485">最近npmからyarnに切り替えた</a>ようです。
私はMacだったので、<a href="https://yarnpkg.com/en/docs/install">brewでインストール</a>しました。
インストールできたら、次のコマンドを実行します。</p>
<pre><code>yarn
</code></pre><p>これにより、package.jsonから必要なライブラリなどをダウンロードして来てくれます。
問題なければ「✨  Done in 439.30s.」というような表示がされます（結構時間かかりますね）。
では、Kibanaを起動できるか確認してみましょう。
さらに、Elasticsearchも起動してみます。
Kibanaのpackage.jsonの中にはElasticsearchを起動するためのスクリプトも用意されています。実際には<a href="https://gruntjs.com">grunt</a>を利用してタスクを実行しているようです。Elasticsearchの起動にはJavaが必要になります。
今回は6.2.1なので、JDK 8以降がインストールされている必要があります。
こちらはインストールされているものとします。</p>
<pre><code>yarn elasticsearch
</code></pre><p>で起動できます。</p>
<pre><code>&gt;&gt; Started 1 Elasticsearch nodes.
</code></pre><p>という表示が出てればOKです。
次にKibanaです。別のTerminalを起動して、以下のコマンドで起動できます。</p>
<pre><code>yarn start
</code></pre><p>これだけです。</p>
<pre><code>server    log   [06:58:56.930] [info][listening] Server running at http://localhost:5603
</code></pre><p>この辺りが出てればKibanaのServerは起動済みです。また、Elasticsearchに接続できていれば、次のログが出ているはずです。</p>
<pre><code>server    log   [07:02:18.010] [info][status][plugin:elasticsearch@6.2.1] Status changed from red to green - Ready
</code></pre><p>Elasticsearch接続用のKibanaのプラグインの状態になります。
これで、Kibanaの環境が整ったことが確認できました。
もちろん、Elasticsearchに関しては、yarnで起動せずに、tar.gzなどでダウンロードして来たElasticsearchを起動しておき、アクセスするといったことも可能です。プラグインなどをElasticsearchにもいれてテストしたい場合などはそちらの方が便利かもしれません。</p>
<h2 id="4-saoのインストール">4. SAOのインストール</h2>
<p>では、一度、ElasticsearchとKibanaを停止しましょう。フォワグラウンドで起動しているので、それぞれのTerminalでCtrl+Cで停止できます。
Kibanaのプラグイン作成むけに、テンプレートが作られています。<a href="https://sao.js.org">sao.js</a>というGitHubのリポジトリやnpmのパッケージをテンプレートとして使うことができるツールを利用してプラグインのプロジェクト（リポジトリ）を作成します。
実際にテンプレートとなるリポジトリは<a href="https://github.com/elastic/template-kibana-plugin">template-kibana-plugin</a>になります。
まずはSaoのインストールです。</p>
<pre><code>npm install -g sao
</code></pre><p>プラグインのテンプレートのページには上記のようにnpmを利用したインストール方法になっていますが、次のようにyarnでも可能です。</p>
<pre><code>yarn global add sao
</code></pre><p>これで、saoがインストールできました。</p>
<h2 id="5-テンプレートによるプロジェクトファイルの生成">5. テンプレートによるプロジェクトファイルの生成</h2>
<p>あとは、テンプレートを元にプロジェクトを作成します。
<code>PLUGIN_DEV_DIR</code>ディレクトリ配下に、kibanaと同じ階層で作成するプラグイン用のディレクトリを作成します。</p>
<pre><code>mkdir simple-sample-kibana-plugin
</code></pre><p>以下のような構成になります。</p>
<pre><code>kibana                      simple-sample-kibana-plugin
</code></pre><p>次にテンプレートを適用していきます。</p>
<pre><code>cd simple-sample-kibana-plugin
sao kibana-plugin@7.2.4
</code></pre><p>2行目がsaoを利用してプロジェクトを作成しているコマンドになります。
すると、次のような質問が出て来ます。
これらに答えるとプロジェクトに必要なファイル（package.jsonやREADME.mdなど）に入力した情報を適用したものを作ってくれます。</p>
<pre><code>? Name of your plugin?
? Provide a short description
? What Kibana version are you targeting?
? Should an app component be generated?
? Should translation files be generated?
? Should an hack component be generated?
? Should a server API be generated?
</code></pre><p>実際に答えた内容はこちら。</p>
<pre><code>? Name of your plugin? simple-sample-kibana-plugin
? Provide a short description Sample plugin for explaining how to make kibana app
? What Kibana version are you targeting? 6.2.1
? Should an app component be generated? Yes
? Should translation files be generated? Yes
? Should an hack component be generated? Yes
? Should a server API be generated? Yes
</code></pre><p>プラグインの名前などは、ディレクトリ名と同じものを入力補完してくれているので、そのままEnterでもOKです。
Descriptionについてはわかりやすいものを入力しましょう。
バージョンは、先ほどのKibanaのリポジトリに合わせて、<code>6.2.1</code>にしてあります。
あとは、作るプラグインの種類に応じて、必要なコンポーネントを作るかどうかの質問にYes/Noで答えます。
今回はサンプルの説明ということもあるので、全てYesで答えました。
ちなみに、私が実際に作成した<a href="https://github.com/johtani/analyze-api-ui-plugin/">analyze-api-ui-plugin</a>では、<code>app</code>と<code>translation</code>と<code>server</code>の3つを作成しました。
ただし、<code>translation</code>については現在はテンプレートで作成したままのファイルが入っており、実際には利用してないです。</p>
<p>完了したら、プラグインのサンプル入りのプロジェクトが完成です。
もう一度、Elasticsearchを立ち上げて、プラグインのプロジェクトからKibanaを起動してアクセスしてみます。まずは、<code>PLUGIN_DEV_DIR/kibana</code>ディレクトリの下で、Elasticsearchを起動します。</p>
<pre><code>yarn elasticsearch
</code></pre><p>次に、<code>PLUGIN_DEV_DIR/simple-sample-kibana-plugin</code>ディレクトリの下で、以下のコマンドを実行し、プラグインが入った状態のKibanaを起動します。</p>
<pre><code>yarn start
</code></pre><p>問題なく起動すれば、ブラウザでアクセスすると次のような画面が表示されるはずです。</p>

<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" style="max-width:800">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20180214/sample_start.jpg" />
    </div>
    <a href="/images/entries/20180214/sample_start.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<p>左側にメニューが1つ増えています。
クリックすると、上記画像のような画面が表示されるはずです。</p>
<p>これで、カスタムプラグインの開発ができる環境ができました！
次回は、プロジェクトのディレクトリ構成や、どんなツールが内部で使用されてデータのやり取りが行われているかについて説明します。お楽しみに。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Analyze UIとKibanaのプラグインの作成方法（第1回）</title>
      <link>https://blog.johtani.info/blog/2018/01/19/how-to-make-kibana-plugin-example-analysis-ui/</link>
      <pubDate>Fri, 19 Jan 2018 15:36:46 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2018/01/19/how-to-make-kibana-plugin-example-analysis-ui/</guid>
      <description>あけましておめでとうございます。今年はサボりがちだったブログをちょっとずつ復活させようかと。 ということで、第1弾として、昨年少し作っていたK</description>
      <content:encoded><p>あけましておめでとうございます。今年はサボりがちだったブログをちょっとずつ復活させようかと。
ということで、第1弾として、昨年少し作っていたKibanaのプラグインを何度かに分けて紹介したいと思います。</p>
<p>今回は<a href="https://github.com/johtani/analyze-api-ui-plugin">Analyze UIというプラグイン</a>の紹介です。</p>
<!-- more -->
<p>今回はインストール方法と簡単な機能紹介です。
細かな紹介は個別にやりたいと思います。</p>
<h3 id="analyze-ui-pluginとは">Analyze UI pluginとは？</h3>
<p>Elasticsearchの<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-analyze.html"><code>_analyze</code>というAPI</a>(個人的に好きなAPIです)をご存知でしょうか？</p>
<p>Elasticsearchは全文検索エンジンで、データの検索には<a href="https://ja.wikipedia.org/wiki/%E8%BB%A2%E7%BD%AE%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9">転置インデックス</a>というものを使用します。
Elasticsearchにデータを登録する際に、<code>text</code>型のデータの場合、この転置インデックスのキーとなる単語を決める処理のことを<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis.html">Analysis</a>と呼びます（Analysisの詳細については割愛します。後日説明するかも？）。
このAnalysisの処理が、入力されたデータの文字列に対してどのように行われて、結果としてどんな単語がキーとして用いられているかを確認できる機能が<code>_analyze</code> APIです。検索で単語がうまくヒットしないな？とか、なんで、こんなので検索結果に出てくるんだ？といった場合、このAPIを利用すると、どのような単語で転置インデックスが作られているかがわかるので、検索にヒットしない/する理由を見つけることができます。</p>
<p>Elasticsearchの便利な点はRESTfulなAPI＋JSONでやりとりができる点なのですが、<code>_analyze</code> APIの結果をJSONで受け取っても、見るのにちょっと苦労します。。。こんな感じ。</p>
<p>リクエスト：</p>
<pre><code>POST _analyze
{
  &quot;analyzer&quot;: &quot;kuromoji&quot;,
  &quot;text&quot;: &quot;今年はブログをいっぱい書きますよ！&quot;
}
</code></pre><p>レスポンス：</p>
<pre><code>{
  &quot;tokens&quot;: [
    {
      &quot;token&quot;: &quot;今年&quot;,
      &quot;start_offset&quot;: 0,
      &quot;end_offset&quot;: 2,
      &quot;type&quot;: &quot;word&quot;,
      &quot;position&quot;: 0
    },
    {
      &quot;token&quot;: &quot;ブログ&quot;,
      &quot;start_offset&quot;: 3,
      &quot;end_offset&quot;: 6,
      &quot;type&quot;: &quot;word&quot;,
      &quot;position&quot;: 2
    },
    {
      &quot;token&quot;: &quot;いっぱい&quot;,
      &quot;start_offset&quot;: 7,
      &quot;end_offset&quot;: 11,
      &quot;type&quot;: &quot;word&quot;,
      &quot;position&quot;: 4
    },
    {
      &quot;token&quot;: &quot;書く&quot;,
      &quot;start_offset&quot;: 11,
      &quot;end_offset&quot;: 13,
      &quot;type&quot;: &quot;word&quot;,
      &quot;position&quot;: 5
    }
  ]
}
</code></pre><p>このくらいの量であればまだなんとかなりますが、文章が長くなると辛いですよね。</p>
<p>ということで、GUIがあると便利だろうなぁと。で、作ってみましたというのが今日紹介するKibana用のAnalyze UIプラグインです。
こんな感じで、Kibanaのアプリの一部として動作しブラウザ上で、入力テキストの文字列がどのようにanalyzeされて、単語になるかがわかります。</p>

<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" style="max-width:800">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20180119/analyze_ui_sample_1.jpg" />
    </div>
    <a href="/images/entries/20180119/analyze_ui_sample_1.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<p>（先ほどのAPIのサンプルと同じものを画面で入力した結果になります）。</p>
<h3 id="インストール方法">インストール方法</h3>
<p>現時点の最新版Kibana（6.1.2）に対応しています。
Kibanaのディレクトリで<code>kibana-plugin</code>コマンドを利用してインストールします。</p>
<pre><code>./bin/kibana-plugin install https://github.com/johtani/analyze-api-ui-plugin/releases/download/6.1.2/analyze-api-ui-plugin-6.1.2.zip
</code></pre><p>これだけです。
で、Kibanaを起動していただくと、左のメニューに「Analyze UI」という項目が増えています。</p>


<div class="box" style="max-width:400">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20180119/kibana_menu.jpg" />
    </div>
    <a href="/images/entries/20180119/kibana_menu.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<p>クリックすると、Analyze UIが表示されます。</p>
<p>初期画面は入力された文字を特定のAnalyzerで処理した場合の結果を見るための画面です。綱目の説明は画像をご覧ください。</p>


<div class="box" style="max-width:800">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20180119/intro_analyze_ui_1.jpg" />
    </div>
    <a href="/images/entries/20180119/intro_analyze_ui_1.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<p>先ほどのJSONよりは見やすくなったかと思います。
そのほかにもいくつか画面や機能があるのですが、今日はこの辺りで。
「<code>_analyze</code> API便利なんだけど、JSONは。。。」とか「検索うまくできないなぁなんでだろう？」と思っている方は、ぜひ試して見ていただければと。
問題点などありましたら、GitHubのIssueを登録してください。</p>
</content:encoded>
    </item>
    
    <item>
      <title>データ分析基盤構築入門 を一部執筆しました。</title>
      <link>https://blog.johtani.info/blog/2017/09/21/release-intro-logging-analysis-system/</link>
      <pubDate>Thu, 21 Sep 2017 10:02:30 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2017/09/21/release-intro-logging-analysis-system/</guid>
      <description>久々に執筆しました。といっても、以前の書籍の更新版です。 まぁ、更新版といっても、私以外の方々は結構な量を書き直しor新規書き起こしされてます</description>
      <content:encoded><p>久々に執筆しました。といっても、<a href="http://blog.johtani.info/blog/2014/08/04/release-magazine-book-of-log-aggs-and-viz/">以前の書籍</a>の更新版です。
まぁ、更新版といっても、私以外の方々は結構な量を書き直しor新規書き起こしされてますが。。。</p>
<p>ということで、みなさん「買って」から感想をいただけるとうれしいです！（以下の画像でAmazonにジャンプできます！Kindle版も発売中です。）</p>
<p><a target="_blank"  href="https://www.amazon.co.jp/gp/product/477419218X/ref=as_li_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=477419218X&linkCode=as2&tag=johtani-22&linkId=f7cbe8130343ea340b18b53eba20d4b7"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&MarketPlace=JP&ASIN=477419218X&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL250_&tag=johtani-22" ></a><img src="//ir-jp.amazon-adsystem.com/e/ir?t=johtani-22&l=am2&o=9&a=477419218X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>
<!-- more -->
<p>今回もElasticsearchの章を担当しました。
5.4ベースで書きましたが、ちょっとずつ6でどう変わるかなども記載してあります。
また、付録ではLogstashやBeatsにもちょっと触れています。
また、自分が一番好きなKibanaの機能であるDev ToolsのConsoleについても記載してあります。こちらも合わせて目を通していただければと。</p>
<p>みなさんのフィードバック（ツイート、ブログ、Amazonのコメントなどなど）をお待ちしております！</p>
</content:encoded>
    </item>
    
    <item>
      <title>Timelionの紹介 - Elasticsearch Advent Calendar 2015 1日目</title>
      <link>https://blog.johtani.info/blog/2015/12/01/introduction-timelion/</link>
      <pubDate>Tue, 01 Dec 2015 11:28:11 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/12/01/introduction-timelion/</guid>
      <description>こんにちは、@johtaniです。 早いもので、師走です。今年もあと少しとなりました（今月が一番忙しかったりしますが。。。）。 ということで、A</description>
      <content:encoded><p>こんにちは、<a href="https://twitter.com/johtani">@johtani</a>です。</p>
<p>早いもので、師走です。今年もあと少しとなりました（今月が一番忙しかったりしますが。。。）。
ということで、Advent Calendarの季節が始まりました。</p>
<p>この記事は<a href="http://qiita.com/advent-calendar/2015/elasticsearch">Elasticsearch Advent Calendar 2015</a>の1日目のエントリです。</p>
<p>今日は、最近公開された<a href="https://github.com/elastic/timelion">Timelion</a>の紹介をしたいと思います。</p>
<!-- more -->
<h2 id="timelion">Timelion?</h2>
<p>11/12に公開されたばかりのアプリになります。（<a href="https://www.elastic.co/blog/timelion-timeline">公式のブログはこちら</a>。ブログでは動画による説明もあり）</p>
<p>Kibanaにプラグインとしてインストールすることで使用することができるようになるアプリです。
Timelionと書いて「Timeline」と読むようです。
Kibanaとは異なるグラフ描画のプラグインになっています。</p>
<h3 id="kibana-42からプラットフォーム化">Kibana 4.2からプラットフォーム化</h3>
<p>Kibana 4.2から、Kibanaにプラグイン機構が導入されました。
Kibanaとしての機能以外にも、プラグインとして、アプリを追加できるようになっています。
Timelionもその一つです。</p>
<h3 id="インストール">インストール</h3>
<p>Timelionを試してみるには、ElasticsearchとKibanaが必要になります。（こちらは、すでにインストールされているとして。。。）</p>
<p>Kibanaのコマンドを利用して、プラグインをインストールします。</p>
<pre><code>bin/kibana plugin -i kibana/timelion
</code></pre><p>インストールしたら、Kibanaにアクセスして、Timelionを呼び出します。</p>
<h3 id="timelionへアクセス">Timelionへアクセス</h3>
<p>ブラウザで<code>localhost:5601</code>にアクセスすると、Kibanaが出てきます。
Kibanaのプラグイン選択のアイコンをクリックし、Timelionのアイコンをクリックします。</p>

<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20151201/switch_to_timelion.jpg" />
    </div>
    <a href="/images/entries/20151201/switch_to_timelion.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<p>すると、初期画面はこんな感じです。
直近15分のElasticsearchに入っているデータがが全部出てきます。
チュートリアルも出てきてます（初回起動時に出たはず）</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20151201/tutrial_timelion.jpg" />
    </div>
    <a href="/images/entries/20151201/tutrial_timelion.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<p>Kibanaでの検索窓の部分に関数を指定していくことで、グラフが描画できるツールになっています。</p>
<h3 id="サンプル気温データを可視化">サンプル：気温データを可視化</h3>
<p>百聞は一見に如かずということで、
<a href="http://www.data.jma.go.jp/gmd/risk/obsdl/index.php">気象庁のデータ</a>を使って、
ちょっとしたグラフを書いてみました。
1年間の気温の推移と日照時間になります。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20151201/tenperature_naha_and_sapporo.jpg" />
    </div>
    <a href="/images/entries/20151201/tenperature_naha_and_sapporo.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<p>上のグラフが那覇、下グラフが札幌の気温のグラフになります。</p>
<ul>
<li>赤いライン：最高気温</li>
<li>青いライン：最低気温</li>
<li>黄色い棒グラフ：日照時間</li>
</ul>
<p>最低気温と日照時間はグラフは次のような式で描画しています。</p>
<h5 id="青いラインの最低気温">青いラインの最低気温</h5>
<p>気温のグラフになります。</p>
<pre><code>.es(index='tenki2', q='city:naha', metric='avg:temperature_min').label('min'),
</code></pre><p><code>.es()</code>がelasticsearchに対するデータ取得の関数です。
引数は次のような意味になります。</p>
<ul>
<li>index：対象とするインデックス名</li>
<li>q：検索クエリ。ここでは、cityというフィールドにnahaで検索。</li>
<li>metric：描画対象となっているデータの入ったフィールド。temperature_minというフィールドの1日毎の平均値を取得</li>
</ul>
<p>最低気温と最高気温は別々のフィールドに格納してあります。最高気温の場合は（temperature_max）を指定します。</p>
<p><code>.label(min)</code>で、グラフの凡例の指定です。
残念ながら、日本語の指定は現時点（2015年12月01日時点）ではうまくいかなかったです。（https://github.com/elastic/timelion/issues/17）</p>
<p>デフォルトでは、線グラフが選択されているので、グラフの種類は特に指定はしていません。
明確に指定する場合は<code>lines()</code>を指定します。</p>
<h5 id="黄色い棒グラフの日照時間">黄色い棒グラフの日照時間</h5>
<pre><code>.es(index='tenki2', q='city:naha', metric='avg:sunlight').label(sunlight).bars()
</code></pre><p><code>.es()</code>に関しては最低気温のグラフとほぼ一緒です。異なるのは、metricの取得対象のフィールド名です。</p>
<p><code>.label()</code>で凡例を指定しています。先程と同様です。</p>
<p>最後に、棒グラフにしたいため、<code>.bars()</code>を指定しています。</p>
<p>その他に用意されている関数について知りたい場合は、Timelionのヘルプを表示すると説明が出てきます。
<code>cusum()</code>のような値を累積して表示するような関数も用意されています。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20151201/about_help.jpg" />
    </div>
    <a href="/images/entries/20151201/about_help.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<h3 id="まとめ">まとめ</h3>
<p>Kibanaとは少し違うアプローチで時系列データを描画するためのツールとなっています。
線グラフと棒グラフを一つのグラフに描画したりもできますし、
累積のグラフなんかも描画できるようになっています。</p>
<p>実験的なプロジェクトである、Timelionの紹介でした。
ここでのノウハウがkibanaにフィードバックされると色々と面白いことになるんじゃないかなと。</p>
<h3 id="ということで">ということで、</h3>
<p>明日は、<a href="http://qiita.com/zoetro">zoetro</a>さんの「Kibanaのプラグインの話」になります。
お楽しみに！</p>
</content:encoded>
    </item>
    
    <item>
      <title>Kibana 4.2.0リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/10/29/kibana-4-2-0-ja/</link>
      <pubDate>Thu, 29 Oct 2015 16:20:19 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/10/29/kibana-4-2-0-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Kibana 4.2.0 released Elasticsearch 2.0 + Kibana 4.2 = 💚 Elasticsearch 2.0サポートのKibanaの最初のリリースです。 これ</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="https://www.elastic.co/blog/kibana-4-2-0">Kibana 4.2.0 released</a></p>
<!-- more -->
<p>Elasticsearch 2.0 + Kibana 4.2 = 💚
Elasticsearch 2.0サポートのKibanaの最初のリリースです。
これが何を意味するでしょう？
速さ、安定さ、新しい機能。
試してみたい方は、<a href="https://www.elastic.co/downloads/kibana">いますぐダウンロード</a>してください。
そうでない方は、Kibana 4.2の楽しい機能について読んでみてください。</p>
<h3 id="暗黒面は怖い">暗黒面は怖い？</h3>
<p>そんなことありません。
私たちは常にチャートチャートとダッシュボードを組み立てている組み立てている間は明るいバックグラウンドを使うことを推奨してきましたが、
時々、巨大なスクリーンで暗い部屋で誰も明るい画面から目を背けないようにしたいでしょう。
その影響を小さくするためにダークモードを導入しました。
あなたは、NOCや天文台、その他の暗い場所でKibanaのダッシュボードを楽しむことができます。</p>
<p>画像あり。
<a href="https://www.elastic.co/blog/kibana-4-2-0">※画像に関しては原文をご覧ください。</a></p>
<h3 id="地図のカスタマイズ">地図のカスタマイズ</h3>
<p>Kibanaの地図は素晴らしいですが、もっと多くのオプションが望まれていると聞きました。
もし地図に関して知識があるなら、Kibana 4.2のWMSバックグラウンド地図サポートを試してみてください。
WMSは非常に強力で、US Geological Surveyを含む多くの無料サービスがあります。
<a href="http://viewer.nationalmap.gov/example/services/serviceList.html">http://viewer.nationalmap.gov/example/services/serviceList.html</a></p>
<p>画像あり。
<a href="https://www.elastic.co/blog/kibana-4-2-0">※画像に関しては原文をご覧ください。</a></p>
<h3 id="シナリオは">シナリオは？</h3>
<p>何かおかしい時、何が起こっているかを正しく知ってもらいたいので、Kibanaがそのタイミングで注目したいコンポーネントがあるなら、
どのように動いているかという概要を知るためのサーバステータスページを作りました。
もちろん、全てがOKであるというのを知りたいだけの場合でも、settingメニューのStatusタブからいつでも呼び出せます。</p>
<p>画像あり。
<a href="https://www.elastic.co/blog/kibana-4-2-0">※画像に関しては原文をご覧ください。</a></p>
<h3 id="全てにおいて速く">全てにおいて速く</h3>
<p>ブラウザリフレッシュはKibana 4.2の新しいコードビルディングシステムのおかげで、さらに早くなりました。
また、メモリを覚えてます？<strike>Pepperidge Farm</strike>Kibanaが覚えています。
Kibana 4.2は小さな小さな小さなメモリフットプリントを管理している間、長い長い長い時間実行されているダッシュボードを見ることができるような
大きなメモリのクリーンアップも含んでいます。</p>
<h3 id="もっとありますが">もっとありますが。。。</h3>
<p>小さな微調整がいくつもあります。また、今後紹介する本当に刺激的なものの基礎を気づき上げてきました。
これからも<a href="http://elastic.co/blog">Elasticのブログ</a>、<a href="https://twitter.com/elastic">Twitter</a>、<a href="https://github.com/elastic/kibana">KibanaのGitHubリポジトリ</a>に注目し、<strike>モンスタートラック</strike><strong>アナリティクス</strong>の瞬間に立ち会ってください。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Release, we have（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/10/29/release-we-have-ja/</link>
      <pubDate>Thu, 29 Oct 2015 14:18:59 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/10/29/release-we-have-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Relase, we have ※画像に関しては原文をご覧ください。 Elasticにとって大きな1日</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="https://www.elastic.co/blog/release-we-have">Relase, we have</a>
※画像に関しては原文をご覧ください。</p>
<!-- more -->
<p>Elasticにとって大きな1日（社内では「release bonanza」と呼んでいる）です。
多くの主要なプロダクトを新たにリリースしました。
そして、本日、それらを一緒に利用する時にそれらを一緒に利用する時にユーザの体験についてまとめてみました。</p>
<p>次の通りです。</p>
<p><a href="https://www.elastic.co/blog/elasticsearch-2-0-0-released">Elasticsearch 2.0</a>リリース。
大きなマイルストーン、チームによる改善、そして、コミュニティからの素晴らしい貢献。
Pipeline Aggsと呼ばれる新しいタイプのaggregations、
クエリとフィルタのコンセプトを統合することにより簡素化されたクエリDSL、
better compressionオプション、
JavaのSecurity Managerを有効にすることによる強化されたセキュリティ、
FSの挙動に関する強化（fsync、checksum、atmicなリネーム）、
パフォーマンス、マッピングの挙動の一貫性などなどです。
また、我々のチームによる改善も含まれているLucene 5ベースにアップグレードしています。</p>
<p><a href="https://www.elastic.co/blog/kibana-4-2-0">Kibana 4.2</a>リリース。
Elasticsearch 2.0対応、ダークテーマ、カスタマイズ可能な地図、多くの改善。
Kibana 4.2の多くに作業については外部プラグインサポートといった、内蔵に関するものでした。
この後の説明に続きます。</p>
<p><a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">Marvel 2.0</a>リリース。
Elasticsearch 2.0対応、合理化されたメトリックス、簡素化されたUI、
多くはKibanaプラグイン（Kibanaプラットフォーム上に構築）としての書き換えです。
このKibana拡張の最初の努力は、Kibanaのプラグインをどうやって書くか、
Kibanaユーザに公式に何をする必要があるかといったものを特定するのに役立ちました。
おっと、忘れるところでした、Marvelを全てのユーザにフリーで使えるようにしました。
マルチクラスタサポートについては有償となります。</p>
<p><a href="https://www.elastic.co/blog/sense-2-0-0-beta1">Sense 2.0</a>リリース。
2つ目のKibanaプラグインがこれです。
SenseをKibanaプラグインとして書き換えました。
Elasticsearch 2.0サポート、複数リクエストの実行、
curlへのコピーなどです。
おっと、忘れるところでした。オープンソースとすることにしました！</p>
<p><a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">Shield + Watcher 2.0</a>リリース。ElasticsearchのためのセキュリティプラグインであるShieldと、アラート管理のためのプラグインであるWatcherにも
多くの結果が入っています。
最も要求のあった機能である、フィールドお呼びドキュメントレベルでのセキュリティについて、Luceneに落とし込んで実装しました。
また、セキュリティの操作についてプラガブルに実装できるように変更しました。
Watcherは監視の無効化、SlackやHipChatへの通知（bot ops向け）が可能です。</p>
<p><a href="https://www.elastic.co/blog/logstash-2-0-0-released">Logstash 2.0</a>リリース。
Elasticsearch 2.0のサポート、クリーンな停止、全面的なパフォーマンス改善、<a href="https://www.elastic.co/products/beats">Beats</a>サポート。</p>
<p>ご覧の通り、すべてのプロダクトに関する大きな結果です。
チーム間およびFoundの開発者との間での密な連携に感謝します。
これらが私たちが公式にElasticsearch / Kibanaをホストしている<a href="https://www.elastic.co/found">Found</a>で
利用可能です。</p>
<p>ひゅう、息切れしました。
チームがしてきたことは、感動的で、謙虚で、刺激的です！
Elasticが会社として、全てのユーザ、コントリビュータがどのように私たちの大きなミッションに対する結果をもたらしたかという素晴らしい良い例です。
ユーザに愛され、楽しまれ、成功に導き、革新させる製品を是非ご利用ください。ありがとうございます。</p>
<p>&ldquo;A Lion, in Africa?&rdquo; - まだまだ終わりではありません。この文言で終わりにしますが、すぐに（本当にすぐに）戻ってきます。;)</p>
</content:encoded>
    </item>
    
    <item>
      <title>インデックステンプレートとLogstash</title>
      <link>https://blog.johtani.info/blog/2014/11/25/import-apache-accesslog-using-logstash-2/</link>
      <pubDate>Tue, 25 Nov 2014 16:25:46 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/11/25/import-apache-accesslog-using-logstash-2/</guid>
      <description>前回の「Logstashを利用したApacheアクセスログのインポート」の続きです。 前回の記事では、Logstashの設定ファイルについて説</description>
      <content:encoded><p>前回の「<a href="http://blog.johtani.info/blog/2014/11/21/import-apache-accesslog-using-logstash/">Logstashを利用したApacheアクセスログのインポート</a>」の続きです。
前回の記事では、Logstashの設定ファイルについて説明しました。
今回は「Elasticsearchに設定するインデックステンプレート」について説明します。</p>
<!-- more -->
<h2 id="テンプレートの設定">テンプレートの設定</h2>
<p>Elasticsearchでは、登録するデータの特性に合わせてMappingを定義する方がデータを効率良く扱うことができる場合があります。
この場合、通常ですと、インデックス作成時にMappingを指定します。</p>
<p>ただ、今回は、<a href="http://blog.johtani.info/blog/2014/11/21/import-apache-accesslog-using-logstash#output-elasticsearch">インデックス名に「年」を含める形</a>で指定してあります。
「年」はLogstashで処理したデータによって決まります。このため、あらかじめMappingを指定してインデックスを作成するのは難しいです。</p>
<p>このような場合に便利な機能として、「<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-templates.html#indices-templates">インデックステンプレート</a>」があります。</p>
<h3 id="インデックステンプレートとは">インデックステンプレートとは</h3>
<p>実際のテンプレートの説明に入る前に、少しだけ説明を。
インデックステンプレートとは、インデックスが作成されるタイミングで自動的に適用される設定をテンプレートとして登録できる機能のことです。
実際にテンプレートが適用されるかどうかは、インデックス名で判断されます。</p>
<p>例えば、大して重要でもなく、データ量も少ないインデックス用のテンプレートとして、シャード数が1、レプリカ数が0、&quot;_source&quot;を保存しない設定のテンプレートを登録する場合、
次のようになります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">curl -XPUT localhost:<span style="color:#ae81ff">9200</span>/_template/template_1 -d <span style="color:#e6db74">&#39;
</span><span style="color:#e6db74">{
</span><span style="color:#e6db74">  &#34;template&#34; : &#34;te*&#34;,
</span><span style="color:#e6db74">  &#34;settings&#34; : {
</span><span style="color:#e6db74">    &#34;number_of_shards&#34; : 1,
</span><span style="color:#e6db74">    &#34;number_of_replicas&#34; : 0
</span><span style="color:#e6db74">  },
</span><span style="color:#e6db74">  &#34;mappings&#34; : {
</span><span style="color:#e6db74">    &#34;type1&#34; : {
</span><span style="color:#e6db74">      &#34;_source&#34; : { &#34;enabled&#34; : false }
</span><span style="color:#e6db74">    }
</span><span style="color:#e6db74">  }
</span><span style="color:#e6db74">}
</span><span style="color:#e6db74">&#39;</span>
</code></pre></div><p><code>_template</code>がインデックステンプレートを登録するためのエンドポイントです。
<code>template_1</code>がこのテンプレートのIDです。削除などについては、このIDを利用します。</p>
<p>そして、重要なのは、&ldquo;<code>template</code>&quot;の設定です。
&ldquo;<code>template</code>&quot;には、このテンプレートが適用されるべきインデックス名を記載します。
上記サンプルでは<code>te*</code>となっているため、<code>te</code>で始まる名前のインデックスを作成した場合にテンプレートにある設定が適用されます。</p>
<h3 id="今回利用するテンプレート">今回利用するテンプレート</h3>
<p>私がJJUG CCCや第7回Elasticsearch勉強会のKibana4のデモで利用したインデックスのテンプレートは次のものになります。
&ldquo;<code>template</code>&quot;には、<a href="http://blog.johtani.info/blog/2014/11/21/import-apache-accesslog-using-logstash/#output-elasticsearch">前回の記事で紹介したoutput/elasticsearchの設定</a> に合致する<code>new_demo_access_log-*</code>を指定しています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">curl -XPUT localhost:<span style="color:#ae81ff">9200</span>/_template/new_access_log_for_demo -d <span style="color:#e6db74">&#39;
</span><span style="color:#e6db74">{
</span><span style="color:#e6db74">  &#34;template&#34;: &#34;new_demo_access_log-*&#34;,
</span><span style="color:#e6db74">  &#34;settings&#34;: {
</span><span style="color:#e6db74">    &#34;number_of_shards&#34;: &#34;2&#34;,
</span><span style="color:#e6db74">    &#34;number_of_replicas&#34;: &#34;0&#34;
</span><span style="color:#e6db74">  },
</span><span style="color:#e6db74">  &#34;mappings&#34;: {
</span><span style="color:#e6db74">    &#34;_default_&#34;: {
</span><span style="color:#e6db74">      &#34;dynamic_templates&#34;: [
</span><span style="color:#e6db74">        {
</span><span style="color:#e6db74">          &#34;string_template&#34;: {
</span><span style="color:#e6db74">            &#34;mapping&#34;: {
</span><span style="color:#e6db74">              &#34;index&#34;: &#34;not_analyzed&#34;,
</span><span style="color:#e6db74">              &#34;type&#34;: &#34;string&#34;
</span><span style="color:#e6db74">            },
</span><span style="color:#e6db74">            &#34;match_mapping_type&#34;: &#34;string&#34;,
</span><span style="color:#e6db74">            &#34;match&#34;: &#34;*&#34;
</span><span style="color:#e6db74">          }
</span><span style="color:#e6db74">        }
</span><span style="color:#e6db74">      ],
</span><span style="color:#e6db74">      &#34;properties&#34;: {
</span><span style="color:#e6db74">        &#34;path&#34;: {
</span><span style="color:#e6db74">          &#34;type&#34;: &#34;multi_field&#34;,
</span><span style="color:#e6db74">          &#34;fields&#34;: {
</span><span style="color:#e6db74">            &#34;no_analyzed&#34;: {
</span><span style="color:#e6db74">              &#34;index&#34;: &#34;not_analyzed&#34;,
</span><span style="color:#e6db74">              &#34;type&#34;: &#34;string&#34;
</span><span style="color:#e6db74">            },
</span><span style="color:#e6db74">            &#34;analyzed&#34;: {
</span><span style="color:#e6db74">              &#34;index&#34;: &#34;analyzed&#34;,
</span><span style="color:#e6db74">              &#34;type&#34;: &#34;string&#34;
</span><span style="color:#e6db74">            }
</span><span style="color:#e6db74">          }
</span><span style="color:#e6db74">        },
</span><span style="color:#e6db74">        &#34;referer&#34;: {
</span><span style="color:#e6db74">          &#34;type&#34;: &#34;multi_field&#34;,
</span><span style="color:#e6db74">          &#34;fields&#34;: {
</span><span style="color:#e6db74">            &#34;no_analyzed&#34;: {
</span><span style="color:#e6db74">              &#34;index&#34;: &#34;not_analyzed&#34;,
</span><span style="color:#e6db74">              &#34;type&#34;: &#34;string&#34;
</span><span style="color:#e6db74">            },
</span><span style="color:#e6db74">            &#34;analyzed&#34;: {
</span><span style="color:#e6db74">              &#34;index&#34;: &#34;analyzed&#34;,
</span><span style="color:#e6db74">              &#34;type&#34;: &#34;string&#34;
</span><span style="color:#e6db74">            }
</span><span style="color:#e6db74">          }
</span><span style="color:#e6db74">        },
</span><span style="color:#e6db74">        &#34;agent&#34;: {
</span><span style="color:#e6db74">          &#34;type&#34;: &#34;multi_field&#34;,
</span><span style="color:#e6db74">          &#34;fields&#34;: {
</span><span style="color:#e6db74">            &#34;no_analyzed&#34;: {
</span><span style="color:#e6db74">              &#34;index&#34;: &#34;not_analyzed&#34;,
</span><span style="color:#e6db74">              &#34;type&#34;: &#34;string&#34;
</span><span style="color:#e6db74">            },
</span><span style="color:#e6db74">            &#34;analyzed&#34;: {
</span><span style="color:#e6db74">              &#34;index&#34;: &#34;analyzed&#34;,
</span><span style="color:#e6db74">              &#34;type&#34;: &#34;string&#34;
</span><span style="color:#e6db74">            }
</span><span style="color:#e6db74">          }
</span><span style="color:#e6db74">        },
</span><span style="color:#e6db74">        &#34;geoip&#34;: {
</span><span style="color:#e6db74">          &#34;type&#34;: &#34;object&#34;,
</span><span style="color:#e6db74">          &#34;properties&#34;: {
</span><span style="color:#e6db74">            &#34;location&#34;: {
</span><span style="color:#e6db74">              &#34;geohash&#34;: true,
</span><span style="color:#e6db74">              &#34;geohash_precision&#34;: 10,
</span><span style="color:#e6db74">              &#34;type&#34;: &#34;geo_point&#34;,
</span><span style="color:#e6db74">              &#34;lat_lon&#34;: true,
</span><span style="color:#e6db74">              &#34;geohash_prefix&#34;: true
</span><span style="color:#e6db74">            }
</span><span style="color:#e6db74">          }
</span><span style="color:#e6db74">        },
</span><span style="color:#e6db74">        &#34;response&#34;: {
</span><span style="color:#e6db74">          &#34;copy_to&#34;: &#34;response_int&#34;,
</span><span style="color:#e6db74">          &#34;type&#34;: &#34;string&#34;
</span><span style="color:#e6db74">        },
</span><span style="color:#e6db74">        &#34;bytes&#34;: {
</span><span style="color:#e6db74">          &#34;type&#34;: &#34;long&#34;
</span><span style="color:#e6db74">        },
</span><span style="color:#e6db74">        &#34;response_int&#34;: {
</span><span style="color:#e6db74">          &#34;type&#34;: &#34;integer&#34;
</span><span style="color:#e6db74">        }
</span><span style="color:#e6db74">      }
</span><span style="color:#e6db74">    }
</span><span style="color:#e6db74">  }
</span><span style="color:#e6db74">}
</span><span style="color:#e6db74">&#39;</span>
</code></pre></div><h4 id="settings設定">settings設定</h4>
<p>デモ用であり、手元で2台のノードを起動するということもあり、<code>number_of_shards</code>に<code>2</code>を、<code>number_of_replicas</code>に<code>0</code>を指定してあります。</p>
<h4 id="mappings設定">mappings設定</h4>
<h5 id="インデックスのタイプ">インデックスのタイプ</h5>
<p>Mappingsの指定は通常、特定の<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/glossary.html#glossary-type">タイプ</a>を指定します。
今回のデモでは、1種類しかないのですが、タイプ名を特に意識しないために、<code>_default_</code>を使用しました。
この場合、任意のタイプに適用されることとなります。
タイプを指定してMappingの設定を行う場合は<code>_default_</code>の部分に特定のタイプ名を記入します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#66d9ef">&#34;mappings&#34;: </span>{
  <span style="color:#66d9ef">&#34;_default_&#34;: </span>{
    ...
</code></pre></div><h5 id="ダイナミックテンプレート">ダイナミックテンプレート</h5>
<p>次は<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-root-object-type.html#_dynamic_templates">ダイナミックテンプレート</a>です。
インデックステンプレートはインデックスの設定をテンプレート化しました。ダイナミックテンプレートはフィールドに対してテンプレートを設定できます。</p>
<p>以下のダイナミックテンプレートでは、<code>string</code>タイプのフィールドのデフォルト設定を変更しています。
通常、<code>string</code>タイプのフィールドは<code>analyzed</code>となりますが、<code>not_analyzed</code>に変更してあります。
詳しく検索したいフィールドの方が少ないためです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">...
<span style="color:#66d9ef">&#34;dynamic_templates&#34;: </span>[
  {
    <span style="color:#66d9ef">&#34;string_template&#34;: </span>{
      <span style="color:#66d9ef">&#34;mapping&#34;: </span>{
        <span style="color:#66d9ef">&#34;index&#34;: </span><span style="color:#e6db74">&#34;not_analyzed&#34;</span>,
        <span style="color:#66d9ef">&#34;type&#34;: </span><span style="color:#e6db74">&#34;string&#34;</span>
      },
      <span style="color:#66d9ef">&#34;match_mapping_type&#34;: </span><span style="color:#e6db74">&#34;string&#34;</span>,
      <span style="color:#66d9ef">&#34;match&#34;: </span><span style="color:#e6db74">&#34;*&#34;</span>
    }
  }
],
...  
</code></pre></div><h5 id="multi_field指定">multi_field指定</h5>
<p>検索もしたいし、Terms Aggregationでも利用したいフィールドについては、<code>multi_field</code>を利用して、
<code>analyzed</code>と<code>not_analyzed</code>の2種類のフィールドを用意しています。
<code>multi_field</code>設定を用いることで、1つのJSONのデータから、異なる形のフィールドを用意することが可能です。</p>
<p>今回のテンプレートでは、<code>path</code>、<code>referer</code>、<code>agent</code>に<code>multi_field</code>を指定しました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">...
<span style="color:#66d9ef">&#34;path&#34;: </span>{
  <span style="color:#66d9ef">&#34;type&#34;: </span><span style="color:#e6db74">&#34;multi_field&#34;</span>,
  <span style="color:#66d9ef">&#34;fields&#34;: </span>{
    <span style="color:#66d9ef">&#34;no_analyzed&#34;: </span>{
      <span style="color:#66d9ef">&#34;index&#34;: </span><span style="color:#e6db74">&#34;not_analyzed&#34;</span>,
      <span style="color:#66d9ef">&#34;type&#34;: </span><span style="color:#e6db74">&#34;string&#34;</span>
    },
    <span style="color:#66d9ef">&#34;analyzed&#34;: </span>{
      <span style="color:#66d9ef">&#34;index&#34;: </span><span style="color:#e6db74">&#34;analyzed&#34;</span>,
      <span style="color:#66d9ef">&#34;type&#34;: </span><span style="color:#e6db74">&#34;string&#34;</span>
    }
  }
},
...
</code></pre></div><p>例えば、上記の設定の場合、入力のJSONは<code>path</code>というデータのみですが、インデックス上には<code>path.no_analyzed</code>と
<code>path.analyzed</code>というフィールドができあがります。
実際に検索する場合は、<code>path.analyzed:検索したい文字列</code>という形で検索をすることで、いわゆる部分一致のような検索が可能です。
また、完全一致をしたい場合は<code>path.no_analyzed:検索したい文字列</code>という指定になります。
用途を考えると、<code>request</code>も指定したほうが良いかもしれません。</p>
<h5 id="geoip">geoip</h5>
<p><a href="http://blog.johtani.info/blog/2014/11/21/import-apache-accesslog-using-logstash#filter-geoip">Logstashでgeoipデータ</a>を付与していました。
このgeoipのデータをKibana4で利用するために、geoデータとして登録する必要があります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#66d9ef">&#34;geoip&#34;: </span>{
  <span style="color:#66d9ef">&#34;type&#34;: </span><span style="color:#e6db74">&#34;object&#34;</span>,
  <span style="color:#66d9ef">&#34;properties&#34;: </span>{
    <span style="color:#66d9ef">&#34;location&#34;: </span>{
      <span style="color:#66d9ef">&#34;geohash&#34;: </span><span style="color:#66d9ef">true</span>,
      <span style="color:#66d9ef">&#34;geohash_precision&#34;: </span><span style="color:#ae81ff">10</span>,
      <span style="color:#66d9ef">&#34;type&#34;: </span><span style="color:#e6db74">&#34;geo_point&#34;</span>,
      <span style="color:#66d9ef">&#34;lat_lon&#34;: </span><span style="color:#66d9ef">true</span>,
      <span style="color:#66d9ef">&#34;geohash_prefix&#34;: </span><span style="color:#66d9ef">true</span>
    }
  }
},
</code></pre></div><p>上記の設定がgeoデータの指定です。
<code>type</code>に<code>object</code>が指定してありますが、これは、geoipのデータがネストしているためです。
geoipオブジェクトのうち、緯度経度のデータは<code>location</code>に入っているため、こちらに緯度経度関係の設定を指定します。</p>
<ul>
<li><code>&quot;type&quot;: &quot;geo_point&quot;</code>：<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-geo-point-type.html#mapping-geo-point-type"><code>geo_point</code></a>タイプであることを指定</li>
<li><code>&quot;geohash&quot;: true</code>：緯度経度のデータをもとに、geohashの値もインデックス</li>
<li><code>&quot;geohash_precision&quot;: 10</code>：geohashの精度の指定</li>
<li><code>&quot;lat_lon&quot;: true</code>：緯度経度を個別の<code>.lat</code>、<code>.lon</code>というフィールドにもインデックス</li>
<li><code>&quot;geohash_prefix&quot;: true</code>：該当するgeohashのみでなく、その親にあたるgeohashについてもインデックスする</li>
</ul>
<h5 id="responseresponse_intbytes">response、response_int、bytes</h5>
<p>最後は、response、response_int、bytesです。</p>
<p>responseには、HTTPステータスコードが入ります。
文字列としても扱いたいですが、integerとして、Renge Aggregationなどを行いたいので、
response_intというフィールドにも値を入れています。
<code>multi_field</code>でも可能ですが、ここでは、<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-core-types.html#copy-to"><code>copy_to</code></a>を利用しました。
<code>copy_to</code>を用いることで、異なるフィールドに値をコピーすることができます。</p>
<p>bytesについては、longで扱いたいとういう理由だけです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">
<span style="color:#66d9ef">&#34;response&#34;: </span>{
  <span style="color:#66d9ef">&#34;copy_to&#34;: </span><span style="color:#e6db74">&#34;response_int&#34;</span>,
  <span style="color:#66d9ef">&#34;type&#34;: </span><span style="color:#e6db74">&#34;string&#34;</span>
},
<span style="color:#66d9ef">&#34;bytes&#34;: </span>{
  <span style="color:#66d9ef">&#34;type&#34;: </span><span style="color:#e6db74">&#34;long&#34;</span>
},
<span style="color:#66d9ef">&#34;response_int&#34;: </span>{
  <span style="color:#66d9ef">&#34;type&#34;: </span><span style="color:#e6db74">&#34;integer&#34;</span>
}
</code></pre></div><h2 id="まとめ">まとめ</h2>
<p>今回はデモに利用したインデックスてプレートについて説明しました。
前回の、Logstashの設定とこのインデックステンプレートを用いることで、Kibanaで解析するデータの準備ができます。
実際の操作などについては、また次回の記事で説明しようかと思います。</p>
<p>不明な点、誤植などありましたら、コメント欄へお願いします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Logstashを利用したApacheアクセスログのインポート</title>
      <link>https://blog.johtani.info/blog/2014/11/21/import-apache-accesslog-using-logstash/</link>
      <pubDate>Fri, 21 Nov 2014 17:30:39 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/11/21/import-apache-accesslog-using-logstash/</guid>
      <description>JJUG CCCや第7回Elasticsearch勉強会のKibana4のデモにアクセスログを利用しました。 ただ、セッションでは、どうやってElas</description>
      <content:encoded><p>JJUG CCCや第7回Elasticsearch勉強会のKibana4のデモにアクセスログを利用しました。</p>
<p>ただ、セッションでは、どうやってElasticsearchに投入したのかという詳しい話をしていませんでした。
本記事では、データ取り込み時に利用したLogstashの設定ファイルについて説明します。</p>
<!-- more -->
<p>Logstashの設定の説明に入る前に、全体の流れを。
「ApacheアクセスログをKibana4により可視化」です。</p>
<h2 id="材料の準備">材料の準備</h2>
<p>「ApacheアクセスログをKibana4により可視化」に必要な材料は次の通りです。
（今回は起動するところまでいかないので、実際に必要なのは次回以降になります。）</p>
<ul>
<li>Java 7（u55以上を1つ）</li>
<li>Logstash 1.4.2（1つ）</li>
<li>Elasticsearch 1.4.0（1つ）</li>
<li>Kibana4 Beta2（1つ）</li>
<li>Apacheのアクセスログ（適量）</li>
</ul>
<p>Apacheのアクセスログ以外は、公式サイトからダウンロードできます。
それぞれをダウンロードして、起動できるようにしておきましょう。</p>
<p>※1台のマシン上で行う場合は、アクセスログの量を少なめにするなどの対策をとりましょう。
※今回は、1台のマシン（Mac）上で、VMなどを利用せず、それぞれ直接起動するものとします。</p>
<h2 id="可視化の手順と流れ">可視化の手順と流れ</h2>
<p>可視化の流れとしては、</p>
<ol>
<li>Logstashでファイルを読み込み、各種処理（パースしたり、情報を追加したり、切り出したり）</li>
<li>Elasticsearchに保存</li>
<li>Kibanaでグラフを作ったり、検索してみたり</li>
</ol>
<p>です。</p>
<p>今回は、1のLogstashでファイルを読み込んだりする設定ファイルの説明です。</p>
<h3 id="logstashの設定">Logstashの設定</h3>
<h4 id="logstashの基本">Logstashの基本</h4>
<p>まずは、Logstashの設定ですが、簡単にLogstashの説明を。
Logstashは大きく3つのパーツに分かれています。</p>
<ol>
<li>input：データの入力処理</li>
<li>filter：inputで読み込んだデータに対する操作など</li>
<li>output：データの出力処理</li>
</ol>
<p>inputでデータを読み込み（複数可）、filterでデータに対して各種処理を行い、outputでデータを指定されたところに出力（複数可）します。</p>
<h4 id="アクセスログの読み込み設定">アクセスログの読み込み設定</h4>
<p>アクセスログの読み込み処理は大まかに次のようなものとなります。</p>
<ol>
<li>アクセスログを読み込む（input/file）</li>
<li>読み取ったアクセスログを各フィールド（IPアドレス、ユーザエージェントなど）に分割（filter/grok）</li>
<li>日付のパース（filter/date）</li>
<li>クライアントIPアドレスにgeoipの情報を付加（filter/geoip）</li>
<li>リクエストのパスの第1階層の抽出（filter/grok）</li>
<li>ユーザエージェントのパース（filter/useragent）</li>
<li>Elasticsearchへの出力（output/elasticsearch）</li>
</ol>
<p>設定ファイルは次のようなものになります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">input {
  file {
    path <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;/Users/johtani/demo_access_log/*/*.log&#34;</span>
    start_position <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;beginning&#34;</span>
  }
}

filter {
  grok {
    match <span style="color:#f92672">=&gt;</span> { <span style="color:#e6db74">&#34;message&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;%{COMBINEDAPACHELOG}&#34;</span> }
    break_on_match <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">false</span>
    tag_on_failure <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;_message_parse_failure&#34;</span><span style="color:#f92672">]</span>
  }
  date {
    match <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;timestamp&#34;</span>, <span style="color:#e6db74">&#34;dd/MMM/YYYY:HH:mm:ss Z&#34;</span><span style="color:#f92672">]</span>
    locale <span style="color:#f92672">=&gt;</span> en
  }
  geoip {
    source <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;clientip&#34;</span><span style="color:#f92672">]</span>
  }
  grok {
    match <span style="color:#f92672">=&gt;</span> { <span style="color:#e6db74">&#34;request&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;^/%{WORD:first_path}/%{GREEDYDATA}$&#34;</span> }
    tag_on_failure <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;_request_parse_failure&#34;</span><span style="color:#f92672">]</span>
  }
  useragent {
    source <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;agent&#34;</span>
    target <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;useragent&#34;</span>
  }
}

output {
  elasticsearch {
    host <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;localhost&#34;</span>
    index <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;new_demo_access_log-%{year}&#34;</span>
    cluster <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;demo_cluster&#34;</span>
    protocol <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;http&#34;</span>
  }
}
</code></pre></div><h5 id="1-アクセスログを読み込むinputfile">1. アクセスログを読み込む（input/file）</h5>
<p>inputの<a href="http://logstash.net/docs/1.4.2/inputs/file">fileモジュール(a)</a>を使用してアクセスログのファイルを読み込みます。
<code>path</code>でアクセスログのファイルのパスを指定します。
今回利用したアクセスログは<code>demo_access_log/2010/access20100201.log</code>といった日毎のファイルに分割されていたため、
<code>*</code>を利用してファイルのパスを指定しました。
また、今回は既存のファイルの読み込みだけのため、<code>start_position</code>に<code>beginning</code>を指定してあります。
デフォルトでは<code>end</code>が指定されるため、Logstashを起動後に追記されたログから対象になってしまうためです。
その他の設定については、公式ガイドをご覧ください。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">input {
  file { <span style="color:#75715e"># a</span>
    path <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;/Users/johtani/demo_access_log/*/*.log&#34;</span> <span style="color:#75715e"># b</span>
    start_position <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;beginning&#34;</span> <span style="color:#75715e"># c</span>
  }
}
</code></pre></div><blockquote>
<p>Logstashでは、ファイルをどこまで読み込んだかという情報を保持するために、<a href="http://logstash.net/docs/1.4.2/inputs/file#sincedb_path">sincedb</a>を利用しています。
設定変更後に同じファイルを最初から読み込みたい場合などは、こちらのファイルを一旦削除するなどの対応が必要です。</p>
</blockquote>
<p>ちなみに、読み込んだデータは次のようなJSONになっています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#f92672">&#34;message&#34;</span>: <span style="color:#e6db74">&#34;読み込んだアクセスログ&#34;</span>,
  <span style="color:#f92672">&#34;@version&#34;</span>: <span style="color:#e6db74">&#34;1&#34;</span>,
  <span style="color:#f92672">&#34;@timestamp&#34;</span>:<span style="color:#e6db74">&#34;2014-11-21T06:16:21.644Z&#34;</span>,
  <span style="color:#f92672">&#34;host&#34;</span>:<span style="color:#e6db74">&#34;jupiter.local&#34;</span>,
  <span style="color:#f92672">&#34;path&#34;</span>:<span style="color:#e6db74">&#34;/Users/johtani/demo_access_log/2010/access20100201.log&#34;</span>}
<span style="color:#960050;background-color:#1e0010">}</span>
</code></pre></div><p>特に指定がない場合は、<code>message</code>に読み込んだデータが入ってきます。
<code>@timestamp</code>がLogstashが読み込んだ時刻、<code>host</code>はLogstashが動作しているホスト名です。
<code>path</code>はfileモジュールが読み込んだファイルのパスを設定しています。
この後の処理で、どこの項目に対して処理を行うかといったことが重要になるので、</p>
<h5 id="2-読み取ったアクセスログを各フィールドipアドレスユーザエージェントなどに分割filtergrok">2. 読み取ったアクセスログを各フィールド（IPアドレス、ユーザエージェントなど）に分割（filter/grok）</h5>
<p>2.〜6.の処理は、inputで読み込んだ1アクセスログに対する処理となります。</p>
<p>ここでは、<a href="http://logstash.net/docs/1.4.2/filters/grok">grokフィルタ</a>を使用して
Apacheのアクセスログを各フィールドに分割します。
Logastashでは、簡単に使えるようにいくつかの<a href="https://github.com/elasticsearch/logstash/tree/v1.4.2/patterns">パターン</a>が用意されています。
Apacheのログのために、<a href="https://github.com/elasticsearch/logstash/blob/v1.4.2/patterns/grok-patterns#L91"><code>COMBINEDAPACHELOG</code></a>というのが用意されています。
今回はこちらを使用しています。その他にも日付などパターンが用意されているので、試してみてください。</p>
<p><code>message</code>にアクセスログが入っているので、こちらの項目に対して<code>COMBINEDAPACHELOG</code>のパターンを
<code>match</code>で適用してフィールドに抜き出します。
<code>tag_on_failure</code>は、<code>match</code>でパースに失敗した場合に、<code>tag</code>というフィールドに指定した文字列を出力する機能になります。
デフォルトだと<code>_grokparsefailure</code>が付与されますが、ここでは、どの処理で失敗したがを判別するために文字列を変更しています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">filter {
  grok {
    match <span style="color:#f92672">=&gt;</span> { <span style="color:#e6db74">&#34;message&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;%{COMBINEDAPACHELOG}&#34;</span> }
    break_on_match <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">false</span>
    tag_on_failure <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;_message_parse_failure&#34;</span><span style="color:#f92672">]</span>
  }
  <span style="color:#f92672">...</span>
</code></pre></div><p><code>clientip</code>、<code>ident</code>、<code>auth</code>、<code>timestamp</code>、<code>verb</code>、<code>request</code>、<code>httpversion</code>、<code>response</code>、<code>bytes</code>、<code>referrer</code>、<code>agent</code>がgrokフィルタにより抜き出された項目です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#f92672">&#34;message&#34;</span>:<span style="color:#e6db74">&#34;アクセスログ&#34;</span>,
  <span style="color:#f92672">&#34;@version&#34;</span>:<span style="color:#e6db74">&#34;1&#34;</span>,
  <span style="color:#f92672">&#34;@timestamp&#34;</span>:<span style="color:#e6db74">&#34;2014-11-21T07:20:54.387Z&#34;</span>,
  <span style="color:#f92672">&#34;host&#34;</span>:<span style="color:#e6db74">&#34;jupiter.local&#34;</span>,
  <span style="color:#f92672">&#34;path&#34;</span>:<span style="color:#e6db74">&#34;/Users/johtani/demo_access_log/2010/access20100201.log&#34;</span>,
  <span style="color:#f92672">&#34;clientip&#34;</span>:<span style="color:#e6db74">&#34;クライアントのIPアドレス&#34;</span>,
  <span style="color:#f92672">&#34;ident&#34;</span>:<span style="color:#e6db74">&#34;-&#34;</span>,
  <span style="color:#f92672">&#34;auth&#34;</span>:<span style="color:#e6db74">&#34;-&#34;</span>,
  <span style="color:#f92672">&#34;timestamp&#34;</span>:<span style="color:#e6db74">&#34;01/Feb/2010:00:00:26 +0900&#34;</span>,
  <span style="color:#f92672">&#34;verb&#34;</span>:<span style="color:#e6db74">&#34;GET&#34;</span>,
  <span style="color:#f92672">&#34;request&#34;</span>:<span style="color:#e6db74">&#34;/images/favicon.ico&#34;</span>,
  <span style="color:#f92672">&#34;httpversion&#34;</span>:<span style="color:#e6db74">&#34;1.1&#34;</span>,
  <span style="color:#f92672">&#34;response&#34;</span>:<span style="color:#e6db74">&#34;200&#34;</span>,
  <span style="color:#f92672">&#34;bytes&#34;</span>:<span style="color:#e6db74">&#34;318&#34;</span>,
  <span style="color:#f92672">&#34;referrer&#34;</span>:<span style="color:#e6db74">&#34;\&#34;-\&#34;&#34;</span>,
  <span style="color:#f92672">&#34;agent&#34;</span>:<span style="color:#e6db74">&#34;\&#34;Mozilla/5.0 (Windows; U; Windows NT 5.1; ja; rv:1.9.1.7) Gecko/20091221 Firefox/3.5.7 (.NET CLR 3.5.30729)\&#34;&#34;</span>
}
</code></pre></div><h5 id="3-日付のパースfilterdate">3. 日付のパース（filter/date）</h5>
<p>Logstashは特に指定がない場合、inputでデータを取り出した日付が<code>@timestamp</code>となります。
そして、このフィールドが特に指定がない場合は、Elasticsearchのデータの日付となり、Kibanaで利用する日付となります。</p>
<p>リアルタイムにアクセスログを読み込む場合は、読み込んだ日時でもほぼ問題はありませんが、過去データの場合はそうもいきません。
そこで、<a href="http://logstash.net/docs/1.4.2/filters/date"><code>dateフィルタ</code></a>を使用して、<code>@timestamp</code>の値を書き換えます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">date {
  match <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;timestamp&#34;</span>, <span style="color:#e6db74">&#34;dd/MMM/YYYY:HH:mm:ss Z&#34;</span><span style="color:#f92672">]</span>
  locale <span style="color:#f92672">=&gt;</span> en
}
</code></pre></div><p>上記では、<code>timestamp</code>という項目に対して<code>dd/MMM/YYYY:HH:mm:ss Z</code>という日付パターンの場合に値を書き換える設定となります。
なお、日付の月の部分が<code>Feb</code>となっているため、<code>locale</code>に<code>en</code>を指定しています。Logstashが動作するマシンの<code>locale</code>が<code>ja</code>などの場合にパースに失敗するためです。</p>
<h5 id="a-namefilter-geoip4-クライアントipアドレスにgeoipの情報を付加filtergeoipa"><a name="filter-geoip">4. クライアントIPアドレスにgeoipの情報を付加（filter/geoip）</a></h5>
<p>どの国からのアクセスかなどを判別したいので、IPアドレスを元にgeoipを利用してより詳細な情報を付与します。
Logstashでもこの機能が用意されており、簡単に利用ができます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">geoip {
  source <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;clientip&#34;</span><span style="color:#f92672">]</span>
}
</code></pre></div><p>これだけです。対象とするIPアドレスのフィールドを指定しているだけです。
<code>geoip</code>というフィールドが追加され、次のような情報が付与されます。
国名、緯度経度、タイムゾーンなどです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#960050;background-color:#1e0010">...</span>  
  <span style="color:#f92672">&#34;geoip&#34;</span>: {
    <span style="color:#f92672">&#34;ip&#34;</span>: <span style="color:#e6db74">&#34;IPアドレス&#34;</span>,
    <span style="color:#f92672">&#34;country_code2&#34;</span>: <span style="color:#e6db74">&#34;JP&#34;</span>,
    <span style="color:#f92672">&#34;country_code3&#34;</span>: <span style="color:#e6db74">&#34;JPN&#34;</span>,
    <span style="color:#f92672">&#34;country_name&#34;</span>: <span style="color:#e6db74">&#34;Japan&#34;</span>,
    <span style="color:#f92672">&#34;continent_code&#34;</span>: <span style="color:#e6db74">&#34;AS&#34;</span>,
    <span style="color:#f92672">&#34;latitude&#34;</span>: <span style="color:#ae81ff">36</span>,
    <span style="color:#f92672">&#34;longitude&#34;</span>: <span style="color:#ae81ff">138</span>,
    <span style="color:#f92672">&#34;timezone&#34;</span>: <span style="color:#e6db74">&#34;Asia/Tokyo&#34;</span>,
    <span style="color:#f92672">&#34;location&#34;</span>: [
      <span style="color:#ae81ff">138</span>,
      <span style="color:#ae81ff">36</span>
    ]
  }
  <span style="color:#960050;background-color:#1e0010">...</span>
}
</code></pre></div><h5 id="5-リクエストのパスの第1階層の抽出filtergrok">5. リクエストのパスの第1階層の抽出（filter/grok）</h5>
<p>リクエストされたURLは<code>request</code>フィールドにありますが、個別のURLだと、大まかな集計が大変です。
もちろん、クエリで処理することもできますが、Logstashで処理するついでに、第1階層のディレクトリ名を抽出しておくことで、
検索や集計を行いやすくしておきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">grok {
  match <span style="color:#f92672">=&gt;</span> { <span style="color:#e6db74">&#34;request&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;^/%{WORD:first_path}/%{GREEDYDATA}$&#34;</span> }
  tag_on_failure <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;_request_parse_failure&#34;</span><span style="color:#f92672">]</span>
}
</code></pre></div><p>また、grokフィルタの登場です。
今回は、<code>WORD:first_path</code>という記述方法で、<code>WORD</code>パターンにマッチした文字列を<code>first_path</code>というフィールドに展開する指定をしています。</p>
<p>例えば、サイトのスクリプトなどが<code>scripts</code>というディレクトリにある場合は、<code>first_path</code>の値を利用して、
後続のフィルタでログデータを出力しないといった処理にも使えます。</p>
<h5 id="6-ユーザエージェントのパースfilteruseragent">6. ユーザエージェントのパース（filter/useragent）</h5>
<p>Logstashではユーザエージェントの文字列から、いくつかの情報を付与するフィルタも用意されています。
<a href="http://logstash.net/docs/1.4.2/filters/useragent"><code>useragent</code>フィルタです。</a></p>
<pre><code>useragent {
  source =&gt; &quot;agent&quot;
  target =&gt; &quot;useragent&quot;
}
</code></pre><p><code>agent</code>というフィールドにユーザエージェントの文字列があるので、このフィールドに対してフィルタを適用します。
元の文字列も取っておきたいので、<code>useragent</code>という別のフィールドに出力するように指定してあります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#e6db74">&#34;useragent&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> {
  <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Firefox&#34;</span>,
  <span style="color:#f92672">&#34;os&#34;</span>: <span style="color:#e6db74">&#34;Windows XP&#34;</span>,
  <span style="color:#f92672">&#34;os_name&#34;</span>: <span style="color:#e6db74">&#34;Windows XP&#34;</span>,
  <span style="color:#f92672">&#34;device&#34;</span>: <span style="color:#e6db74">&#34;Other&#34;</span>,
  <span style="color:#f92672">&#34;major&#34;</span>: <span style="color:#e6db74">&#34;17&#34;</span>,
  <span style="color:#f92672">&#34;minor&#34;</span>: <span style="color:#e6db74">&#34;0&#34;</span>
}<span style="color:#960050;background-color:#1e0010">,</span>
</code></pre></div><p>このように、OS名やバージョン名などが抽出できます。</p>
<h5 id="a-nameoutput-elasticsearch7-elasticsearchへの出力outputelasticsearcha"><a name="output-elasticsearch">7. Elasticsearchへの出力（output/elasticsearch）</a></h5>
<p>最後は、<a href="http://logstash.net/docs/1.4.2/outputs/elasticsearch">Elasticsearchへのデータの出力設定</a>です。</p>
<p><code>index</code>にて、出力するindex名を指定してあります。
また、年毎のインデックス名にするために<code>%{year}</code>を利用しています。
<a href="http://logstash.net/docs/1.4.2/configuration#sprintf">sprintf format</a>です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">elasticsearch {
  host <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;localhost&#34;</span>
  index <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;new_demo_access_log-%{year}&#34;</span>
  cluster <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;demo_cluster&#34;</span>
  protocol <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;http&#34;</span>
}
</code></pre></div><h2 id="まとめ">まとめ</h2>
<p>ということで、今回はアクセスログをLogstashにて読み込む時の設定について説明してきました。
次回は、実際にLogstashを起動してElasticsearchにデータを登録するところまでを説明します。</p>
<p>JJUG CCCや勉強会のデモに用いたデータは、
Elasticsearchにデータを登録する前にテンプレートも設定してありました。こちらについても、次回説明しようと思います。</p>
<p>不明な点、誤植などありましたら、コメント欄へお願いします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>サーバ/インフラエンジニア養成読本 ログ収集~可視化編 を手伝いました</title>
      <link>https://blog.johtani.info/blog/2014/08/04/release-magazine-book-of-log-aggs-and-viz/</link>
      <pubDate>Mon, 04 Aug 2014 21:54:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/08/04/release-magazine-book-of-log-aggs-and-viz/</guid>
      <description>懲りずにまた、執筆してみました。みなさん「買って」から感想をいただけるとうれしいです！ 本書について 共著者の方々のブログが詳しいので、そちらを</description>
      <content:encoded><p>懲りずにまた、執筆してみました。みなさん「買って」から感想をいただけるとうれしいです！</p>
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&nou=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=johtani-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4774169838" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
<!-- more -->
<h2 id="本書について">本書について</h2>
<p>共著者の方々のブログが詳しいので、そちらを読んでもらいつつ。
実際にログを収集して解析されている方々と一緒に書かせていただくことで色々と勉強させていただいています。</p>
<h3 id="共著者の方々のブログ">共著者の方々のブログ</h3>
<ul>
<li><a href="https://twitter.com/suzu_v">@suzu_v</a>さん：<a href="http://suzuken.hatenablog.jp/entry/2014/07/18/084555">サーバ/インフラエンジニア養成読本 ログ収集~可視化編 を書きました</a></li>
<li><a href="https://twitter.com/yoshi_ken">@yoshi_ken</a>さん：<a href="http://y-ken.hatenablog.com/entry/published-elasticsearch-fluentd-kibana-book">ログ収集や可視化で話題のFluentd、Elasticsearch、Kibanaを徹底解説したムック本が発売となります</a></li>
<li><a href="https://twitter.com/harukasan">@harukasan</a>さん：<a href="http://blog.harukasan.jp/entry/2014/07/18/180351">書きました: サーバ/インフラエンジニア養成読本 ログ収集~可視化編</a></li>
</ul>
<h3 id="どの辺を書いたの">どの辺を書いたの？</h3>
<p>「特集３：Elasticsearch入門」（なんか、入門ばっかりだなぁ）を書かせていただきました。
データストア入門ということで、ほんとうに簡単な他のデータストアを説明し、Elasticsearchってどんなものかを単語の説明をしつつ紹介してみました。</p>
<p>Elasticsearch自体は多くの機能を持っており、それ単体で分厚い書籍がかけるので、ログ検索に関係ありそうな部分をピックアップしてみました。
あとは、運用時に気をつける点や便利なツール（Curatorなど）の紹介をしています。</p>
<p>また、Hadoopと合わせて利用してみたい、すでにHadoopにあるデータも活用してみたいという話もありそうだということで、<a href="https://github.com/elasticsearch/elasticsearch-hadoop">elasticsearch-hadoop</a>についても簡単ですが紹介してあります。</p>
<h2 id="その他感想">その他感想</h2>
<p>個人的に、忙しい時期<a href="http://blog.johtani.info/blog/2014/07/01/join-elasticsearch/">（参考記事）</a>だったので、あんまり力になれてないので大変申し訳なく思っています。。。
ただ、素晴らしい出来（カラーでKibanaの解説が日本語で読めたり、Fluentdの逆引きのリストがあったり、ログを貯めて可視化する意義を説明してあったり）です。</p>
<p>ぜひ、読んだ感想をいただければと！</p>
</content:encoded>
    </item>
    
    <item>
      <title>第2回elasticsearch勉強会を開催しました！ #elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2013/11/12/elasticsearch-japan-user-meetup-no2/</link>
      <pubDate>Tue, 12 Nov 2013 18:16:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/11/12/elasticsearch-japan-user-meetup-no2/</guid>
      <description>第2回を開催しました！ すごい、140人くらいくらいの参加登録者（参加者は１００人ちょっと！）がいて、びっくりです。 ステキな会場を提供していた</description>
      <content:encoded><p>第2回を開催しました！
すごい、140人くらいくらいの参加登録者（参加者は１００人ちょっと！）がいて、びっくりです。
ステキな会場を提供していただいた、<a href="http://recruit-tech.co.jp/recruitment/">リクルートテクノロジーズ</a>さん、運営していただいた方々、スピーカーの皆さん、参加者の皆さん本当にありがとうございました。
今回も素敵な看板ありがとうございます。</p>

<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" style="max-width:300">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20131112/es_signboard.jpg" />
    </div>
    <a href="/images/entries/20131112/es_signboard.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<p>今回もしっかり楽しめたので、次回も頑張ります！</p>
<p>今回は、<a href="https://groups.google.com/forum/#!forum/elasticsearch-jp">elasticsearch-jp</a>MLの紹介とかをできたのでよかったかなぁと。
ぜひ、活用してください！どんな質問でもいいので。</p>
<p>あと、スライドに入ってた例の本もよろしくです。</p>
<!-- more -->
<p>ということで、懇親会も盛り上がったし楽しかったです。
今後も場の提供＋自分の勉強のトリガーとして、開催していくので、ご協力お願いします！
聞きたい話など、MLや@ツイートしていただければと。</p>
<h2 id="elasticsearchのrouting機能株式会社シーマーク大谷純johtani">elasticsearchのRouting機能：株式会社シーマーク　大谷　純　（@johtani）</h2>
<p>スライド：<a href="/images/entries/20131112/About_es_routing.pdf">Routing機能</a>※スライドはPDFです。</p>
<p>ド緊張で、大した発表ではなかったですが。。。
どちらかと言うとSolr本の紹介だったかもなぁ。スミマセン。</p>
<p>※スライドが一部文字が消えてるので、作りなおすかも。</p>
<h2 id="elasticsearchを使ったbaas基盤の開発仮株式会社富士通ソフトウェアテクノロジーズ-滝田聖己さんpisatoshi">ElasticSearchを使ったBaaS基盤の開発(仮)：株式会社富士通ソフトウェアテクノロジーズ 滝田聖己さん（@pisatoshi）</h2>
<p>スライド：<a href="https://speakerdeck.com/pisatoshi/elasticsearch-trial-and-error">https://speakerdeck.com/pisatoshi/elasticsearch-trial-and-error</a></p>
<p>本日はお越しいただきありがとうございました！しかも静岡から！今後もよろしくお願い致します。</p>
<ul>
<li>
<p>EnchantMoonでシステム構成ｗ</p>
</li>
<li>
<p>0.17.0から利用されていると。（スゴイ）</p>
</li>
<li>
<p>プライマリのデータストア！ただし、登録元データはMySQLにもある。</p>
</li>
<li>
<p>階層も深く、大きめのドキュメント。</p>
</li>
<li>
<p>レプリカ１、インデックスのバックアップも取ってないと。。。</p>
</li>
<li>
<p>ルーティングの機能</p>
</li>
<li>
<p>DynamicMappingの問題点</p>
</li>
<li>
<p>マッピング定義が肥大、型がコンフリクト。。。苦労しっぱなし</p>
</li>
<li>
<p>データ登録は１台にして、１台で一気に登録してから再配置</p>
</li>
<li>
<p>実際に運用とかされてるので、いろんなノウハウがまだまだありそう！</p>
</li>
</ul>
<h2 id="kibana入門水戸祐介さんy_310">Kibana入門：水戸祐介さん（@y_310）</h2>
<p>スライド：<a href="https://speakerdeck.com/y310/kibanaru-men">https://speakerdeck.com/y310/kibanaru-men</a></p>
<p>（やっぱりru-menになってるｗ）</p>
<p>実は、押しかけて話してもらうように説得したのでした。今後もよろしくです。</p>
<ul>
<li>COOKPADの方によるKibanaのお話。</li>
<li>Kibanaの利点とかなんで？とか。</li>
<li>画面構成の説明から</li>
<li>ダッシュボードは必ず保存して！リロードしたら悲しい思いをしてしまうので。</li>
<li>sparkline便利そうだなぁ。ほんとに、データサイエンティスト系のツールを目指してるのかな</li>
<li>一通り、ダッシュボードに配置できるパネルの説明してもらえたのですごく参考になりました！</li>
<li>Tips周りが役に立ちそう。not_analyzedは重要ですよね。</li>
</ul>
<h2 id="lt">LT</h2>
<h3 id="データ集計用ダッシュボードブラウザとしても使えるelasticsearchkibana-v3を利用する際の運用ノウハウ紹介株式会社リブセンス-ykentaro-さん-yoshi_ken-さん">「データ集計用ダッシュボードブラウザとしても使えるElasticSearch＋Kibana v3を利用する際の運用ノウハウ紹介」：株式会社リブセンス Y.Kentaro さん (@yoshi_ken) さん</h3>
<p>スライド：<a href="http://www.slideshare.net/y-ken/elasticsearch-kibnana-fluentd-management-tips">http://www.slideshare.net/y-ken/elasticsearch-kibnana-fluentd-management-tips</a></p>
<ul>
<li>Kibanaの紹介とかFluentdの紹介。</li>
<li>Tips満載すばらしい。</li>
<li>JDBC riverは0.90.6ではうまく動かないので、気をつけてと。</li>
</ul>
<h3 id="fluentd-as-a-kibanarepeatedly-さん">「Fluentd as a Kibana」：@repeatedly さん</h3>
<p>スライド(gist)？：<a href="https://gist.github.com/repeatedly/7427856">https://gist.github.com/repeatedly/7427856</a></p>
<p>Kibanaがfluentdの中で動くと！？</p>
<h3 id="authプラグインでアクセスコントロール株式会社エヌツーエスエム-菅谷信介さん-shinsuke_sugaya">「Authプラグインでアクセスコントロール」：株式会社エヌツーエスエム 菅谷信介さん (@shinsuke_sugaya)</h3>
<p>スライド：<a href="http://www.slideshare.net/shinsuke/es-auth-plugin">http://www.slideshare.net/shinsuke/es-auth-plugin</a></p>
<p>API毎？インデックスごと？にアクセス制御ができるプラグイン</p>
</content:encoded>
    </item>
    
    <item>
      <title>Kibana3というのもありまして</title>
      <link>https://blog.johtani.info/blog/2013/06/19/introduction-kibana3/</link>
      <pubDate>Wed, 19 Jun 2013 23:43:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/06/19/introduction-kibana3/</guid>
      <description>前回は3番煎じぐらいでしたが、今回は初記事かな？（だといいな） Kibanaには、前回の記事で書いたものとは別に開発中のKibana3というの</description>
      <content:encoded><p>前回は3番煎じぐらいでしたが、今回は初記事かな？（だといいな）</p>
<p>Kibanaには、<a href="http://blog.johtani.info/blog/2013/06/10/fluent-es-kibana/">前回の記事</a>で書いたものとは別に開発中の<a href="http://three.kibana.org/">Kibana3</a>というのが存在します。</p>
<!-- more -->
<h2 id="kibana3って">Kibana3って？</h2>
<p>Kibana2はRubyで書かれていましたが、Kibana3はHTML＋JavaScriptで構成されています。
ですので、ApacheなどのWebサーバに配置することで、利用が可能となります。
ただ、HTML＋JavaScriptのため、ブラウザ上で動作するためブラウザが動作するマシンからElasticSearch（通常だと<code>http://マシン名orIPアドレス:9200/</code>とか）にアクセスできなければいけないという制限があります。</p>
<p>この条件さえクリア出来れば、Kibana3ではKibana2よりも様々なパネルが用意されていて、色々できそうなのでお勧めです。</p>
<h2 id="インストール">インストール</h2>
<p>ElasticSearchやログについては、前回の記事の環境を利用しました。
ですので、Kibana3のインストールのみです。（ApacheもCentOSのサーバに入っていたので。）</p>
<p>ダウンロードして、Apacheの公開ディレクトリに置いただけです。（お試し環境のため、権限とかは大目に見てください。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git clone https://github.com/elasticsearch/kibana.git kibana-javascript
$ cp -R kibana-javascript /var/www/html
</code></pre></div><p>今回はApacheとElasticSearchが同一マシン（＝同一IPアドレスでアクセス可能）で動作している＋ElasticSearchへのアクセスのポートがデフォルト（9200）のため特に設定が必要ありませんでした。</p>
<p>ElasticSeachサーバとKibana3のApacheのサーバが別のサーバの場合やElasticSearchサーバのポートが異なる場合はkibana-javascript/config.jsファイルの編集が必要になります。
cloneしてすぐのconfig.jsは、以下のとおりです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#75715e">/*
</span><span style="color:#75715e">
</span><span style="color:#75715e">elasticsearch:  URL to your elasticsearch server. You almost certainly don&#39;t
</span><span style="color:#75715e">                want &#39;http://localhost:9200&#39; here. Even if Kibana and ES are on
</span><span style="color:#75715e">                the same host
</span><span style="color:#75715e">kibana_index:   The default ES index to use for storing Kibana specific object
</span><span style="color:#75715e">                such as stored dashboards
</span><span style="color:#75715e">modules:        Panel modules to load. In the future these will be inferred
</span><span style="color:#75715e">                from your initial dashboard, though if you share dashboards you
</span><span style="color:#75715e">                will probably need to list them all here
</span><span style="color:#75715e">
</span><span style="color:#75715e">If you need to configure the default dashboard, please see dashboards/default
</span><span style="color:#75715e">
</span><span style="color:#75715e">*/</span>
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">config</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Settings</span>(
{
  <span style="color:#75715e">// By default this will attempt to reach ES at the same host you have
</span><span style="color:#75715e"></span>  <span style="color:#75715e">// elasticsearch installed on. You probably want to set it to the FQDN of your
</span><span style="color:#75715e"></span>  <span style="color:#75715e">// elasticsearch host
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">elasticsearch</span><span style="color:#f92672">:</span>    <span style="color:#e6db74">&#34;http://&#34;</span><span style="color:#f92672">+</span>window.<span style="color:#a6e22e">location</span>.<span style="color:#a6e22e">hostname</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#34;:9200&#34;</span>,
  <span style="color:#75715e">// elasticsearch: &#39;http://localhost:9200&#39;,
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">kibana_index</span><span style="color:#f92672">:</span>     <span style="color:#e6db74">&#34;kibana-int&#34;</span>,
  <span style="color:#a6e22e">modules</span><span style="color:#f92672">:</span>          [<span style="color:#e6db74">&#39;histogram&#39;</span>,<span style="color:#e6db74">&#39;map&#39;</span>,<span style="color:#e6db74">&#39;pie&#39;</span>,<span style="color:#e6db74">&#39;table&#39;</span>,<span style="color:#e6db74">&#39;stringquery&#39;</span>,<span style="color:#e6db74">&#39;sort&#39;</span>,
                    <span style="color:#e6db74">&#39;timepicker&#39;</span>,<span style="color:#e6db74">&#39;text&#39;</span>,<span style="color:#e6db74">&#39;fields&#39;</span>,<span style="color:#e6db74">&#39;hits&#39;</span>,<span style="color:#e6db74">&#39;dashcontrol&#39;</span>,
                    <span style="color:#e6db74">&#39;column&#39;</span>,<span style="color:#e6db74">&#39;derivequeries&#39;</span>,<span style="color:#e6db74">&#39;trends&#39;</span>,<span style="color:#e6db74">&#39;bettermap&#39;</span>],
  }
);
</code></pre></div><p>ポート番号が異なる場合は、1つ目の「elasticsearch:」で指定されている「9200」を環境に合わせて編集するだけになります。
Kibana3とElasticSearchのホストが異なる場合は、1つ目の「elasticsearch:」の行をコメントアウトし、2つ目を有効にしてから環境に合わせたURLに修正して保存すればOKです。</p>
<p>以上で、インストールは完了します。あとは、以下のURLにアクセスするだけです。</p>
<pre><code>http://hogehoge/kibana-javascript/
</code></pre><h2 id="画面構成">画面構成</h2>
<p>アクセスすると次のような画面が表示されます。</p>

<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20130619/kibana3&#43;kibana2-es-index.jpeg" />
    </div>
    <a href="/images/entries/20130619/kibana3&#43;kibana2-es-index.jpeg" itemprop="contentUrl"></a>
      <figcaption align="center"><h4>初期画面</h4>
      </figcaption>
  </figure>
</div>

<p>左上に赤い帯で、「 Oops! Could not match index pattern to any ElasticSearch indices」とエラーが表示されました。</p>
<p>KibanaはElasticSearchに「logstatsh-年.月.日」という日付ごとのインデックスが存在することが前提となっています。
Kibanaに初めてアクセスした場合、「logstash-当日日付」で始まるインデックスを描画しようとします。
これは、私が前回利用したElasticSearchの環境に古いデータ（試したのが19日、データは10日のみ）しか入っていないために出たエラーです。</p>
<p>日付は「Options」というエラーが出ている付近の「Absolute」というリンクをクリックすると、特定の日付をカレンダーで指定することができるようになります。データは6/10にしか入っていないので、6/10（12時くらいから20時くらいまで）のを指定します。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20130619/kibana3-selected-calendar.jpeg" />
    </div>
    <a href="/images/entries/20130619/kibana3-selected-calendar.jpeg" itemprop="contentUrl"></a>
      <figcaption align="center"><h4>日付指定</h4>
      </figcaption>
  </figure>
</div>

<p>選択すると無事データが見えるようになりました。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20130619/Kibana3-sample-include-description.jpeg" />
    </div>
    <a href="/images/entries/20130619/Kibana3-sample-include-description.jpeg" itemprop="contentUrl"></a>
      <figcaption align="center"><h4>データ描画</h4>
      </figcaption>
  </figure>
</div>

<h3 id="ダッシュボードの構成初期">ダッシュボードの構成（初期）</h3>
<p>Kibana3では、この画面をダッシュボードというようです。
このダッシュボードは初期状態では、以下のパーツが表示されています。（子要素があとで説明するパネル名です）</p>
<ul>
<li>Options：描画対象の日付の指定やダッシュボードの保存などを行うRow
<ul>
<li>timepickerパネル：日付の指定</li>
<li>dashcontrolパネル：ダッシュボードの制御（保存とか）</li>
</ul>
</li>
<li>Query：ログ検索式を入れるところ
<ul>
<li>stringqueryパネル</li>
</ul>
</li>
<li>Graph：ヒストグラムの描画（X軸：時間、Y軸：ログ件数）
<ul>
<li>histogramパネル</li>
</ul>
</li>
<li>Events：検索にヒットしたログデータの描画領域
<ul>
<li>fieldsパネル：表示するフィールドの選択（左側。チェックを入れると右側のログ表示領域のカラムが増える）</li>
<li>tableパネル：ログデータ（右側。左側でチェックが入ったカラムだけが表示される。）</li>
</ul>
</li>
</ul>
<p>あくまで初期表示です。各パーツの設定アイコン（歯車のマーク）をクリックすると色々と設定が可能です。
また、「Events」など名称はクリック可能となっていて、クリックすると、そのパーツが折りたたまれた状態にすることも可能です。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20130619/kibana3-collaped.jpeg" />
    </div>
    <a href="/images/entries/20130619/kibana3-collaped.jpeg" itemprop="contentUrl"></a>
      <figcaption align="center"><h4>折りたたんだ状態</h4>
      </figcaption>
  </figure>
</div>

<h3 id="ダッシュボードの設定">ダッシュボードの設定</h3>
<p>ダッシュボードには独自のパネルを簡単に追加することができます。
ダッシュボードの構成はページの一番上にある「Logstash Search」の設定アイコンをクリックすると設定画面が開きます。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20130619/kibana3-dashboad-setting.jpeg" />
    </div>
    <a href="/images/entries/20130619/kibana3-dashboad-setting.jpeg" itemprop="contentUrl"></a>
      <figcaption align="center"><h4>ダッシュボード設定</h4>
      </figcaption>
  </figure>
</div>

<p>「New row」にタイトル名を適当にいれて「Create Row」するとあたらしくパネルを追加することができるRowが追加されます。「Rows」の「Move」にある矢印でRow自体の表示場所を上下に移動することも可能です。</p>
<h3 id="rowの設定">Rowの設定</h3>
<p>追加した「Hoge」にパネルを追加する場合はHogeの上にある設定アイコンをクリックすると設定画面が開きます。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20130619/kibana3-row-setting.jpeg" />
    </div>
    <a href="/images/entries/20130619/kibana3-row-setting.jpeg" itemprop="contentUrl"></a>
      <figcaption align="center"><h4>Rowの設定</h4>
      </figcaption>
  </figure>
</div>

<p>ここでKibana3で用意されているパネルの追加ができます。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20130619/kibana3-panel-add.jpeg" />
    </div>
    <a href="/images/entries/20130619/kibana3-panel-add.jpeg" itemprop="contentUrl"></a>
      <figcaption align="center"><h4>Panel追加ボタン</h4>
      </figcaption>
  </figure>
</div>

<p>パネルを選んでボタンを押せばすぐに表示されます。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20130619/kibana3-sample-panels.jpeg" />
    </div>
    <a href="/images/entries/20130619/kibana3-sample-panels.jpeg" itemprop="contentUrl"></a>
      <figcaption align="center"><h4>パネルの羅列</h4>
      </figcaption>
  </figure>
</div>

<p>こんな感じです。とりあえず、ポコポコと追加してみました。</p>
<p>利用できるパネルの種類は以下の様なパターンです。
適当ですが、表にしてみました。</p>
<table>
<tr><th>パネル名</th><th>概要</th></tr>
<tr><td>column</td><td>Rowの中にパネルを配置するコンテナを用意するためのパネル</td></tr>
<tr><td>dashcontrol</td><td>ダッシュボードの保存、保存したダッシュボードの表示などの操作ボタン</td></tr>
<tr><td>text</td><td>markdown形式などで記述が可能な文章を表示できるパネル</td></tr>
<tr><td>stringquery</td><td>検索クエリ入力用パネル</td></tr>
<tr><td>derivequeries</td><td>フィールドと検索式がわかれた形式の検索入力用パネル</td></tr>
<tr><td>timepicker</td><td>ログ表示の期間を指定するパネル</td></tr>
<tr><td>histogram</td><td>ログの件数のヒストグラム表示用パネル</td></tr>
<tr><td>hits</td><td>ヒット件数表示用パネル</td></tr>
<tr><td>pie</td><td>パイチャート表示用パネル</td></tr>
<tr><td>trends</td><td>指定された時間でデータの増減を%表示するパネル</td></tr>
<tr><td>sort</td><td>ソート条件指定用のプルダウン表示用パネル（変更したらtableの内容がソートされる）</td></tr>
<tr><td>table</td><td>ログデータ表示用パネル</td></tr>
<tr><td>fields</td><td>tableパネルに表示するフィールドを選択するための補助パネル</td></tr>
<tr><td>bettermap</td><td>なんか地図が出てきたパネル<br/>GeoJSONデータをゴニョゴニョ（表示かな？）できるみたい</td></tr>
<tr><td>map</td><td>なんか世界地図が出てきたパネル<br/>２文字の国コード（jaとかか？）かU.S.の州コードのデータを元に地図に色をつけるのかな？</td></tr>
</table>
<p>これらのパネルは個々に色々と設定が可能です。他にもdebug、map2など有りそうでしたがまだ使えないみたいです。</p>
<p>適当に触ってて気づいた注意点です。</p>
<ul>
<li>tableは１ダッシュボードで１つだけが良さそう。
<ul>
<li>２つあると、どちらかにしか描画されない。columnに入れるとグルーピングできたりするのかなぁ？</li>
</ul>
</li>
<li>stringquery、timepickerも１ダッシュボードで１つが良さそう。
<ul>
<li>これもtableと似たような理由です。</li>
</ul>
</li>
<li>ダッシュボード保存し忘れて泣きそうになる
<ul>
<li>JSで実装されてて、自分で色々とカスタマイズできるのですが、保存するのを忘れて泣きそうになりましたｗ</li>
<li>カスタマイズしたダッシュボードについては、ローカルに保存する以外にElasticSearchにも保存ができるみたいです。チームで共有することもできそうです。</li>
</ul>
</li>
<li>derivequeriesを表示するとグラフがカラフルに
<ul>
<li>derivequeriesを追加したらグラフが急にカラフルになりました。</li>
<li>どうもderivequeriesのFieldの部分を変更すると、そのフィールドの値を元にグラフを細分化してくれるようです。色の数の上限はderivequeriesのLength属性の数値で制御出来ます。（5だと5個まで色が出る）</li>
<li>histogramのパネルで自分でクエリを記載することも可能です。ただ、derivequeriesのフィールド変更すると書き換わっちゃいます。。。</li>
</ul>
</li>
</ul>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20130619/kibana3-multi-color-histogram-type.jpeg" />
    </div>
    <a href="/images/entries/20130619/kibana3-multi-color-histogram-type.jpeg" itemprop="contentUrl"></a>
      <figcaption align="center"><h4>derivequeriesを追加したらカラフルに</h4>
      </figcaption>
  </figure>
</div>

<p>ヒストグラムは色々なパターンのグラフを描画できました。ラインによる描画（histo1）、総数を100%としたパーセンテージでの表示（histo2）、ライン＋点による描画（histo3）などです。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20130619/kibana3-several-histogram.jpeg" />
    </div>
    <a href="/images/entries/20130619/kibana3-several-histogram.jpeg" itemprop="contentUrl"></a>
      <figcaption align="center"><h4>ヒストグラムのいくつかのパターン</h4>
      </figcaption>
  </figure>
</div>

<h2 id="感想">感想</h2>
<p>ということで、適当にですが触ってみました。
Kibana2はApacheのアクセスログとかの表示しかできない感じがしましたが、Kibana3だといろいろなデータを描画できそうだなと。
logstash形式のインデックスを用意するのが前提になってるので、時系列データをグラフ描画するのに向いてるんでしょうか。
お手軽にグラフ化できるし、自分でダッシュボードをカスタマイズできるのは素敵です。
ただ、クエリとグラフの関係などはちょっと癖があるかもしれないので、色々と試してみないといけないかもしれないです。
（たとえば、特定のフィールドの値について「A、B、その他」みたいなグラフの描画とかをどうするかとか）</p>
<p>地図の描画は試してみたいかなぁ。</p>
</content:encoded>
    </item>
    
    <item>
      <title>apache-loggen &#43; fluentd &#43; elasticsearch &#43; kibana = ログ検索デモ</title>
      <link>https://blog.johtani.info/blog/2013/06/10/fluent-es-kibana/</link>
      <pubDate>Mon, 10 Jun 2013 23:34:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/06/10/fluent-es-kibana/</guid>
      <description>もう何番煎じだ？ってくらい書かれてますが、コリもせず書いてみました。 Elasticsearch＋Kibanaの環境を作って、タムタムさんのロ</description>
      <content:encoded><p>もう何番煎じだ？ってくらい書かれてますが、コリもせず書いてみました。
Elasticsearch＋Kibanaの環境を作って、タムタムさんのログ生成ツールからApacheのダミーログを流しこんで入れてみました。</p>
<!-- more -->
<h2 id="参考url">参考URL</h2>
<ul>
<li><a href="http://memocra.blogspot.jp/2013/04/kibanakibanaelasticsearchfluentd.html">memorycraftさんのブログ</a></li>
<li><a href="http://kibana.org/">Kibana</a></li>
<li><a href="http://wwwelasticsearch.org">Elasticsearch</a></li>
<li><a href="http://fluentd.org">fluentd</a></li>
<li><a href="http://mt.orz.at/archives/2012/11/apacherubygems.html">apache-loggen</a></li>
</ul>
<h2 id="インストールと起動">インストールと起動</h2>
<p>今回はCentOSへのインストールです。
基本的にはmemorycraftさんのブログの流れのままです。</p>
<h3 id="elasticserchのインストールと起動">elasticserchのインストールと起動</h3>
<p>ダウンロードして、起動するだけ。
お試しということで、-fオプションにてコンソールにログ出力。</p>
<pre><code>curl -OL https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-0.90.1.tar.gz
tar zxvf elasticsearch-0.90.1.tar.gz
cd elasticsearch-0.90.1
./bin/elasticsearch -f
</code></pre><h3 id="kibanaのインストールと起動">Kibanaのインストールと起動</h3>
<p><code>git clone</code>してbundleインストール</p>
<pre><code>git clone --branch=kibana-ruby https://github.com/rashidkpc/Kibana.git
cd Kibana
bundle install
ruby kibana.rb
</code></pre><p>これで、Kibana＋ESのインストール＋起動が完了。
下地が完了。</p>
<h3 id="td-agentのインストールと起動">td-agentのインストールと起動</h3>
<p>ログの流し込みはlogstashなのですが、fluentdのelasticsearchプラグインにて流しこむこともできます。
td.repoとしてtd-agentのリポジトリを登録してから以下を実行します。</p>
<pre><code>yum install td-agent -y
/usr/lib64/fluent/ruby/bin/fluent-gem install fluent-plugin-elasticsearch
vim　/etc/td-agent/td-agent.conf
/etc/init.d/td-agent start
</code></pre><p>これで、td-agentがインストール出来ました。
次は設定です。</p>
<pre><code>&lt;source&gt;
  type tail
  format apache
  path /var/log/httpd/dummy_access_log
  tag dummy.apache.access
&lt;/source&gt;

&lt;match *.apache.*&gt;
  index_name adminpack
  type_name apache
  type elasticsearch
  include_tag_key true
  tag_key @log_name
  host localhost
  port 9200
  logstash_format true
  flush_interval 10s
&lt;/match&gt;
</code></pre><p>以上が設定です。td-agentはtd-agentというユーザで起動されるので、/var/log/httpdディレクトリにアクセスできるかだけ確認が必要です。<br>
いくつかの設定値について気になったので調べました。</p>
<ul>
<li>index_name：adminpackとなってるが、elasticsearchではlogstash-xxxとなってる。
<ul>
<li>これは、logstash_formatがtrueの場合は、利用されないので、指定しなくてもいい。</li>
</ul>
</li>
<li>type_name：Elasticsearchのタイプ名
*　これはlogstash_formatを指定しても有効。ただし、Kibana側で画面からのtype指定は不可能。KibanaConfig.rbにて指定することは可能。</li>
<li>logstash_format：Kibana用にlogstashフォーマットで出力するオプション
<ul>
<li>この指定があるときは、index名が「logstash-YYYY.mm.dd」となる</li>
<li>record（ログ）に@timestampとして時刻が追加される。</li>
</ul>
</li>
<li>tag_key：include_tag_keyがtrueと指定されているため、record（ログ）にtag_keyで指定した文字列をキー、値としてtagの値（上記例だとdummy.apache.access）が付与されて登録される。</li>
</ul>
<h2 id="apache-loggenのインストールと起動">apache-loggenのインストールと起動</h2>
<p>タムタムさんが作成されたApacheのログのダミーを生成するツールです。<br>
gem化されてるので、インストールは非常に簡単です。</p>
<pre><code>gem install apache-loggen
</code></pre><p>で、ログを出力します。出力先は先程設定したdummy_access_logです。</p>
<pre><code>apache-loggen --rate=10 --progress /var/log/httpd/dummy_access_log
</code></pre><p>秒間10アクセスログを出力してくれます。
これで、Kibanaでログが見れるようになりました。
なんて簡単なんでしょう。。。
簡単なログの検索ができてしまいました。
他の形式のログがどうなるのかとかは、また時間があれば。。。</p>
<h2 id="感想とか">感想とか</h2>
<p>非常に簡単でした。素敵です。いくつかこうなるのかな？というのを試してみたのでメモを。</p>
<p>いくつか疑問点です。</p>
<ul>
<li>溜まったログの削除は手動？
<ul>
<li>おそらく。日付ごとにindexが出来上がっているので、削除は楽そう。「logstash-年月日」なので。</li>
</ul>
</li>
<li>認証とかかけれるの？
<ul>
<li>ログ検索は内部でするだろうから、まぁ、なくていいのかな。ログインすらないし。</li>
</ul>
</li>
<li>複数行のログとかってどーすんだろう？（JavaのExceptionとかが混ざるやつ）</li>
</ul>
<p>本格的に触るようになれば調べるかなぁ。。。</p>
<p>あと、ログが増えてきた時にどういった分割構成ができるだろう？って思って考えてみたのが以下になります。</p>
<h3 id="構成パターン">構成パターン</h3>
<p>ログを複数扱う場合は次のようなパターンがありそうかと。</p>
<h4 id="タグfluentdのタグで識別">タグ（fluentdのタグ）で識別</h4>
<p>「@log_name」という名前＝fluentdのタグにてログを識別することで、異なるログを検索することができそうです。
タグであれば、プラグインによってはログ出力時に制御も可能だと思うので、td-agentの設定を変更したりすることもなく対応が可能かと。
ただ、ログの種別ごとにKibanaのプロセスを別にして起動したいといった用途には向いてなさそうです。</p>
<h4 id="type_nameによる識別">type_nameによる識別</h4>
<p>ElasticSearchの機能であるtypeを利用したログの識別パターンです。<br>
fluent-plugin-elasticsearchの設定で<code>type_name</code>を指定しました。
ここを別の名前にすることで、識別することも可能です。</p>
<p><strike>ただし、この場合はKibanaの画面から指定して検索することができません。</strike>
<strong><em>→コメント頂きました。検索条件に「_type:タイプ名」と検索することでtypeを利用した検索が可能です。</em></strong><br>
タグ（@log_name）でも識別できるようにするなどの工夫が必要です。
その代わり、タグ識別ではできなかったKibanaのプロセスを別にして起動することは可能になります。<br>
KibanaConfig.rbのTypeに値を設定することで、起動したKibanaが対象とするログを絞り込むことが可能です。
こうすることで例えば、apache用のKibanaとtomcat用のKibanaは別プロセスにして、ElasticSearchのクラスタは1つという構成も可能になります。</p>
<h4 id="elasticsearchサーバを別立て">ElasticSearchサーバを別立て</h4>
<p>ElasticSearchサーバをそもそも別のプロセスor別のサーバで起動し、Kibanaも別々にすればログの識別も可能です。
可能ですが、色々と管理するものが増えてめんどくさそうですね。。。</p>
<h4 id="インデックス名変更">インデックス名変更</h4>
<p>最後は、fluent-plugin-elasticsearchの設定で「logstash_format」をfalseにすれば、好きなindex_nameを付与できるので、
ログ種別ごとに名前を変更することで識別できます。<br>
ただ、logstash形式でないインデックス名の場合、日付ローテーションができなかったり、Kibana内部で検索時に日付で検索対象を絞り込んで検索することで高速化するといった処理など、使えない機能が多々出てきてしまうのであまりおすすめじゃないかと。。。</p>
<p>ということで、流行りものは触っておこうということで、さわってブログ書いてみました。<br>
開発中に立てておいて、各サーバのログを流しこんでおくなどにも利用できるかもしれないです。
アラート通知などの機能が出てくるともっと便利かもしれないです。</p>
</content:encoded>
    </item>
    
  </channel>
</rss>
