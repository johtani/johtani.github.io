<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wikipedia on @johtaniの日記 3rd</title>
    <link>https://blog.johtani.info/tags/wikipedia/</link>
    <description>Recent content in wikipedia on @johtaniの日記 3rd</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 12 Sep 2013 02:38:00 +0900</lastBuildDate><atom:link href="https://blog.johtani.info/tags/wikipedia/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>elasticsearch-river-wikipediaの疑問点</title>
      <link>https://blog.johtani.info/blog/2013/09/12/question-river-wikipedia/</link>
      <pubDate>Thu, 12 Sep 2013 02:38:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/09/12/question-river-wikipedia/</guid>
      <description>river-wikipediaの前々回の記事で書きましたが、bulk_sizeに関連して登録件数がやけにきりが良いのが気になると書いていまし</description>
      <content:encoded><p><a href="/blog/2013/08/23/index-wikipedia-ja-to-elasticsearch/">river-wikipediaの前々回の記事</a>で書きましたが、bulk_sizeに関連して登録件数がやけにきりが良いのが気になると書いていました。</p>
<p>で、Riverの仕組みを勉强がてら、<a href="https://github.com/elasticsearch/elasticsearch-river-wikipedia">elasticsearch-river-wikipedia</a>のソース（1.2.0）を読んでみました。</p>
<!-- more -->
<h2 id="riverの作り">Riverの作り</h2>
<p>Riverはorg.elasticsearch.river.Riverというinterfaceを実装することで作らています。
ただ、Riverがinterfaceとなっていますが、o.e.river.AbstractRiverComponentというクラスを継承して作られています。</p>
<p>AbstractRiverComponentにはRiverの名前や設定などが用意されています。
ま、ここはそれほど重要じゃないので、軽く流してと。</p>
<p>Riverの設定関連は実装したRiverクラス（ここでは、WikipediaRiverクラス）のコンストラクタで、設定値の読み取りなどの記述を記載します。
このコンストラクタが、<code>_river/hogehoge/_meta</code>をPUTした時のJSONを元にElasticSearchから呼ばれて、Riverのインスタンスが作成されます。（たぶん、<a href="https://github.com/elasticsearch/elasticsearch/blob/master/src/main/java/org/elasticsearch/river/RiversService.java">このへんがその処理</a>だと思う。。。このあたりはまた今度）</p>
<p>実際のRiverの処理はWikipediaRiverクラスのstart()メソッド内部に記述されています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">    <span style="color:#a6e22e">@Override</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">start</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
        logger<span style="color:#f92672">.</span><span style="color:#a6e22e">info</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;starting wikipedia stream&#34;</span><span style="color:#f92672">);</span>
        <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
<span style="color:#960050;background-color:#1e0010">①</span>            client<span style="color:#f92672">.</span><span style="color:#a6e22e">admin</span><span style="color:#f92672">().</span><span style="color:#a6e22e">indices</span><span style="color:#f92672">().</span><span style="color:#a6e22e">prepareCreate</span><span style="color:#f92672">(</span>indexName<span style="color:#f92672">).</span><span style="color:#a6e22e">execute</span><span style="color:#f92672">().</span><span style="color:#a6e22e">actionGet</span><span style="color:#f92672">();</span>
        <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>Exception e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>ExceptionsHelper<span style="color:#f92672">.</span><span style="color:#a6e22e">unwrapCause</span><span style="color:#f92672">(</span>e<span style="color:#f92672">)</span> <span style="color:#66d9ef">instanceof</span> IndexAlreadyExistsException<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                <span style="color:#75715e">// that&#39;s fine
</span><span style="color:#75715e"></span>            <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>ExceptionsHelper<span style="color:#f92672">.</span><span style="color:#a6e22e">unwrapCause</span><span style="color:#f92672">(</span>e<span style="color:#f92672">)</span> <span style="color:#66d9ef">instanceof</span> ClusterBlockException<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                <span style="color:#75715e">// ok, not recovered yet..., lets start indexing and hope we recover by the first bulk
</span><span style="color:#75715e"></span>                <span style="color:#75715e">// TODO: a smarter logic can be to register for cluster event listener here, and only start sampling when the block is removed...
</span><span style="color:#75715e"></span>            <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
                logger<span style="color:#f92672">.</span><span style="color:#a6e22e">warn</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;failed to create index [{}], disabling river...&#34;</span><span style="color:#f92672">,</span> e<span style="color:#f92672">,</span> indexName<span style="color:#f92672">);</span>
                <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">}</span>
<span style="color:#960050;background-color:#1e0010">②</span>        currentRequest <span style="color:#f92672">=</span> client<span style="color:#f92672">.</span><span style="color:#a6e22e">prepareBulk</span><span style="color:#f92672">();</span>
<span style="color:#960050;background-color:#1e0010">③</span>        WikiXMLParser parser <span style="color:#f92672">=</span> WikiXMLParserFactory<span style="color:#f92672">.</span><span style="color:#a6e22e">getSAXParser</span><span style="color:#f92672">(</span>url<span style="color:#f92672">);</span>
        <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
<span style="color:#960050;background-color:#1e0010">④</span>            parser<span style="color:#f92672">.</span><span style="color:#a6e22e">setPageCallback</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> PageCallback<span style="color:#f92672">());</span>
        <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>Exception e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            logger<span style="color:#f92672">.</span><span style="color:#a6e22e">error</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;failed to create parser&#34;</span><span style="color:#f92672">,</span> e<span style="color:#f92672">);</span>
            <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>
        <span style="color:#f92672">}</span>
<span style="color:#960050;background-color:#1e0010">⑤</span>        thread <span style="color:#f92672">=</span> EsExecutors<span style="color:#f92672">.</span><span style="color:#a6e22e">daemonThreadFactory</span><span style="color:#f92672">(</span>settings<span style="color:#f92672">.</span><span style="color:#a6e22e">globalSettings</span><span style="color:#f92672">(),</span> <span style="color:#e6db74">&#34;wikipedia_slurper&#34;</span><span style="color:#f92672">).</span><span style="color:#a6e22e">newThread</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> Parser<span style="color:#f92672">(</span>parser<span style="color:#f92672">));</span>
        thread<span style="color:#f92672">.</span><span style="color:#a6e22e">start</span><span style="color:#f92672">();</span>
    <span style="color:#f92672">}</span>
</code></pre></div><p>内部では</p>
<ol>
<li>インデックスの作成</li>
<li>バルクアップデート用クライアントの設定</li>
<li>WikiXMLのパーサの初期化</li>
<li>ページごとにキックされるコールバック処理の登録</li>
<li>デーモンスレッドの起動と起動</li>
</ol>
<p>といった処理の流れになっています。</p>
<p>で、このスレッドの起動後は、4.で用意したparser.parse()処理がグルグル回ります。</p>
<p>1ページがパースされるたびに、<code>WikipediaRiver.PageCallback</code>クラスの<a href="https://github.com/elasticsearch/elasticsearch-river-wikipedia/blob/master/src/main/java/org/elasticsearch/river/wikipedia/WikipediaRiver.java#L166"><code>proess()</code>メソッド</a>が呼ばれます。
このメソッドの最後で、<a href="https://github.com/elasticsearch/elasticsearch-river-wikipedia/blob/master/src/main/java/org/elasticsearch/river/wikipedia/WikipediaRiver.java#L198"><code>processBulkIfNeeded()</code>メソッド</a>が呼ばれています。ここで、実際にパースしたページをインデックスに登録する処理が実行されます。</p>
<p><a href="https://github.com/elasticsearch/elasticsearch-river-wikipedia/blob/master/src/main/java/org/elasticsearch/river/wikipedia/WikipediaRiver.java#L205">このメソッドの1行目</a>が鍵でした。
bulkSize以上の件数がバルクのリクエストに貯まった時だけ、実際にインデックスに登録する処理が実行されます。
このため、スレッドが回っている間は、bulkSize以上のデータが貯まらないと、インデックスへの登録は行われないわけです。</p>
<p>次に、このスレッドを止めるには、前々回書いたように、_riverにPUTした、Riverの設定をDELETEするしかありません。（あとは、ElasticSearchを停止するとかでしょうか。）</p>
<p>で、DELETEが実行される呼ばれるのが、<code>WikipediaRiver</code>クラスの<a href="https://github.com/elasticsearch/elasticsearch-river-wikipedia/blob/master/src/main/java/org/elasticsearch/river/wikipedia/WikipediaRiver.java#L135"><code>close()</code>メソッド</a>です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">
    <span style="color:#a6e22e">@Override</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">close</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
        logger<span style="color:#f92672">.</span><span style="color:#a6e22e">info</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;closing wikipedia river&#34;</span><span style="color:#f92672">);</span>
        closed <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>thread <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            thread<span style="color:#f92672">.</span><span style="color:#a6e22e">interrupt</span><span style="color:#f92672">();</span>
        <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>
</code></pre></div><p>見ていただくと分かりますが、スレッド止めて終了です。</p>
<h3 id="問題点は">問題点は？</h3>
<p>ということで、</p>
<ul>
<li>WikipediaのXMLを読み込んでもRiverは停止しない</li>
<li>Riverの停止を行ってもスレッドが止められるだけ。</li>
<li>bulkSize以下の件数が<code>currentRequest</code>に残っているけど、破棄される</li>
</ul>
<p>とまぁ、こんな流れになっているので、最後の端数のドキュメントがインデックスに登録されないようです。
（まだ、ちゃんと確認してないんですが、備忘録のため先に書いちゃいました。。。）</p>
<p>じゃあ、全部うまく登録するにはどうしたもんかなぁと。
いまのところ思いついたのはこんな感じです。
他にいい案があったら教えて下さい。</p>
<ul>
<li>案１：close()処理の中で、スレッド停止後に、<code>currentRequest</code>に貯まっているデータをインデックスに登録しちゃう</li>
<li>案２：bulkSize以外に、定期的（指定された時間）で登録処理を実行してしまう。</li>
</ul>
<p>簡単なのでとりあえず、案１を実装してみるかなぁと。
（さっさとコード書けよって話ですね。。。スミマセン）
その前にMLで質問ですかねぇ、英語で。</p>
<p>WikipediaのRiverをざっと眺めてみた感じですが、わかりやすい作りだなぁと。
他のRiverがどうなってるかをちゃんと見てませんが、他にもbulkSize指定をするRiverの場合は、このように件数がbulkSizeに満たない状態ではデータが登録されないといったことがあるかもしれません。</p>
<p>ElasticSearchのソースを読み始める取っ掛かりとしては面白いかと思いますので、興味ある方は読んで作ってみるといいかもしれません。（私は読んだだけですがｗ）</p>
<h2 id="追記20130913-2100">追記（2013/09/13 21:00）</h2>
<p>MLで質問してみました。とりあえず、案1を。</p>
<p><a href="https://groups.google.com/forum/#!topic/elasticsearch/hqU-LF5aTy4">river-wikipedia does not index all pages</a></p>
<p>他のRiverでは対応してるしバグだね、Issue上げてとのことで、あげときました。
ついでにプルリクも出せばいいんでしょうが、プルリクまだやったことないヘタレです。。。</p>
<p>あと、案2についても同じトピックで質問してます。
どうやら、BulkProcessorにその機能があるよと。
<code>flushinterval</code>というプロパティがありそうです。どうやって設定して、どうやって動くのかとか見てないので、
調査してブログorLTかな。</p>
<p><a href="http://www.elasticsearch.org/guide/reference/api/bulk-udp/">bulk udp</a>にはその値を設定できそうなのがあるんだよなぁ。</p>
<h2 id="追記その２20130916-2350">追記その２（2013/09/16 23:50）</h2>
<p>さっそく<a href="https://github.com/elasticsearch/elasticsearch-river-wikipedia/commit/3719ac5cd3cd5f0e4e57edaa72f5d4ca0b45ca5d">修正版がコミット(コミットログ)</a>されてました。
結構変わってます。BulkProcessorに<code>flush_interval</code>の設定をすれば、よしなにやってくれる仕組みがすでに実装されているようです。
<code>bulkSize</code>についても同様に、BulkProcessorに設定すれば良いようです。
Riverの仕組みが結構スッキリしています。
もともと実装されていた、bulkSizeごとの処理も消されています。
確かに、BulkProcessorの仕組みとして実装されている方がしっくりきますね。</p>
<p>ということで、考える暇もなくコミットされてしまいました。
こうやって質問しつつ、少しずつソースを読んでいこうかなと思ってるとこです。</p>
</content:encoded>
    </item>
    
    <item>
      <title>日本語Wikipediaをインデクシング（Kuromojiバージョン）</title>
      <link>https://blog.johtani.info/blog/2013/09/03/ja-wikipedia-with-kuromoji/</link>
      <pubDate>Tue, 03 Sep 2013 01:15:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/09/03/ja-wikipedia-with-kuromoji/</guid>
      <description>前々回紹介した、日本語Wikipediaのデータをインデックス登録する記事の続きです。 今回は、Kuromojiのアナライザを利用してインデッ</description>
      <content:encoded><p><a href="/blog/2013/08/23/index-wikipedia-ja-to-elasticsearch">前々回紹介した、日本語Wikipediaのデータをインデックス登録する記事</a>の続きです。</p>
<!-- more -->
<p>今回は、Kuromojiのアナライザを利用してインデックス登録してみます。</p>
<h2 id="余談proxy環境でのプラグインインストール">余談（Proxy環境でのプラグインインストール）</h2>
<p>ElasticSearchのpluginコマンドはJavaで実装されています。（<a href="https://github.com/elasticsearch/elasticsearch/blob/master/src/main/java/org/elasticsearch/plugins/PluginManager.java#L315">org.elasticsearch.plugins.PluginManager</a>）
プラグインのダウンロードには、java.net.URL.openConnection()から取得URLConnectionを使用しています。</p>
<p>ですので、pluginのインストールを行う際に、Proxy環境にある場合は以下のようにコマンドを実行します。</p>
<pre><code>./bin/plugin -DproxyPort=ポート番号 -DproxyHost=ホスト名 -i elasticsearch/elasticsearch-analysis-kuromoji/1.5.0
</code></pre><h2 id="elasticsearch-analysis-kuromojiのインストール">elasticsearch-analysis-kuromojiのインストール</h2>
<p>WikipediaのデータをKuromojiを使って、形態素解析ベースの転置インデックスを作成していきます。
まずは、Kuromojiを利用するために、<a href="https://github.com/elasticsearch/elasticsearch-analysis-kuromoji">Analysisプラグイン</a>のインストールです。
ElasticSearchのバージョンに対応したプラグインのバージョンがあります。（プラグインのページに対応したバージョンの記載あり）
今回はElasticSearchの0.90.3を利用しているため、1.5.0をインストールします。</p>
<pre><code>./bin/plugin -i elasticsearch/elasticsearch-analysis-kuromoji/1.5.0
</code></pre><p>インストール後は再起動しておきます。
なお、Kuromojiを利用して、Wikipediaのデータを登録するばあい、デフォルトの設定では、ヒープが足りなくなるおそれがあります。
ElasticSearchの起動時に以下のオプションを指定して、最大ヒープサイズを2Gとしておきます。</p>
<pre><code>export ES_HEAP_SIZE=2g;./bin/elasticsearch
</code></pre><h2 id="indexの作成デフォルトでkuromojiのanalyzerを利用する">Indexの作成（デフォルトでKuromojiのAnalyzerを利用する）</h2>
<p>Wikipediaのデータを登録する際に、Kuromojiのアナライザを利用したいのが今回の趣旨でした。
一番ラクな方法として、Wikipediaデータのインデックスの設定として、デフォルトのアナライザをKuromojiにしてしまいます。
（きちんと設計する場合は、必要に応じてフィールドごとに指定しましょう）</p>
<pre><code>curl -XPUT 'localhost:9200/ja-wikipedia-kuromoji' -d '{
    &quot;settings&quot;: {
        &quot;analysis&quot;: {
            &quot;analyzer&quot;: {
                &quot;default&quot; : {
                    &quot;type&quot; : &quot;kuromoji&quot;
                }
            }
        }
    }
}'
</code></pre><p>これでkuromojiのアナライザがデフォルトで利用される形となります。
あとは、Riverを起動して登録するだけです。</p>
<h2 id="riverの実行">Riverの実行</h2>
<p>前回と一緒です。
インデックス名（<strong>_river/&lt;インデックス名&gt;/_meta</strong>）だけは、先ほど作成した「<code>ja-wikipedia-kuromoji</code>」に変更してください。</p>
<pre><code>curl -XPUT localhost:9200/_river/ja-wikipedia-kuromoji/_meta -d '
{
    &quot;type&quot; : &quot;wikipedia&quot;,
    &quot;wikipedia&quot; : {
        &quot;url&quot; : &quot;file:/home/johtani/src/jawiki-latest-pages-articles.xml&quot;
    },
    &quot;index&quot; : {
        &quot;bulk_size&quot; : 10000
    }
}'
</code></pre><p>あとは、インデックスされるのを待つだけです。</p>
<h2 id="データ量とか">データ量とか</h2>
<p>5.8gbになりました。Kuromojiを利用したため、形態素解析により単語にきちんとトークないずされた結果でしょう。
Uni-gramだと、転置インデックスのボキャブラリも単語に対してヒットするドキュメント数も大きくなるため、
インデックスサイズも大きくなっているのかと。</p>
<p>検索クエリのサンプルなどはまた後日。（夜遅いので。。。）</p>
</content:encoded>
    </item>
    
    <item>
      <title>ElasticSearchにプラグインで日本語Wikipediaデータを入れてみました</title>
      <link>https://blog.johtani.info/blog/2013/08/23/index-wikipedia-ja-to-elasticsearch/</link>
      <pubDate>Fri, 23 Aug 2013 12:02:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/08/23/index-wikipedia-ja-to-elasticsearch/</guid>
      <description>久々のブログはElasticSearchネタです。勉強会開催する予定だったりすので、もう少し触っておきたいなと。 お手軽に検索するデータとして</description>
      <content:encoded><p>久々のブログはElasticSearchネタです。勉強会開催する予定だったりすので、もう少し触っておきたいなと。
お手軽に検索するデータとして、よくWikipediaのデータを使っています。
ElasticSearchには<a href="https://github.com/elasticsearch/elasticsearch-river-wikipedia">elasticsearch-river-wikipedia</a>という便利なプラグインがあり、Wikipediaのデータを簡単に検索可能な状態にできます。このRiverを利用して日本語のWikipediaのデータを入れたので、メモを取っておきます。
まずは、river-wikipediaで日本語のデータをインデクシングしてみるまでの説明です。
日本語特有の設定（Kuromojiを利用したインデクシング）などはまた後日。</p>
<!-- more -->
<h2 id="プラグインのインストール">プラグインのインストール</h2>
<p>対象とするElasticSearchは現時点で最新版の0.90.3とします。
最新版でRiver動かないなぁとつぶやいた影響かどうかはわかりませんが、2013/08/19に最新版のElasticSearchで動作するプラグインが公開されました。</p>
<p>まずはインストールです。
HPにも書いてありますが、以下のコマンドを実行すればインストールされます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">$ ./bin/plugin -install elasticsearch/elasticsearch-river-wikipedia/1.2.0
-&gt; Installing elasticsearch/elasticsearch-river-wikipedia/1.2.0...
Trying http://download.elasticsearch.org/elasticsearch/elasticsearch-river-wikipedia/elasticsearch-river-wikipedia-1.2.0.zip...
Downloading ..........DONE
Installed river-wikipedia into /opt/elasticsearch/plugins/river-wikipedia
</code></pre></div><p>ElasticSearchが起動している場合はプラグインをインストール後、認識させるためにElasticSearchを再起動します。</p>
<h2 id="日本語wikipediaのインデクシング">日本語Wikipediaのインデクシング</h2>
<p>通常は英語のWikipediaがインデクシングされますが、対象となるファイルを変更することで日本語のWikipediaもインデクシング可能です。
手元に日本語Wikipediaのダンプファイルがあるものとします。（<a href="http://ja.wikipedia.org/wiki/Wikipedia:%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89">ダウンロードはWikipediaデータベースダウンロード</a>のページにあるpages-articles.xml.bz2のファイルです）</p>
<p>ファイルを指定してインデクシングするには、つぎのcurlコマンドを実行します。
コマンドを実行するとすぐにインデクシングが始まりますので注意が必要です。</p>
<pre><code>curl -XPUT localhost:9200/_river/ja-wikipedia/_meta -d '
{
    &quot;type&quot; : &quot;wikipedia&quot;,
    &quot;wikipedia&quot; : {
        &quot;url&quot; : &quot;file:/home/johtani/src/jawiki-latest-pages-articles.xml&quot;
    },
    &quot;index&quot; : {
        &quot;bulk_size&quot; : 1000
    }
}'
</code></pre><p>ここでURLに含まれる「ja-wikipedia」がインデックス名になります。
また、JSONの&quot;url&quot;にはファイルの場所を指定するため、<code>file:</code>で開始するパスを指定します。
例では、bz2を解凍したファイルを指定していますが、bz2のままのファイルでもOKです。</p>
<p>上記コマンドを実行すると、<code>_river</code>というインデックスにつぎのようなエントリが増えています。
(<code>curl -XGET 'localhost:9200/_river/ja-wikipedia/_search?pretty</code>)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
   <span style="color:#f92672">&#34;took&#34;</span>: <span style="color:#ae81ff">5</span>,
   <span style="color:#f92672">&#34;timed_out&#34;</span>: <span style="color:#66d9ef">false</span>,
   <span style="color:#f92672">&#34;_shards&#34;</span>: {
      <span style="color:#f92672">&#34;total&#34;</span>: <span style="color:#ae81ff">1</span>,
      <span style="color:#f92672">&#34;successful&#34;</span>: <span style="color:#ae81ff">1</span>,
      <span style="color:#f92672">&#34;failed&#34;</span>: <span style="color:#ae81ff">0</span>
   },
   <span style="color:#f92672">&#34;hits&#34;</span>: {
      <span style="color:#f92672">&#34;total&#34;</span>: <span style="color:#ae81ff">2</span>,
      <span style="color:#f92672">&#34;max_score&#34;</span>: <span style="color:#ae81ff">1</span>,
      <span style="color:#f92672">&#34;hits&#34;</span>: [
         {
            <span style="color:#f92672">&#34;_index&#34;</span>: <span style="color:#e6db74">&#34;_river&#34;</span>,
            <span style="color:#f92672">&#34;_type&#34;</span>: <span style="color:#e6db74">&#34;ja-wikipedia&#34;</span>,
            <span style="color:#f92672">&#34;_id&#34;</span>: <span style="color:#e6db74">&#34;_status&#34;</span>,
            <span style="color:#f92672">&#34;_score&#34;</span>: <span style="color:#ae81ff">1</span>,
            <span style="color:#f92672">&#34;_source&#34;</span>: {
               <span style="color:#f92672">&#34;ok&#34;</span>: <span style="color:#66d9ef">true</span>,
               <span style="color:#f92672">&#34;node&#34;</span>: {
                  <span style="color:#f92672">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;gdyvwpiAR52lqUCcRhVwsg&#34;</span>,
                  <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Blitzschlag, Baron Von&#34;</span>,
                  <span style="color:#f92672">&#34;transport_address&#34;</span>: <span style="color:#e6db74">&#34;inet[/192.168.100.7:9300]&#34;</span>
               }
            }
         },
         {
            <span style="color:#f92672">&#34;_index&#34;</span>: <span style="color:#e6db74">&#34;_river&#34;</span>,
            <span style="color:#f92672">&#34;_type&#34;</span>: <span style="color:#e6db74">&#34;ja-wikipedia&#34;</span>,
            <span style="color:#f92672">&#34;_id&#34;</span>: <span style="color:#e6db74">&#34;_meta&#34;</span>,
            <span style="color:#f92672">&#34;_score&#34;</span>: <span style="color:#ae81ff">1</span>,
            <span style="color:#f92672">&#34;_source&#34;</span>: {
               <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;wikipedia&#34;</span>,
               <span style="color:#f92672">&#34;wikipedia&#34;</span>: {
                  <span style="color:#f92672">&#34;url&#34;</span>: <span style="color:#e6db74">&#34;file:/home/johtani/src/jawiki-latest-pages-articles.xml&#34;</span>
               },
               <span style="color:#f92672">&#34;index&#34;</span>: {
                  <span style="color:#f92672">&#34;bulk_size&#34;</span>: <span style="color:#ae81ff">100</span>
               }
            }
         }
      ]
   }
}
</code></pre></div><p><code>&quot;_id&quot;: &quot;_meta&quot;</code>というエントリがさきほど登録したWikipediaのRiverに関する設定です。
<code>&quot;_id&quot;: &quot;_status&quot;</code>というエントリが起動したRiverの状態になります。</p>
<h2 id="riverの停止">Riverの停止</h2>
<p>日本語Wikipediaは結構サイズが大きく、手元のAirでインデクシングするのに30分程度かかりました。（bz2圧縮されていないファイルで、何もしていない状態）</p>
<p>途中でRiverを停止したくなった場合は、以下のcurlコマンドを実行します。</p>
<pre><code>$ curl -XDELETE 'localhost:9200/_river/ja-wikipedia'
</code></pre><p>先ほど設定した<code>_river/ja-wikipedia</code>の情報を削除すると、エントリが削除されたのを検知してRiverが停止します。ログにはつぎのようなメッセージが表示されます。</p>
<pre><code>[2013-08-26 18:26:50,130][INFO ][cluster.metadata         ] [Blitzschlag, Baron Von] [[_river]] remove_mapping [ja-wikipedia]
[2013-08-26 18:26:50,130][INFO ][river.wikipedia          ] [Blitzschlag, Baron Von] [wikipedia][ja-wikipedia] closing wikipedia river
</code></pre><p>Riverを停止してもそれまでインデクシングされたデータは検索できます。
データはちょっとだけで良いという場合は、先ほどの<code>_river</code>のデータを削除してください。
（◯件だけ登録したいとかできるかは調べてないです。）</p>
<h2 id="サイズとかマッピングとか">サイズとかマッピングとか</h2>
<h3 id="サイズ">サイズ</h3>
<p>インデックス前のXMLのサイズが5.7Gのとき、ElasticSearchのインデックスサイズ（Optimize後）は7.2Gとなりました。すこし古いファイルを利用しているため、最新版とはサイズが異なるかもしれません。</p>
<p>あと、データ数が、1540000件とやけにきりがいいのがちょっと気になっています。。。
bulkのサイズを10000で指定してインデックスしたので、切れてるのかなぁと。</p>
<p>ということは、データが欠落しているような気がするのでRiverの作りの問題なのか、ElasticSearchの問題なのかはちょっと調べてみないとわからないなと。</p>
<h3 id="マッピング">マッピング</h3>
<p>出来上がったインデックスのマッピング（Solrでいうスキーマみたいなもの）は次のようになっています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
   <span style="color:#f92672">&#34;ja-wikipedia&#34;</span>: {
      <span style="color:#f92672">&#34;page&#34;</span>: {
         <span style="color:#f92672">&#34;properties&#34;</span>: {
            <span style="color:#f92672">&#34;category&#34;</span>: {
               <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>
            },
            <span style="color:#f92672">&#34;disambiguation&#34;</span>: {
               <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;boolean&#34;</span>
            },
            <span style="color:#f92672">&#34;link&#34;</span>: {
               <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>
            },
            <span style="color:#f92672">&#34;redirect&#34;</span>: {
               <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;boolean&#34;</span>
            },
            <span style="color:#f92672">&#34;special&#34;</span>: {
               <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;boolean&#34;</span>
            },
            <span style="color:#f92672">&#34;stub&#34;</span>: {
               <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;boolean&#34;</span>
            },
            <span style="color:#f92672">&#34;text&#34;</span>: {
               <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>
            },
            <span style="color:#f92672">&#34;title&#34;</span>: {
               <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>
            }
         }
      }
   }
}
</code></pre></div><p>Wikipediaの各種データが上記のフィールドに入っています。
また、マッピングタイプはデフォルトで「page」というタイプになっています。</p>
<h2 id="検索">検索</h2>
<p>先ほどのマッピングを元に検索すればOKです。例えばつぎのような感じです。</p>
<pre><code>curl -XPOST 'localhost:9200/ja-wikipedia/_search?pretty' -d '
{
    &quot;size&quot; : 3,
    &quot;script_fields&quot;: {
       &quot;title_only&quot;: {
          &quot;script&quot;: &quot;_source.title&quot;
       }
    }, 
    &quot;query&quot; : {
        &quot;query_string&quot;: {
            &quot;default_field&quot;: &quot;title&quot;,
            &quot;query&quot; : &quot;千葉&quot;
        }
    }
}'
</code></pre><p>結果はこんな感じ。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
   <span style="color:#f92672">&#34;took&#34;</span>: <span style="color:#ae81ff">51</span>,
   <span style="color:#f92672">&#34;timed_out&#34;</span>: <span style="color:#66d9ef">false</span>,
   <span style="color:#f92672">&#34;_shards&#34;</span>: {
      <span style="color:#f92672">&#34;total&#34;</span>: <span style="color:#ae81ff">5</span>,
      <span style="color:#f92672">&#34;successful&#34;</span>: <span style="color:#ae81ff">5</span>,
      <span style="color:#f92672">&#34;failed&#34;</span>: <span style="color:#ae81ff">0</span>
   },
   <span style="color:#f92672">&#34;hits&#34;</span>: {
      <span style="color:#f92672">&#34;total&#34;</span>: <span style="color:#ae81ff">8616</span>,
      <span style="color:#f92672">&#34;max_score&#34;</span>: <span style="color:#ae81ff">5.8075247</span>,
      <span style="color:#f92672">&#34;hits&#34;</span>: [
         {
            <span style="color:#f92672">&#34;_index&#34;</span>: <span style="color:#e6db74">&#34;ja-wikipedia&#34;</span>,
            <span style="color:#f92672">&#34;_type&#34;</span>: <span style="color:#e6db74">&#34;page&#34;</span>,
            <span style="color:#f92672">&#34;_id&#34;</span>: <span style="color:#e6db74">&#34;3582&#34;</span>,
            <span style="color:#f92672">&#34;_score&#34;</span>: <span style="color:#ae81ff">5.8075247</span>,
            <span style="color:#f92672">&#34;fields&#34;</span>: {
               <span style="color:#f92672">&#34;title_only&#34;</span>: <span style="color:#e6db74">&#34;千葉&#34;</span>
            }
         },
         {
            <span style="color:#f92672">&#34;_index&#34;</span>: <span style="color:#e6db74">&#34;ja-wikipedia&#34;</span>,
            <span style="color:#f92672">&#34;_type&#34;</span>: <span style="color:#e6db74">&#34;page&#34;</span>,
            <span style="color:#f92672">&#34;_id&#34;</span>: <span style="color:#e6db74">&#34;2352241&#34;</span>,
            <span style="color:#f92672">&#34;_score&#34;</span>: <span style="color:#ae81ff">4.94406</span>,
            <span style="color:#f92672">&#34;fields&#34;</span>: {
               <span style="color:#f92672">&#34;title_only&#34;</span>: <span style="color:#e6db74">&#34;千葉千枝子&#34;</span>
            }
         },
         {
            <span style="color:#f92672">&#34;_index&#34;</span>: <span style="color:#e6db74">&#34;ja-wikipedia&#34;</span>,
            <span style="color:#f92672">&#34;_type&#34;</span>: <span style="color:#e6db74">&#34;page&#34;</span>,
            <span style="color:#f92672">&#34;_id&#34;</span>: <span style="color:#e6db74">&#34;14020&#34;</span>,
            <span style="color:#f92672">&#34;_score&#34;</span>: <span style="color:#ae81ff">4.8754807</span>,
            <span style="color:#f92672">&#34;fields&#34;</span>: {
               <span style="color:#f92672">&#34;title_only&#34;</span>: <span style="color:#e6db74">&#34;千葉千恵巳&#34;</span>
            }
         }
      ]
   }
}
</code></pre></div><p>結果を見やすくするため、タイトルだけを「title_only」という表示にしています。
ただ、この検索だと、一見「千葉」できちんとヒットしているように見えますが、ElasticSearchのフィールドの定義はstring型になっています。なので、実は「千」や「葉」だけのデータもヒットしています。
マルチバイト文字は1文字ずつインデックスされてしまい、query_stringというクエリでは、フレーズ検索などができていないためです。</p>
<h2 id="まとめ">まとめ</h2>
<p>プラグインいれて、XMLファイルがあれば、検索できるデータが出来上がるので、
暇があったら、お試しで触ってみるデータを簡単に入れてみてはどうでしょうか。</p>
<p>ただ、いくつか気になる点も。</p>
<ul>
<li>日本語が検索しにくい（string型のフィールドなのでuni-gramっぽくなっている）</li>
<li>bulk_sizeの影響で端数が登録できてない（バグ？どうなの？）</li>
</ul>
<p>ということで、ちょっと使いにくいかもなぁということで、つぎはKuromojiを利用してインデックスしてみてみようかなと。次回のエントリで書く予定です。</p>
</content:encoded>
    </item>
    
  </channel>
</rss>
