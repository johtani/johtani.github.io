<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">

  <channel>
    <title>Marvel on @johtaniの日記 3rd</title>
    <link>https://blog.johtani.info/tags/marvel/</link>
    <description>Recent content in Marvel on @johtaniの日記 3rd</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 30 Oct 2015 16:21:31 +0900</lastBuildDate><atom:link href="https://blog.johtani.info/tags/marvel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Shield、Watcher、Marvel 2.0.0 GAリリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/10/30/shield-watcher-and-marvel-2-0-ga-released-ja/</link>
      <pubDate>Fri, 30 Oct 2015 16:21:31 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/10/30/shield-watcher-and-marvel-2-0-ga-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Shield, Watcher, and Marvel 2.0.0 GA Released 本日（10/28）Shield、WatcherおよびMarv</description>
      <content:encoded>&lt;p&gt;&lt;strong&gt;※この記事は次のブログを翻訳したものになります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released&#34;&gt;Shield, Watcher, and Marvel 2.0.0 GA Released&lt;/a&gt;&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;本日（10/28）Shield、WatcherおよびMarvel 2.0をリリースしました。
これが、&lt;a href=&#34;https://www.elastic.co/blog/elasticsearch-2-0-0-released&#34;&gt;Elasticsearch 2.0&lt;/a&gt;に対応したこれらのプラグインの最初のリリースです。&lt;/p&gt;
&lt;p&gt;Elasticsearch 2.0対応のほかに、ShieldとWatcher 2.0は、
セキュリティとアラートを拡張するいくつかの新しい素敵な機能も備えています。&lt;/p&gt;
&lt;h2 id=&#34;shield&#34;&gt;Shield&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;拡張可能なレルム - Sheild 1.xはユーザ認証のコア的なものを定義するのにフォーカスし
3つの認証メカニズム（&lt;em&gt;esusers&lt;/em&gt;、LDAP/AD、PKI）を提供しました。
これらを提供することで、多くのユーザおよびユースケースをカバー出来ましたが、
追加の認証メカニズムを統合する必要があることもわかっていました。
ということで、Shieldのレルムベースの認証システムをユーザが利用、拡張できるようにオープンにし、
ユーザ認証を扱うためのレルム実装をプラグインとして拡張できるようにしました。
特定もしくはプロプライエタリな認証メカニズムが必要なユーザもShieldの強力な
セキュリティ機能（ロールベースの認証、セキュアな通信など）をフルに活用できるようになりました。
カスタムレルムの詳細については、&lt;a href=&#34;https://www.elastic.co/guide/en/shield/current/custom-realms.html&#34;&gt;こちら&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;フィールドとドキュメントのACL - Shield 2.0はフィールドとドキュメントレベルのアクセス制御機能を提供します。
これは、ロールごとにアクセス可能なフィールドやドキュメントを定義できます。
この新しい機能は、設定の変更するよりも便利です。
このアクセス制御はElasticsearchのLuceneインデックスという最も低レベルで実装されています。
その結果として、このメンテナンスがより簡単であるだけでなく、より良くなっています。
詳細については&lt;a href=&#34;https://www.elastic.co/guide/en/shield/current/setting-up-field-and-document-level-security.html&#34;&gt;こちら&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ユーザなりすまし - Shield 2.0で、ユーザなりすましの機能が実装されました。
これは、ユーザ（適切なパーミッションを持った）が、他のユーザになることができ、
それらのユーザのためにリクエストを実行できます。
これは、Elasticsearch上に構築されたアプリケーションがすでにユーザ認証を行いますが、
認可はElasticsearchサイドで行う必要があるような場合に有用です。
このシナリオで、アプリケーションの&amp;quot;main&amp;quot;ユーザを設定でき、正しくなりすましを割り当て、
ElasticsearchにアプリケーションユーザとしてリクエストをElasticsearchに実行させることができます。
詳細については、&lt;a href=&#34;https://www.elastic.co/guide/en/shield/current/submitting-requests-for-other-users.html&#34;&gt;こちら&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;watcher&#34;&gt;Watcher&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SlackとHipChatインテグレーション - SlackとHipChatはチーム/グループコラボレーションツールです。
これらは、急速に主流になり、組織の主な内部コミュニケーションハブとなっています。
Watcher 2.0はチャンネル/ルームやユーザにこれらのコミュニケーションチャネル経由で、Watchの通知を行うことができるアクションを
実装しました。
&lt;a href=&#34;https://www.elastic.co/guide/en/watcher/current/configuring-slack.html&#34;&gt;slack&lt;/a&gt;や&lt;a href=&#34;https://www.elastic.co/guide/en/watcher/current/configuring-hipchat.html&#34;&gt;hipchat&lt;/a&gt;アクションについてはドキュメントをご覧ください。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Array Compare Condition - 新しいconditionはタイムシリーズのデータのスパイクを検知するのを簡単にします。
&lt;a href=&#34;https://www.elastic.co/guide/en/watcher/current/condition.html#condition-compare&#34;&gt;compare&lt;/a&gt; conditionは1.xで導入されましたが、このコンディションはElasticsearchのダイナミックスクリプト機能を有効にする必要がアンク使えます。
詳細については&lt;a href=&#34;https://www.elastic.co/guide/en/watcher/current/condition.html#condition-array-compare&#34;&gt;array_compare&lt;/a&gt; conditionをご覧ください。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Watchの有効・無効化 - ユーザからの多かったリクエストとして、Watchの無効化がありました。
1.xには、登録済みのWatchを無効にする機能がありませんでした。
これは、Watchを消すか、Watchのトリガーを変更することで回避していました。
これは、全体としてはWatchを管理するのを難しくする回避方法でしかありません。
2.0では、APIを呼び出すだけで、Watchの変更をすることなく、簡単にWatchの有効化・無効化が可能になりました。
これは1.0からあるべき基本的な機能でしたが、ついにこの問題を解決しました。
詳細は&lt;a href=&#34;https://www.elastic.co/guide/en/watcher/current/watch-active-state.html#watch-active-state&#34;&gt;こちら&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;marvel&#34;&gt;Marvel&lt;/h2&gt;
&lt;p&gt;Marvel 2.0を紹介するのに興奮しています。
Kibana 4をベースとした、再設計されたUIを持っています。
Marvel 1.xで学んだ多くのことを導入し、より使いやすく監視しやすいUIになっています。
ShieldとWatcherと同様に、最初のMarvelのリリースは将来的な成長の基盤となり
Elasticsearch2.0を効率的に管理するための主要なメトリックにフォーカスしています。&lt;/p&gt;
&lt;p&gt;画像あり。
&lt;a href=&#34;https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released&#34;&gt;※画像に関しては原文をご覧ください。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;再設計により、インタフェースを6ページに減らしています。&lt;/p&gt;
&lt;h3 id=&#34;cluster-list&#34;&gt;Cluster list&lt;/h3&gt;
&lt;p&gt;画像あり。
&lt;a href=&#34;https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released&#34;&gt;※画像に関しては原文をご覧ください。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ユーザやカスタマーの多くは複数のクラスタを利用しています。
新しいMarvelはそれらを集中的にモニタリングする一つのクラスタからそれらを簡単に監視できます。
各クラスタのデータ送信先をこのモニタリングクラスタにするだけです。&lt;/p&gt;
&lt;h3 id=&#34;cluster-overview&#34;&gt;Cluster Overview&lt;/h3&gt;
&lt;p&gt;画像あり。
&lt;a href=&#34;https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released&#34;&gt;※画像に関しては原文をご覧ください。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;クラスタオーバービューはある一つのクラスタの主要な性能メトリックを見ることができ、
素早くスパイクを発見できます。
このページはまた、アクティブなシャードのリカバリやリロケーションも見ることができます。&lt;/p&gt;
&lt;h3 id=&#34;indices-list&#34;&gt;Indices List&lt;/h3&gt;
&lt;p&gt;画像あり。
&lt;a href=&#34;https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released&#34;&gt;※画像に関しては原文をご覧ください。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;インデックスのリストにはクラスタにあるすべてのインデックスとその属性が表示されます。
テーブルはライブでアップデートされ、フィルタリングやソートも可能です。
一番大きなインデックスは？といったことも調べられます。&lt;/p&gt;
&lt;h3 id=&#34;index-detail&#34;&gt;Index Detail&lt;/h3&gt;
&lt;p&gt;画像あり。
&lt;a href=&#34;https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released&#34;&gt;※画像に関しては原文をご覧ください。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;インデックス詳細ページはインデックスの主な性能メトリックを見ることができ、シャードの配置についても表示します。&lt;/p&gt;
&lt;h3 id=&#34;nodes-list&#34;&gt;Nodes List&lt;/h3&gt;
&lt;p&gt;画像あり。
&lt;a href=&#34;https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released&#34;&gt;※画像に関しては原文をご覧ください。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ノードリストはクラスタにあるノードとその主な性能メトリックを見ることができます。
テーブルはライブでアップデートされ、フィルタリングも可能です。
高いCPU利用率やディスクの残り容量なども簡単にわかるようになっています。&lt;/p&gt;
&lt;h3 id=&#34;node-detail&#34;&gt;Node Detail&lt;/h3&gt;
&lt;p&gt;画像あり。
&lt;a href=&#34;https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released&#34;&gt;※画像に関しては原文をご覧ください。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ノード詳細ページは個別のノードに関する主な性能メトリックを見ることができ、ノードにあるシャードのリストも見ることができます。&lt;/p&gt;
&lt;p&gt;新しいMarvelはKibana 4の上に構築されたので、管理方法が変わっています。
Marvelのインストールは2つのステップがあります。
marvel-agentとmarvel user interfaceです。&lt;/p&gt;
&lt;h2 id=&#34;marvel-agent&#34;&gt;Marvel Agent&lt;/h2&gt;
&lt;p&gt;marvel-agentはElasticsearchクラスタにプラグインとしてインストールします。
主なパフォーマンス情報を取得し、ローカルもしくは分離されたモニタリングクラスタにデータを保存・送信します。&lt;/p&gt;
&lt;h2 id=&#34;marvel-user-interface&#34;&gt;Marvel User Interface&lt;/h2&gt;
&lt;p&gt;Marvel UIはKibanaのプラグインとしてインストールします。
これは、Kibana 4.2の新しいプラグインインフラを利用し、
Marvel Appとして、Kibanaのインタフェースとは個別に提供されます。
Kibanaのアプリの切り替えは次の画像の通りです。&lt;/p&gt;
&lt;p&gt;画像あり。
&lt;a href=&#34;https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released&#34;&gt;※画像に関しては原文をご覧ください。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.0リリースは私たちのプロダクトの大きな一歩です。またユーザの意見を常にお待ちしています。
ぜひ、Webフォーラム（https://discuss.elastic.co）やメール（info@elastic.co）でご意見を。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Marvel 1.3.0リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2014/12/18/marvel-1-3-0-released-ja/</link>
      <pubDate>Thu, 18 Dec 2014 17:06:48 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/12/18/marvel-1-3-0-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：marvel 1.3.0 released 12/17に、Elasticsearch Marvel 1.3.0をリリースしました</description>
      <content:encoded>&lt;p&gt;&lt;strong&gt;※この記事は次のブログを翻訳したものになります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;http://www.elasticsearch.org/blog/marvel-1-3-0-released/&#34;&gt;marvel 1.3.0 released&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;12/17に、&lt;strong&gt;Elasticsearch Marvel 1.3.0&lt;/strong&gt;をリリースしました。
Marvelの以前のリリースから、Elasticsearchでは様々なことがありました（Elasticsearch 1.4のリリースなど）。
このバージョンでは、モニタリングにクエリキャッシュや新しいcircuit breakerなどのような機能を追加してあります。
Senseのナレッジベースは最新のAPIを含むものに拡張されています。
また、&lt;a href=&#34;http://www.elasticsearch.org/overview/shield/&#34;&gt;Shield&lt;/a&gt;のリリースに向けた準備として、HTTPsのサポートも追加しました。&lt;/p&gt;
&lt;p&gt;アップグレードのために、Elasticsearchの全てのノードに最新版のMarvelプラグインをインストールする必要があります。
また、他のJavaプラグインと同様に、Marvelの新バージョンを有効にするために、各ノードを（1台ずつ）リスタートする必要があるでしょう。
アップグレードプロセスについての詳細は、&lt;a href=&#34;http://www.elasticsearch.org/guide/en/marvel/current/upgrade.html#upgrade&#34;&gt;Marvelドキュメント&lt;/a&gt;をごらんください。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;まとめとして、ここに本リリースに関する改善点をいかにリストアップしておきます。&lt;/p&gt;
&lt;h3 id=&#34;agent&#34;&gt;agent&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;追加：
&lt;ul&gt;
&lt;li&gt;httpsのサポート&lt;/li&gt;
&lt;li&gt;デフォルトのMarvelの設定（以前は常に9200）ではなく、ローカルノードのポートを自動的に検出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;改善：
&lt;ul&gt;
&lt;li&gt;marvelインデックステンプレートに関するエラーチェックと耐障害性(それに対するチェックと追加時のチェック)&lt;/li&gt;
&lt;li&gt;エラーログに関するくり返しの抑制&lt;/li&gt;
&lt;li&gt;URLパラメータによるインデックス名を指定する_bulk exportコマンド。これは、&lt;code&gt;rest.action.multi.allow_explicit_index&lt;/code&gt;がfalseに設定されているときに有用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正：
&lt;ul&gt;
&lt;li&gt;ES 1.4.0のtribe nodeがMarvelのインストール時に初期化されない問題&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;削除：
&lt;ul&gt;
&lt;li&gt;UIで表示されないoptional shard level statsを除去&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;monitoring-ui&#34;&gt;monitoring ui&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;追加：
&lt;ul&gt;
&lt;li&gt;ES 1.4.0で導入された新しいcircuit breakerを追加&lt;/li&gt;
&lt;li&gt;circuit breakerのlimitをグラフにプロット&lt;/li&gt;
&lt;li&gt;QueryCacheのグラフを追加&lt;/li&gt;
&lt;li&gt;index throttlingのグラフの追加&lt;/li&gt;
&lt;li&gt;Index writerとバージョンのmapのメモリ使用量のグラフの追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正：
&lt;ul&gt;
&lt;li&gt;Network Transport Bytes Receivedグラフに実際の送信量を表示&lt;/li&gt;
&lt;li&gt;Node Statsダッシュボードでいくつかのスレッドプールの不足&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sense&#34;&gt;sense&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;追加：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mappingsをインデックスでオートコンプリートするしないの設定を可能に&lt;/li&gt;
&lt;li&gt;Cluster Reroute API&lt;/li&gt;
&lt;li&gt;Search APIのQuery Cacheパラメータ&lt;/li&gt;
&lt;li&gt;Analyze API&lt;/li&gt;
&lt;li&gt;Validate Query API&lt;/li&gt;
&lt;li&gt;Put Percolator API&lt;/li&gt;
&lt;li&gt;cluster.routing.allocation.*設定&lt;/li&gt;
&lt;li&gt;Function Scoreクエリのweightパラメータ&lt;/li&gt;
&lt;li&gt;Flush API&lt;/li&gt;
&lt;li&gt;Terms Aggregationのshow_term_doc_count_errorパラメータ&lt;/li&gt;
&lt;li&gt;Update API&lt;/li&gt;
&lt;li&gt;_geo_distanceソートオプション&lt;/li&gt;
&lt;li&gt;Significant Terms aggregationを1.4.0にアップデート&lt;/li&gt;
&lt;li&gt;Mapping APIにメタデータフィールドを追加&lt;/li&gt;
&lt;li&gt;Get Index API&lt;/li&gt;
&lt;li&gt;Scripted Metric Aggregation&lt;/li&gt;
&lt;li&gt;simple_query_stringクエリ&lt;/li&gt;
&lt;li&gt;More Like Thisクエリを1.4.0にアップデート&lt;/li&gt;
&lt;li&gt;has_childクエリ/フィルタのmin_childrenとmax_childrenオプション&lt;/li&gt;
&lt;li&gt;terms aggs/significant terms aggsのヒントオプション&lt;/li&gt;
&lt;li&gt;Mappings APIのtransform&lt;/li&gt;
&lt;li&gt;インデックスされたscriptとtemplate
* Geo Bounds aggregation&lt;/li&gt;
&lt;li&gt;Top Hits aggregation&lt;/li&gt;
&lt;li&gt;Terms aggregationのcollect_modeオプション&lt;/li&gt;
&lt;li&gt;Percentiles Rank aggregation&lt;/li&gt;
&lt;li&gt;Disk Threshold Allocator設定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修正：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URLオートコンプリートの挙動（プロトコルとホストのような組み合わせ）&lt;/li&gt;
&lt;li&gt;nested typeマッピングのinclude_in_parentとinclude_in_rootの不足&lt;/li&gt;
&lt;li&gt;Rangeフィルタでのgt、gte、lt、lte&lt;/li&gt;
&lt;li&gt;Existsフィルタのオートコンプリート&lt;/li&gt;
&lt;li&gt;Snapshot、Restore APIのリポジトリ設定の時オートコンプリートの失敗&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;いつものように、Elasticsearch Marvelを改善するために、フィードバックをお待ちしています。
&lt;a href=&#34;https://groups.google.com/forum/?fromgroups#!forum/elasticsearch&#34;&gt;ElasticsearchユーザML&lt;/a&gt;や&lt;a href=&#34;http://www.twitter.com/elasticsearch&#34;&gt;Twitter&lt;/a&gt;に質問や意見お送りください。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
    </item>
    
    <item>
      <title>すずけんさんのメモを元にVagrantでElasticsearchクラスタを起動してみた</title>
      <link>https://blog.johtani.info/blog/2014/02/06/es-cluster-start-using-vagrant-and-puppet/</link>
      <pubDate>Thu, 06 Feb 2014 23:09:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/02/06/es-cluster-start-using-vagrant-and-puppet/</guid>
      <description>すずけんさんがVagrant+puppet使って、VM起動してElasticsearchのクラスタを組んでる記事を書いているのを見て、試して</description>
      <content:encoded>&lt;p&gt;すずけんさんがVagrant+puppet使って、VM起動してElasticsearchのクラスタを組んでる記事を書いているのを見て、試してみたくなりました。
ということで、VagrantとかPuppetなに？くらいの私ですが、クラスタを起動するところまで行ったので、その時のメモを残しておきます。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;元記事とか参考&#34;&gt;元記事とか参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://suzuken.hatenablog.jp/entry/2014/02/04/215959&#34;&gt;Vagrant環境にpuppet moduleを利用してさくっとelasticsearchをインストールする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://suzuken.hatenablog.jp/entry/2014/02/05/232543&#34;&gt;Vagrant環境にpuppetを利用してさくっとelasticsearchのclusterを作成する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/elasticsearch/puppet-elasticsearch&#34;&gt;puppet-elasticsearch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;なんとなくの理解&#34;&gt;なんとなくの理解&lt;/h2&gt;
&lt;p&gt;VagrantやPuppetについては、何度か勉強会で話を聞いてはいたのですが、
想像していたレベルだったので良い機会でした。
今のところの認識はこんな感じです。&lt;/p&gt;
&lt;h3 id=&#34;vagrant&#34;&gt;Vagrant&lt;/h3&gt;
&lt;p&gt;VMを起動したり、VM周りの設定をあれこれできるツール。
VMのネットワーク設定や、インスタンス名？などを指定できる。&lt;/p&gt;
&lt;h3 id=&#34;puppet&#34;&gt;Puppet&lt;/h3&gt;
&lt;p&gt;起動後のVM（VMとは限らないか。）のゲストOS側の設定周りやアプリのインストールなどを
実行できるツール。&lt;/p&gt;
&lt;h2 id=&#34;詰まった箇所&#34;&gt;詰まった箇所&lt;/h2&gt;
&lt;p&gt;すずけんさんのブログを元に作業をしましたが、自分がVagrantやPuppetに疎いため、以下の部分で躓いたので、備忘録のために残しておきました。&lt;/p&gt;
&lt;h3 id=&#34;その１puppetのファイルの場所&#34;&gt;その１：Puppetのファイルの場所&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;search01.vm.local&lt;/code&gt;のVMを設定（というか、elasticsearchのインストール？）するときに、&lt;code&gt;manifests/search.app&lt;/code&gt;と&lt;code&gt;roles/search/manifests/init.pp&lt;/code&gt;ファイルが必要で作成します。&lt;/p&gt;
&lt;p&gt;このファイルの配置場所は&lt;code&gt;/vagrant&lt;/code&gt;配下に作成する必要がありました。
&lt;code&gt;ssh search01.vm.local&lt;/code&gt;でVMにログインした場合は&lt;code&gt;/home/vagrant&lt;/code&gt;にログインしており、この場所でファイルを作ってもPuppetがエラーを吐いたためです。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;と思ったのですが&lt;/strong&gt;、あれ？これひょっとしてVagrantfileがあるところにディレクトリとファイル作ると勝手にVMにコピーしてくれるんですか？destroyして、upしたら、ファイルが勝手にコピーされてる。ひょっとして、&lt;code&gt;/vagrant&lt;/code&gt;ってディレクトリはVagrantfileがあるディレクトリを共有してたりするのかな？そのうち、Vagrantについても調べてみようかな。&lt;/p&gt;
&lt;h3 id=&#34;その２ネットワーク周り&#34;&gt;その２：ネットワーク周り&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl http://192.168.10.114:9200/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;をホストOSから実行してみましたがうまく行きませんでした。。。
ネットワーク周りの設定だと思うんですが。
少なくとも「sshによるログイン」「ping」コマンドの応答は返ってきてます。&lt;/p&gt;
&lt;p&gt;また、VM内でcurlコマンドを実行したらレスポンスが返ってきました。&lt;/p&gt;
&lt;p&gt;なんで？ってツイートしたら各所から「iptables」という単語が飛んできて、
service止めたら大正解でした。まぁ、そうですよね。基本ですよね。。。&lt;/p&gt;
&lt;p&gt;ということで、Puppetがよくわかっていませんが、ググって変更してみました。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;manifests/search.app&lt;/code&gt;に以下を追加&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;include iptables
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;roles/iptables/manifests/init.pp&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class iptables {
  service { &amp;#39;iptables&amp;#39;:
    enable =&amp;gt; false,
    ensure =&amp;gt; stopped,
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;iptablesを停止するmanifests？です（良くないことなんですが、よくわかってない）。&lt;/p&gt;
&lt;p&gt;ということで、ローカルで1個のVM起動して、elasticsearchにアクセスできることは確認できました。&lt;/p&gt;
&lt;p&gt;と、書いてるそばから、元記事が修正されてしまいましたｗ&lt;/p&gt;
&lt;h2 id=&#34;クラスタ編変更点&#34;&gt;クラスタ編（変更点）&lt;/h2&gt;
&lt;p&gt;クラスタを組むときに、追加でプラグインを入れたので&lt;code&gt;roles/search/manifests/init.pp&lt;/code&gt;は次のようにしました。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class search {
  class { &amp;#39;elasticsearch&amp;#39;:
    package_url =&amp;gt; &amp;#39;https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-1.0.0.RC2.noarch.rpm&amp;#39;,
    java_install =&amp;gt; true,
    config =&amp;gt; {
      &amp;#39;cluster&amp;#39; =&amp;gt; {
        &amp;#39;name&amp;#39; =&amp;gt; &amp;#39;test-es-cluster&amp;#39;
      },
      &amp;#39;network.host&amp;#39; =&amp;gt; &amp;#39;_eth1:ipv4_&amp;#39;,,
      &amp;#39;marvel.agent.exporter.es.hosts&amp;#39; =&amp;gt; [&amp;#39;192.168.10.114:9200&amp;#39;,&amp;#39;192.168.10.115:9200&amp;#39;]
    }
  }

  elasticsearch::plugin{&amp;#39;elasticsearch/marvel/latest&amp;#39;:
    module_dir =&amp;gt; &amp;#39;marvel&amp;#39;
  }

  elasticsearch::plugin{&amp;#39;mobz/elasticsearch-head&amp;#39;:
    module_dir =&amp;gt; &amp;#39;head&amp;#39;
  }

  elasticsearch::plugin{&amp;#39;royrusso/elasticsearch-HQ&amp;#39;:
    module_dir =&amp;gt; &amp;#39;HQ&amp;#39;
  }

  elasticsearch::plugin{&amp;#39;elasticsearch/elasticsearch-analysis-kuromoji/2.0.0.RC1&amp;#39;:
    module_dir =&amp;gt; &amp;#39;analysis-kuromoji&amp;#39;
  }

  elasticsearch::plugin{&amp;#39;info.johtani/elasticsearch-extended-analyze/1.0.0.RC1&amp;#39;:
    module_dir =&amp;gt; &amp;#39;extended-analyze&amp;#39;
  }

  elasticsearch::plugin{&amp;#39;polyfractal/elasticsearch-inquisitor&amp;#39;:
    module_dir =&amp;gt; &amp;#39;inquisitor&amp;#39;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;とりあえず、今日はクラスタ組んでMarvelやプラグインの動作確認でおしまいです。&lt;/p&gt;
&lt;h2 id=&#34;疑問点&#34;&gt;疑問点&lt;/h2&gt;
&lt;p&gt;いくつか疑問点が。試してみてもないんでなんとも言えませんが。気が向いたら、調べて追記するかも。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:private_network&lt;/code&gt;はVirtualBox内で完結する（Macから外には影響しない）ネットワークが構築される？たぶん、VagrantというよりはVM、仮想化周りの知識なんだろうけど&lt;/li&gt;
&lt;li&gt;どこから再開可能？elasticsearch.ymlの設定を書き換えた場合に、最後のコマンドだけ実行するとちゃんとやりなしてくれたりするのかな？&lt;/li&gt;
&lt;li&gt;VMのディスク増やすのもVagrantでできるんかな？まぁ、できると思うけど。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:forwarded_port&lt;/code&gt;のauto_correctとかわかってない。&lt;/li&gt;
&lt;li&gt;JVMをSunのJVMでかつ、7u25に変更したいのだがどうしたものか？(現時点での推奨バージョン)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;
&lt;p&gt;Vagrantって便利ですね。あれ？って思ったら、destroyして、やり直すのがすごく簡単です。
元記事があるので、なんとなくですが、構成とかどうすればいいかがわかるのは本当に助かりました。
これで、あれこれと検証する環境が簡単に構築できることがわかったので、色々と楽できるかも。ありがとうございます、すずけんさん！&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch Marvelの紹介と第一印象</title>
      <link>https://blog.johtani.info/blog/2014/01/29/simple-introduction-and-first-impression-es-marvel/</link>
      <pubDate>Wed, 29 Jan 2014 17:14:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/01/29/simple-introduction-and-first-impression-es-marvel/</guid>
      <description>昨晩、Elasticsearchから初のプロダクトとなるMarvelがリリースされました。ということで、さっそく触ってみて、簡単な紹介と感想</description>
      <content:encoded>&lt;p&gt;昨晩、Elasticsearchから初のプロダクトとなるMarvelがリリースされました。ということで、さっそく触ってみて、簡単な紹介と感想を書いてみました。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;marvelって&#34;&gt;Marvelって？&lt;/h2&gt;
&lt;p&gt;Elasticsearch社が初のプロダクトとしてリリースした、Elasticsearchクラスタモニタリングツールです。
次のような特徴があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;plugin形式で提供&lt;/li&gt;
&lt;li&gt;GUIがKibana
&lt;ul&gt;
&lt;li&gt;メトリックスはElasticsearchに保存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SenseがChrome以外でも使える&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;プロダクション環境で利用する場合は有料ですが、開発用途では無料で利用できます。
現時点(2014/01/29)では、&lt;code&gt;0.90.9&lt;/code&gt;以上のバージョン(1.0.0.RC1含む)で利用が可能です。&lt;/p&gt;
&lt;h2 id=&#34;なにができるの&#34;&gt;なにができるの？&lt;/h2&gt;
&lt;p&gt;Elasticsearchクラスタに関するメトリックスを保存、可視化できるプロダクトです。
ドキュメント数やJVMの状況、クラスタの状態など、いろいろなメトリックスが保存されます。&lt;/p&gt;
&lt;p&gt;保存先は、別のElasticsearchクラスタにすることも可能です。
お試しでインストールして見る場合は、同一クラスタにサービスに利用するインデックスとMarvel用のメトリックス保存先インデックスを入れても良いです。&lt;/p&gt;
&lt;p&gt;ただ、プロダクション環境では、Marvel用インデックスはあくまでもモニタリングに使用するため、サービスのクラスタへの影響を最小にしたくなります。&lt;/p&gt;
&lt;p&gt;このような場合、Marvelのプラグインの設定を変更することで、メトリックス送信用のエージェントとして動作させることができます。&lt;/p&gt;
&lt;p&gt;詳しくは、Marvelのドキュメントにある&lt;a href=&#34;http://www.elasticsearch.org/guide/en/marvel/current/#_installing_a_secondary_monitoring_cluster&#34;&gt;installing a secondary monitoring cluster&lt;/a&gt;を御覧ください。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;del&gt;1/29 16時時点で、上記ドキュメントのエージェントの送信先の設定に関する部分に誤記がありました。&lt;/del&gt;
&lt;del&gt;おそらく、&lt;a href=&#34;http://www.elasticsearch.org/guide/en/marvel/current/#_statistics_exporting&#34;&gt;configuration options&lt;/a&gt;の記述が正だと思います。&lt;/del&gt;
もう、なおってました。(1/30朝時点)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;キャプチャいろいろ&#34;&gt;キャプチャいろいろ&lt;/h2&gt;
&lt;p&gt;日本語WikipediaのデータをRiverで登録しながら各画面の動作などを見てみました。&lt;/p&gt;
&lt;h4 id=&#34;marvel-overview&#34;&gt;Marvel Overview&lt;/h4&gt;
&lt;p&gt;日本語WikipediaをRiverで登録してる途中。Loadが高くなってることなどがわかります。&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.johtani.info/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140129/Marvel_Overview_indexing_wikipedia_river.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140129/Marvel_Overview_indexing_wikipedia_river.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h4 id=&#34;overview-クラスタの状態が変化&#34;&gt;Overview (クラスタの状態が変化)&lt;/h4&gt;
&lt;p&gt;クラスタの状態が変化したところに、タグが付くみたいです。
ここでは、ノードの一つを停止、起動しました。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140129/tgged_event.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140129/tgged_event.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;インデックス終了後に、クラスタを再起動してしまい、クラスタ内のシャードの再配置が実行されてしまったため、クラスタの状態がYellowになってしまうとこんな感じ。ちょっとわかりにくいです。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140129/cluster_yellow.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140129/cluster_yellow.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h4 id=&#34;sense&#34;&gt;Sense&lt;/h4&gt;
&lt;p&gt;Chromeプラグインとしてリリースされていたクエリ実行コンソールがMarvelのサイトプラグインとして提供されています。これがあるだけで、Elasticsearchへのクエリの実行が格段に効率良くなります。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140129/Marvel_sense.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140129/Marvel_sense.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h4 id=&#34;index-statistics&#34;&gt;Index Statistics&lt;/h4&gt;
&lt;p&gt;インデックスに関する情報のグラフが見れるページです。ドキュメント数の他に、容量やリクエスト数なども見れます。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140129/Marvel_Index_Statistics.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140129/Marvel_Index_Statistics.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;インデックス終了後のグラフはこんな感じ。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140129/after_twice_indexing_ja_wikipedia.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140129/after_twice_indexing_ja_wikipedia.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;インデックス終了後のOverviewはこんなかんじです。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140129/after_indexing_ja_wikipedia.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140129/after_indexing_ja_wikipedia.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h4 id=&#34;cluster-pulse&#34;&gt;Cluster Pulse&lt;/h4&gt;
&lt;p&gt;クラスタで発生したイベントとイベントの詳細を見ることができるページです。各種インデックスがYELLOWからGREENに変わっていっているのがmessageで分かります。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140129/after_reboot_cluster_pulse.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140129/after_reboot_cluster_pulse.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;すべて再配置が終わったらGREENになりました。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140129/finish_recovering_all_indices.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140129/finish_recovering_all_indices.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h4 id=&#34;node-statistics&#34;&gt;Node Statistics&lt;/h4&gt;
&lt;p&gt;各ノードに関する情報を見ることができる画面です。
ノードごとにグラフの色を分けることもできます。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140129/two_node_in_nodes_stats.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140129/two_node_in_nodes_stats.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h4 id=&#34;その他&#34;&gt;その他&lt;/h4&gt;
&lt;p&gt;Marvelプラグインにブラウザから接続できなくなるとこんなメッセージが出ました。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140129/connect_error.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140129/connect_error.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;参考までに、&lt;a href=&#34;https://github.com/mobz/elasticsearch-head&#34;&gt;elasticsearch-head&lt;/a&gt;の画面も。こちらのほうが、シャードの再配置中であるのがひと目で分かります。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140129/elasticsearch-head.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140129/elasticsearch-head.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;
&lt;p&gt;綺麗です。まぁ、Kibanaが綺麗ですから。
クラスタ内で発生したイベントが時系列で保存されるため、あとからどんなことが発生したのかといった原因の追求などには非常に役に立ちそうです。&lt;/p&gt;
&lt;p&gt;ただ、インデックスの状態や状況（クラスタ再起動やノード追加時にshard再配置などが実行されている状況とか）はelasticsearch-headのほうがわかりやすかったです。
インデックス単位でのStatusがMarvelの画面ではわからないため、shard再配置が完了したかどうかなどのタイミングがわかりにくかったです。&lt;/p&gt;
&lt;p&gt;ある程度、多くのノードを利用したクラスタを利用する場合に、モニタリングツールとして利用するのは便利なのではないでしょうか？
時系列でログやイベントが保存されるので、ノードが追加されたり外れたりといった状況があとからでも追跡可能なのが便利です。&lt;/p&gt;
&lt;h2 id=&#34;疑問点&#34;&gt;疑問点&lt;/h2&gt;
&lt;p&gt;インデックスの情報などは、5s毎にMarvelのインデックスに保存されているようです。ただ、GUI上では5分毎のデータしか表示されません。
どうやって変更するんだろう？&lt;/p&gt;
&lt;p&gt;また、Marvelのクラスタへの接続が切れた時のデータはどうなるのか？という部分も気になります。Marvelのクラスタを更新している時や、ネットワークが遮断されてしまった場合のデータがどうなるのかという点です。&lt;/p&gt;
&lt;h2 id=&#34;疑問点への回答20140130追記&#34;&gt;疑問点への回答(2014/01/30追記)&lt;/h2&gt;
&lt;p&gt;疑問点に対して中の人から回答を頂いたので、追記です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Q：GUI上で5分毎のデータしか表示されないんですが？
&lt;ul&gt;
&lt;li&gt;A：ブラウザの負荷を高くしないようにするために、1つのグラフに20のプロットしてるだけです。ズームしたりすると、もっと細かなデータが見れますよ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q：Marvelのクラスタへの接続が切れた時のデータはどうなるんだろう？
&lt;ul&gt;
&lt;li&gt;A：接続が切れた場合は、ローカルに保存されるけどデータは無視されます。接続が戻ると、戻った後のデータは記録されていきます。将来的には改善するかも。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ちなみに、昨日試してた環境が、足元Linux環境（監視対象のクラスタ）＋手元Mac環境（Marvelモニタリングデータ格納クラスタ）という環境でした。
確かに、出社してから、手元Mac環境を起動すると、データが流れてくるようになりました。
ただ、監視対象のクラスタでは、socket timeoutのログがずっと出てましたが。&lt;/p&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.elasticsearch.com/blog/introducing-elasticsearch-marvel-native-monitoring-deployments/&#34;&gt;リリースブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.elasticsearch.com/marvel&#34;&gt;プロダクトページ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.elasticsearch.org/guide/en/marvel/current/&#34;&gt;ドキュメント&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
    </item>
    
  </channel>
</rss>
