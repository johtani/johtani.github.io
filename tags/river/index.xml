<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">

  <channel>
    <title>river on @johtaniの日記 3rd</title>
    <link>https://blog.johtani.info/tags/river/</link>
    <description>Recent content in river on @johtaniの日記 3rd</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 14 Apr 2015 11:22:22 +0900</lastBuildDate><atom:link href="https://blog.johtani.info/tags/river/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Riverが非推奨に（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/04/14/deprecating-rivers-ja/</link>
      <pubDate>Tue, 14 Apr 2015 11:22:22 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/04/14/deprecating-rivers-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Deprecating Rivers Riverを追加した、Elasticsearchを始めたばかり</description>
      <content:encoded>&lt;p&gt;&lt;strong&gt;※この記事は次のブログを翻訳したものになります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;https://www.elastic.co/blog/deprecating_rivers&#34;&gt;Deprecating Rivers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Riverを追加した、Elasticsearchを始めたばかりの頃には、このアイデアは革新的でした。
ユーザがElasticsearchを使って、Elasticsearchで検索できるようにするためにデータを入れることが
最初の仕事の一つです。
なので、Elasticsearchに自動的にデータを取得する直接インストールできるプラグインを
コミュニティの人たちが作成できるようにしました。&lt;/p&gt;
&lt;p&gt;最初のいくつかのRiverの実装は良くできていて非常に有用でした。
CouchDB Riverは非常にシンプルで人気がありました。（CouchDBのAPIを変更してくれてありがとう！）
その他に人気のあるものは例えばRabbitMQでした。
それらはゆっくりとですが、Riverの問題を顕在化させ始めました。&lt;/p&gt;
&lt;p&gt;我々が発見した問題はどんなものでしょう？
それはクラスタの安定性です。
それらの性質なのですが、Riverは外部システムと連携しており、
それらの外部システムは外部のライブラリを必要とします。
それら自体はとても有用なのですが、それらによってオーバーヘッドがあります。
オーバーヘッドがその一部として組み込まれるということは、より多くのメモリ、ソケット、
ファイルデスクリプタなどを使用するということです。また、バグもです。&lt;/p&gt;
&lt;p&gt;ここ数年の私たちの努力で、Elasticsearchのresiliency（弾力性）を改善しています。
そして、Riverが自身の特性として外部システムと外部システムライブラリと一緒に動作することにより
クラスタの不安定性を引き起こしている大きな原因であるということを再三、見てきました。
数ヶ月前にFoundが参加した時に、私たちは彼らも同じ考えであることを知りました。
彼らの管理している数千のクラスタにおいて、Riverプラグインがクラスタの不安定性の多くの原因であると。&lt;/p&gt;
&lt;p&gt;私たちはなんどか、それを見ることで、より弾力性のあるシステムを構築するための助けに、
Riverを非推奨にすることに決定し、ユーザにElasticsearchに「外部から」データを入れることに
集中して欲しいとお願いします。&lt;/p&gt;
&lt;p&gt;Riversは1.5で非推奨になりました。
2.0では移行を簡単にするために基盤は保持しますが、その後のバージョンでは削除するでしょう。&lt;/p&gt;
&lt;p&gt;Elasticsearchにデータを入れる簡単な方法はまだ重要だと考えます。どんな方法があるでしょう？&lt;/p&gt;
&lt;p&gt;この一年あまりで、私たちは多くのプログラミング言語のElasticsearchの公式クライアントを提供しています。
これは、アプリケーションに組み込んで、すでにあるコードベースに簡単にデータを取得する処理を入れられます。
（このあたりおかしい）この手法はまた、Elasticsearch簡単に&amp;hellip;
一般的な例では、ORMとしてすでに使われているドメインモデルをデータベースにマッピングするアプリケーションや
ドメインモデルをElasticsearchにフッキング、インデキシングするための実装です。&lt;/p&gt;
&lt;p&gt;また、Logstashやそれに似たツールもElasticsearchにデータを登録することができます。
例えば、Elasticsearchの幾つかのRiverは、来るLogstash 1.5でLogstashのプラグイン（例えば、&lt;a href=&#34;https://github.com/logstash-plugins/logstash-input-couchdb_changes&#34;&gt;CouchDBのプラグイン&lt;/a&gt;）として実装されているものがあります。&lt;/p&gt;
&lt;p&gt;私はコミュニティと様々なRiverプラグインを作成しての作業を愛しています。
Riverを非推奨にする決定は容易ではありませんでした。
もしあなたがRiverプラグインの作者ならば何をしなければならないでしょう？&lt;/p&gt;
&lt;p&gt;Riverは比較的自身で完結しているため、コードはElasticsearchにデータを入れることが出来る
一般的なライブラリとして抽出することができます。
したがって、このライブラリは様々な場所で利用できるでしょう。
シンプルな「main class」であれば、スタンドアローンとしてそれを実行できるように書くこともできます。&lt;/p&gt;
&lt;p&gt;その他の方法としてはLogstashのinputプラグインに移行することもできます。
Logstashのinputは作成するのが非常に簡単で、1.5に関しては、
Logstashチームがプラグインの&lt;a href=&#34;https://www.elastic.co/guide/en/logstash/current/_how_to_write_a_logstash_input_plugin.html&#34;&gt;記述方法、管理方法、そしてプラグインを探す方法について記述&lt;/a&gt;しています。&lt;/p&gt;
</content:encoded>
    </item>
    
  </channel>
</rss>
