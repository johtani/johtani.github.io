<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">

  <channel>
    <title>画面 on @johtaniの日記 3rd</title>
    <link>https://blog.johtani.info/tags/%E7%94%BB%E9%9D%A2/</link>
    <description>Recent content in 画面 on @johtaniの日記 3rd</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 22 Aug 2023 05:32:44 +0000</lastBuildDate><atom:link href="https://blog.johtani.info/tags/%E7%94%BB%E9%9D%A2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>search-UIとSearchkitと検索画面</title>
      <link>https://blog.johtani.info/blog/2023/08/22/search-ui-and-searchkit/</link>
      <pubDate>Tue, 22 Aug 2023 05:32:44 +0000</pubDate>
      
      <guid>https://blog.johtani.info/blog/2023/08/22/search-ui-and-searchkit/</guid>
      <description>趣味？（検索エンジンに関する趣味プロジェクト）でPythonのプログラムを書いています。 ベクトル検索などの確認なども含めて、Jupyter N</description>
      <content:encoded>&lt;p&gt;趣味？（&lt;a href=&#34;https://github.com/johtani/search-research&#34;&gt;検索エンジンに関する趣味プロジェクト&lt;/a&gt;）でPythonのプログラムを書いています。
ベクトル検索などの確認なども含めて、Jupyter Notebookで簡単なAPIの呼び出しを書いていましたが、検索はやはり画面があるほうがにぎやかでいいですよね。
ということで、画面周りで調べものをしていた時のことを後日の自分のためのメモとして残しておきます。&lt;/p&gt;
&lt;h2 id=&#34;search-uiとsearchkit&#34;&gt;Search UIとSearchkit&lt;/h2&gt;
&lt;p&gt;ということで、それほど手がかからないで検索の画面をサクッと作る方法がないか？ということでちょっとだけ探してみました。
最初にElasticsearchを利用していることもあり、すぐに検索の画面を作れるライブラリ・フレームワーク・コンポーネントがないかな？ということで思いついたのが次の2つでした。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.elastic.co/search-ui/overview&#34;&gt;Elastic Search UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.searchkit.co/&#34;&gt;Searchkit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;どちらも直接Elasticsearchに接続して検索をすることができるコンポーネントです。
Elasticsearchだけで完結していればそれでおしまいだったのですが、今回はバックエンド経由でElasticsearchに検索を書ける必要があります（ベクトル検索の仕組みもデモをしたいため、クエリの文字列をLLMなどでベクトルにしてからknn検索をすることになります）。&lt;/p&gt;
&lt;h3 id=&#34;search-uiの構成&#34;&gt;Search UIの構成&lt;/h3&gt;
&lt;p&gt;もともとSearch UIはElasticのApp SearchのGUI構築向けのコンポーネントとして作られました。
最近になって、直接Elasticsearchに接続できるコネクターを提供しています（ベータだけど）。
このコネクターを利用した場合は、ざっくりですが、このような流れになります。&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.johtani.info/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:600&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20230822/search-ui_simple.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20230822/search-ui_simple.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;また、Search UIはCustom Connectorの仕組みも用意しており（ConnectorのAPIが宣言されているのでそのAPIで独自実装が可能）、これを利用することで、ブラウザではなく&lt;a href=&#34;https://docs.elastic.co/search-ui/api/connectors/elasticsearch#nodejs-integration&#34;&gt;バックエンド（Node）でElasticsearch Connectorを利用する&lt;/a&gt;ような構成も取れるようになっています。&lt;/p&gt;


&lt;div class=&#34;box&#34; style=&#34;max-width:600&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20230822/search-ui_custom_connector.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20230822/search-ui_custom_connector.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&#34;改めて要件をまとめると&#34;&gt;改めて要件をまとめると&lt;/h2&gt;
&lt;p&gt;ということで、やりたいことは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;簡単にUIが作れる&lt;/li&gt;
&lt;li&gt;バックエンドはPythonを経由して検索したい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;となります。
Searchkitも調べようかと思いましたが、いったんはSearch UIのCustom ConnectorでPythonでFastAPIでバックエンドのAPIを実装して、Search UIの想定しているリクエスト・レスポンスに変換すればいいかな？ということにしました。&lt;/p&gt;
&lt;p&gt;とりあえずSearch UI＋Custom Connectorからのリクエスト・レスポンス（フロントからバックエンドへの出入りの部分）を記録し、
Search UI＋Elasticsearch Connectorのときのリクエスト・レスポンス（バックエンドからEsへのの出入りの部分）も記録して、
参考にしながらバックエンドを実装しようと試みました。
Search UIのCustom Connectorのサンプルとなっていた、Node上でElasticsearch Connectorを動かしている部分をPythonで簡単に再実装しようという試みです（まったく同じ実装にする必要はなく、必要最低限の機能（検索窓、ファセット、ページング）が動作するところを目指します）。&lt;/p&gt;
&lt;h2 id=&#34;elasticsearch-api-connectorの調査&#34;&gt;Elasticsearch API connectorの調査&lt;/h2&gt;
&lt;p&gt;方針が決まったので、Search UIがElasticsearch API Connectorに渡しているリクエストをブラウザのデバッグ機能を使って追いかけてみると。。。
&lt;a href=&#34;https://github.com/elastic/search-ui/blob/main/packages/search-ui-engines-connector/src/handlers/search/index.ts#L27&#34;&gt;内部でSearchkitを読んでいる？？&lt;/a&gt;ことがわかりました。&lt;/p&gt;
&lt;p&gt;Elasticsearch API Connectorがリクエストを変換しているのかと思っていたのですが、実は内部にもう一段変換が行われていました。&lt;/p&gt;


&lt;div class=&#34;box&#34; style=&#34;max-width:600&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20230822/searchkit_v3.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20230822/searchkit_v3.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;方針を決めたつもりが、Searchkitが出てきてしまったので、Searchkitも調べてみることに。。。
なお、&lt;a href=&#34;https://github.com/elastic/search-ui/pull/651&#34;&gt;Search UIにElasticsearch API Connectorを導入した&lt;/a&gt;のがどうやら、Searchkitの作者で、現在はElasticのエンジニアになられているようです。&lt;/p&gt;
&lt;h3 id=&#34;searchkitとは&#34;&gt;Searchkitとは？&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/elastic/search-ui/blob/main/packages/search-ui-engines-connector/package.json#L46&#34;&gt;Search UIが利用しているSearchkitは、3.0&lt;/a&gt;ですが、Searchkit本家の&lt;a href=&#34;https://github.com/searchkit/searchkit/tags&#34;&gt;リポジトリ&lt;/a&gt;を見ると4.x.0となっています。&lt;/p&gt;
&lt;p&gt;どうして新しいものをSearch UIで使っていないのかな？と思いつつ調べてみたところ、&lt;a href=&#34;https://blog.searchkit.co/searchkit-v4-search-ui-for-elasticsearch-with-instantsearch-f1297ab5a3d&#34;&gt;Searchkit V4のブログ&lt;/a&gt;を発見しました。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Searchkit V4 integrates with Algolia’s Instantsearch library, which is a Search UI library built by Algolia. Instantsearch is an amazing library, and it’s been used by many companies and supports many frameworks like React, Vue and Angular.
ブログより引用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;どうやら、V4ではコンセプトをガラッと変更されたようで、Algoliaがオープンソースとして開発している&lt;a href=&#34;https://github.com/algolia/instantsearch&#34;&gt;InstantSearch&lt;/a&gt;のコネクター（アダプター）としてSearchkit V4を開発しているようです。
これは最近出てきている検索エンジンの&lt;a href=&#34;https://typesense.org/&#34;&gt;Typesense&lt;/a&gt;や&lt;a href=&#34;https://www.meilisearch.com/&#34;&gt;Meilisearch&lt;/a&gt;の戦略にもなっています。&lt;/p&gt;
&lt;p&gt;なお、SearchkitのGitHubリポジトリやSearch UIのリポジトリを見ていると、Search UIの開発（およびSearchkitの3系）は現在は活発に行われていないように見えました。
Searchkit V4はちょっとずつ開発が進んでいるようです。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ？&lt;/h2&gt;
&lt;p&gt;一応Searchkit V4の現状やInstantSearchもすこしだけ見てみたのですが、今回の私のプロジェクトでは検索画面はまだそこまで重要度は高くないので、いったん調べていたSearch UI＋Pythonのバックエンドの構成で動作する最小限を実装したところで終わりにしました。
なので、Searchkit V4＋InstantSearchの構成はまた今度という感じです。&lt;/p&gt;
&lt;p&gt;なお、Search UIの方は5月からコミットがされていないようです。どうも開発しているチームが別件で忙しそうだなというのを感じました。&lt;/p&gt;
</content:encoded>
    </item>
    
  </channel>
</rss>
