<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>visual studio code on @johtaniの日記 3rd</title>
    <link>https://blog.johtani.info/tags/visual-studio-code/</link>
    <description>Recent content in visual studio code on @johtaniの日記 3rd</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 25 Mar 2020 11:10:05 +0900</lastBuildDate><atom:link href="https://blog.johtani.info/tags/visual-studio-code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ElasticsearchのAnalyze APIのVisual Studio Codeのクライアントプラグイン</title>
      <link>https://blog.johtani.info/blog/2020/03/25/vsc-es-analzye-plugin/</link>
      <pubDate>Wed, 25 Mar 2020 11:10:05 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2020/03/25/vsc-es-analzye-plugin/</guid>
      <description>先日、Visual Studio Codeのプラグインを作ってみた(Azure Search Analyze Client)というブログを書きました。 このプラグインを作ってたタイミン</description>
      <content:encoded>&lt;p&gt;先日、&lt;a href=&#34;https://blog.johtani.info/blog/2020/03/19/azure-search-analyze-plugin&#34;&gt;Visual Studio Codeのプラグインを作ってみた(Azure Search Analyze Client)&lt;/a&gt;というブログを書きました。
このプラグインを作ってたタイミングで、Elasticの河村さん経由で、&lt;a href=&#34;https://msdevjp.connpass.com/event/169431/&#34;&gt;Microsoft Open Tech Night #9 w/ Elastic&lt;/a&gt;でなにかLTしませんか?という打診がありました。&lt;/p&gt;
&lt;p&gt;仕組み的には似たようなものだし、Elasticsearch用の拡張機能も作れるし、発表のネタにもなるし一石二鳥では?ということで、LTを快諾し、昨日発表してきました。&lt;/p&gt;
&lt;h2 id=&#34;資料とか&#34;&gt;資料とか&lt;/h2&gt;
&lt;p&gt;発表資料やGitHubのリポジトリなどは、以下のとおりです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://noti.st/johtani/vDhbXW/analyze-api-vs-code&#34;&gt;Analyze APIのVS Codeプラグインを作ってみた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub Repository : &lt;a href=&#34;https://github.com/johtani/vs-code-es-analyze-client&#34;&gt;https://github.com/johtani/vs-code-es-analyze-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=johtani.elasticsearch-analyze-api-client&#34;&gt;Visual Studio Code Marketplaceページ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;機能&#34;&gt;機能&lt;/h2&gt;
&lt;p&gt;まだ、必要最低限の機能を実装した感じです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Analyze APIのパラメータ入力用のエディタ起動(&lt;code&gt;Elasticsearch Analyze Client: Create Elasticsearch Analyze Request&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Esにリクエストを送信して結果の表示&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;インストールからリクエスト送信して結果が出てくるまでのデモです。&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.johtani.info/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:600&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20200325/plugin-demo.gif&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20200325/plugin-demo.gif&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;1点LTのデモのときに話すのを忘れていましたが、&lt;code&gt;.esanalyze&lt;/code&gt;という拡張子のファイルであれば、このプラグインが入力値を見つけ出して、「&lt;code&gt;Analyze text with analyzers&lt;/code&gt;」というコマンド送信用のリンクをエディタ画面に表示する機能があります。
ですので、パラメータ入力用のエディタを起動し、値を設定したあとにファイルを&lt;code&gt;hoge.esanalyze&lt;/code&gt;というような名前で保存してもらえれば、後日そのファイルを開くことでリクエストが再送できます。&lt;/p&gt;
&lt;h3 id=&#34;azure-search版との機能の違い&#34;&gt;Azure Search版との機能の違い&lt;/h3&gt;
&lt;p&gt;先日のAzure Search向けのクライアントとの違いがいくつかあります。
ElasticsearchのAnalyze APIの方が多機能であるため、プラグインとしても違いがあったほうがいいかなと。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;入力がJSON形式&lt;/li&gt;
&lt;li&gt;結果画面に詳細表示切り替えボタンを追加&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;現時点では対応していませんが、&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-analyze.html#analyze-api-custom-analyzer-ex&#34;&gt;Analyze APIはカスタムのtokenizer、filter、char_filterの設定を入力として受け付けることが可能です&lt;/a&gt;。そのときに指定するのはJSON形式でtokenizerなどの設定を記述します。
今後、これらの対応をすることを考えると、入力全体をJSON形式で読み込めるほうがわかりやすいかなということで、入力はJSON形式で入力してもらうことを想定しました。&lt;/p&gt;
&lt;p&gt;結果画面に詳細表示切り替えボタンを追加したのは、2つの理由があります。1つはAzure SearchのAnalyze APIよりもTokenの情報としていくつか他の情報も存在するためです。複数のAnalyzerとの比較をする場合は、単語列だけを比較したいですが、Analyzer個別の詳細情報を見たい場合もあるので、切り替えができたほうがよいかなと。
2つ目の理由はまだ実装していませんが、&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-analyze.html#explain-analyze-api&#34;&gt;explainパラメータの出力&lt;/a&gt;への対応のためです。
explainパラメータを指定すると、カスタムAnalyzerの場合に、Analyzerの設定にあるchar_filter、tokenizer、token_filterのそれぞれのステップでの単語列の出力が結果として返ってきます。この結果には標準の出力よりもさらに多くのtokenの情報(例えば、kuromojiだと品詞情報、読み、原型など)が追加されてきます。これらの表示を切り替えることができたほうがよいかと。&lt;/p&gt;
&lt;p&gt;これらは、実は&lt;a href=&#34;https://github.com/johtani/analyze-api-ui-plugin/blob/master/docs/GETTING_STARTED.md#3-show-analyzed-result-of-custom-analyzer&#34;&gt;Kibanaのプラグインとしてすでに実装済み&lt;/a&gt;になっています。
同等の機能は実装できるかなという目論見もあり、そちらに合わせた感じにしてあります。&lt;/p&gt;
&lt;h2 id=&#34;今後の対応&#34;&gt;今後の対応&lt;/h2&gt;
&lt;p&gt;現時点では、Analyzer名の指定のみが可能となっています。Kibanaのプラグインと同程度の機能はGitHubのIssueとして登録してみました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/johtani/vs-code-es-analyze-client/issues/5&#34;&gt;explainパラメータ対応&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/johtani/vs-code-es-analyze-client/issues/3&#34;&gt;fieldパラメータ対応&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/johtani/vs-code-es-analyze-client/issues/4&#34;&gt;custom analyzer対応&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その他に、インデックス名やアナライザ名の自動補完みたいな機能があると便利かも?と妄想していたりします(実装が大変かもですが。。。)。Kibanaのプラグインの場合は、Mappingやインデックス名を調べるときに、KibanaのConsoleからチェックすればよかったのですが、このプラグイン単体だとそのあたりの情報の取得に他のツール(Kibanaだったり、REST API Clientだったり)を使わないといけないという問題点はあるかなぁと。&lt;/p&gt;
&lt;p&gt;あとは、結果画面がこのままで本当に見やすいかどうか?なども気になってはいます。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;まだまだ、作ってみたというレベルのプラグインです。
どのくらいの人に使ってもらえるかもわかりませんが、こんな機能あるといい?など要望があればリクエストいただければと。
Twitterで聞いていただいてもいいですし、GitHubのIssueとして登録していただいても構いません。
そもそもいらないなぁなんて意見でももちろん大歓迎です。フィードバックお待ちしてます!&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Visual Studio Codeのプラグインを作ってみた(Azure Search Analyze Client)</title>
      <link>https://blog.johtani.info/blog/2020/03/19/azure-search-analyze-plugin/</link>
      <pubDate>Thu, 19 Mar 2020 10:50:15 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2020/03/19/azure-search-analyze-plugin/</guid>
      <description>動機 Azure Cognitive Searchを検索エンジンに使っているお客さんを手伝っています。 そこで、検索の基本的な話をさせていただきました(もともとJJUGナイ</description>
      <content:encoded>&lt;h2 id=&#34;動機&#34;&gt;動機&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/azure/search/search-what-is-azure-search&#34;&gt;Azure Cognitive Search&lt;/a&gt;を検索エンジンに使っているお客さんを手伝っています。
そこで、&lt;a href=&#34;https://noti.st/johtani/halVGM&#34;&gt;検索の基本的な話&lt;/a&gt;をさせていただきました(もともとJJUGナイトセミナーでしゃべる予定だったスライドがベース)。&lt;/p&gt;
&lt;p&gt;で、Elasticsearchなどの転置インデックスを利用している検索エンジンで検索の基本的な動作がどうなっているかを理解するのに、
個人的には一番重要だと思っているのがAnalysis(Analyze)の機能です。
転置インデックスの単語の切り出し方がどうなっているかによって、望んだ単語でうまく検索できているかいないかなどがわかります。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/rest/api/searchservice/test-analyzer&#34;&gt;Azure Cognitive SearchもAnalyze Text&lt;/a&gt;というAPIを提供してくれています(内部的にはElasticsearchだし)。
APIはあるのですが、返ってくる結果はJSONです。また、他のAnalyzerの設定との違いなどをみたくなったりもします。
やはり、普段使っているツールなどで簡単にどういう単語が出てくるかがわかるとうれしんじゃないかなぁ?と。&lt;/p&gt;
&lt;p&gt;ということで、最初はPythonでちょっとAPI呼び出して、カンマ区切りで出力するものを作ってみたのですが、GUIとかあると便利かなぁという話になりました。
最近、ブログ書いたりするのにVisual Studio Codeを使い始めているので、これなら使いやすいかなと。
ということで、Visual Studio Codeの拡張機能(プラグイン?)としてインストールできる&lt;a href=&#34;https://github.com/johtani/azure-search-analyze-client&#34;&gt;ツール&lt;/a&gt;を作ってみました。
Azure Cognitive Searchを使っている人向けなので、ニッチなツールですが。。。&lt;/p&gt;
&lt;h3 id=&#34;余談&#34;&gt;余談&lt;/h3&gt;
&lt;p&gt;Elastic Stack(Elasticsearch)向けにはKibanaのプラグインでAnalyze APIを可視化するツールを作ってます。
&lt;a href=&#34;https://github.com/johtani/analyze-api-ui-plugin&#34;&gt;analyze-api-ui-plugin&lt;/a&gt;です。Elastic Stack、特にKibanaを必ず利用する方はこちらを使うと便利かもです。&lt;/p&gt;
&lt;h2 id=&#34;概要と機能&#34;&gt;概要と機能&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/johtani/azure-search-analyze-client&#34;&gt;GitHub リポジトリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=johtani.azure-search-analyze-client&amp;amp;ssr=false#overview&#34;&gt;Visual Studio Marketplaceのページ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Marketplaceに公開しているので、&lt;code&gt;johtani&lt;/code&gt;や&lt;code&gt;Azure Search Analyze Client&lt;/code&gt;などで検索してもらえれば出てきてインストールができます。&lt;/p&gt;
&lt;p&gt;機能としては、以下の2つです。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;テンプレートから入力値設定用のドキュメントを作成(&lt;code&gt;Untitled-1&lt;/code&gt;というドキュメントをエディタに新しく開く)&lt;/li&gt;
&lt;li&gt;Azure Cognitive SearchのAnalyze Text APIを呼び出して、結果をHTMLのテーブル形式で表示&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;入力値設定用のドキュメント作成&#34;&gt;入力値設定用のドキュメント作成&lt;/h3&gt;
&lt;p&gt;APIの呼び出しに必要な情報を記入してもらうのに、いくつか案を考えました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プラグインの設定に記入してもらう&lt;/li&gt;
&lt;li&gt;環境変数とかを読み出す&lt;/li&gt;
&lt;li&gt;テキストとして保存したファイルを使う&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;設定や環境変数だと、異なる環境に接続したりするときに、わざわざ設定し直すのがめんどくさいかもと。
で、愛用していた&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=humao.rest-client&#34;&gt;REST API Client&lt;/a&gt;を真似するのが良いかもという結論になり、&lt;code&gt;.analyze&lt;/code&gt;という拡張子のファイルから必要な項目を読み出して、APIを呼び出す形にしてあります。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Command Palette&lt;/code&gt;(左下の歯車マークもしくは、メニューのViewから開ける)から&lt;code&gt;Azure Search Analyze Client: Create Azure Search Analyze Request&lt;/code&gt;というコマンドを選びます。&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.johtani.info/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:600&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20200319/command_palette.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20200319/command_palette.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;すると、以下のようなファイルがエディタに開きます。&lt;/p&gt;


&lt;div class=&#34;box&#34; style=&#34;max-width:600&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20200319/input_template.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20200319/input_template.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;これらの項目をまずは埋めていきます。
それぞれの値がどういったものかは&lt;a href=&#34;https://github.com/johtani/azure-search-analyze-client&#34;&gt;GitHubのREADME&lt;/a&gt;を御覧ください。&lt;/p&gt;
&lt;p&gt;入力値エラー(存在チェックしかしていない)がある場合は、ダイアログが表示されます。&lt;/p&gt;
&lt;h3 id=&#34;結果表示&#34;&gt;結果表示&lt;/h3&gt;
&lt;p&gt;値を入力したら、設定値と&lt;code&gt;###&lt;/code&gt;の間に表示されている&lt;code&gt;Analyze text with analyzers&lt;/code&gt;というグレーの文字をクリックします。すると、APIにリクエストを送信し、結果が返ってきて、別のパネルとして表示されます。&lt;/p&gt;


&lt;div class=&#34;box&#34; style=&#34;max-width:600&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20200319/response.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20200319/response.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;複数のAnalyzerを入力値に設定すると、それぞれがどのような区切り方をするかがわかります。
文字の下にある&lt;code&gt;[0:2]&lt;/code&gt;は、その単語がもとの文章の何文字目から何文字目までに出現しているかというオフセットの表示になります。&lt;/p&gt;
&lt;p&gt;もし、Analyzer名の設定ミスなどで指定されたAnalyzerがない場合は、結果画面にエラーが表示されるようにしています。&lt;/p&gt;
&lt;p&gt;以上が簡単な機能の説明です。
簡単なと言いつつ、これだけしか機能がありませんが。&lt;/p&gt;
&lt;h2 id=&#34;visual-studio-codeのプラグインの作り方&#34;&gt;Visual Studio Codeのプラグインの作り方&lt;/h2&gt;
&lt;p&gt;プラグイン自体の作り方に関しては&lt;a href=&#34;https://code.visualstudio.com/api/get-started/your-first-extension&#34;&gt;Visual Studio CodeのGetting Started&lt;/a&gt;がわかりやすかったです。
APIや機能が豊富なので、最初はちょっと戸惑いましたが、&lt;a href=&#34;https://github.com/microsoft/vscode-extension-samples&#34;&gt;サンプルもGitHubで多数公開&lt;/a&gt;されています。&lt;/p&gt;
&lt;p&gt;あとは、&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=humao.rest-client&#34;&gt;REST API Client&lt;/a&gt;を参考にさせていただきました。&lt;/p&gt;
&lt;p&gt;Getting Startedを一通り読むことで、なんとなくプラグインの作成からMarketplaceへのリリースまでが完了できました。
(TypeScriptに慣れていないのがあるので、プログラミング自体は手間取りましたが。。。)&lt;/p&gt;
&lt;h2 id=&#34;今後の対応&#34;&gt;今後の対応?&lt;/h2&gt;
&lt;p&gt;いまのところ、こんなところを考えていますが、こんな機能がほしい、バグが有るなどあれば、GitHubにIssueを上げていただければと(使う人すくないだろうけど)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;いろいろなエラーに関する対応&lt;/li&gt;
&lt;li&gt;Readmeに画像をアップ&lt;/li&gt;
&lt;li&gt;アイコン作成?&lt;/li&gt;
&lt;li&gt;自動補完機能?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;Visual Studio Codeの拡張機能を作ってみました。
Yeomanによるプロジェクトテンプレートが用意されているので、とりあえず、Hello worldを作るのは簡単でした。
試行錯誤しつつTypeScriptを書いたので、TypeScriptっぽくないところなどもあるかもですが、誰かの役に立つツールになってくれれば良いなぁと。&lt;/p&gt;
</content:encoded>
    </item>
    
  </channel>
</rss>
