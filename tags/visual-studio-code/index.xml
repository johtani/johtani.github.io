<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>visual studio code on @johtaniの日記 3rd</title>
    <link>https://blog.johtani.info/tags/visual-studio-code/</link>
    <description>Recent content in visual studio code on @johtaniの日記 3rd</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 25 Mar 2020 11:10:05 +0900</lastBuildDate><atom:link href="https://blog.johtani.info/tags/visual-studio-code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ElasticsearchのAnalyze APIのVisual Studio Codeのクライアントプラグイン</title>
      <link>https://blog.johtani.info/blog/2020/03/25/vsc-es-analzye-plugin/</link>
      <pubDate>Wed, 25 Mar 2020 11:10:05 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2020/03/25/vsc-es-analzye-plugin/</guid>
      <description>先日、Visual Studio Codeのプラグインを作ってみた(Azure Search Analyze Client)というブログを書きました。 このプラグインを作ってたタイミン</description>
      <content:encoded><p>先日、<a href="/blog/2020/03/19/azure-search-analyze-plugin">Visual Studio Codeのプラグインを作ってみた(Azure Search Analyze Client)</a>というブログを書きました。
このプラグインを作ってたタイミングで、Elasticの河村さん経由で、<a href="https://msdevjp.connpass.com/event/169431/">Microsoft Open Tech Night #9 w/ Elastic</a>でなにかLTしませんか?という打診がありました。</p>
<p>仕組み的には似たようなものだし、Elasticsearch用の拡張機能も作れるし、発表のネタにもなるし一石二鳥では?ということで、LTを快諾し、昨日発表してきました。</p>
<h2 id="資料とか">資料とか</h2>
<p>発表資料やGitHubのリポジトリなどは、以下のとおりです。</p>
<ul>
<li>発表資料 : <a href="https://noti.st/johtani/vDhbXW/analyze-api-vs-code">Analyze APIのVS Codeプラグインを作ってみた</a></li>
<li>GitHub Repository : <a href="https://github.com/johtani/vs-code-es-analyze-client">https://github.com/johtani/vs-code-es-analyze-client</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=johtani.elasticsearch-analyze-api-client">Visual Studio Code Marketplaceページ</a></li>
</ul>
<h2 id="機能">機能</h2>
<p>まだ、必要最低限の機能を実装した感じです。</p>
<ul>
<li>Analyze APIのパラメータ入力用のエディタ起動(<code>Elasticsearch Analyze Client: Create Elasticsearch Analyze Request</code>)</li>
<li>Esにリクエストを送信して結果の表示</li>
</ul>
<p>インストールからリクエスト送信して結果が出てくるまでのデモです。</p>

<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" style="max-width:600">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20200325/plugin-demo.gif" />
    </div>
    <a href="/images/entries/20200325/plugin-demo.gif" itemprop="contentUrl"></a>
  </figure>
</div>

<p>1点LTのデモのときに話すのを忘れていましたが、<code>.esanalyze</code>という拡張子のファイルであれば、このプラグインが入力値を見つけ出して、「<code>Analyze text with analyzers</code>」というコマンド送信用のリンクをエディタ画面に表示する機能があります。
ですので、パラメータ入力用のエディタを起動し、値を設定したあとにファイルを<code>hoge.esanalyze</code>というような名前で保存してもらえれば、後日そのファイルを開くことでリクエストが再送できます。</p>
<h3 id="azure-search版との機能の違い">Azure Search版との機能の違い</h3>
<p>先日のAzure Search向けのクライアントとの違いがいくつかあります。
ElasticsearchのAnalyze APIの方が多機能であるため、プラグインとしても違いがあったほうがいいかなと。</p>
<ol>
<li>入力がJSON形式</li>
<li>結果画面に詳細表示切り替えボタンを追加</li>
</ol>
<p>現時点では対応していませんが、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-analyze.html#analyze-api-custom-analyzer-ex">Analyze APIはカスタムのtokenizer、filter、char_filterの設定を入力として受け付けることが可能です</a>。そのときに指定するのはJSON形式でtokenizerなどの設定を記述します。
今後、これらの対応をすることを考えると、入力全体をJSON形式で読み込めるほうがわかりやすいかなということで、入力はJSON形式で入力してもらうことを想定しました。</p>
<p>結果画面に詳細表示切り替えボタンを追加したのは、2つの理由があります。1つはAzure SearchのAnalyze APIよりもTokenの情報としていくつか他の情報も存在するためです。複数のAnalyzerとの比較をする場合は、単語列だけを比較したいですが、Analyzer個別の詳細情報を見たい場合もあるので、切り替えができたほうがよいかなと。
2つ目の理由はまだ実装していませんが、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-analyze.html#explain-analyze-api">explainパラメータの出力</a>への対応のためです。
explainパラメータを指定すると、カスタムAnalyzerの場合に、Analyzerの設定にあるchar_filter、tokenizer、token_filterのそれぞれのステップでの単語列の出力が結果として返ってきます。この結果には標準の出力よりもさらに多くのtokenの情報(例えば、kuromojiだと品詞情報、読み、原型など)が追加されてきます。これらの表示を切り替えることができたほうがよいかと。</p>
<p>これらは、実は<a href="https://github.com/johtani/analyze-api-ui-plugin/blob/master/docs/GETTING_STARTED.md#3-show-analyzed-result-of-custom-analyzer">Kibanaのプラグインとしてすでに実装済み</a>になっています。
同等の機能は実装できるかなという目論見もあり、そちらに合わせた感じにしてあります。</p>
<h2 id="今後の対応">今後の対応</h2>
<p>現時点では、Analyzer名の指定のみが可能となっています。Kibanaのプラグインと同程度の機能はGitHubのIssueとして登録してみました。</p>
<ul>
<li><a href="https://github.com/johtani/vs-code-es-analyze-client/issues/5">explainパラメータ対応</a></li>
<li><a href="https://github.com/johtani/vs-code-es-analyze-client/issues/3">fieldパラメータ対応</a></li>
<li><a href="https://github.com/johtani/vs-code-es-analyze-client/issues/4">custom analyzer対応</a></li>
</ul>
<p>その他に、インデックス名やアナライザ名の自動補完みたいな機能があると便利かも?と妄想していたりします(実装が大変かもですが。。。)。Kibanaのプラグインの場合は、Mappingやインデックス名を調べるときに、KibanaのConsoleからチェックすればよかったのですが、このプラグイン単体だとそのあたりの情報の取得に他のツール(Kibanaだったり、REST API Clientだったり)を使わないといけないという問題点はあるかなぁと。</p>
<p>あとは、結果画面がこのままで本当に見やすいかどうか?なども気になってはいます。</p>
<h2 id="まとめ">まとめ</h2>
<p>まだまだ、作ってみたというレベルのプラグインです。
どのくらいの人に使ってもらえるかもわかりませんが、こんな機能あるといい?など要望があればリクエストいただければと。
Twitterで聞いていただいてもいいですし、GitHubのIssueとして登録していただいても構いません。
そもそもいらないなぁなんて意見でももちろん大歓迎です。フィードバックお待ちしてます!</p>
</content:encoded>
    </item>
    
    <item>
      <title>Visual Studio Codeのプラグインを作ってみた(Azure Search Analyze Client)</title>
      <link>https://blog.johtani.info/blog/2020/03/19/azure-search-analyze-plugin/</link>
      <pubDate>Thu, 19 Mar 2020 10:50:15 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2020/03/19/azure-search-analyze-plugin/</guid>
      <description>動機 Azure Cognitive Searchを検索エンジンに使っているお客さんを手伝っています。 そこで、検索の基本的な話をさせていただきました(もともとJJUGナイ</description>
      <content:encoded><h2 id="動機">動機</h2>
<p><a href="https://docs.microsoft.com/ja-jp/azure/search/search-what-is-azure-search">Azure Cognitive Search</a>を検索エンジンに使っているお客さんを手伝っています。
そこで、<a href="https://noti.st/johtani/halVGM">検索の基本的な話</a>をさせていただきました(もともとJJUGナイトセミナーでしゃべる予定だったスライドがベース)。</p>
<p>で、Elasticsearchなどの転置インデックスを利用している検索エンジンで検索の基本的な動作がどうなっているかを理解するのに、
個人的には一番重要だと思っているのがAnalysis(Analyze)の機能です。
転置インデックスの単語の切り出し方がどうなっているかによって、望んだ単語でうまく検索できているかいないかなどがわかります。</p>
<p><a href="https://docs.microsoft.com/ja-jp/rest/api/searchservice/test-analyzer">Azure Cognitive SearchもAnalyze Text</a>というAPIを提供してくれています(内部的にはElasticsearchだし)。
APIはあるのですが、返ってくる結果はJSONです。また、他のAnalyzerの設定との違いなどをみたくなったりもします。
やはり、普段使っているツールなどで簡単にどういう単語が出てくるかがわかるとうれしんじゃないかなぁ?と。</p>
<p>ということで、最初はPythonでちょっとAPI呼び出して、カンマ区切りで出力するものを作ってみたのですが、GUIとかあると便利かなぁという話になりました。
最近、ブログ書いたりするのにVisual Studio Codeを使い始めているので、これなら使いやすいかなと。
ということで、Visual Studio Codeの拡張機能(プラグイン?)としてインストールできる<a href="https://github.com/johtani/azure-search-analyze-client">ツール</a>を作ってみました。
Azure Cognitive Searchを使っている人向けなので、ニッチなツールですが。。。</p>
<h3 id="余談">余談</h3>
<p>Elastic Stack(Elasticsearch)向けにはKibanaのプラグインでAnalyze APIを可視化するツールを作ってます。
<a href="https://github.com/johtani/analyze-api-ui-plugin">analyze-api-ui-plugin</a>です。Elastic Stack、特にKibanaを必ず利用する方はこちらを使うと便利かもです。</p>
<h2 id="概要と機能">概要と機能</h2>
<ul>
<li><a href="https://github.com/johtani/azure-search-analyze-client">GitHub リポジトリ</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=johtani.azure-search-analyze-client&amp;ssr=false#overview">Visual Studio Marketplaceのページ</a></li>
</ul>
<p>Marketplaceに公開しているので、<code>johtani</code>や<code>Azure Search Analyze Client</code>などで検索してもらえれば出てきてインストールができます。</p>
<p>機能としては、以下の2つです。</p>
<ol>
<li>テンプレートから入力値設定用のドキュメントを作成(<code>Untitled-1</code>というドキュメントをエディタに新しく開く)</li>
<li>Azure Cognitive SearchのAnalyze Text APIを呼び出して、結果をHTMLのテーブル形式で表示</li>
</ol>
<h3 id="入力値設定用のドキュメント作成">入力値設定用のドキュメント作成</h3>
<p>APIの呼び出しに必要な情報を記入してもらうのに、いくつか案を考えました。</p>
<ul>
<li>プラグインの設定に記入してもらう</li>
<li>環境変数とかを読み出す</li>
<li>テキストとして保存したファイルを使う</li>
</ul>
<p>設定や環境変数だと、異なる環境に接続したりするときに、わざわざ設定し直すのがめんどくさいかもと。
で、愛用していた<a href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client">REST API Client</a>を真似するのが良いかもという結論になり、<code>.analyze</code>という拡張子のファイルから必要な項目を読み出して、APIを呼び出す形にしてあります。</p>
<p><code>Command Palette</code>(左下の歯車マークもしくは、メニューのViewから開ける)から<code>Azure Search Analyze Client: Create Azure Search Analyze Request</code>というコマンドを選びます。</p>

<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" style="max-width:600">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20200319/command_palette.png" />
    </div>
    <a href="/images/entries/20200319/command_palette.png" itemprop="contentUrl"></a>
  </figure>
</div>

<p>すると、以下のようなファイルがエディタに開きます。</p>


<div class="box" style="max-width:600">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20200319/input_template.png" />
    </div>
    <a href="/images/entries/20200319/input_template.png" itemprop="contentUrl"></a>
  </figure>
</div>

<p>これらの項目をまずは埋めていきます。
それぞれの値がどういったものかは<a href="https://github.com/johtani/azure-search-analyze-client">GitHubのREADME</a>を御覧ください。</p>
<p>入力値エラー(存在チェックしかしていない)がある場合は、ダイアログが表示されます。</p>
<h3 id="結果表示">結果表示</h3>
<p>値を入力したら、設定値と<code>###</code>の間に表示されている<code>Analyze text with analyzers</code>というグレーの文字をクリックします。すると、APIにリクエストを送信し、結果が返ってきて、別のパネルとして表示されます。</p>


<div class="box" style="max-width:600">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20200319/response.png" />
    </div>
    <a href="/images/entries/20200319/response.png" itemprop="contentUrl"></a>
  </figure>
</div>

<p>複数のAnalyzerを入力値に設定すると、それぞれがどのような区切り方をするかがわかります。
文字の下にある<code>[0:2]</code>は、その単語がもとの文章の何文字目から何文字目までに出現しているかというオフセットの表示になります。</p>
<p>もし、Analyzer名の設定ミスなどで指定されたAnalyzerがない場合は、結果画面にエラーが表示されるようにしています。</p>
<p>以上が簡単な機能の説明です。
簡単なと言いつつ、これだけしか機能がありませんが。</p>
<h2 id="visual-studio-codeのプラグインの作り方">Visual Studio Codeのプラグインの作り方</h2>
<p>プラグイン自体の作り方に関しては<a href="https://code.visualstudio.com/api/get-started/your-first-extension">Visual Studio CodeのGetting Started</a>がわかりやすかったです。
APIや機能が豊富なので、最初はちょっと戸惑いましたが、<a href="https://github.com/microsoft/vscode-extension-samples">サンプルもGitHubで多数公開</a>されています。</p>
<p>あとは、<a href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client">REST API Client</a>を参考にさせていただきました。</p>
<p>Getting Startedを一通り読むことで、なんとなくプラグインの作成からMarketplaceへのリリースまでが完了できました。
(TypeScriptに慣れていないのがあるので、プログラミング自体は手間取りましたが。。。)</p>
<h2 id="今後の対応">今後の対応?</h2>
<p>いまのところ、こんなところを考えていますが、こんな機能がほしい、バグが有るなどあれば、GitHubにIssueを上げていただければと(使う人すくないだろうけど)。</p>
<ul>
<li>いろいろなエラーに関する対応</li>
<li>Readmeに画像をアップ</li>
<li>アイコン作成?</li>
<li>自動補完機能?</li>
</ul>
<h2 id="まとめ">まとめ</h2>
<p>Visual Studio Codeの拡張機能を作ってみました。
Yeomanによるプロジェクトテンプレートが用意されているので、とりあえず、Hello worldを作るのは簡単でした。
試行錯誤しつつTypeScriptを書いたので、TypeScriptっぽくないところなどもあるかもですが、誰かの役に立つツールになってくれれば良いなぁと。</p>
</content:encoded>
    </item>
    
  </channel>
</rss>
