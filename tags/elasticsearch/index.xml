<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">

  <channel>
    <title>elasticsearch on @johtaniの日記 3rd</title>
    <link>https://blog.johtani.info/tags/elasticsearch/</link>
    <description>Recent content in elasticsearch on @johtaniの日記 3rd</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 03 Mar 2021 16:23:33 +0900</lastBuildDate><atom:link href="https://blog.johtani.info/tags/elasticsearch/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OData式と日本語の検索(NGram)とフレーズ検索</title>
      <link>https://blog.johtani.info/blog/2021/03/03/phrase-query-in-japanese/</link>
      <pubDate>Wed, 03 Mar 2021 16:23:33 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2021/03/03/phrase-query-in-japanese/</guid>
      <description>Azure Cognitive SearchにはOData式という書式で条件が書ける仕組みがあります。 ODataは検索条件（$filter）やソート条件（$orderb</description>
      <content:encoded>&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/azure/search/query-odata-filter-orderby-syntax&#34;&gt;Azure Cognitive SearchにはOData式&lt;/a&gt;という書式で条件が書ける仕組みがあります。
ODataは検索条件（&lt;code&gt;$filter&lt;/code&gt;）やソート条件（&lt;code&gt;$orderby&lt;/code&gt;）、取得する項目名の指定（&lt;code&gt;$select&lt;/code&gt;）です。&lt;/p&gt;
&lt;p&gt;私は、Luceneの構文に慣れているので、&lt;a href=&#34;https://docs.microsoft.com/ja-jp/azure/search/search-query-overview&#34;&gt;普通の&lt;code&gt;search&lt;/code&gt;パラメータ&lt;/a&gt;を利用しようとします。
が、OData式として特殊な書き方がいくつかあるようなのでこちらの利用方法も調べてみました。
その時、N-Gram（よくやるのはN=2）で陥る問題の話もあるのでこちらについても言及します。&lt;/p&gt;
&lt;h2 id=&#34;odata式で検索&#34;&gt;OData式で検索&lt;/h2&gt;
&lt;p&gt;次のような3件のドキュメント(フィールド名は&lt;code&gt;body&lt;/code&gt;とします)をN-Gramで登録していたとします。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ミルクティを飲みたいです。&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;マティーニはカクテルですが、ミルクセーキは？&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;風呂上がりのミルクは最高です。&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;この時、OData式で&lt;code&gt;ミルクティ&lt;/code&gt;という単語で検索してみましょう。&lt;/p&gt;
&lt;p&gt;検索条件は&lt;code&gt;$filter&lt;/code&gt;で指定します。
フルテキスト検索用に関数が用意されており、こちらに単語を指定します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$filter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ismatchscoring&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ミルクティ&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;こんな感じ。フィールドの指定がない場合、対象のフィールドは検索可能なフィールドすべてが検索対象になります（&lt;a href=&#34;https://docs.microsoft.com/ja-jp/rest/api/searchservice/search-documents#query-parameters&#34;&gt;公式ガイドのクエリパラメータ&lt;/a&gt;の&lt;code&gt;queryType&lt;/code&gt;に説明あり）。&lt;/p&gt;
&lt;p&gt;では、実行してみましょう。で返ってくるのは？1だけかな？と思う人が多いかもしれません。
が、結果は3件とも帰ってきます。&lt;/p&gt;
&lt;h2 id=&#34;問題点は&#34;&gt;問題点は？&lt;/h2&gt;
&lt;p&gt;では問題点はどこでしょう？
&lt;code&gt;ismatchscoring&lt;/code&gt;のオプションなどを見る前に、転置インデックスを用いた検索エンジンの挙動をおさらいしましょう。
転置インデックスの仕組みを理解することで、なぜそんな挙動になるのか？というのがわかりやすくなります。
おさらいにはElasticsearchをベースに話をしますが、Azure Cognitive Searchでも同じような挙動になります。&lt;/p&gt;
&lt;h3 id=&#34;転置インデックスとトークナイザーアナライザーの関係おさらい&#34;&gt;転置インデックスとトークナイザー（アナライザー）の関係（おさらい）&lt;/h3&gt;
&lt;p&gt;昨年、オンラインで開催されたOSC広島で発表した資料（録画あり）でもざっくりと説明しています。&lt;/p&gt;
&lt;p data-notist=&#34;johtani/KO04wZ&#34;&gt;View &lt;a href=&#34;https://noti.st/johtani/KO04wZ&#34;&gt;本当にその検索は自分が想像している検索になってますか？&lt;/a&gt; on Notist.&lt;/p&gt;&lt;script async src=&#34;https://on.notist.cloud/embed/002.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;ざっくりですが、おさらいです。&lt;/p&gt;
&lt;p&gt;検索エンジンでは、入力された文章を、ある規則（アナライザー）で単語に分割し、その単語ごとにどのドキュメントに出現したのか？というリストが作られます。
このリストが転置インデックスです。書籍の後ろにある索引を想像するとどんなものかがわかりやすいです。
単語に対してその単語が出てくるページ番号がわかるという仕組みです（下図は本の索引の一例）。&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.johtani.info/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://on.notist.cloud/slides/deck5730/large-21.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://on.notist.cloud/slides/deck5730/large-21.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;書籍の索引は著者や編集の方により厳選された単語のみが採用されています。
が、検索エンジンでは文章を単語に区切る機能が存在します。
この「ある規則」で単語を区切る仕組みが「アナライザー（トークナイザー）」と呼ばれる機能です。
例えば英語用のアナライザーに英語の文章が入力されたとき、文章はこのように単語に区切られたもの（単語列）を出力します（下図）。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://on.notist.cloud/slides/deck5730/large-24.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://on.notist.cloud/slides/deck5730/large-24.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;今回はNGramの話なので、NGramのAnalyzerを利用してみるとこんな感じになります。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://on.notist.cloud/slides/deck5730/large-43.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://on.notist.cloud/slides/deck5730/large-43.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;実際に出来上がる転置インデックスは次のような形になります。


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://on.notist.cloud/slides/deck5730/large-44.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://on.notist.cloud/slides/deck5730/large-44.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;h3 id=&#34;検索の仕組みおさらい&#34;&gt;検索の仕組み（おさらい）&lt;/h3&gt;
&lt;p&gt;出来上がっている転置インデックスに対して検索をする場合、入力文字列（検索条件）に対して、転置インデックス作成時と同様にAnalyzerが動作します。
処理としては、&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;クエリのパース&lt;/li&gt;
&lt;li&gt;フィールドのAnalyzerで処理&lt;/li&gt;
&lt;li&gt;転置インデックスを検索&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という形です。
例えばこんな感じ。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://on.notist.cloud/slides/deck5730/large-45.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://on.notist.cloud/slides/deck5730/large-45.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;同じAnalyzerの処理が入ることで、転置インデックスに採用されているのと同じ単語が出てくるため、検索がきちんとできるということになります。&lt;/p&gt;
&lt;h3 id=&#34;英語と日本語ngramの違い&#34;&gt;英語と日本語（NGram）の違い&lt;/h3&gt;
&lt;p&gt;英語と日本語の違いは、スペースの意味になります。
英語の場合は、スペースが単語の区切りになりますが、日本語の場合スペースでは区切られていません。&lt;/p&gt;
&lt;p&gt;ですので、検索窓に入力された文字列は、英語の場合、クエリのパースの時点で単語に区切られます。そのあとにAnalyzerになるので、基本的には単語単位でAnalyzerの処理が動きます。そのあと、転置インデックスへの検索となります。なので、多くの場合はAnalyzerの出力は1単語です（類義語などを利用していたりする場合は異なりますが）。&lt;/p&gt;
&lt;p&gt;日本語の場合、スペースでは区切られていないので、クエリのパースの時点で入力された文字列がそのままAnalyzerにわたります。
今回はAnalyzer（NGram）が単語に分割し、それをもとに検索処理が実行されます。&lt;/p&gt;
&lt;h3 id=&#34;ismatchscoringの問題点はやっと帰ってきました&#34;&gt;ismatchscoringの問題点は？（やっと帰ってきました）&lt;/h3&gt;
&lt;p&gt;さて、回り道をし、簡単ですが転置インデックスやAnalyzerについて説明しました。
では本題です。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$filter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ismatchscoring&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ミルクティ&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;この&lt;code&gt;ismatchscoring&lt;/code&gt;関数ですが、そのほかにも引数の指定が可能で、省略した場合にデフォルトで採用される値がいくつかあります。
&lt;a href=&#34;https://docs.microsoft.com/ja-jp/azure/search/search-query-odata-full-text-search-functions&#34;&gt;公式のドキュメントにパラメータの意味&lt;/a&gt;が掲載されています。&lt;/p&gt;
&lt;p&gt;今回は、第4引数の&lt;code&gt;searchMode&lt;/code&gt;の値が問題点です。デフォルトでは、&lt;code&gt;any&lt;/code&gt;が指定されます。
この、&lt;code&gt;any&lt;/code&gt;は検索語（今回は&lt;code&gt;ミルクティ&lt;/code&gt;）の&lt;strong&gt;任意の検索語句&lt;/strong&gt;が一致する必要があることになります。
「検索語句」？なんでしょう？これが、ここまで回り道をして説明してきた、Analyzerの出力した単語になります。
「ミルクティ」はNGram（N=2）のAnalyzerを通すと、&lt;/p&gt;
&lt;p&gt;「ミル」「ルク」「クテ」「ティ」&lt;/p&gt;
&lt;p&gt;という4つの単語が出力されます。
これが、「検索語句」です。「任意の」とあるので、上記4つの2文字のどれか？が出現すれば検索条件にヒットしたこととなります。&lt;/p&gt;
&lt;p&gt;ですので、以下のように（一部のみ色を変えてます）3つの文章にはそれぞれの文字が含まれているため、先ほどの条件では3件の結果が返ってくることになります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ミル&lt;/code&gt;クティを飲みたいです。&lt;/li&gt;
&lt;li&gt;マ&lt;code&gt;ティ&lt;/code&gt;ーニはカクテルですが、ミルクセーキは？&lt;/li&gt;
&lt;li&gt;風呂上がりの&lt;code&gt;ミル&lt;/code&gt;クは最高です。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;NGramで一部分の単語だけで一致したものがヒットしてしまうと違和感があるので、&lt;code&gt;all&lt;/code&gt;に変更します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$filter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ismatchscoring&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ミルクティ&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;simple&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;all&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;今度はどうなるでしょう？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ミルクティ&lt;/code&gt;を飲みたいです。&lt;/li&gt;
&lt;li&gt;マ&lt;code&gt;ティ&lt;/code&gt;ーニはカ&lt;code&gt;クテ&lt;/code&gt;ルですが、&lt;code&gt;ミルク&lt;/code&gt;セーキは？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;先ほどよりもマシになりました。
3がヒットしなくなっています。3の文章には「ティ」などが出てこないためです。
ただ、感覚的に2番目がヒットするのは少し違和感がありますよね？
確かに4つの単語がすべて出てきていますが、「ミルクティ」とは少し遠いです。&lt;/p&gt;
&lt;p&gt;さらに「ミルクティ」にヒットさせるにはフレーズ検索にする必要があります。
&lt;a href=&#34;https://www.elastic.co/jp/blog/how-to-implement-japanese-full-text-search-in-elasticsearch&#34;&gt;Elastic社のブログの日本語の検索に関する記事&lt;/a&gt;でも出てきますが、フレーズで検索することで「ミルクティ」だけにヒットさせることができます。&lt;/p&gt;
&lt;p&gt;「フレーズ検索＝語順を保証する検索」となります。
ですので、&lt;/p&gt;
&lt;p&gt;「ミル」「ルク」「クテ」「ティ」&lt;/p&gt;
&lt;p&gt;この順序で出てきた場合のみ、検索にヒットしたことになります。
OData式でフレーズ検索する場合は、単語をダブルクォート&lt;code&gt;&amp;quot;&lt;/code&gt;でくくる必要があります（&lt;a href=&#34;https://docs.microsoft.com/ja-jp/azure/search/search-query-odata-full-text-search-functions#examples&#34;&gt;公式ドキュメントの例に記載あり&lt;/a&gt;）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$filter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ismatchscoring&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;ミルクティ&amp;#34;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;simple&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;all&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで結果は以下の1件だけとなります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ミルクティ&lt;/code&gt;を飲みたいです。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;これでNGramで部分一致のような挙動で日本語の検索ができるようになりました。&lt;/p&gt;
&lt;p&gt;ちなみに、フレーズにした場合は第4引数は&lt;code&gt;any&lt;/code&gt;に変更しても1件だけの検索結果となります。
フレーズ検索には「すべての語が含まれる」、「すべての語が順番に現れる」という2つの条件が含まれるためです。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$filter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ismatchscoring&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;ミルクティ&amp;#34;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;simple&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;any&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;この例の引数を&lt;code&gt;ミルクティ&lt;/code&gt;を&lt;code&gt;&amp;quot;ミルク&amp;quot; &amp;quot;最高&amp;quot;&lt;/code&gt;のような検索条件に変えた場合、「&amp;ldquo;ミルク&amp;rdquo;」「&amp;ldquo;最高&amp;rdquo;」の2つの条件を&lt;code&gt;any&lt;/code&gt;で扱うため、
「&amp;ldquo;ミルク&amp;rdquo;」「&amp;ldquo;最高&amp;rdquo;」のどちらかが出てくれば良い結果となり、3件の結果が返ってきます。
第4引数を&lt;code&gt;all&lt;/code&gt;に変更すると、「&amp;ldquo;ミルク&amp;rdquo;」「&amp;ldquo;最高&amp;rdquo;」の両方が出てこなければならないため、3件目のデータのみが返ってきます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$filter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ismatchscoring&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;ミルクティ&amp;#34; &amp;#34;最高&amp;#34;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;simple&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;all&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これは、&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$filter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ismatchscoring&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;ミルクティ&amp;#34;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;simple&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;any&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ismatchscoring&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;最高&amp;#34;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;simple&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;any&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;と同じ意味となります。
少し長くはなりますが、後者の書き方をプログラムで書くと思います、私の場合は。
検索窓に入力された単語に必ず&lt;code&gt;&amp;quot;&lt;/code&gt;を追加する処理を書くために、画面入力の文字列を一旦パースをすることになるからです。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;簡単？にですが、OData式でのフルテキスト検索と、NGramでのフレーズ検索について説明しました。
英語の場合、もともとスペースで区切られているので、フレーズといわれてピンときますが、日本語の場合はAnalyzerの挙動をわかっていないと「？」となるかと思います。
なぜフレーズ検索が必要なのか？というのが少しでもわかっていただければと。
ちなみに、NGramのTokenizerには別の落とし穴もありますが、その話はまた後日にでも。&lt;/p&gt;
&lt;p&gt;参考として日本語関連の検索に関する記事のリンクを残しておきます。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/hello-elasticsearch/elasticsearch-22a369387dc5&#34;&gt;Elasticsearch日本語でフレーズ検索が必要なわけ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NGramも含め、Elasticsearchでの日本語の検索の設定やクエリについては、&lt;a href=&#34;https://www.elastic.co/jp/blog/how-to-implement-japanese-full-text-search-in-elasticsearch&#34;&gt;Elastic社のブログで日本語で書かれた記事&lt;/a&gt;が詳しいのでこちらをご覧いただくのがいいです。&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Index Template V2</title>
      <link>https://blog.johtani.info/blog/2020/12/17/index_template_v2/</link>
      <pubDate>Thu, 17 Dec 2020 23:55:55 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2020/12/17/index_template_v2/</guid>
      <description>Elastic stack (Elasticsearch) Advent Calendar 2020の18日目の記事になります。 本日の勉強会でLTをしましたが、しゃべり足りなかったんで。 Elasticsearch 7.8でこっそりとリリースされたI</description>
      <content:encoded>&lt;p&gt;&lt;a href=&#34;https://qiita.com/advent-calendar/2020/elasticsearch&#34;&gt;Elastic stack (Elasticsearch) Advent Calendar 2020&lt;/a&gt;の18日目の記事になります。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://noti.st/johtani/aa1gAo/index-template-v2&#34;&gt;本日の勉強会でLT&lt;/a&gt;をしましたが、しゃべり足りなかったんで。
Elasticsearch 7.8でこっそりとリリースされたIndex Template V2について調べたのでどんなものかをまとめてみます。
リリースブログには出てきてない（&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/7.8/release-highlights.html#add-composable-index-templates&#34;&gt;7.8のEsのページのWhat&amp;rsquo;s newには出てた&lt;/a&gt;）ので気づいてない人も多いのではないでしょうか？&lt;/p&gt;
&lt;h2 id=&#34;index-templateとは&#34;&gt;Index Templateとは？&lt;/h2&gt;
&lt;p&gt;まずはIndex Templateがどんなものかを説明しましょう。&lt;/p&gt;
&lt;p&gt;Indexの設定やマッピングはデフォルト値以外を設定したい場合に、毎回&amp;quot;mappings&amp;quot;や&amp;quot;settings&amp;quot;の設定を指定してIndexを作成するのは手間がかかります。
そこで便利な機能として提供されているのがIndex Templateです。このIndex TemplateはCluster Stateに保管されます。&lt;/p&gt;
&lt;p&gt;Index Templateを利用するときの流れは以下の通りです。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Index Templateの作成&lt;/li&gt;
&lt;li&gt;Indexの作成&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例えば、3ノード構成のクラスターでインデックスを作成するときに常に&amp;quot;number_of_shards: 3&amp;quot;を設定したいとします。
Index Templateは次のような感じになります。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;PUT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;blog_num_shards&lt;/span&gt;
{
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index_patterns&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;blog_*&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;settings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;number_of_shards&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;または日本語のシンプルな形態素解析のアナライザーの設定を&amp;quot;jp_&amp;ldquo;という名前でるようできるようにしたい場合には次のような感じになります。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;PUT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;jp_simple_kuromoji&lt;/span&gt;
{
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index_patterns&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jp_&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;settings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;analysis&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;simple_jp&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;custom&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tokenizer&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kuromoji&amp;#34;&lt;/span&gt;
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;インデックステンプレートの登録が終われば、インデックスを作成するタイミングでIndex Templateが適用されます。
例えば、&lt;code&gt;blog_2020&lt;/code&gt;というインデックスを作成すると、&lt;code&gt;number_of_shards: 3&lt;/code&gt;のインデックスが作成されます（デフォルトは&lt;code&gt;1&lt;/code&gt;）。
&lt;code&gt;jp_blog_2020&lt;/code&gt;というインデックスを作成すると、&lt;code&gt;simple_jp&lt;/code&gt;というAnalyzerが設定されています。
このように、インデックス名を意識するだけで設定が適用されていくのが利点です。&lt;/p&gt;
&lt;p&gt;ちなみに、Index TemplateはIndex作成時に適用されるだけなので、Index Templateを変更してもこれまでのインデックスへは影響はありません。&lt;/p&gt;
&lt;h2 id=&#34;これまでのindex-templateの問題点&#34;&gt;これまでのIndex Templateの問題点&lt;/h2&gt;
&lt;p&gt;と、Index Templateが便利なのはわかりましたが、ではなぜ今回V2がリリースされたのでしょうか？
先ほどの例を見るとわかりますが、これまでのIndex Templateは部品化が難しいのが問題でした。
Index Templateはそれぞれがインデックスの作成時に適用されます。
が、Index TemplateにIndex Templateを組み込むことはできません。
例えば、先ほどサンプルとして作成した&lt;code&gt;jp_simple_kuromoji&lt;/code&gt;のIndex Templateは&lt;code&gt;jp_&lt;/code&gt;で始まるインデックスにしか適用できません。&lt;/p&gt;
&lt;p&gt;では、&lt;code&gt;blog_&lt;/code&gt;で始まるインデックスにもkuromojiのシンプルなアナライザーを使いたくなった場合はどうなるでしょう？
残念ながら、&lt;code&gt;jp_simple_kuromoji&lt;/code&gt;と同じ設定を&lt;code&gt;blog_num_shards&lt;/code&gt;のテンプレートに追加するか、&lt;code&gt;jp_simple_kuromoji&lt;/code&gt;の&lt;code&gt;index_patterns&lt;/code&gt;の部分だけを書き換えた新しいテンプレートを用意するか、&lt;code&gt;jp_simple_kuromoji&lt;/code&gt;の&lt;code&gt;index_patterns&lt;/code&gt;に&lt;code&gt;jp_&lt;/code&gt;を追加する方法です。
いずれにしてもIndex Templateの継承（複数のテンプレートを1つのインデックスに紐づける）が必要となります。
この時、複数のIndex Templateが適用されるため、適用する順番が出てきます。
この順番をIndex Templateの&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/7.10/indices-templates-v1.html#put-index-template-v1-api-query-param&#34;&gt;&lt;code&gt;order&lt;/code&gt;パラメータ&lt;/a&gt;で指定できます。&lt;/p&gt;
&lt;p&gt;ただ、これも問題のもととなっていました。
複数あるIndex Templateのどれがどの順番で適用されるのか？それはインデックスを作成時にようやくわかります。
使いたい側（インデックス）が、使いたいもの（テンプレート）を指定するのではなく、その逆（使いたいものに使いたい側の情報を設定しなくてはならない（&lt;code&gt;index_patterns&lt;/code&gt;や&lt;code&gt;order&lt;/code&gt;））になっているのでわかりにくくなっていました。&lt;/p&gt;
&lt;p&gt;ということで解決策としてリリースされたのがIndex Template V2です（ちなみに名前にV2とは言ってるわけではなく、現在のIndex Templateの機能がlegacy index templateという名前になり、Deprecatedになっています（まだログには出ない））。&lt;/p&gt;
&lt;h2 id=&#34;index-template-v2&#34;&gt;Index Template V2&lt;/h2&gt;
&lt;p&gt;7.8のWhat&amp;rsquo;s newドキュメントではComposable Index Templateと紹介されています。
大きく3つのエンドポイントが提供されます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Component Template 用API
&lt;ul&gt;
&lt;li&gt;テンプレートのコンポーネントという単位で管理するためのAPI。&lt;/li&gt;
&lt;li&gt;登録更新、削除、取得が可能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Index Template 用API
&lt;ul&gt;
&lt;li&gt;Index Templateを管理するためのAPI&lt;/li&gt;
&lt;li&gt;登録更新、削除、取得が可能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Simulate index template API(Experimental)
&lt;ul&gt;
&lt;li&gt;Index Template&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Legacy Index Templateとの大きな違いは、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;テンプレートをコンポーネントにできる&lt;/li&gt;
&lt;li&gt;1つのインデックスに適用されれるテンプレートは&lt;strong&gt;1つ&lt;/strong&gt;だけ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という点です。これまでとは挙動が異なるので注意が必要です。&lt;/p&gt;
&lt;p&gt;新しいIndex Templateを利用する際の流れは次のようになります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Component Templateの作成&lt;/li&gt;
&lt;li&gt;Index Templateの作成&lt;/li&gt;
&lt;li&gt;作成したIndex Templateの挙動を確認&lt;/li&gt;
&lt;li&gt;実際にIndex名を指定してIndex Templateの挙動を確認&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という形です。では、それぞれの機能を見ていきましょう。&lt;/p&gt;
&lt;h3 id=&#34;coponent-template-api&#34;&gt;Coponent Template API&lt;/h3&gt;
&lt;p&gt;テンプレートコンポーネントを管理するためのAPIです。
具体的なAPIごとに説明していきます。&lt;/p&gt;
&lt;h4 id=&#34;put-_component_template&#34;&gt;PUT _component_template&lt;/h4&gt;
&lt;p&gt;コンポーネントを登録、変更するためのAPIです。&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/7.10/indices-component-template.html&#34;&gt;公式ドキュメントはこちらです。&lt;/a&gt;
先ほどのkuromojiのAnalzyerをコンポーネントとして登録してみましょう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;PUT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;component_template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;jp_simple_kuromoji&lt;/span&gt;
{
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;template&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;settings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;analysis&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;analyzer&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;simple_jp&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;custom&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tokenizer&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kuromoji_tokenizer&amp;#34;&lt;/span&gt;
            }
          }
        }
      }
    }
  },
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_meta&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;simpleなKuromoji analyzer&amp;#34;&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;先ほどと特に違いはありません。&lt;code&gt;template&lt;/code&gt;という階層が1段増え、&lt;code&gt;index_patterns&lt;/code&gt;がなくなりました。
&lt;code&gt;template&lt;/code&gt;部分はIndexに設定する&lt;code&gt;settings&lt;/code&gt;、&lt;code&gt;mappings&lt;/code&gt;、&lt;code&gt;aliases&lt;/code&gt;が指定可能です。
ちなみに、&amp;ldquo;template&amp;quot;の中身をそのままIndex作成時に使用した場合にエラーにならない設定である必要があります。
ここは注意が必要です。例えば、component Aでkuromojiのアナライザーの設定をし、component Bでそのアナライザーを使用するフィールドのmappingだけを記述した場合、component Bでエラーが発生します。上記のようなシチュエーションでは、Index Templateで利用するフィールドを定義し、component Aを利用する宣言をすれば問題ありません。&lt;/p&gt;
&lt;p&gt;そのほかに使えるパラメータで便利なものを紹介しておきます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;クエリパラメータ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;create&lt;/code&gt;: URLに指定するパラメータ。&lt;code&gt;true&lt;/code&gt;を指定することで、既に存在する場合にエラーを返してくれる。更新も同じAPIなので間違わないようにするために利用すると便利。デフォルトは&lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;リクエストボディ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_meta&lt;/code&gt;: テンプレートにメタ情報を付与できる。&lt;code&gt;_meta&lt;/code&gt;の中は自由に記述可能。コメントなどを書いておくとあとでわかりやすい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;get-_component_template&#34;&gt;GET _component_template&lt;/h4&gt;
&lt;p&gt;コンポーネントを取得するためのAPIです。&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/7.10/getting-component-templates.html&#34;&gt;公式ドキュメントはこちらです。&lt;/a&gt;
一覧での取得とリストでの取得が可能です。&lt;/p&gt;
&lt;p&gt;一覧取得サンプル&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;component_template&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;component_template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これ以外に、IDを指定して取得することも可能です。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;component_template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;jp_simple_kuromoji&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;*&lt;/code&gt;を利用して複数取得も可能です。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;component_template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;jp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;component_template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;delete-_component_template&#34;&gt;DELETE _component_template&lt;/h4&gt;
&lt;p&gt;コンポーネントを削除するためのAPIです。&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/7.10/indices-delete-component-template.html&#34;&gt;公式ドキュメントはこちらです。&lt;/a&gt;
IDを指定してコンポーネントを削除できます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;DELETE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;component_template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;jp_simple_kuromoji&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ID指定以外に&lt;code&gt;*&lt;/code&gt;を利用することも可能ですが気を付けて使用しましょう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;DELETE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;component_template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;jp_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;DELETE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;component_template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ちなみにIndex Templateで利用されているコンポーネントを削除しようとした場合はエラー（ステータスコード400）が返ってきます。
&lt;code&gt;*&lt;/code&gt;などを使用して削除しようとした場合は、ひとつでも利用されているものが含まれている場合は削除は実行されずにエラーだけが返ってくるようになっています。&lt;/p&gt;
&lt;h3 id=&#34;index-template-api&#34;&gt;Index Template API&lt;/h3&gt;
&lt;p&gt;Index Templateを管理するためのAPIです。
Component Template APIで定義したコンポーネントを利用してテンプレートを作成できます。コンポーネントを利用しないで単体で完結したテンプレートも作成可能です。
具体的なAPIごとに説明していきます。&lt;/p&gt;
&lt;h4 id=&#34;put-_index_template&#34;&gt;PUT _index_template&lt;/h4&gt;
&lt;p&gt;Index Templateを登録・更新するためのAPIです。&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/7.10/indices-put-template.html&#34;&gt;公式ドキュメントはこちらです。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;これまでのLegacy Index TemplateのAPIのエンドポイント(&lt;code&gt;_template&lt;/code&gt;)ではなく、(&lt;code&gt;_index_template&lt;/code&gt;)というエンドポイントになっていることにまず注意してください。
先ほど作成した&lt;code&gt;jp_simple_kuromoji&lt;/code&gt;コンポーネントと、追加で作成した&lt;code&gt;3_shards&lt;/code&gt;というコンポーネントを利用して
&lt;code&gt;blog_&lt;/code&gt;で始まるインデックスに適用できるIndex Templateを作成してみましょう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;PUT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;index_template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;blog_template&lt;/span&gt;
{
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index_patterns&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;blog_*&amp;#34;&lt;/span&gt;],
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;template&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {  
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mappings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hoge&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;analyzer&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;simple_jp&amp;#34;&lt;/span&gt;
        }
      }
    }
  },
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;priority&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;composed_of&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jp_simple_kuromoji&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3_shards&amp;#34;&lt;/span&gt;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;composed_of&lt;/code&gt;というパラメータに利用したいコンポーネントを配列で記述していきます。
Index Templateが適用される時に、ここに記述されている順番でコンポーネントが適用されていきます。
ですので、最後に書いてあるテンプレートが一番強いことになります。
これは例えば、同じ設定値&lt;code&gt;number_of_shards&lt;/code&gt;を2つのコンポーネントが設定している場合に、最後に設定した値がインデックスに採用されるという意味です
(&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/7.10/indices-put-template.html#multiple-component-templates&#34;&gt;公式ドキュメントにサンプルが掲載されています&lt;/a&gt;)。
なお、存在しないコンポーネントを&lt;code&gt;composed_of&lt;/code&gt;に指定した場合は400エラーが返ってきます。同じコンポーネントを複数重複して指定した場合は特にエラーにはなりませんでした。
&lt;code&gt;composed_of&lt;/code&gt;を指定しなければ、単体で完結したテンプレートを定義可能です。&lt;/p&gt;
&lt;p&gt;次に重要な設定は&lt;code&gt;priority&lt;/code&gt;です。これまでのテンプレート機能と異なる点で説明しましたが、&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1つのインデックスに適用されれるテンプレートは&lt;strong&gt;1つ&lt;/strong&gt;だけ
となっています。
この1つを決めるための値が&lt;code&gt;priority&lt;/code&gt;になります。
インデックス名によっては&lt;code&gt;index_pattern&lt;/code&gt;の定義によって、複数のIndex Templateにマッチします。例えば&lt;code&gt;blog_*&lt;/code&gt;と&lt;code&gt;*_2020&lt;/code&gt;のIndex Templateがあった場合に&lt;code&gt;blog_2020&lt;/code&gt;というインデックスを作った場合です。
この時、Elasticsearchは&lt;code&gt;priority&lt;/code&gt;の大きい値を持ったIndex Template&lt;strong&gt;だけ&lt;/strong&gt;を適用します。
&lt;code&gt;blog_*&lt;/code&gt;のIndex Templateの&lt;code&gt;property&lt;/code&gt;が&lt;code&gt;10&lt;/code&gt;、&lt;code&gt;*_2020&lt;/code&gt;のIndex Templateの&lt;code&gt;property&lt;/code&gt;が&lt;code&gt;100&lt;/code&gt;だった場合、&lt;code&gt;*_2020&lt;/code&gt;のテンプレートが適用されます。Legacy Index Templateでは&lt;code&gt;order&lt;/code&gt;という似たパラメータがありましたが、こちらは適用する&lt;strong&gt;順序&lt;/strong&gt;を決定するためのものでした。挙動が違うので注意しましょう。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ちなみに、&lt;code&gt;blog_*&lt;/code&gt;と&lt;code&gt;*_2020&lt;/code&gt;の&lt;code&gt;property&lt;/code&gt;がどちらも&lt;code&gt;10&lt;/code&gt;というIndex TemplateをPUTしようとした場合、2番目にIndex TemplateをPUTするタイミングでエラーが返ってきます。&lt;/p&gt;
&lt;p&gt;そのほかに使えるパラメータで便利なものはPUT _component_templateと同様に&lt;code&gt;create&lt;/code&gt;と&lt;code&gt;_meta&lt;/code&gt;です。&lt;/p&gt;
&lt;h4 id=&#34;get-_index_template&#34;&gt;GET _index_template&lt;/h4&gt;
&lt;p&gt;Index Templateを取得するためのAPIです。&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/7.10/indices-get-template.html&#34;&gt;公式ドキュメントはこちらです。&lt;/a&gt;
一覧での取得とリストでの取得が可能です。&lt;/p&gt;
&lt;p&gt;一覧取得サンプル&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;index_template&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;index_template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これ以外に、IDを指定して取得することも可能です。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;index_template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;blog_template&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;*&lt;/code&gt;を利用して複数取得も可能です。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;index_template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;blog_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;index_template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;delete-_index_template&#34;&gt;DELETE _index_template&lt;/h4&gt;
&lt;p&gt;Index Templateを削除するためのAPIです。&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/7.10/indices-delete-template.html&#34;&gt;公式ドキュメントはこちらです。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;IDを指定してコンポーネントを削除できます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;DELETE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;component_template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;jp_simple_kuromoji&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ID指定以外に&lt;code&gt;*&lt;/code&gt;を利用することも可能ですが気を付けて使用しましょう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;DELETE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;component_template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;jp_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;DELETE&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;component_template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最後のサンプルを実行すると、Elasticのツールなどが登録したIndex Template以外はすべて削除されてしまうので本当に気を付けましょう。&lt;/p&gt;
&lt;h3 id=&#34;simulalte-api&#34;&gt;Simulalte API&lt;/h3&gt;
&lt;p&gt;さて、コンポーネントとテンプレートを作成したので確認をしましょう。
Legacy Index Templateでは確認するためには実際にインデックスを作成するしかありませんでしたが、V2ではSimulate APIが用意されています。
このSimulate APIには2つのAPIがあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;POST /_index_template/_simulate/&amp;lt;テンプレート名&amp;gt;&lt;/li&gt;
&lt;li&gt;POST /_index_template/_simulate_index/&amp;lt;インデックス名&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Index Templateの確認のためのAPIとインデックス名を指定したときに出来上がるIndexの設定を確認するためのAPIです。
Indexを実際に作成しなくても確認できるのは便利ですね。&lt;/p&gt;
&lt;p&gt;例えば先ほど作成した&lt;code&gt;blog_template&lt;/code&gt;を試してみましょう。&lt;/p&gt;
&lt;h4 id=&#34;_index_template_simulate-api&#34;&gt;_index_template/_simulate API&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;POST&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;index_template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;simulate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;blog_template&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;レスポンスはこんな感じです。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;{
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;template&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;settings&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;analysis&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;analyzer&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;simple_jp&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
              &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;filter&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kuromoji_readingform&amp;#34;&lt;/span&gt;
              ],
              &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;custom&amp;#34;&lt;/span&gt;,
              &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tokenizer&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kuromoji_tokenizer&amp;#34;&lt;/span&gt;
            }
          }
        },
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;number_of_shards&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;
      }
    },
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mappings&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hoge&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;analyzer&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;simple_jp&amp;#34;&lt;/span&gt;
        }
      }
    },
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aliases&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { }
  },
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;overlapping&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [
    {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;blog_template2&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index_patterns&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;blog_*&amp;#34;&lt;/span&gt;
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;template&lt;/code&gt;にコンポーネントがマージされた結果が出力されます。
&lt;code&gt;overlapping&lt;/code&gt;は&lt;code&gt;index_patterns&lt;/code&gt;がかぶる可能性があるIndex Templateの情報が出力されます。
サンプル用に&lt;code&gt;blog_template2&lt;/code&gt;という、同じ&lt;code&gt;index_patterns&lt;/code&gt;で&lt;code&gt;priority&lt;/code&gt;が低いものを登録してあるためです。
&lt;code&gt;index_patterns&lt;/code&gt;が完全に同じではなくとも、重複する可能性があるものはここに出力されます。
例えば、&lt;code&gt;index_patterns&lt;/code&gt;が&lt;code&gt;b*&lt;/code&gt;という別のIndex Templateを作成してからSimulate APIを実行すると、&lt;code&gt;overlapping&lt;/code&gt;にそのIndex Templateも出力されます。&lt;/p&gt;
&lt;p&gt;Simulate Index Template APIのもう一つの機能は登録前のIndex Templateの確認です。
リクエストのURLのテンプレート名をなくし、&lt;code&gt;PUT _index_template&lt;/code&gt;と同じJSONをリクエストボディとして送信した場合、コンポーネントをマージしたテンプレートがどんなものかを確認できます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;POST&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;index_template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;simulate&lt;/span&gt;
{
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index_patterns&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;blog_*&amp;#34;&lt;/span&gt;],
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;template&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mappings&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hoge&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;analyzer&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;simple_jp&amp;#34;&lt;/span&gt;
        }
      }
    }
  },
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;priority&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;composed_of&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jp_simple_kuromoji&amp;#34;&lt;/span&gt;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このリクエストを送信すると、コンポーネントがマージされた結果が返ってきます。&lt;code&gt;index_patterns&lt;/code&gt;がかぶるものがある場合は&lt;code&gt;overlapping&lt;/code&gt;も一緒に返却されます。&lt;/p&gt;
&lt;h4 id=&#34;_index_template_simulate_index-api&#34;&gt;_index_template/_simulate_index API&lt;/h4&gt;
&lt;p&gt;今度はインデックス名を指定するSimulate APIを試してみましょう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;POST&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;index_template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;simulate_index&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;blog_2021&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これだけです。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;{
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;template&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;settings&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;analysis&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;analyzer&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;simple_jp&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
              &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;filter&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kuromoji_readingform&amp;#34;&lt;/span&gt;
              ],
              &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;custom&amp;#34;&lt;/span&gt;,
              &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tokenizer&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kuromoji_tokenizer&amp;#34;&lt;/span&gt;
            }
          }
        },
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;number_of_shards&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;
      }
    },
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mappings&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hoge&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;analyzer&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;simple_jp&amp;#34;&lt;/span&gt;
        }
      }
    },
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aliases&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { }
  },
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;overlapping&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [
    {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fuga&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index_patterns&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b*&amp;#34;&lt;/span&gt;
      ]
    },
    {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2021&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index_patterns&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*_2021&amp;#34;&lt;/span&gt;
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;例で作成した&lt;code&gt;blog_template&lt;/code&gt;が適用されていますが、それ以外に&lt;code&gt;index_patterns&lt;/code&gt;に合致したが&lt;code&gt;priority&lt;/code&gt;が低くて適用されなかったものが&lt;code&gt;overlapping&lt;/code&gt;に出力されています。
実際に適用されたテンプレートの名前も別途出力してくれるとわかりやすいかもしれないですね。
(&lt;code&gt;*_2021&lt;/code&gt;というインデックスパターンのテンプレートを試しに作ってみたのですが、これはバグがありそうです。&lt;code&gt;2021&lt;/code&gt;に合致するインデックス名をSimulateしたら&lt;code&gt;overlapping&lt;/code&gt;に合致しないものがたくさん出てきました。バグ報告しとくか)。&lt;/p&gt;
&lt;h3 id=&#34;kibana対応&#34;&gt;Kibana対応&lt;/h3&gt;
&lt;p&gt;ここまで、Index Template V2のAPIの説明でしたが、Kibanaでの対応についても調べてみました。&lt;/p&gt;
&lt;h4 id=&#34;index-managementstack-management機能elasticライセンスが必要だが無償の機能&#34;&gt;Index Management（Stack Management機能。Elasticライセンスが必要だが無償の機能）&lt;/h4&gt;
&lt;p&gt;7.9からKibanaの&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/7.10/index-mgmt.html&#34;&gt;Index管理画面&lt;/a&gt;でComposable Templateが利用できるようになっています（&lt;a href=&#34;https://github.com/elastic/kibana/pull/70220&#34;&gt;GitHub Issue&lt;/a&gt;）。
画面のスクショを一通り貼っておきます。残念ながら、それぞれのJSONの編集部分では補完などはサポートされていないようでした。
頑張って自分でsettingsやmappingsのJSONを記述していく感じになります。JSONとして正しいかどうかはチェックしてくれます。
Index Templateのウィザードでは、ボタンでコンポーネントを追加したり削除したり、順序を入れ替えたりといった作業が可能になっています。
また、プレビュー表示が可能なので、&lt;code&gt;composed_of&lt;/code&gt;で選択したものが今どのように適用されているか？といったのも確認できるようになっていました。
結構便利に管理できそうです。ちなみにスクショは7.10の画面になります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Component Template周り
&lt;ul&gt;
&lt;li&gt;一覧表示とウィザード&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.johtani.info/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:300px&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20201218/list_component_template.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20201218/list_component_template.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:300px&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20201218/component_template_wizard1.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20201218/component_template_wizard1.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:300px&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20201218/component_template_wizard2.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20201218/component_template_wizard2.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:300px&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20201218/component_template_wizard3.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20201218/component_template_wizard3.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:300px&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20201218/component_template_wizard4.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20201218/component_template_wizard4.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Index Template周り
&lt;ul&gt;
&lt;li&gt;一覧表示とウィザード&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;

&lt;div class=&#34;box&#34; style=&#34;max-width:300px&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20201218/list_index_template.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20201218/list_index_template.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:300px&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20201218/index_template_wizard1.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20201218/index_template_wizard1.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:300px&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20201218/index_template_wizard2.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20201218/index_template_wizard2.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:300px&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20201218/index_template_wizard3.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20201218/index_template_wizard3.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;



&lt;div class=&#34;box&#34; style=&#34;max-width:300px&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20201218/index_template_wizard4.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20201218/index_template_wizard4.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;h4 id=&#34;consoledev-toolsossで利用可能&#34;&gt;Console(Dev Tools。OSSで利用可能)&lt;/h4&gt;
&lt;p&gt;リクエストを実行は可能ですが、自動補完機能は一部のみ対応しているようです(&lt;a href=&#34;https://github.com/elastic/kibana/issues/75967&#34;&gt;GitHub Issue&lt;/a&gt;)。&lt;/p&gt;
&lt;p&gt;対応済みの機能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DELETE _component_template&lt;/code&gt; (ただし、ここまで。存在するコンポーネント名は補完されない)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記以外はまだ未対応のようです。
プルリクエストチャンスかも？&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/elastic/elasticsearch/issues/53101&#34;&gt;Composable Templates · Issue #53101 · elastic/elasticsearch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/7.8/release-highlights.html#add-composable-index-templates&#34;&gt;What’s new in 7.8 | Elasticsearch Reference ［7.8］ | Elastic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/7.10/index-mgmt.html&#34;&gt;Index management | Elasticsearch Reference ［7.10］ | Elastic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/elastic/kibana/pull/70220&#34;&gt;［Composable template］ Create / Edit wizard by sebelga · Pull Request #70220 · elastic/kibana&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/elastic/kibana/issues/75967&#34;&gt;［Console］ Support suggesting index templates v2 · Issue #75967 · elastic/kibana&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;ちょっと長くなってしまいましたが、新しいIndex Templateについての紹介でした。
これまでと違い、複数のテンプレートが適用されない点があるのでそこは注意が必要そうです。
コンポーネントをうまく使えば、管理が簡易化はされそうですね。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>ElasticのWorkplace Searchを触ってみる - その2 - インストールと起動</title>
      <link>https://blog.johtani.info/blog/2020/05/07/install-workplace-search/</link>
      <pubDate>Thu, 07 May 2020 11:32:50 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2020/05/07/install-workplace-search/</guid>
      <description>前回はWorkplace Searchの概要について書きましたが、今回はインストールと構成要素について説明します。なお、2020/5/7時点で</description>
      <content:encoded>&lt;p&gt;前回はWorkplace Searchの概要について書きましたが、今回はインストールと構成要素について説明します。なお、2020/5/7時点での情報を元に本記事は書いていますのでご注意ください。基本的にはインストールと起動方法についての手順を元に書いています。所々に考察を挟んだ形の記事になっていますので、気になるところだけ呼んでいただければと。&lt;/p&gt;
&lt;h2 id=&#34;記事一覧&#34;&gt;記事一覧&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.johtani.info/blog/2020/05/01/intro-workplace-search/&#34;&gt;ElasticのWorkplace Searchを触ってみる - その1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;インストール&#34;&gt;インストール&lt;/h2&gt;
&lt;p&gt;インストール方法は&lt;a href=&#34;https://www.elastic.co/guide/en/workplace-search/current/workplace-search-install.html&#34;&gt;公式リファレンス&lt;/a&gt;もしくは&lt;a href=&#34;https://www.elastic.co/jp/downloads/enterprise-search&#34;&gt;ダウンロードページ&lt;/a&gt;に記載があります。
現時点ではMacもしくはLinuxが対象でWindowsはまだサポート対象外となっています。&lt;/p&gt;
&lt;h3 id=&#34;必要なもの&#34;&gt;必要なもの&lt;/h3&gt;
&lt;p&gt;インストールに必要なものは以下になります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elasticsearch 7.6.x + Platinum license
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/jp/elasticsearch/service&#34;&gt;Elastic CloudのElasticsearch Service&lt;/a&gt; もしくは&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/downloads/elasticsearch&#34;&gt;ダウンロード&lt;/a&gt;してローカルで起動&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;enterprise-search-7.6.0.tar.gz
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/jp/downloads/enterprise-search&#34;&gt;ダウンロードページはこちら&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Java 8もしくは11
&lt;ul&gt;
&lt;li&gt;Long Term Supportの対象であるJavaです。2020/5/7時点では8か11&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回はローカルにElasticsearchの7.6.2をインストールしてから試してみます。30日間のトライアルライセンスが有効になっているので、Platinumの機能を試すことができます。&lt;/p&gt;
&lt;p&gt;Javaの8か11が必要になります。Elasticsearchには7.xからJDKが同梱されるようになりましたが、Workplace SearchがJettyを元に動作しているからです(enterprise-search-7.6.0.tar.gzにjettyというフォルダあり)。&lt;/p&gt;
&lt;h3 id=&#34;インストール手順&#34;&gt;インストール手順&lt;/h3&gt;
&lt;p&gt;大まかには以下の3つです。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Java 8もしくは11のインストール
&lt;ul&gt;
&lt;li&gt;14でも大丈夫でした(ローカルにはSDKMANでインストールした14.0.1が利用された)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Elasticsearchのインストール(Elastic Cloudの場合はクラスタの起動)
&lt;ul&gt;
&lt;li&gt;今回はローカルにインストール&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Workplace Searchのインストール&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Javaはもともとインストールされていたので、今回は2と3をインストールしました。どちらもローカルで起動するので、2つをダウンロードして&lt;code&gt;tar.gz&lt;/code&gt;ファイルを展開するだけになります。&lt;/p&gt;
&lt;h3 id=&#34;起動方法と設定&#34;&gt;起動方法と設定&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/workplace-search/current/workplace-search-install.html#running-enterprise-search&#34;&gt;起動方法に起動前の設定の手順&lt;/a&gt;も記載があります。
設定しながら起動していきます。&lt;/p&gt;
&lt;h4 id=&#34;elasticsearchの起動&#34;&gt;Elasticsearchの起動&lt;/h4&gt;
&lt;p&gt;既存のElasticsearchのクラスターがあり、Platinumのライセンスが有効になっている場合はこの手順は必要ありません。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Elasticsearchの設定ファイルでSecurity機能をオンに
&lt;ul&gt;
&lt;li&gt;7.1から基本的な&lt;a href=&#34;https://www.elastic.co/jp/subscriptions&#34;&gt;セキュリティ機能はベーシックの機能&lt;/a&gt;に含まれています。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Elasticsearchを起動
&lt;ul&gt;
&lt;li&gt;まずは起動(パスワードなどを設定するために必要)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Elasticsearchのパスワードの設定
&lt;ul&gt;
&lt;li&gt;Elasticsearchでデフォルトで用意されているユーザーのパスワードを設定してします。手順では自動で生成させる方法ですが、独自に設定することも可能です。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;workplace-searchの起動&#34;&gt;Workplace Searchの起動&lt;/h4&gt;
&lt;p&gt;Elasticsearchが起動したらWorkplace Searchの設定をして起動します。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Esへの接続設定を&lt;code&gt;config/enterprise-search.yml&lt;/code&gt;に指定
&lt;ul&gt;
&lt;li&gt;Esのパスワード設定時に生成された&lt;code&gt;elastic&lt;/code&gt;というユーザーのパスワードをここで指定。&lt;/li&gt;
&lt;li&gt;yamlファイルに記載があるが、&lt;code&gt;${ELASTICSEARCH_PASSWORD:changeme}&lt;/code&gt;という記述をした場合に環境変数を読み込める&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;allow_es_settings_modification: true&lt;/code&gt;を&lt;code&gt;config/enterprise-search.yml&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/workplace-search/current/workplace-search-install.html#elasticsearch-cluster-settings&#34;&gt;ここに記載があるような変更&lt;/a&gt;をWorkplace SearchがEsのクラスターに対して実行する模様。Workplace Search以外でも使用しているElasticsearchクラスターの場合は&lt;code&gt;allow_es_settings_modification&lt;/code&gt;を有効にする代わりに、リンク先にあるような設定を自分で追加する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;secret_management.encryption_keys&lt;/code&gt;を複数設定
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/workplace-search/current/encryption-keys.html&#34;&gt;Encryption Keysのガイド&lt;/a&gt;に少し詳しい説明がある。&lt;/li&gt;
&lt;li&gt;opensslコマンドとかで作ればいいかな??&lt;/li&gt;
&lt;li&gt;1.と同じような設定をしようとしたがうまくいかなかったので、ファイルにキーを設定する方式にしました(バグ?)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;起動するときにデフォルトユーザーパスワードを指定
&lt;ul&gt;
&lt;li&gt;指定しなければ勝手に生成してコンソールに出力してくれるので、そちらの方がいいかと。&lt;/li&gt;
&lt;li&gt;今回は手順通りに指定した。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;起動確認のため&lt;code&gt;http://localhost:3002&lt;/code&gt;にアクセス&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;起動するとログが流れ、問題がなければ次のようにデフォルトユーザーの情報が出力されます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#########################################################

*** Default user credentials have been setup. These are only printed once, so please ensure they are recorded. ***
      username: enterprise_search
      password: pas...ple

#########################################################
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;そして無事起動に成功したことも出力されます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#########################################################

Success! Elastic Workplace Search is starting successfully.

In a few moments, you&#39;ll be able to login at the following address:

* URL: http://localhost:3002
  * If this is your first time starting Workplace Search, check the console output above for your user authentication credentials.
  * Visit the documentation: https://swiftype.com/documentation/enterprise-search

Secret session key has been generated.

Set the key in your config file to persist user sessions through process restarts:

secret_session_key: c23...3


#########################################################
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ブラウザで画面にアクセスすると、次のような画面が表示されました。&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.johtani.info/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:600&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20200507/first_page.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20200507/first_page.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h4 id=&#34;起動時のエラー&#34;&gt;起動時のエラー&lt;/h4&gt;
&lt;p&gt;いくつかのパターンも試してどんなエラーが出るのかを見てみました。
おまけですね。&lt;/p&gt;
&lt;h5 id=&#34;elasticsearchが見つからないエラー&#34;&gt;Elasticsearchが見つからないエラー&lt;/h5&gt;
&lt;p&gt;Esを起動しないでWorkplace Searchを起動してみました。&lt;/p&gt;
&lt;p&gt;200秒間アクセスしようと試みて駄目だったらエラーで終了みたいです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
[2020-05-07T03:48:33.645+00:00][13709][2002][app-server][INFO]: Failed to connect to Elasticsearch backend. Make sure it is running.
...
[2020-05-07T03:51:54.038+00:00][13709][2002][app-server][INFO]: Could not connect to Elasticsearch backend after 200s. Terminating...
[2020-05-07T03:51:54.039+00:00][13709][2002][app-server][ERROR]: 
--------------------------------------------------------------------------------

Error: Workplace Search is unable to connect to Elasticsearch. Ensure a healthy Elasticsearch cluster is running at http://127.0.0.1:9200 for user elastic.

--------------------------------------------------------------------------------

&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;elasticsearchのsecurityがオフのときのエラー&#34;&gt;ElasticsearchのSecurityがオフのときのエラー&lt;/h5&gt;
&lt;p&gt;ちなみにSecurityをオフにしたままWorkplace Searchを起動した場合は以下のようなエラーが出ました。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[2020-05-07T03:46:53.474+00:00][13567][2002][app-server][ERROR]: 
--------------------------------------------------------------------------------

Elastic Workplace Search requires Elasticsearch security features to be enabled.
Please enable Elasticsearch security features as outlined here:
  https://www.elastic.co/guide/en/workplace-search/current/workplace-search-install.html

--------------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;構成要素&#34;&gt;構成要素&lt;/h2&gt;
&lt;p&gt;ここまでインストールして起動してきました。
では、Workplace Searchがどういったコンポーネントから構成されているかを予測してみましょう(あくまで外から見た予想となります。そのうちElastic社のウェビナーとかイベントで内部の発表とかあるかも?)。&lt;/p&gt;
&lt;h3 id=&#34;インストールページの記載から&#34;&gt;インストールページの記載から&lt;/h3&gt;
&lt;p&gt;インストールページに&lt;a href=&#34;https://www.elastic.co/guide/en/workplace-search/current/workplace-search-install.html#_minimum_hardware&#34;&gt;最小ハードウェア&lt;/a&gt;という記載があり、そこで何が動く可能性があるかというのがわかります。&lt;/p&gt;
&lt;p&gt;起動するものはこんな感じみたいです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elasticsearch - 外部でもOK&lt;/li&gt;
&lt;li&gt;App Server - Workplace SearchのWeb機能&lt;/li&gt;
&lt;li&gt;Worker - クローラーとかかな?&lt;/li&gt;
&lt;li&gt;Filebeat - Workplace Searchのログ収集用&lt;/li&gt;
&lt;li&gt;その他プロセス - なんだろ?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という具合です。&lt;/p&gt;
&lt;h3 id=&#34;設定などからの予想&#34;&gt;設定などからの予想&lt;/h3&gt;
&lt;p&gt;次は設定項目や起動時のログなどからの予想です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Worklpace Search配下のセキュアなデータストア - アクセストークンなどの管理のため&lt;/li&gt;
&lt;li&gt;JRubyアプリケーション - App ServerはJRuby上で動いているRailsアプリ&lt;/li&gt;
&lt;li&gt;Filebeatも起動している - Workplace Searchのログ収集のため?
&lt;ul&gt;
&lt;li&gt;Filebeatの接続設定はWorkplace Searchの設定値を利用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;では構成要素は&#34;&gt;では構成要素は?&lt;/h3&gt;
&lt;p&gt;ということで、現時点でわかった構成要素は以下のとおりです。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Elasticsearch&lt;/li&gt;
&lt;li&gt;Workplace Search App Server - Railsアプリ on JRuby
&lt;ul&gt;
&lt;li&gt;Webアプリとは別に(内部?で)、いくつかのワーカーが存在する&lt;/li&gt;
&lt;li&gt;管理画面と検索画面の2種類が存在&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Filebeat - ログ収集&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;といった感じです。
まだ起動したばかりなのでこのくらいでしょうか。ログを見るともう少しわかりそうな気がします。&lt;/p&gt;
&lt;p&gt;基本的には、EsをバックエンドにしたRailsのミドルウェアになります。コネクターや検索画面はすべてWorkplace Searchのミドルウェア経由でアクセスする形になりますので、普通に検索で利用するユーザーにはElasticsearchの存在は見えない作りになっています。&lt;/p&gt;
&lt;h2 id=&#34;次は&#34;&gt;次は?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/workplace-search/current/workplace-search-getting-started.html&#34;&gt;Getting Started&lt;/a&gt;を元に、どんなアクターがいて、どんな機能が提供されているのか、どんな利用方法なのか?というのを見ていこうと思います。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>ElasticのWorkplace Searchを触ってみる - その1</title>
      <link>https://blog.johtani.info/blog/2020/05/01/intro-workplace-search/</link>
      <pubDate>Fri, 01 May 2020 16:29:04 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2020/05/01/intro-workplace-search/</guid>
      <description>2月のElastic社のブログですが、Enterprise Searchとこれまで呼んでいた製品をWorkplace Searchという製品名に</description>
      <content:encoded>&lt;p&gt;2月のElastic社のブログですが、Enterprise Searchとこれまで呼んでいた製品を&lt;a href=&#34;https://www.elastic.co/jp/workplace-search&#34;&gt;Workplace Search&lt;/a&gt;という製品名に変更し、App Searchなどを含む製品群を&lt;a href=&#34;https://www.elastic.co/jp/enterprise-search&#34;&gt;Enterprise Search&lt;/a&gt;という名前に変更しました(ちょっとややこしい)。
Workplace Search自体はまだβ版という位置づけですが、ダウンロードして試すことが可能です。&lt;/p&gt;
&lt;p&gt;きちんと触ったことがないので、ちょっと触って見ようかなと思い、何回かに分けてブログを書いてみます。まずは概要とかから。&lt;/p&gt;
&lt;h2 id=&#34;workplace-searchとは&#34;&gt;Workplace Searchとは?&lt;/h2&gt;
&lt;p&gt;Elasticsearchをバックエンドに利用するElastic社が提供するアプリケーション(ミドルウェア?)の1つです。&lt;/p&gt;
&lt;p&gt;もともとはSwiftypeという会社が作っていた、Site Search、App Searchと同じような系列で開発されている統合検索の検索エンジンミドルウェアという感じです。
製品ページを見るとわかりますが、様々なデータソースから、データをクロールしてElasticsearchに保存することで、統合された検索を提供することができるようになる製品です。
最近は会社のドキュメントがさまざまな場所(Google Drive、Saleseforce、GitHub、Dropboxなど)に保存されています。
それぞれで検索窓などはありますが、1箇所で検索することで横断的に検索でき、仕事の効率があがりますよね?ということで作られている製品です。&lt;/p&gt;
&lt;h3 id=&#34;提供利用方法は&#34;&gt;提供(利用)方法は?&lt;/h3&gt;
&lt;p&gt;今後の提供方法としては、Elastic Cloudで利用できるSaaS形式のものと、独自に(クラウドのコンピューティングエンジンやオンプレのサーバーなどで)Workplace Searchのアプリを起動する方法(オンプレ版)があります。後者の場合は、Elasticsearchのクラスターを用意する必要があります。なお、後者の場合、Elasticsearchの&lt;a href=&#34;https://www.elastic.co/jp/subscriptions&#34;&gt;サブスクリプションのプラチナライセンス&lt;/a&gt;が必要になるようです(&lt;a href=&#34;https://www.elastic.co/jp/downloads/enterprise-search&#34;&gt;ダウンロードページ&lt;/a&gt;に記載あり)&lt;/p&gt;
&lt;p&gt;まだ、β版という位置づけなので、今後どのように変更されるかはわかりませんが、今回は2020年5月1日時点でのベータ版(7.6.0)を元にどんなものかを紹介します。現時点で利用できるのはβ版のオンプレ版で、MacやLinuxで利用可能です。&lt;/p&gt;
&lt;h3 id=&#34;ダウンロードとインストール&#34;&gt;ダウンロードとインストール&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/jp/downloads/enterprise-search&#34;&gt;ダウンロードページ&lt;/a&gt;にインストール方法などの記載があります。&lt;/p&gt;
&lt;p&gt;インストールして触って見るところはまた後日。&lt;/p&gt;
&lt;h2 id=&#34;ライセンス価格は&#34;&gt;ライセンス、価格は?&lt;/h2&gt;
&lt;p&gt;まだ不明です。SaaS版の提供はまだです。
オンプレ版については少なくとも、&lt;a href=&#34;https://www.elastic.co/jp/subscriptions&#34;&gt;Elasticのサブスクリプション&lt;/a&gt;のプラチナが必要になります。こちらは、価格は公開されていません。Elastich社もしくはパートナー企業での問い合わせが必要になります。
(たぶん、ドキュメントレベルのセキュリティとかSSOとかの仕組みがプラチナで提供されているのでそのあたりを使っているのでは?と想像してます。)&lt;/p&gt;
&lt;h2 id=&#34;想定できそうな用途は&#34;&gt;想定できそうな用途は?&lt;/h2&gt;
&lt;p&gt;社内の文書検索でしょうか。ただ、いわゆる昔ながらのエンタープライズサーチと呼ばれている、社内のファイルサーバーなどの文書検索ではなく、クラウドサービスを複数利用している会社が利用する想定になっています。&lt;/p&gt;
&lt;p&gt;例えば、開発者は社内Wiki(Confluence)で社内文書を書き、Issue管理にはJIRAやGitHubを活用しており、ただ、社内での説明にはGoogle Driveを利用しているといった場合です。こういう場合、あの機能についての説明や資料ってどこだっけ?というので、あちこち探し回ったりしないといけないです。また、営業部門やサポート、マーケティングなどが絡んでくると更に、SalesforceやZendeskといったデータソースも出てきます。
情報が散らばっていて、それらを探し出したりまとめるだけで時間を取られている場合などに便利かもしれません。&lt;/p&gt;
&lt;h2 id=&#34;次は&#34;&gt;次は?&lt;/h2&gt;
&lt;p&gt;実際にインストールしてから起動して、どんな感じで使えるのかといったところを見て、どんな機能が提供されているのかを見ていこうと思います。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>辞書の更新についての注意点</title>
      <link>https://blog.johtani.info/blog/2020/04/27/note-updating-dictionary/</link>
      <pubDate>Mon, 27 Apr 2020 10:44:15 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2020/04/27/note-updating-dictionary/</guid>
      <description>先日、Elasticsearchでのカスタム辞書の利用方法についてブログを書きました。 辞書の設定方法について記載しましたが、今回は辞書の更新</description>
      <content:encoded>&lt;p&gt;先日、&lt;a href=&#34;https://blog.johtani.info/blog/2020/04/22/custom-dictionary-after-7-4/&#34;&gt;Elasticsearchでのカスタム辞書の利用方法についてブログ&lt;/a&gt;を書きました。&lt;/p&gt;
&lt;p&gt;辞書の設定方法について記載しましたが、今回は辞書の更新について書いていなかったので、書いてみようと思います。
ここで「辞書」としているのは、Kuromojiのユーザー辞書、&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-synonym-graph-tokenfilter.html&#34;&gt;Synonym Graph Token FilterのSynonym辞書&lt;/a&gt;(いわゆる類義語辞書)のことになります。サードパーティのAnalyzer等に関する話ではありません。&lt;/p&gt;
&lt;h2 id=&#34;辞書更新に関する制限事項&#34;&gt;辞書更新に関する制限事項&lt;/h2&gt;
&lt;p&gt;辞書の更新について、大原則と制限事項が存在します。&lt;/p&gt;
&lt;h3 id=&#34;大原則辞書の更新データも更新&#34;&gt;大原則(辞書の更新=データも更新)&lt;/h3&gt;
&lt;p&gt;ElasticsearchはAnalyzerが切り出した単語を元に転置インデックスを作成して、検索を行っています(&lt;a href=&#34;https://noti.st/johtani/halVGM&#34;&gt;この仕組みに関するスライドはこちらを参照のこと&lt;/a&gt;)。
Analyzerが辞書を持っている場合、その辞書を元に単語を切り出して転置インデックスに利用します。
また、検索クエリの単語に対してもこのAnalyzerの辞書が利用されます。&lt;/p&gt;
&lt;p&gt;辞書に新しい単語を追加するということは、その単語に関連するドキュメントも更新しないと行けないということになります。&lt;/p&gt;
&lt;p&gt;例えば、Kuromojiを利用していて、「グランベリーパーク」という単語「グランベリー」「パーク」という単語に分割できるような新しい単語として辞書に追加する場合を考えてみましょう。ユーザーが「グランベリー」で検索しても検索結果として出てきてほしいという場合です。&lt;/p&gt;
&lt;p&gt;辞書に「グランベリーパーク」を登録していない頃に登録されたドキュメントは「グランベリーパーク」という1単語として転置インデックスの見出し語を切り出します(Kuromojiはカタカナの連続している文字列については未知語として1単語にし、「名詞-一般」の品詞を付与)。&lt;/p&gt;
&lt;p&gt;更新前でのドキュメントのAnalyze結果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;「グランベリーパーク」「で」「ショッピング」
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;もし、辞書に「グランベリーパーク」を「グランベリー」「パーク」から構成される新規の単語として登録しそれを使用した場合、辞書を更新したあとから、「グランベリーパーク」という単語がAnalyzerからは出てこなくなります。&lt;/p&gt;
&lt;p&gt;更新後でのドキュメントのAnalyze結果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;「グランベリー」「パーク」「で」「ショッピング」
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ということは、辞書更新以前のドキュメントは「グランベリーパーク」という見出し語に対して登録されているので、辞書更新以前に登録されているドキュメントは検索にヒットしなくなります。&lt;/p&gt;
&lt;p&gt;このように転置インデックスを利用している検索エンジンでは、単語の区切りが変更されるような辞書の更新があった場合、最低でも影響があるドキュメントについては再登録が必要となるわけです。&lt;/p&gt;
&lt;p&gt;これが大原則(辞書更新=データも更新)となります。
基本的には辞書の更新を行った場合は、ドキュメントの再インデックス(再登録)が必要となります。&lt;/p&gt;
&lt;h3 id=&#34;elasticsearchでの制限事項&#34;&gt;Elasticsearchでの制限事項&lt;/h3&gt;
&lt;p&gt;Elasticsearchでは、辞書の更新に関して実装上の制限事項が存在しています。
内部的な実装として、ElasticsearchではAnalyzerのインスタンス(正確にはAnalyzerのFactoryのインスタンス)の生成がインデックスに関する内部のインスタンスが生成されたタイミングの1回のみとなっています。&lt;/p&gt;
&lt;p&gt;このインスタンスの生成時に設定ファイル(辞書を含む)を読み込んでいます。&lt;/p&gt;
&lt;p&gt;言い換えると、辞書(ファイル、インデックス設定に関わらず)の読み込みは、インデックスが作られたタイミングのみということになります。
なおここで言う「インデックスが作られたタイミング」というのは、以下の2パターンです。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;インデックス新規作成時&lt;/li&gt;
&lt;li&gt;インデックスオープン時&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;では、ここから辞書を更新してそれを既存のインデックスに適用する方法について説明しましょう。&lt;/p&gt;
&lt;h2 id=&#34;辞書の更新方法ファイル編&#34;&gt;辞書の更新方法(ファイル編)&lt;/h2&gt;
&lt;p&gt;前回のブログで説明しましたが、Elasticsearch 7.4よりも古いバージョンでは、ファイルでKuromojiのユーザー辞書を設定していました。まずはこちらの方法について説明します。前提として、すでにユーザー辞書を設定したKuromoji Tokenizerがインデックスに設定されているものとします(&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/plugins/current/analysis-kuromoji-tokenizer.html&#34;&gt;ユーザー辞書の設定方法については公式リファレンスを御覧ください&lt;/a&gt;)。&lt;/p&gt;
&lt;p&gt;辞書ファイルに新規にエントリーを追加しただけでは、設定は読み込まれていません。新規辞書を反映させるためには以下の手順が必要となります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;更新した辞書ファイルの配布
&lt;ul&gt;
&lt;li&gt;複数ノードでElasticsearchのクラスターを構成している場合はすべてのノードに更新した辞書ファイルを配布する必要があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;インデックスのクローズ(&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-close.html&#34;&gt;公式リファレンス&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;設定ファイルを再読込させるために一度インデックスをクローズします。&lt;/li&gt;
&lt;li&gt;クローズするので、書き込み、検索などの処理を停止する必要があります。もし停止していない場合はクライアント側ではインデックスがクローズされているという旨のエラーを受け取ります(400で、&lt;code&gt;index_closed_exception&lt;/code&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;インデックスのオープン(&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-open-close.html&#34;&gt;公式リファレンス&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;設定ファイルを読み込みます。これで、新規追加された単語が読み込まれます。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;再インデックス
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update-by-query.html&#34;&gt;&lt;code&gt;_update_by_query&lt;/code&gt;&lt;/a&gt;を利用することで、対象のインデックスのデータを再インデックスすることができます。条件無しでAPIを呼び出すとすべてのデータが再度登録されます。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_source&lt;/code&gt;が&lt;code&gt;false&lt;/code&gt;の場合は&lt;code&gt;_update_by_query&lt;/code&gt;は利用できません。元データをもう一度外部からElasticsearchに対して登録する必要があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://gist.github.com/johtani/25e971ded639e3bea3229ebf861e62be#file-1_-_-json&#34;&gt;Kibanaでの手順をGistにしてあります&lt;/a&gt;。手順はこちらをご覧ください。&lt;/p&gt;
&lt;h2 id=&#34;辞書の更新方法インデックス設定編&#34;&gt;辞書の更新方法(インデックス設定編)&lt;/h2&gt;
&lt;p&gt;ファイルの場合とは少し手順が異なります。
インデックスの設定としてユーザー辞書を登録しているため、ファイルをElasticsearchのクラスターにあるノードに配布する必要がありません。
また、辞書の設定はインデックスの設定に指定してありますが、こちらは動的に設定変更できる項目ではないため、インデックスを先にクローズする必要があります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;インデックスのクローズ(&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-close.html&#34;&gt;公式リファレンス&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;辞書の設定を更新するにはインデックスをクローズする必要があります。辞書の設定は動的に更新できる項目にはなっていないためです。&lt;/li&gt;
&lt;li&gt;オープンしているインデックスで更新しようとした場合は&lt;code&gt;illegal_argument_exception&lt;/code&gt;で&lt;code&gt;Can&#39;t update non dynamic settings...&lt;/code&gt;というメッセージが返ってきます。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;辞書の更新(&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/7.6/indices-update-settings.html&#34;&gt;公式リファレンス:インデックス設定の更新&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;user_dictionary_rules&lt;/code&gt;に単語と追加します。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;インデックスのオープン(&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-open-close.html&#34;&gt;公式リファレンス&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;設定ファイルを読み込みます。これで、新規追加された単語が読み込まれます。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;再インデックス
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update-by-query.html&#34;&gt;&lt;code&gt;_update_by_query&lt;/code&gt;&lt;/a&gt;を利用することで、対象のインデックスのデータを再インデックスすることができます。条件無しでAPIを呼び出すとすべてのデータが再度登録されます。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_source&lt;/code&gt;が&lt;code&gt;false&lt;/code&gt;の場合は&lt;code&gt;_update_by_query&lt;/code&gt;は利用できません。元データをもう一度外部からElasticsearchに対して登録する必要があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://gist.github.com/johtani/25e971ded639e3bea3229ebf861e62be#file-2_-_-json&#34;&gt;Kibanaでの手順をGistにしてあります&lt;/a&gt;。手順はこちらをご覧ください。&lt;/p&gt;
&lt;h2 id=&#34;第3の方法新規インデックス作成&#34;&gt;第3の方法(新規インデックス作成)&lt;/h2&gt;
&lt;p&gt;ここまで、インデックスのクローズ、オープンで既存のインデックスに対して辞書を更新する方法について説明しました。
ただ、残念なことにAmazon Elasticsearch ServiceではElasticsearchが提供しているすべてのAPIが利用できるわけではありません(&lt;a href=&#34;https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/aes-supported-es-operations.html&#34;&gt;Amazon ESの利用可能なAPIの一覧はこちら&lt;/a&gt;)。
(&lt;code&gt;_close&lt;/code&gt;は駄目だけど&lt;code&gt;_open&lt;/code&gt;は呼べるのかな???)&lt;/p&gt;
&lt;p&gt;ということで、新規にインデックスを作成して、新しい辞書の設定を反映したインデックスを用意し、そこにデータをコピーもしくは登録するという方法になります(&lt;a href=&#34;https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/custom-packages.html&#34;&gt;Amazon ESのカスタム辞書のドキュメントに手順がありますね&lt;/a&gt;)。&lt;/p&gt;
&lt;p&gt;手順としては以下のとおりです。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;辞書の更新(用意)
&lt;ul&gt;
&lt;li&gt;新しい単語などを登録した辞書を用意します。&lt;/li&gt;
&lt;li&gt;ファイル、インデックス設定どちらでもOKです。&lt;/li&gt;
&lt;li&gt;ファイルの場合は、既存のファイル名とは異なるファイル名にしたほうが混乱がなくなります。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新規インデックス作成
&lt;ul&gt;
&lt;li&gt;1.で作成した辞書を元に新規インデックスを作成します。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新規インデックスにデータコピー
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/7.6/docs-reindex.html&#34;&gt;&lt;code&gt;_reindex&lt;/code&gt; API&lt;/a&gt;を利用するとデータコピーが簡単です。&lt;code&gt;source&lt;/code&gt;と&lt;code&gt;dest&lt;/code&gt;を指定するだけです。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_source&lt;/code&gt;が&lt;code&gt;false&lt;/code&gt;の場合は&lt;code&gt;_update_by_query&lt;/code&gt;は利用できません。元データをもう一度外部からElasticsearchに対して登録する必要があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;アプリケーション側で新規インデックスを利用するように変更
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_alias&lt;/code&gt;を使用しておくと切り替えが簡単です(&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/7.6/indices-add-alias.html&#34;&gt;公式リファレンスはこのあたり&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;考慮すべき点としては、サービスを提供しながら行う場合は、3.の&lt;code&gt;_reindex&lt;/code&gt;を実行し始めたタイミング以降の登録・更新データの扱いについてでしょうか。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;辞書の更新に関する大原則、制限事項、手順などについて説明しました。
辞書の変更は検索に大きく影響がでます。そのあたりをきちんと考慮しながら更新しましょう。
ユーザー辞書、カスタム辞書を扱う際の参考にしていただければと。
他にもユーザー辞書で気をつけないといけないこともありますが、今日はこのあたりで。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Kuromojiのカスタム辞書をインデックスの設定で指定</title>
      <link>https://blog.johtani.info/blog/2020/04/22/custom-dictionary-after-7-4/</link>
      <pubDate>Wed, 22 Apr 2020 10:30:56 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2020/04/22/custom-dictionary-after-7-4/</guid>
      <description>Elasticsearchで日本語を扱うときに、カスタム辞書を使いたいという要望がよくあります。 AWSのElasticsearch Servi</description>
      <content:encoded>&lt;p&gt;Elasticsearchで日本語を扱うときに、カスタム辞書を使いたいという要望がよくあります。
&lt;a href=&#34;https://aws.amazon.com/jp/about-aws/whats-new/2020/04/custom-dictionary-files-now-supported-on-amazon-elasticsearch-service/&#34;&gt;AWSのElasticsearch Serviceでカスタム辞書ファイルを読み込める機能が発表されたようです&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;実は、Elasticsearchの7.4からファイルを使用しなくても日本語のTokenizerでカスタム辞書を利用することができるようになっています。&lt;/p&gt;
&lt;h2 id=&#34;カスタム辞書をインデックスの設定で指定&#34;&gt;カスタム辞書をインデックスの設定で指定&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/plugins/7.4/analysis-kuromoji-tokenizer.html#analysis-kuromoji-tokenizer&#34;&gt;やり方はドキュメントに記載&lt;/a&gt;があります。&lt;/p&gt;
&lt;p&gt;トークナイザーの設定をインデックスの設定に記述しますが、このときに
&lt;code&gt;user_dictionary_rules&lt;/code&gt;という設定を利用することでカスタム辞書を指定できます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;PUT&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;custom_dic_sample&lt;/span&gt;
{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;settings&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;analysis&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;tokenizer&amp;#34;&lt;/span&gt;: {
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;kuromoji_user_dict&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kuromoji_tokenizer&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mode&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;extended&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;user_dictionary_rules&amp;#34;&lt;/span&gt;: [
              &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;グランベリーパーク,グランベリー パーク,グランベリー パーク,カスタム名詞&amp;#34;&lt;/span&gt;,
              &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;高輪ゲートウェイ,高輪 ゲートウェイ,タカナワ ゲートウェイ,カスタム名詞&amp;#34;&lt;/span&gt;]
          }
        },
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;analyzer&amp;#34;&lt;/span&gt;: {
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;my_analyzer&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;custom&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;tokenizer&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kuromoji_user_dict&amp;#34;&lt;/span&gt;
          }
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;辞書の内部は&lt;code&gt;&amp;quot;単語,出てきてほしい単語列(スペース区切り),読みの単語列(スペース区切り),品詞名&amp;quot;&lt;/code&gt;になります。配列で設定可能で、複数の単語を登録したい場合は、カンマ区切りで登録していきます(上記例では2つの単語を登録しています)。&lt;/p&gt;
&lt;h2 id=&#34;_analyzeを利用して設定の確認&#34;&gt;_analyzeを利用して設定の確認&lt;/h2&gt;
&lt;p&gt;実際に上記の設定がうまく動作するかは&lt;code&gt;_analyze&lt;/code&gt;のエンドポイントを利用します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;custom_dic_sample/_analyze&lt;/span&gt;
{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;グランベリーパークがオープンしました。&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;analyzer&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;my_analyzer&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;出力は以下のようになります。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;tokens&amp;#34;&lt;/span&gt; : [
    {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;グランベリー&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;start_offset&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;end_offset&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;word&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;position&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    },
    {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;パーク&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;start_offset&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;end_offset&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;word&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;position&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    },
    {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;が&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;start_offset&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;end_offset&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;word&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;position&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    },
    {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;オープン&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;start_offset&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;end_offset&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;word&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;position&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
    },
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...(省略)&lt;/span&gt;
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ちなみに、デフォルトの&lt;code&gt;kuromoji&lt;/code&gt;を利用した場合は、&lt;code&gt;グランベリーパーク&lt;/code&gt;が1単語として出力されます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;_analyze&lt;/span&gt;
{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;グランベリーパークがオープンしました。&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;analyzer&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kuromoji&amp;#34;&lt;/span&gt;
}

&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;##&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;レスポンス&lt;/span&gt;
{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;tokens&amp;#34;&lt;/span&gt; : [
    {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;グランベリーパーク&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;start_offset&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;end_offset&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;word&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;position&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    },
    {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;オープン&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;start_offset&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;end_offset&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;word&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;position&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで、カスタム辞書を使用することで&lt;code&gt;グランベリー&lt;/code&gt;で検索された場合に、&lt;code&gt;グランベリーパーク&lt;/code&gt;もヒットするという仕組みです。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_analyze&lt;/code&gt;は&lt;code&gt;explain&lt;/code&gt;というパラメータも持っており、こちらを利用することで、単語の品詞情報なども取得できます。これを使うことで、実際に設定がきちんと動作しているかの確認に利用できます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;custom_dic_sample/_analyze&lt;/span&gt;
{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;グランベリーパークがオープンしました。&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;analyzer&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;my_analyzer&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;explain&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
}
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;##&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;レスポンス(一部のみ)&lt;/span&gt;
{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;detail&amp;#34;&lt;/span&gt; : {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;custom_analyzer&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;charfilters&amp;#34;&lt;/span&gt; : [ ],
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;tokenizer&amp;#34;&lt;/span&gt; : {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kuromoji_user_dict&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;tokens&amp;#34;&lt;/span&gt; : [
        {
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;グランベリー&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;start_offset&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;end_offset&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;word&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;position&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;baseForm&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;bytes&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[e3 82 b0 e3 83 a9 e3 83 b3 e3 83 99 e3 83 aa e3 83 bc]&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;inflectionForm&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;inflectionForm (en)&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;inflectionType&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;inflectionType (en)&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;partOfSpeech&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;カスタム名詞&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;partOfSpeech (en)&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;positionLength&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pronunciation&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pronunciation (en)&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;reading&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;グランベリー&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;reading (en)&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;guramberi&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;termFrequency&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        },
        {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;partOfSpeech&lt;/code&gt;にカスタム辞書で設定した&lt;code&gt;カスタム名詞&lt;/code&gt;が出力されていますね。
&lt;code&gt;_analyze&lt;/code&gt;のAPIはこのように、アナライザーの挙動の確認に非常に便利なので是非活用してみてください。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/johtani/analyze-api-ui-plugin&#34;&gt;KibanaでこのAPIを使うためのプラグイン&lt;/a&gt;も開発していますので、こちらも合わせて利用してみてください。&lt;/p&gt;
&lt;h2 id=&#34;注意点&#34;&gt;注意点&lt;/h2&gt;
&lt;p&gt;ちなみに、&lt;code&gt;user_dictionary&lt;/code&gt;と&lt;code&gt;user_dictionary_rules&lt;/code&gt;を&lt;a href=&#34;https://github.com/elastic/elasticsearch/blob/master/plugins/analysis-kuromoji/src/main/java/org/elasticsearch/index/analysis/KuromojiTokenizerFactory.java#L62&#34;&gt;両方指定した場合はエラー&lt;/a&gt;となります。
ファイルをベースにしつつ、追加の設定をするという使い方はできないので、注意しましょう。&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;インデックスの設定で書くことにより、バックアップ・リストアは楽になるかな。ただ、クラスターステートに取り込まれるから、あまりにも巨大なカスタム辞書だと心配かなぁ。ファイルの場合はクラスターステートには取り込まれないので、そこは圧迫しない。&lt;/p&gt;&amp;mdash; Jun Ohtani (@johtani) &lt;a href=&#34;https://twitter.com/johtani/status/1252790960108400641?ref_src=twsrc%5Etfw&#34;&gt;April 22, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;それ以外の注意点については、別途ブログを書きました。
&lt;a href=&#34;https://blog.johtani.info/blog/2020/04/27/note-updating-dictionary/&#34;&gt;「辞書の更新についての注意点」&lt;/a&gt;、こちらも合わせてご覧ください。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;カスタム辞書をファイルではなくインデックスの設定値として設定する方法を紹介しました。こちらは、Elasticsearch 7.4で導入された機能になります。7.4以降を利用している場合はこちらを利用することも検討してはいかがでしょうか?
また、&lt;code&gt;_analyze&lt;/code&gt; APIも便利なので合わせて活用してみてください。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>ElasticsearchのAnalyze APIのVisual Studio Codeのクライアントプラグイン</title>
      <link>https://blog.johtani.info/blog/2020/03/25/vsc-es-analzye-plugin/</link>
      <pubDate>Wed, 25 Mar 2020 11:10:05 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2020/03/25/vsc-es-analzye-plugin/</guid>
      <description>先日、Visual Studio Codeのプラグインを作ってみた(Azure Search Analyze Client)というブログを書きました。 このプラグインを作ってたタイミン</description>
      <content:encoded>&lt;p&gt;先日、&lt;a href=&#34;https://blog.johtani.info/blog/2020/03/19/azure-search-analyze-plugin&#34;&gt;Visual Studio Codeのプラグインを作ってみた(Azure Search Analyze Client)&lt;/a&gt;というブログを書きました。
このプラグインを作ってたタイミングで、Elasticの河村さん経由で、&lt;a href=&#34;https://msdevjp.connpass.com/event/169431/&#34;&gt;Microsoft Open Tech Night #9 w/ Elastic&lt;/a&gt;でなにかLTしませんか?という打診がありました。&lt;/p&gt;
&lt;p&gt;仕組み的には似たようなものだし、Elasticsearch用の拡張機能も作れるし、発表のネタにもなるし一石二鳥では?ということで、LTを快諾し、昨日発表してきました。&lt;/p&gt;
&lt;h2 id=&#34;資料とか&#34;&gt;資料とか&lt;/h2&gt;
&lt;p&gt;発表資料やGitHubのリポジトリなどは、以下のとおりです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;発表資料 : &lt;a href=&#34;https://noti.st/johtani/vDhbXW/analyze-api-vs-code&#34;&gt;Analyze APIのVS Codeプラグインを作ってみた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub Repository : &lt;a href=&#34;https://github.com/johtani/vs-code-es-analyze-client&#34;&gt;https://github.com/johtani/vs-code-es-analyze-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=johtani.elasticsearch-analyze-api-client&#34;&gt;Visual Studio Code Marketplaceページ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;機能&#34;&gt;機能&lt;/h2&gt;
&lt;p&gt;まだ、必要最低限の機能を実装した感じです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Analyze APIのパラメータ入力用のエディタ起動(&lt;code&gt;Elasticsearch Analyze Client: Create Elasticsearch Analyze Request&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Esにリクエストを送信して結果の表示&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;インストールからリクエスト送信して結果が出てくるまでのデモです。&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.johtani.info/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:600&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20200325/plugin-demo.gif&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20200325/plugin-demo.gif&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;1点LTのデモのときに話すのを忘れていましたが、&lt;code&gt;.esanalyze&lt;/code&gt;という拡張子のファイルであれば、このプラグインが入力値を見つけ出して、「&lt;code&gt;Analyze text with analyzers&lt;/code&gt;」というコマンド送信用のリンクをエディタ画面に表示する機能があります。
ですので、パラメータ入力用のエディタを起動し、値を設定したあとにファイルを&lt;code&gt;hoge.esanalyze&lt;/code&gt;というような名前で保存してもらえれば、後日そのファイルを開くことでリクエストが再送できます。&lt;/p&gt;
&lt;h3 id=&#34;azure-search版との機能の違い&#34;&gt;Azure Search版との機能の違い&lt;/h3&gt;
&lt;p&gt;先日のAzure Search向けのクライアントとの違いがいくつかあります。
ElasticsearchのAnalyze APIの方が多機能であるため、プラグインとしても違いがあったほうがいいかなと。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;入力がJSON形式&lt;/li&gt;
&lt;li&gt;結果画面に詳細表示切り替えボタンを追加&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;現時点では対応していませんが、&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-analyze.html#analyze-api-custom-analyzer-ex&#34;&gt;Analyze APIはカスタムのtokenizer、filter、char_filterの設定を入力として受け付けることが可能です&lt;/a&gt;。そのときに指定するのはJSON形式でtokenizerなどの設定を記述します。
今後、これらの対応をすることを考えると、入力全体をJSON形式で読み込めるほうがわかりやすいかなということで、入力はJSON形式で入力してもらうことを想定しました。&lt;/p&gt;
&lt;p&gt;結果画面に詳細表示切り替えボタンを追加したのは、2つの理由があります。1つはAzure SearchのAnalyze APIよりもTokenの情報としていくつか他の情報も存在するためです。複数のAnalyzerとの比較をする場合は、単語列だけを比較したいですが、Analyzer個別の詳細情報を見たい場合もあるので、切り替えができたほうがよいかなと。
2つ目の理由はまだ実装していませんが、&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-analyze.html#explain-analyze-api&#34;&gt;explainパラメータの出力&lt;/a&gt;への対応のためです。
explainパラメータを指定すると、カスタムAnalyzerの場合に、Analyzerの設定にあるchar_filter、tokenizer、token_filterのそれぞれのステップでの単語列の出力が結果として返ってきます。この結果には標準の出力よりもさらに多くのtokenの情報(例えば、kuromojiだと品詞情報、読み、原型など)が追加されてきます。これらの表示を切り替えることができたほうがよいかと。&lt;/p&gt;
&lt;p&gt;これらは、実は&lt;a href=&#34;https://github.com/johtani/analyze-api-ui-plugin/blob/master/docs/GETTING_STARTED.md#3-show-analyzed-result-of-custom-analyzer&#34;&gt;Kibanaのプラグインとしてすでに実装済み&lt;/a&gt;になっています。
同等の機能は実装できるかなという目論見もあり、そちらに合わせた感じにしてあります。&lt;/p&gt;
&lt;h2 id=&#34;今後の対応&#34;&gt;今後の対応&lt;/h2&gt;
&lt;p&gt;現時点では、Analyzer名の指定のみが可能となっています。Kibanaのプラグインと同程度の機能はGitHubのIssueとして登録してみました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/johtani/vs-code-es-analyze-client/issues/5&#34;&gt;explainパラメータ対応&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/johtani/vs-code-es-analyze-client/issues/3&#34;&gt;fieldパラメータ対応&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/johtani/vs-code-es-analyze-client/issues/4&#34;&gt;custom analyzer対応&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その他に、インデックス名やアナライザ名の自動補完みたいな機能があると便利かも?と妄想していたりします(実装が大変かもですが。。。)。Kibanaのプラグインの場合は、Mappingやインデックス名を調べるときに、KibanaのConsoleからチェックすればよかったのですが、このプラグイン単体だとそのあたりの情報の取得に他のツール(Kibanaだったり、REST API Clientだったり)を使わないといけないという問題点はあるかなぁと。&lt;/p&gt;
&lt;p&gt;あとは、結果画面がこのままで本当に見やすいかどうか?なども気になってはいます。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;まだまだ、作ってみたというレベルのプラグインです。
どのくらいの人に使ってもらえるかもわかりませんが、こんな機能あるといい?など要望があればリクエストいただければと。
Twitterで聞いていただいてもいいですし、GitHubのIssueとして登録していただいても構いません。
そもそもいらないなぁなんて意見でももちろん大歓迎です。フィードバックお待ちしてます!&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>2019年のElastic StackとElastic</title>
      <link>https://blog.johtani.info/blog/2019/12/01/whats-happen-at-elastic-in-2019/</link>
      <pubDate>Sun, 01 Dec 2019 00:00:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2019/12/01/whats-happen-at-elastic-in-2019/</guid>
      <description>Elastic stack (Elasticsearch) Advent Calendar 2019の1日目の記事になります。 まだ、1ヶ月を残してますが、簡単に今年起こったことを振り返ってみようと思います。毎年恒例ですね、</description>
      <content:encoded>&lt;p&gt;&lt;a href=&#34;https://qiita.com/advent-calendar/2018/elasticsearch&#34;&gt;Elastic stack (Elasticsearch) Advent Calendar 2019&lt;/a&gt;の1日目の記事になります。&lt;/p&gt;
&lt;p&gt;まだ、1ヶ月を残してますが、簡単に今年起こったことを振り返ってみようと思います。毎年恒例ですね、ここ数年。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h3 id=&#34;elastic-stack-660リリース1月&#34;&gt;Elastic Stack 6.6.0リリース(1月)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/jp/blog/elastic-stack-6-6-0-released&#34;&gt;リリース記事はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Elastic APMが6.6のリリースと同時にElastic CloudでAPM Serverが無料で利用できるようになったのが地味に便利でした。APMのデモをやるために、それまでは手元にAPM Serverの起動が必要だったので。。。&lt;/p&gt;
&lt;p&gt;ユーザーの方たちにはIndex Lifecycle Management（インデックスライフサイクル管理：ILM）がリリースされたのが便利だったと思います。
まだ、ベータでしたが、インデックスの世代管理を格段に便利にしてくれるツールになり、現在では必須アイテムとなっています。
もう一つ、地味に便利なのは、KibanaからElasticsearchへの接続を複数指定できるようになった点かと思います。&lt;/p&gt;
&lt;h3 id=&#34;elatic-common-schemaのベータリリース2月&#34;&gt;Elatic Common Schemaのベータリリース(2月)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/jp/blog/introducing-the-elastic-common-schema&#34;&gt;リリース記事はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Elastic Stackではメトリック、APM、ログなど、様々なデータを一元的に可視化することができるという利点があります。ただ、一元的にデータを可視化、検索するためには異なるデータセットに統一されたフィールド名が欠かせません。そのための手段としてElasticが公開したのが&lt;a href=&#34;https://github.com/elastic/ecs&#34;&gt;Elastic Common Schema&lt;/a&gt;です。
各種データの項目名、型などを共通化する仕様をGitHub上で公開しています。最近のBeatsのモジュールはこのElastic Common Schemaに則ってデータが定義されるようになってきています。これにより、ログからメトリックへ、APMからログデータへというシームレスな移動ができるようになっています。&lt;/p&gt;
&lt;h3 id=&#34;elastic-stack-670リリース3月&#34;&gt;Elastic Stack 6.7.0リリース(3月)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/jp/blog/elastic-stack-6-7-0-released&#34;&gt;リリース記事はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Elastic MapsやUptimeといった、これまでの可視化とは異なる便利なアプリが増え始めました。Mapsでは地図の表現が格段にアップしたので、コレまで以上に地理情報と合わせた可視化が楽しくなりました。&lt;/p&gt;
&lt;p&gt;もちろん、基本的に必要な技術が着実にGAされていくのもElastic Stackの素晴らしい点です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Index Lifecycle Management(ILM)がGA&lt;/li&gt;
&lt;li&gt;Cross Cluster Replication(CCR)がGA&lt;/li&gt;
&lt;li&gt;CanvasがGA&lt;/li&gt;
&lt;li&gt;Logs &amp;amp; Infra UIがGA&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;elastic-stack-700リリース4月&#34;&gt;Elastic Stack 7.0.0リリース(4月)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/jp/blog/elastic-stack-7-0-0-released&#34;&gt;リリース記事はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;メジャーバージョンのリリースです。
KibanaのUIが刷新されたり、Elasticsearchのクラスター管理の機能が新規に構築されたり、様々な改善がこのリリースでも入っています。また、メジャーバージョンのリリースのタイミングが、さまざまな大きな仕様の変更や改善が入るタイミングでもあります。これまで以上にパフォーマンスが改善（Top-Nクエリ高速化など）されたり、新しい機能の追加（ナノ秒のサポート）されたりしました。&lt;/p&gt;
&lt;h3 id=&#34;elasticsearchのセキュリティの主要な機能が無料に5月&#34;&gt;Elasticsearchのセキュリティの主要な機能が無料に(5月)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/jp/blog/security-for-elasticsearch-is-now-free&#34;&gt;リリース記事はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;6.8.0および7.1.0のリリースはこの機能の無償提供となりました。
結構衝撃的な話だったのではないかなぁと。これ以前は有償の機能だったセキュリティの以下の機能をElastic License配下で無料で提供する形に変わりました。まだ、ご存知でない方は、データの安全のためにもセキュリティ機能を利用することをおすすめします。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TLSによる通信暗号化&lt;/li&gt;
&lt;li&gt;ユーザー作成と管理にファイルおよびネイティブのレルム認証を使用可能&lt;/li&gt;
&lt;li&gt;クラスターAPIとインデックスに対するユーザーアクセスの管理にロールベースのアクセス制御を使用可能、またSpaces機能でKibanaのマルチテナンシーの安全性を向上&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;elasticon19開催5月&#34;&gt;Elastic{ON}19開催(5月)&lt;/h3&gt;
&lt;p&gt;今年も東京で開催しました。ビデオなどはこちらで公開されています。
&lt;a href=&#34;https://www.elastic.co/elasticon/tour/2019/tokyo&#34;&gt;https://www.elastic.co/elasticon/tour/2019/tokyo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今回も偉そうにElatic Stackの新しくなった点を紹介するなどしてました。。。&lt;/p&gt;
&lt;h3 id=&#34;elastic-stack-720リリース6月&#34;&gt;Elastic Stack 7.2.0リリース(6月)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/jp/blog/elastic-stack-7-2-0-released&#34;&gt;リリース記事はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/jp/blog/introducing-elastic-siem&#34;&gt;Elastic SIEMがベータリリース&lt;/a&gt;されたのがこのタイミングです。
2月の発表したElastic Common Schemaをフルに活用していると言ってもいいのがこの機能になります。まだ今後もどんどん改善が入るであろうきのうになります。&lt;/p&gt;
&lt;p&gt;また、Elasticsearchをバックエンドにした検索ミドルウェアとして利用いただける&lt;a href=&#34;https://www.elastic.co/blog/elastic-app-search-7-2-0-released&#34;&gt;Elastic App Searchのセルフマネージド版&lt;/a&gt;もこのタイミングでリリースされています。&lt;/p&gt;
&lt;p&gt;さらに、このリリースの直前には&lt;a href=&#34;https://www.elastic.co/jp/blog/announcing-elastic-cloud-on-kubernetes-eck-0-9-0-alpha-2&#34;&gt;Elastic Cloud on Kuberunetes(ECK)というものベータリリース&lt;/a&gt;されました。少しわかりにくいかもですが、ElasticsearchやKibanaをKubernetesのOperatorとして利用できるようになっています。こちらもElastic Licenseでリリースされているのでk8s上でKibanaやEsを管理しようとしている方は触ってみると面白いかもです。&lt;/p&gt;
&lt;h3 id=&#34;elastic-cloud-elasticsearch-serviceがgcp日本で利用可能に7月&#34;&gt;Elastic Cloud Elasticsearch ServiceがGCP日本で利用可能に(7月)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/jp/blog/elasticsearch-service-is-now-available-on-google-cloud-platform-gcp-in-japan&#34;&gt;リリース記事はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Elastic Cloudもプラットフォームが拡大した年でした。
Google Cloud Platformの東京リージョンを選択できるようになりました。さらなる統合（支払いをGCP経由にまとめたり、GCPのコンソールから利用できたりなど）も進んでいます。&lt;/p&gt;
&lt;h3 id=&#34;elastic-stack-730リリース8月&#34;&gt;Elastic Stack 7.3.0リリース(8月)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/jp/blog/elastic-stack-7-3-0-released&#34;&gt;リリース記事はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;データフレームと呼ばれるデータ取り込み時のピボット機能が導入されました。また、MapsのGAリリース、Elastic APMの.NETエージェント正式リリースなど、細かいですが様々なものがリリースされています。&lt;/p&gt;
&lt;h3 id=&#34;elastic-cloud-elasticsearch-serviceがazureで利用可能に9月&#34;&gt;Elastic Cloud Elasticsearch ServiceがAzureで利用可能に(9月)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/jp/blog/elasticsearch-service-on-elastic-cloud-now-available-on-microsoft-azure&#34;&gt;リリース記事はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft Azureへのデプロイも可能になりました。残念ながらまだ日本リージョンには来ていないですが、今後出てくるはずです！さまざまなクラウドベンダーのサポートにより、より多くの人に使っていただけるようになるのかと。&lt;/p&gt;
&lt;h3 id=&#34;elastic-stack-740リリース10月&#34;&gt;Elastic Stack 7.4.0リリース(10月)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/jp/blog/elastic-stack-7-4-0-released&#34;&gt;リリース記事はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;もう7.4.2まで出ていますが、いい感じの間隔で7.0、7.2、7.3と来ていますね。
7.4では、スナップショットリストアがKibanaから簡単に行えるようになりました。これまではKibanaのConsoleでJSONを見ながら管理されていたかもですが、GUIにより今どんなスナップショットがあるのか、どれをリストアするのかといった操作が簡単にできるようになっています。&lt;/p&gt;
&lt;p&gt;KibanaについてはPKI認証のサポートなども始まり、様々な認証方式でより便利にKibanaが使えるようになっています。&lt;/p&gt;
&lt;h3 id=&#34;12月&#34;&gt;12月？&lt;/h3&gt;
&lt;p&gt;12月ですし、&lt;a href=&#34;https://www.meetup.com/ja-JP/Tokyo-Elastic-Fantastics/events/266551992/&#34;&gt;Elasticsearch勉強会では「LT＆忘年会」ということで、懇親会がメインの勉強会として12/6に開催&lt;/a&gt;します。悪路クエストの緑川さん、吉岡さんに主体となっていただき、マイクロソフトさんを会場に借りて開催予定です。興味のある方はぜひご参加ください。
LTもおまちしています！&lt;/p&gt;
&lt;h3 id=&#34;まとめ&#34;&gt;まとめ&lt;/h3&gt;
&lt;p&gt;駆け足でしたが今年を振り返ってみました。
今年も色々ありました。残すところあと1ヶ月です！&lt;/p&gt;
&lt;p&gt;さて、&lt;a href=&#34;https://qiita.com/advent-calendar/2019/elasticsearch&#34;&gt;Elastic Stack Advent Calendar 2019&lt;/a&gt;は今日から25日まで続きます。今年は&lt;a href=&#34;https://qiita.com/advent-calendar/2019/elasticsearch2&#34;&gt;その2&lt;/a&gt;もできています！こらからの記事を楽しみにしています！
本日は&lt;a href=&#34;https://qiita.com/advent-calendar/2019/elasticsearch2&#34;&gt;その2&lt;/a&gt;で[kaibadash@github]さんが「5分でできるElastic stack環境構築」というのを書いてくれてるはずです！&lt;/p&gt;
&lt;p&gt;ということで、次は&lt;a href=&#34;https://qiita.com/KunihikoKido&#34;&gt;KunihikoKido&lt;/a&gt;さんの「
Elastic Cloud を使うようになって設計方針やら変わったことについて書きます。」になります。お楽しみに！&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Elastic Stack 7.0で入ってくる新機能をちょっと紹介</title>
      <link>https://blog.johtani.info/blog/2018/12/25/whats-new-in-elastic-stack-7/</link>
      <pubDate>Tue, 25 Dec 2018 00:00:01 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2018/12/25/whats-new-in-elastic-stack-7/</guid>
      <description>Elastic stack (Elasticsearch) Advent Calendar 2018の25日目の記事になります。 今年最後のAdvent Calendarです！来年も忘れてなければやるはず！ 今日は、すでにalp</description>
      <content:encoded>&lt;p&gt;&lt;a href=&#34;https://qiita.com/advent-calendar/2018/elasticsearch&#34;&gt;Elastic stack (Elasticsearch) Advent Calendar 2018&lt;/a&gt;の25日目の記事になります。
今年最後のAdvent Calendarです！来年も忘れてなければやるはず！&lt;/p&gt;
&lt;p&gt;今日は、すでにalpha2までリリースされた7系でどんな変更が入るのかをちょっとだけ紹介します。
ほんとにちょっとだけですよ。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h3 id=&#34;kibanaのk7-design-kibana&#34;&gt;Kibanaのk7 design (kibana)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/kibana/master/release-notes-7.0.0-alpha1.html#K7-design-7.0.0&#34;&gt;Kibanaの新デザインです。K7って呼ぶのかな？&lt;/a&gt;&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.johtani.info/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:600&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20181225/k7dashboard.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20181225/k7dashboard.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;まだ、メニューと一部が実装されているだけですが、7.0.0でガラッと変わりそうです。
そのほかの画面の&lt;a href=&#34;https://github.com/elastic/kibana/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue+is%3Aopen+k7&#34;&gt;Issueはこちら&lt;/a&gt;です。
&amp;ldquo;k7&amp;quot;で検索しただけですが。メタIssueが見つからなかったんで。&lt;a href=&#34;https://github.com/elastic/kibana/issues/25736&#34;&gt;例えば、こんな感じでアプリとかのスイッチとかがこんな感じになるよというデザイン案が観れたりします&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;zen2-elasticsearch&#34;&gt;Zen2 (elasticsearch)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-discovery.html&#34;&gt;Elasticsearchの新しいクラスター管理機構アルゴリズム&lt;/a&gt;になります。
Zenと呼ばれる独自実装のものを6系までは使っていましたが、7系向けに変更がかかりました。
実際には、Nodeを探す仕組み、Masterの選出アルゴリズム、クラスター状態の管理などを行います。
上記のリンクにあるようにドキュメントも詳しくなりました。
信頼性をさらに向上し、設定ミスを起こしにくくして、より使いやすくという目的で様々な変更が加えられています。
これが、&lt;a href=&#34;https://github.com/elastic/elasticsearch/issues/32006&#34;&gt;メタIssue&lt;/a&gt;かな？
アルゴリズムの変更や、クラスターの状態の管理の方法などの変更に関するIssueやPRにリンクが貼ってあります。&lt;/p&gt;
&lt;h3 id=&#34;新しいデータタイプ-elasticsearch&#34;&gt;新しいデータタイプ (elasticsearch)&lt;/h3&gt;
&lt;h4 id=&#34;featurefeature-vector-datatype&#34;&gt;Feature/Feature vector datatype&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/master/feature.html&#34;&gt;ドキュメントはこちら&lt;/a&gt;と&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/master/feature-vector.html&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/master/query-dsl-feature-query.html&#34;&gt;feature query&lt;/a&gt;と合わせて使用するためのフィールドで、しかもクエリのスコア計算「のみ」に使用するフィールドになります。
検索条件やソート、Aggregationの対象ではなく、クエリのスコアに影響させたい値を入れておくためのフィールドです。
6から追加された機能の「&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/master/search-uri-request.html&#34;&gt;track_total_hits&lt;/a&gt;」をfalseにした時と合わせると、function_scoreなどで計算をしていた場合よりも、検索性能が上がるという利点まであります。
ちなみに、「track_total_hits」は検索ヒット数を計算しないで、上位のデータを取得する時にクエリを早くするといったことができる機能になります。
&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/master/index-modules-index-sorting.html&#34;&gt;Index Sorting&lt;/a&gt;と組み合わせることで威力が発揮できる仕組みになるはずです。&lt;/p&gt;
&lt;h3 id=&#34;filebeat-supports-netflow-beats&#34;&gt;Filebeat supports NetFlow (beats)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/beats/filebeat/master/filebeat-input-netflow.html&#34;&gt;NetFlowが入力&lt;/a&gt;として追加されます。
Filebeatと言いつつ、File以外の入力が徐々に増えてきてますね（UDPやTCPにも対応しましたし）。
ネットワーク機器などの監視を行う方などにはさらに便利になってくるのではないでしょうか？
（私はこの辺りは不得手なので、誰か使ってみてもらえればと！）&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;まだ、序の口って感じですが、今年はこの辺で。7系ではここであげた以外にも様々な機能が追加されています（もしくは予定です）。
Elasticのドキュメントの良いところは、masterブランチのドキュメントも公開されていることです。
ドキュメントのバージョンを&lt;code&gt;7.0.0-alpha2&lt;/code&gt;にすれば、masterブランチで追加されたページが見れるので、
興味のある方は眺めてみていただければと。物によって、リリースノートが書かれていなかったりするので注意は必要ですが。&lt;/p&gt;
&lt;p&gt;今年もあと数日になりましたが、Advent Calendarへの参加ありがとうございました！
来年ももちろんやりますので、年始からネタを考えてくださいね。&lt;/p&gt;
&lt;p&gt;来年一発目は、&lt;a href=&#34;https://www.meetup.com/ja-JP/Tokyo-Elastic-Fantastics/events/257301177/&#34;&gt;第28回Elasticsearch勉強会 - 6.5機能紹介 -&lt;/a&gt;になります。ウェビナーでも紹介しましたが、6.5で入った様々な新機能をデモありで紹介する予定です。
興味のある方はぜひご参加ください。&lt;/p&gt;
&lt;p&gt;では、来年もよろしくお願いいたします。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>2018年のElastic StackとElastic</title>
      <link>https://blog.johtani.info/blog/2018/12/01/whats-happen-at-elastic-in-2018/</link>
      <pubDate>Sat, 01 Dec 2018 10:48:38 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2018/12/01/whats-happen-at-elastic-in-2018/</guid>
      <description>Elastic stack (Elasticsearch) Advent Calendar 2018の1日目の記事になります。 ちょっと遅れちゃいました。。。 まだ、1ヶ月を残してますが、簡単に今年起こったことを振り返ってみよ</description>
      <content:encoded>&lt;p&gt;&lt;a href=&#34;https://qiita.com/advent-calendar/2018/elasticsearch&#34;&gt;Elastic stack (Elasticsearch) Advent Calendar 2018&lt;/a&gt;の1日目の記事になります。&lt;/p&gt;
&lt;p&gt;ちょっと遅れちゃいました。。。
まだ、1ヶ月を残してますが、簡単に今年起こったことを振り返ってみようと思います。毎年恒例ですね、ここ数年。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h3 id=&#34;elastic-stack-620リリース2月&#34;&gt;Elastic Stack 6.2.0リリース(2月)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/jp/blog/elastic-stack-6-2-0-released&#34;&gt;リリース記事はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;APMがGAリリースされ、Beats monitoring UIも追加されました。Stackとしての統一度がちょっとずつ上がってきた感じですね。
Kibanaのホーム画面（左メニューのKibanaアイコンをクリックした時）にデータ登録のチュートリアル的な画面が追加されています。
特にBeatsを利用する時の流れが簡単にわかるのがいい感じです。Metricsなどはローカルでちょっと試すのにも簡単な流れですので、ぜひ一度やってみてもらいたいなと。
個人的にはtermsを使ったパイチャートで、&lt;a href=&#34;https://github.com/elastic/kibana/pull/15525&#34;&gt;その他の数値がどのくらいあるかといった表示ができるよう&lt;/a&gt;になって、やっと帰ってきた！（Kibana 3の頃にはあった機能）という印象でした。&lt;/p&gt;
&lt;h3 id=&#34;elasticon18開催2月&#34;&gt;Elastic{ON}18開催(2月)&lt;/h3&gt;
&lt;p&gt;第4回目のユーザーカンファレンスがSFで開催されました。
今年のキーノートが今年最大のニュースですね。
&lt;a href=&#34;https://www.elastic.co/jp/blog/doubling-down-on-open&#34;&gt;X-Packのコードの公開が発表された&lt;/a&gt;のがこの時でした。
個人的に今後もオープンソースに携わっていきたいと思いながら日々働いていますが、
Elasticのオープンソースへのこだわりと、シンプルな考え方を再確認して素晴らしい会社で働けてるなーと。
商用のソースコードを公開してユーザーや顧客の皆さんとより良いものを作っていきたいという形ですので、今後もよろしくお願いします！
&lt;a href=&#34;https://www.elastic.co/elasticon/conf/2018/sf/opening-keynote&#34;&gt;キーノートの動画はこちら&lt;/a&gt;からご覧いただけます。&lt;/p&gt;
&lt;p&gt;そのほかにも次のような発表が行われました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQL for elasticsearch&lt;/li&gt;
&lt;li&gt;Canvas&lt;/li&gt;
&lt;li&gt;Elastic App Search(旧Swiftype)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;elastic-stack-630リリース6月&#34;&gt;Elastic Stack 6.3.0リリース(6月)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/jp/blog/elastic-stack-6-3-0-released&#34;&gt;リリース記事はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2月末のElastic{ON}で発表されたX-Packのコードの公開にはやはり時間がかかりました。
有償コードのリポジトリとの統合やライセンスの変更、テスト環境などなど、色々大変だったみたいです。
ようやく公開され、ベーシックのライセンスの扱いなども変わり、より使いやすくなったのがこのタイミングです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;X-Packをプラグインとしてのインストールが不要に&lt;/li&gt;
&lt;li&gt;ベーシックライセンスがデフォルトでONに。6.3から登録などが不要に。&lt;/li&gt;
&lt;li&gt;Apache 2.0ライセンスの部分のみのディストリビューションも別途ダウンロードできるようになどなど&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/jp/webinars/elastic-stack-6-3&#34;&gt;日本でもリリースウェビナーをやりました&lt;/a&gt;。ご覧いただけましたかね？&lt;/p&gt;
&lt;h3 id=&#34;elastic-cloud-elasticsearch-serviceがより使いやすく8月&#34;&gt;Elastic Cloud Elasticsearch Serviceがより使いやすく(8月)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/jp/blog/the-next-generation-elasticsearch-service-hot-warm-clusters-machine-learning-more-hardware-choices-and-new-pricing&#34;&gt;リリース記事はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;これまでは、メモリとストレージの比率だけしか指定できなかったのですが、
このリリースで様々なユースケースに応じた組み合わせが可能になりました。
CPUやメモリリソースよりもストレージを大きくしたりなどです。
専用マスターノードを追加できたり、待望の機械学習（Machine Learning）が提供されたりと色々と変更があり使いやすくなったかと。
昔からよく聞かれる、Kuromojiなどのカスタム辞書を登録する機能もあるので、Elastic Cloud便利です。
&lt;a href=&#34;https://www.elastic.co/jp/cloud/elasticsearch-service&#34;&gt;ご存知ない方は、14日間のトライアル&lt;/a&gt;もありますので試していただければと！&lt;/p&gt;
&lt;h3 id=&#34;elastic-stack-640リリース8月&#34;&gt;Elastic Stack 6.4.0リリース(8月)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/jp/blog/elastic-stack-6-4-0-released&#34;&gt;リリース記事はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;フィールドエイリアスや韓国語のアナライザーがElasticsearchに追加されました。
Kibanaはデザインがここからさらに少しずつ変更が入ってたりします。
&lt;a href=&#34;https://elastic.github.io/eui/#/&#34;&gt;Elastic UIフレームワークと呼ばれるデザイン用のライブラリ&lt;/a&gt;が、ElasticのプロダクトのUIに取り込まれていってる感じです。統一感が取れてきてますよね。私が開発している&lt;a href=&#34;https://github.com/johtani/analyze-api-ui-plugin/issues/25&#34;&gt;Analyze UIのプラグインにも取り込みました&lt;/a&gt;。
あとは、マイクロソフトのde:codeで話をさせていただいた、&lt;a href=&#34;https://www.elastic.co/blog/logstash-6-4-0-released&#34;&gt;Logstash向けのAzure Moduleがリリース&lt;/a&gt;されたのもこのバージョンでした。AzureのEvent Hubからデータを取り込んで、SQLデータベースのモニタリングや、ユーザーの認証などをとってKibanaで可視化するものです。&lt;/p&gt;
&lt;p&gt;もっとも気に入っているのはサンプルデータの登録が簡単になったことです。これまでは、KibanaとElasticsearchを用意した後に、データを入れるためにFilebeatなどを使ってから、ようやくKibanaで遊べるという形でした。
6.4からは、ElasticsearchとKibanaを立ち上げて、Kibanaのホーム画面の「Sample Data」のリンクを押した後に、「Sample flght data」の「Add」ボタンを押せばKibanaからデータが登録されます（&lt;a href=&#34;https://www.elastic.co/guide/en/kibana/current/tutorial-sample-data.html&#34;&gt;サンプルデータについてはこちら&lt;/a&gt;）。とりあえず触ってみたいという方への敷居がさらに下がったのではないかなぁと。&lt;/p&gt;
&lt;h3 id=&#34;elastic認定エンジニア第1号8月&#34;&gt;Elastic認定エンジニア第1号(8月)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/jp/blog/celebrating-the-first-elastic-certified-engineer&#34;&gt;ブログ記事はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;認定制度も始まりました。Elasticsearchの知識、経験を問われるテストを受けていただき、合格すると認定されるというやつです。
なんと、社外で世界初の認定エンジニアがアクロクエストの吉岡さんでした（上記ブログ参照）。
私もトレーナーやってるのもあり、慌てて認定をとったりしましたw。
認定テストは筆記ではなく、実際に作業をするテストなので実践的です。
トレーニングの受講が必須ではないのも面白いなぁと思いました。
トレーニングや認定エンジニアに興味がある方は、&lt;a href=&#34;https://training.elastic.co&#34;&gt;Elasticのトレーニングのサイト&lt;/a&gt;をご覧ください。
1月末にはまた、日本語でElasticsearchのトレーニングも開催されます！&lt;/p&gt;
&lt;h3 id=&#34;elastic-cloud-enterprise-20リリース9月&#34;&gt;Elastic Cloud Enterprise 2.0リリース(9月)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/jp/blog/elastic-cloud-enterprise-2-0-0-released&#34;&gt;リリース記事はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/jp/products/ece&#34;&gt;Elastic Cloud Enterprise&lt;/a&gt;をご存知ない方もいらっしゃるかもしれません。
Elastic Cloudの裏側で利用しているクラスターの起動などの仕組みを製品として提供しているのがこちらになります。
Elastic Cloudで機械学習や様々な構成ができるようになったものがリリースされたのがこの2.0です。
複数のElasticsearchクラスターを管理したい場合には、こちらが便利なツールになってるんじゃないかなぁと。
部署ごとにクラスターを提供するといったことが可能になるので、乱立する前に利用するのも便利かなーと。&lt;/p&gt;
&lt;h3 id=&#34;ニューヨーク証券取引所で株式を公開10月&#34;&gt;ニューヨーク証券取引所で株式を公開(10月)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/jp/blog/ze-bell-has-rung-thank-you-users-customers-and-partners&#34;&gt;ブログ記事&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;日本語でブログ10月&#34;&gt;日本語でブログ(10月)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/jp/blog/how-to-configure-elasticsearch-cluster-better&#34;&gt;Elasticsearchの運用に関する典型的な4つの誤解&lt;/a&gt;というブログを書きました。4年も働いてるのに、会社のブログに翻訳以外で書いたことなかったので。。。
Twitterや勉強会、ブログ記事などで見かけるよくある誤解に関する記事を書いてみました。
Elasticは英語のブログも活発に書かれているのですが、今後もこのような形で日本語でのブログも頑張りますので、
読んでみたいものなどあればコメントいただければと。&lt;/p&gt;
&lt;p&gt;まぁ、&lt;a href=&#34;https://www.elastic.co/jp/blog/author/kosho-owa&#34;&gt;弊社の大輪は色々書いてるんで&lt;/a&gt;、私がもっと頑張れって話ですかね。。。&lt;/p&gt;
&lt;h3 id=&#34;elastic-stack-650リリース11月&#34;&gt;Elastic Stack 6.5.0リリース(11月)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/jp/blog/elastic-stack-6-5-0-released&#34;&gt;リリース記事はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;昨日（11/30）のウェビナーでも話をさせていただきましたが、Elastic Stack 6.5は「本当にマイナーリリース？？？」と思うほど盛りだくさんの機能がリリースされました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;インフラUI、ログUI&lt;/li&gt;
&lt;li&gt;Elastic APMの分散トレーシング対応&lt;/li&gt;
&lt;li&gt;Java &amp;amp; Go APM Agent GAリリース&lt;/li&gt;
&lt;li&gt;Cross Cluster Replication&lt;/li&gt;
&lt;li&gt;ODBCドライバー&lt;/li&gt;
&lt;li&gt;Kibana Canvas&lt;/li&gt;
&lt;li&gt;Kibana Spaces&lt;/li&gt;
&lt;li&gt;Data Visualizer for files&lt;/li&gt;
&lt;li&gt;Functionbeat&lt;/li&gt;
&lt;li&gt;LogstashのApp Search output&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;リストアップしただけでもこれです。45分のウェビナーでは伝えきれてないなぁとも思ってますので、何か検討しようと思います！&lt;/p&gt;
&lt;h3 id=&#34;elasticsearch勉強会3月から12月&#34;&gt;Elasticsearch勉強会(3月から12月)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.meetup.com/ja-JP/Tokyo-Elastic-Fantastics/&#34;&gt;Elasticsearch勉強会ページ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今年は、6回の勉強会を開催（1つは12月19日開催）しました。
9月からは、ユースケースなど、もっと参加者の皆さんの興味があることにフォーカスしながら開催をしてみ始めました。
参加しやすくなってればいいのですが。。。
そろそろまたアンケートをとったりして、参加しやすいか、どんな改善がしてほしいかなどを聞きたいなと思っています。&lt;/p&gt;
&lt;p&gt;12月はもっと皆さんと喋りたいなということで、&lt;a href=&#34;https://www.meetup.com/ja-JP/Tokyo-Elastic-Fantastics/events/256619262/&#34;&gt;スピーカーなしの「LT&amp;amp;忘年会」&lt;/a&gt;にしてみました。
私やElasticのものも参加するので、ぜひ色々聞いたり、他のコミュニティの方達の使い方を聞き出して、
新しい発見をしていただければなーと思います。LTでスピーカーの練習をするってものありですよ！（まだ誰も応募してくれてない。。。）
発表することで、フィードバックがもらえて、自分の使い方に自信が持てたり、その他の視点を得ることができると思いますので、
ぜひ発表してみていただければと。&lt;/p&gt;
&lt;h3 id=&#34;12月のjohtani出没イベント&#34;&gt;12月のjohtani出没イベント&lt;/h3&gt;
&lt;p&gt;12月は以下のイベントにブースを出してます。イベントに参加される方ははぜひブースにお立ち寄りください！！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;12/4-5 : &lt;a href=&#34;https://containerdays.jp&#34;&gt;Japan Container Days&lt;/a&gt; - 東京&lt;/li&gt;
&lt;li&gt;12/8 : &lt;a href=&#34;https://www.ospn.jp/osc2018-fukuoka/&#34;&gt;OSC福岡&lt;/a&gt; - 福岡&lt;/li&gt;
&lt;li&gt;12/15 : &lt;a href=&#34;http://www.java-users.jp/ccc2018fall/#/&#34;&gt;JJUG CCC 2018 Fall&lt;/a&gt; - 東京&lt;/li&gt;
&lt;li&gt;12/19 : &lt;a href=&#34;https://www.meetup.com/ja-JP/Tokyo-Elastic-Fantastics/events/256619262/&#34;&gt;第27回Elasticsearch勉強会&lt;/a&gt; - 東京&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なんか、忙しそうだな。。。&lt;/p&gt;
&lt;h3 id=&#34;まとめ&#34;&gt;まとめ&lt;/h3&gt;
&lt;p&gt;駆け足でしたが今年を振り返ってみました。
今年も色々ありましたが、今後もよろしくお願いいたします。&lt;/p&gt;
&lt;p&gt;さて、&lt;a href=&#34;https://qiita.com/advent-calendar/2018/elasticsearch&#34;&gt;Elastic Stack Advent Calendar 2018&lt;/a&gt;は今日から25日まで続きます。こらからの記事を楽しみにしています！&lt;/p&gt;
&lt;p&gt;ということで、次は&lt;a href=&#34;https://qiita.com/kaibadash@github&#34;&gt;kaibadash@github&lt;/a&gt;さんの「ぼくの考えた最強のElasticsearch index設定を最強にわかりやすく書くぞ！！！」になります。お楽しみに！&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>第25回Elasticsearch勉強会を開催しました。</title>
      <link>https://blog.johtani.info/blog/2018/10/17/26th-elasticsearch-tokyo-meetup/</link>
      <pubDate>Wed, 17 Oct 2018 17:33:50 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2018/10/17/26th-elasticsearch-tokyo-meetup/</guid>
      <description>毎月開催の2回目になります。 今回は日経さんの会場をお借りしての開催となりました。 前回から、スピーカーの募集をhttp://bit.ly/Sp</description>
      <content:encoded>&lt;p&gt;毎月開催の2回目になります。
今回は日経さんの会場をお借りしての開催となりました。&lt;/p&gt;
&lt;p&gt;前回から、スピーカーの募集をhttp://bit.ly/SpeakerElasticTokyoMeetup で行なっております。
ぜひ皆さんのノウハウを共有していただけると助かります。
また、次回もすでにスケジュール済みです。次回は&lt;a href=&#34;https://www.meetup.com/ja-JP/Tokyo-Elastic-Fantastics/events/254646236/&#34;&gt;「ログ/メトリック分析」回&lt;/a&gt;になります。&lt;/p&gt;
&lt;p&gt;以下は、個人的なメモになります。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h3 id=&#34;メディアコンテンツ向け記事検索dbとして使うelasticsearch--future-architect-株式会社-村田-靖拓さん-twitter-famipapamart&#34;&gt;メディアコンテンツ向け記事検索DBとして使うElasticsearch / Future Architect 株式会社 村田 靖拓さん (twitter: @famipapamart)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;メディア記事コンテンツ検索&lt;/li&gt;
&lt;li&gt;全ての情報が1indexに入っているようにすること。&lt;/li&gt;
&lt;li&gt;typeは少し悩んだ。&lt;/li&gt;
&lt;li&gt;範囲検索にはならない場合がある。（文字列で登録してWildcard検索できるようにした）&lt;/li&gt;
&lt;li&gt;kuromojiで基本対応&lt;/li&gt;
&lt;li&gt;異体字についてはchar filterでマッピング&lt;/li&gt;
&lt;li&gt;細かな設定とかもスライドにて公開予定。
&lt;ul&gt;
&lt;li&gt;基本的なプラグインだけで対応した&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dynamic Field mappingを有効にしたまま対応&lt;/li&gt;
&lt;li&gt;パフォーマンス検証&lt;/li&gt;
&lt;li&gt;初回のインデックスのロードは&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/tune-for-search-speed.html#_warm_up_the_filesystem_cache&#34;&gt;この辺かなぁ？&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;自力でQueryのoffset-limitを構築するのかぁ。
&lt;ul&gt;
&lt;li&gt;ソート条件が固定らしいのでできる方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;minne-での検索運用仮--_shiro16-さん&#34;&gt;minne での検索運用(仮) / @_shiro16 さん&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ハンドメイドなものをマーケットプレイスがminne&lt;/li&gt;
&lt;li&gt;SolrからElasticsearchに切り替えた話 2016/02以降はEs
&lt;ul&gt;
&lt;li&gt;昔は、DBからSolrへ同期&lt;/li&gt;
&lt;li&gt;Es版ではDBからの同期ではなく、Workerに対してリクエストを入れる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;現状は独自にEC2で運用中&lt;/li&gt;
&lt;li&gt;ユーザーが求めているものがきちんとでているかを計測している
&lt;ul&gt;
&lt;li&gt;行動ログはどんな感じ？&lt;/li&gt;
&lt;li&gt;TDにログを入れて、CTRとかを計算してre:dashで可視化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A/Bテストも実施
&lt;ul&gt;
&lt;li&gt;指標はキャンペーンなどが実施されている場合にブレる場合もある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;トレンドをログから知ることができる&lt;/li&gt;
&lt;li&gt;Function Scoreでスコアを変更してる
&lt;ul&gt;
&lt;li&gt;季節的な単語でスコアを変更したりする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ドリンクの対応などをして聴けてないところが。。。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;query_stringのはなし--加藤遼さん日本経済新聞社&#34;&gt;query_stringのはなし / 加藤遼さん　(日本経済新聞社)&lt;/h3&gt;
&lt;p&gt;電池が切れそう＋ピザとかの手配をしていたらメモが取れず。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;苦労が滲み出る感じのセッションでした。&lt;/li&gt;
&lt;li&gt;query_string queryが実際にどんなクエリになっているかの説明を交えて説明してもらえたのはすごくよかったんじゃないかと。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;検索は話してくれる人が多いし話題に事欠かないなぁという印象でした。
今回も、スピーカーの皆さん、会場提供をしていただいた日経さんありがとうございました。&lt;/p&gt;
&lt;p&gt;他のユースケースのスピーカーも募集してます。ぜひMeetup.comの概要に記載してあるリンクからスピーカーの応募をお願いします！&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>2018年のElasticは？</title>
      <link>https://blog.johtani.info/blog/2017/12/24/elastic-2018/</link>
      <pubDate>Sun, 24 Dec 2017 23:10:16 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2017/12/24/elastic-2018/</guid>
      <description>Merry Christmas! Elastic Stack Advent Calendar 2017の24日目の記事になります。 ちょっとですが、2018年のElasticについて書いてみようかと思います。 イベント いくつか</description>
      <content:encoded>&lt;p&gt;Merry Christmas!
&lt;a href=&#34;https://qiita.com/advent-calendar/2017/elasticsearch&#34;&gt;Elastic Stack Advent Calendar 2017&lt;/a&gt;の24日目の記事になります。&lt;/p&gt;
&lt;p&gt;ちょっとですが、2018年のElasticについて書いてみようかと思います。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;イベント&#34;&gt;イベント&lt;/h2&gt;
&lt;p&gt;いくつか出展が決まっているイベントがあるのでまずは宣伝を。&lt;/p&gt;
&lt;h4 id=&#34;osc-osaka-2018&#34;&gt;OSC Osaka 2018&lt;/h4&gt;
&lt;p&gt;まずは、1月25日、26日に&lt;a href=&#34;https://www.ospn.jp/osc2018-osaka/&#34;&gt;OSC Osaka 2018&lt;/a&gt;に出展し、話をします。参加者がいそうであれば、25日や26日の夜に勉強会もありかなぁと思っています。
セッションでは入門的な話をする予定です。ブースにいますので、色々質問がある関西の方はぜひご参加ください。&lt;/p&gt;
&lt;h4 id=&#34;developer-summit-2018&#34;&gt;Developer Summit 2018&lt;/h4&gt;
&lt;p&gt;2月15日、16日は&lt;a href=&#34;http://event.shoeisha.jp/devsumi/20180215&#34;&gt;Developer Summit 2018&lt;/a&gt;に出展します。
こちらでもブースにいますので、AMA（Ask Me Anything）的に使っていただくのもいいかなと。
デブサミに参加される方はぜひお立ち寄りください。&lt;/p&gt;
&lt;h4 id=&#34;manabiya&#34;&gt;Manabiya&lt;/h4&gt;
&lt;p&gt;3月23日、24日は&lt;a href=&#34;https://manabiya.tech&#34;&gt;Manabiya&lt;/a&gt;に出展します。
こちらでもAMAのつもりでブースを出す予定です。質問がある方はぜひお立ち寄りください。
こちらのイベントは初めての開催になるようなので、どんなイベントになるか楽しみにしています。&lt;/p&gt;
&lt;p&gt;イベント回りはこの辺りで。
また、1月末に勉強会を予定しています。決まり次第また&lt;a href=&#34;https://www.meetup.com/ja-JP/Tokyo-Elastic-Fantastics/&#34;&gt;Meetup.com&lt;/a&gt;の方々にメールを出す予定です。&lt;/p&gt;
&lt;h2 id=&#34;elastic-stackの2018年は&#34;&gt;Elastic Stackの2018年は？&lt;/h2&gt;
&lt;h4 id=&#34;canvas&#34;&gt;Canvas!&lt;/h4&gt;
&lt;p&gt;昨年のElastic{ON}でみなさんをCanvasがリリースされるかなぁと。
現在、みなさんにテストしてもらえるように&lt;a href=&#34;http://canvas.elastic.co&#34;&gt;canvas.elastic.co&lt;/a&gt;というサイトを公開中で、実際にインストールして試すことができるようになっています。
ぜひ、触って、全く新しいUIを体験して見てください。&lt;/p&gt;
&lt;h4 id=&#34;sql&#34;&gt;SQL?&lt;/h4&gt;
&lt;p&gt;こちらも昨年のElastic{ON}でみなさんから反響があったものです。
もう直ぐでてくるのではないかなぁと。&lt;/p&gt;
&lt;h4 id=&#34;その他は&#34;&gt;その他は？&lt;/h4&gt;
&lt;p&gt;いくつか面白そうで、取り込み済みのものをピックアップしておきます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/27478&#34;&gt;Add ranking evaluation API&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;検索クエリなどに対して検索結果のランクのクオリティを評価するためのAPIの追加（7.0予定）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JDK9サポート？
&lt;ul&gt;
&lt;li&gt;6.2でサポートされそうです。が、&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/6.x/setup.html#jvm-version&#34;&gt;LTSのJDK8が推奨のままの予定&lt;/a&gt;です。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;High-level REST ClientでいくつかAPIが追加
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/27574&#34;&gt;https://github.com/elastic/elasticsearch/pull/27574&lt;/a&gt;、https://github.com/elastic/elasticsearch/pull/27351&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;APM正式リリース？
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/jp/solutions/apm&#34;&gt;ベータ版&lt;/a&gt;がリリースされているので、秒読み段階？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ということで&#34;&gt;ということで&lt;/h2&gt;
&lt;p&gt;より詳しく知りたい方は、サンフランシスコで開催される&lt;a href=&#34;https://www.elastic.co/elasticon/conf/2018/sf&#34;&gt;Elastic{ON} 2018&lt;/a&gt;に参加するのが一番です！（ステマ）
私も参加予定ですので、ぜひ、現地でお会いし、色々な情報をゲットしましょう。&lt;/p&gt;
&lt;p&gt;明日で、今年のAdvent Calendarも最後です。micci184さんの記事を楽しみにしましょう！&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>2017年のElastic StackとElastic</title>
      <link>https://blog.johtani.info/blog/2017/12/01/whats-happen-at-elastic-in-2017/</link>
      <pubDate>Fri, 01 Dec 2017 00:00:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2017/12/01/whats-happen-at-elastic-in-2017/</guid>
      <description>Elastic stack (Elasticsearch) Advent Calendar 2017の1日目の記事になります。 まだ、1ヶ月を残していますが、簡単に今年起こったことを振り返ってみようかと思います。思った以上に</description>
      <content:encoded>&lt;p&gt;&lt;a href=&#34;https://qiita.com/advent-calendar/2017/elasticsearch&#34;&gt;Elastic stack (Elasticsearch) Advent Calendar 2017&lt;/a&gt;の1日目の記事になります。&lt;/p&gt;
&lt;p&gt;まだ、1ヶ月を残していますが、簡単に今年起こったことを振り返ってみようかと思います。思った以上に色々ありましたね。。。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h3 id=&#34;elastic-stack-520リリース-1月&#34;&gt;Elastic Stack 5.2.0リリース (1月)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/jp/blog/elastic-stack-5-2-0-released&#34;&gt;リリース記事はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HeatmapがKibanaで追加されたり、Heartbeatがベータですが追加されました。
個人的には、Terms aggregationの&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/5.2/search-aggregations-bucket-terms-aggregation.html#_filtering_values_with_partitions&#34;&gt;Filtering Valuesによるパーティション&lt;/a&gt;が便利になったと思います。Terms Aggsでページングに似たことができるようになりました。&lt;/p&gt;
&lt;h3 id=&#34;elasticon17開催-3月&#34;&gt;Elastic{ON}17開催 (3月)&lt;/h3&gt;
&lt;p&gt;第3回目のユーザカンファレンスが開催されました。
バレーダンサーの踊りから始まったキーノート、様々なユーザ企業によるユースケース発表などいろいろありました。
&lt;a href=&#34;https://www.elastic.co/elasticon/conf/2017/sf&#34;&gt;セッションはこちらのサイトから&lt;/a&gt;から録画を見ることができます。
&lt;a href=&#34;https://www.elastic.co/elasticon/conf/2017/sf/elasticsearch-sql&#34;&gt;SQL for Elasticsearch&lt;/a&gt;やAwardが目を引いたと思います。SQL対応まだ出てきていないですが、もうすぐじゃないかと！&lt;/p&gt;
&lt;h3 id=&#34;elastic-stack-530リリース-3月&#34;&gt;Elastic Stack 5.3.0リリース (3月)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/blog/elastic-stack-5-3-0-released&#34;&gt;リリース記事はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-modules-overview.html&#34;&gt;Filebeat module&lt;/a&gt;が導入され、ログファイルを取り込んでKibanaで可視化するまでの手順がより簡単になりました。Elasticの目指しているものの一つに、シンプルな使い方、簡単にはじめられることといったものがあります。KibanaのTimepickerもより便利になったのも、このバージョンからです。&lt;/p&gt;
&lt;h3 id=&#34;shayがceoに-5月&#34;&gt;ShayがCEOに (5月)&lt;/h3&gt;
&lt;p&gt;2月にすでに発表されていましたが、Elasticsearchの生みの親のShay BanonがCEOに正式に就任しました。CEOになってさらに、精力的に様々なことをやっていて、本当にすごいなと思います。&lt;/p&gt;
&lt;h3 id=&#34;elastic-stack-540600-alpha1リリース-5月&#34;&gt;Elastic Stack 5.4.0、6.0.0-alpha1リリース (5月)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/blog/elastic-stack-5-4-0-released&#34;&gt;5.4.0リリース記事はこちら&lt;/a&gt;、&lt;a href=&#34;https://www.elastic.co/blog/elastic-stack-6-0-0-alpha1-released&#34;&gt;6.0.0-alpha1リリース記事はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5.4.0は節目になるリリースでした。Machine Learningがベータリリースとして、X-Packに追加されましたし、ElasticsearchではCross Cluster Searchの改善が進みました。LogstashではPersistent QueueがGAになりましたし、KibanaにはTime Series Visual BuilderやEvent Contextなどが追加されますます使いやすくなりました。&lt;/p&gt;
&lt;p&gt;また、6.0.0のalpha版も同時にリリースされ、様々な方からのフィードバックが集まり始めました。&lt;/p&gt;
&lt;h3 id=&#34;elastic-cloud-enterprise-gaリリース-5月&#34;&gt;Elastic Cloud Enterprise GAリリース (5月)&lt;/h3&gt;
&lt;p&gt;Elastic Cloudのバックエンドの技術を製品に採用したものになります。
多くのElasticsearchクラスタを管理しないといけない方には朗報でした。&lt;/p&gt;
&lt;h3 id=&#34;opbeatがjoin-6月&#34;&gt;OpbeatがJoin (6月)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/blog/welcome-opbeat-to-the-elastic-family&#34;&gt;Opbeatチームがジョイン&lt;/a&gt;したのが6月です。Elastic StackがAPM(Application Performance Monitoring)でも活躍することになりそうです。APMの仕組みとしては、APM Agentをアプリ側に配置し、APM Serverへデータを送信し、Elasticsearchに保存、Kibanaで可視化するという流れになります。&lt;/p&gt;
&lt;h3 id=&#34;elastic-stack-550リリース-7月&#34;&gt;Elastic Stack 5.5.0リリース (7月)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/blog/kibana-5-5-0-released&#34;&gt;リリース記事はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Machime LearningがGAリリースになったのが5.5.0です。色々な方から質問を受けました。それ以外にも、ElasticsearchのWindows MSI InstallerやKibanaのFilter editorなどが追加されました。Filter editorはこれまで検索条件を記述するのが難しいと感じていたKibanaユーザにとても喜んでもらえたものじゃないかなと。
GrokDebuggerが導入されたのもこのタイミングです。&lt;/p&gt;
&lt;h3 id=&#34;elastic-stack-560リリース-9月&#34;&gt;Elastic Stack 5.6.0リリース (9月)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/blog/elastic-stack-5-6-0-released&#34;&gt;リリース記事はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5系最後のマイナーリリースであり、6へのアップグレードが楽になる様々な仕組みが用意されたのがこのバージョンです。ElasticsearchのJava High level REST clientが導入されたのもこのバージョンです。本当に様々な機能が次のメジャーバージョンとの互換性のために組み込まれています。。。&lt;/p&gt;
&lt;h3 id=&#34;elastic-cloud-on-gcp-9月&#34;&gt;Elastic Cloud on GCP (9月)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/blog/announcing-the-ga-of-elastic-cloud-hosted-elasticsearch-on-google-cloud-platform-gcp&#34;&gt;リリース記事はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;これまで、AWS上のみで展開していたElastic CloudがGCP上でも展開されることになりました。残念ながら、日本リージョンはまだありませんが、問い合わせなどが増えれば今後サポートされる可能性が高くなると思います！&lt;/p&gt;
&lt;h3 id=&#34;elastic-apm-alpha-9月&#34;&gt;Elastic APM alpha (9月)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/apm/get-started/current/overview.html&#34;&gt;リリース記事はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OpbeatチームによりElastic StackのAPMがAlphaですがリリースされました。APMがOpen Sourceで利用できるんです！Agentがもっと増えてくると色々なことに使えるようになると思います。ぜひAgentを作成してみてください！&lt;/p&gt;
&lt;h3 id=&#34;elastic-stack-600リリース-11月&#34;&gt;Elastic Stack 6.0.0リリース (11月)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/blog/elastic-stack-6-0-0-released&#34;&gt;リリース記事はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;待ちに待った6.0.0のリリースです。&lt;a href=&#34;https://events.elastic.co/6-0-elastic-stack-jp&#34;&gt;新機能については本日(12/1)の昼に行われるウェビナーをご覧ください！&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;swiftypeがjoin-11月&#34;&gt;SwiftypeがJoin (11月)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/jp/about/press/elastic-acquires-saas-site-search-leader-swiftype&#34;&gt;ニュースリリースはこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Swiftypeと呼ばれる検索のSaaSを提供している会社がジョインしました。
個人的には今年一番嬉しいニュースです。やはり、検索が好きなので。
簡単に&lt;a href=&#34;http://blog.johtani.info/blog/2017/11/10/welcome-swiftype/&#34;&gt;Site Searchを構築できる仕組み&lt;/a&gt;は非常に面白いものです。
興味のある方は、ぜひ触ってみてください。日本語固有の機能などはまだないので、今後関わっていければなーと。&lt;/p&gt;
&lt;h3 id=&#34;elasticon-tour-tokyo開催-12月&#34;&gt;Elastic{ON} Tour Tokyo開催 (12月)&lt;/h3&gt;
&lt;p&gt;まだ開催前ですが、今年も&lt;a href=&#34;https://www.elastic.co/elasticon/tour/2017/tokyo&#34;&gt;東京で1dayイベントを開催&lt;/a&gt;します。
残念ながら、もうSold outなので、キャンセル待ちになってしまっているみたいですが。私もスピーカーとして喋りますし、AMAブースにも立っています。
参加される方はぜひ声をかけていただければと思います。&lt;/p&gt;
&lt;h4 id=&#34;osc-2017enterprise-12月&#34;&gt;OSC 2017.Enterprise (12月)&lt;/h4&gt;
&lt;p&gt;オープンソースカンファレンスで今年も様々な都市に出張しました。
今年の締めくくりということで、&lt;a href=&#34;https://www.ospn.jp/osc2017.enterprise/&#34;&gt;12/8に渋谷で開催されるカンファレンス&lt;/a&gt;に出展します。時間のある方は、ぜひブースに遊びに来てください。入門者向けのセッションもあるので、こちらもお待ちしております。&lt;/p&gt;
&lt;h3 id=&#34;まとめ&#34;&gt;まとめ&lt;/h3&gt;
&lt;p&gt;超駆け足ですが、今年を振り返ってみました。
今年もいろんなことがありました。書くのが大変だったw。
OSCなどイベントで声をかけていただいた皆様、ありがとうございました。&lt;/p&gt;
&lt;p&gt;さて、&lt;a href=&#34;https://qiita.com/advent-calendar/2017/elasticsearch&#34;&gt;Elastic Stack Advent Calendar 2017&lt;/a&gt;は始まったばかりです。これからの記事を楽しみにしています！&lt;/p&gt;
&lt;h4 id=&#34;ということで&#34;&gt;ということで、&lt;/h4&gt;
&lt;p&gt;次は&lt;a href=&#34;https://qiita.com/aeroastro&#34;&gt;aeroastroさん&lt;/a&gt;の「Elasticsearchのインデックスを本当の意味で無停止再構築する方法」（&lt;a href=&#34;https://qiita.com/advent-calendar/2017/elasticsearch&#34;&gt;Advent Calendarのページはこちら&lt;/a&gt;）になります、お楽しみに！&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>データ分析基盤構築入門 を一部執筆しました。</title>
      <link>https://blog.johtani.info/blog/2017/09/21/release-intro-logging-analysis-system/</link>
      <pubDate>Thu, 21 Sep 2017 10:02:30 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2017/09/21/release-intro-logging-analysis-system/</guid>
      <description>久々に執筆しました。といっても、以前の書籍の更新版です。 まぁ、更新版といっても、私以外の方々は結構な量を書き直しor新規書き起こしされてます</description>
      <content:encoded>&lt;p&gt;久々に執筆しました。といっても、&lt;a href=&#34;http://blog.johtani.info/blog/2014/08/04/release-magazine-book-of-log-aggs-and-viz/&#34;&gt;以前の書籍&lt;/a&gt;の更新版です。
まぁ、更新版といっても、私以外の方々は結構な量を書き直しor新規書き起こしされてますが。。。&lt;/p&gt;
&lt;p&gt;ということで、みなさん「買って」から感想をいただけるとうれしいです！（以下の画像でAmazonにジャンプできます！Kindle版も発売中です。）&lt;/p&gt;
&lt;p&gt;&lt;a target=&#34;_blank&#34;  href=&#34;https://www.amazon.co.jp/gp/product/477419218X/ref=as_li_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=477419218X&amp;linkCode=as2&amp;tag=johtani-22&amp;linkId=f7cbe8130343ea340b18b53eba20d4b7&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=JP&amp;ASIN=477419218X&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=johtani-22&#34; &gt;&lt;/a&gt;&lt;img src=&#34;//ir-jp.amazon-adsystem.com/e/ir?t=johtani-22&amp;l=am2&amp;o=9&amp;a=477419218X&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;今回もElasticsearchの章を担当しました。
5.4ベースで書きましたが、ちょっとずつ6でどう変わるかなども記載してあります。
また、付録ではLogstashやBeatsにもちょっと触れています。
また、自分が一番好きなKibanaの機能であるDev ToolsのConsoleについても記載してあります。こちらも合わせて目を通していただければと。&lt;/p&gt;
&lt;p&gt;みなさんのフィードバック（ツイート、ブログ、Amazonのコメントなどなど）をお待ちしております！&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>2016年のElastic Stack</title>
      <link>https://blog.johtani.info/blog/2016/12/25/elasticsearch-6-features/</link>
      <pubDate>Sun, 25 Dec 2016 00:03:50 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2016/12/25/elasticsearch-6-features/</guid>
      <description>Merry Christmas! Elastic stack Advent Calendar 2016 最終日の記事になります。 簡単に今年の変遷を振り返ってみます。 Elasticsearch 2.2 (2月) Elasticsearch 2.2.0、2.1.2、1.7.5リリース クエリプロ</description>
      <content:encoded>&lt;p&gt;Merry Christmas!
&lt;a href=&#34;http://qiita.com/advent-calendar/2016/elastic&#34;&gt;Elastic stack Advent Calendar 2016&lt;/a&gt; 最終日の記事になります。&lt;/p&gt;
&lt;p&gt;簡単に今年の変遷を振り返ってみます。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;elasticsearch-22-2月&#34;&gt;Elasticsearch 2.2 (2月)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/jp/blog/elasticsearch-2-2-0-and-2-1-2-and-1-7-5-released&#34;&gt;Elasticsearch 2.2.0、2.1.2、1.7.5リリース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;クエリプロファイラやGeo系の性能改善などが取り込まれました。
また、同時期にリリースされたKibana 4.4ではColor pickerやShare用のURLの短縮化機能なども追加されました。&lt;/p&gt;
&lt;h2 id=&#34;第2回目のユーザカンファレンスelasticon開催2月&#34;&gt;第2回目のユーザカンファレンス、Elastic{ON}開催（2月）&lt;/h2&gt;
&lt;p&gt;サンフランシスコで、弊社第2回目のカンファレンスが開催されました。
2015年の会場よりも大きくなり、多数の方に参加いただきました。
ここで、以下の発表がありました。&lt;/p&gt;
&lt;h3 id=&#34;elastic-stackとx-packの紹介&#34;&gt;Elastic StackとX-Packの紹介&lt;/h3&gt;
&lt;p&gt;これまで、ELK stackと呼ばれて意味明日が、Beatsチームの参加により、ELKだけではなくなったこともあり、Elastic Stackと呼び名を変える事になりました。
また、Marvel、Shield、Watcherなどの商用の拡張機能についても、
単体の名称ではなく、X（Extension）-Packと1つの名前になる事に。
詳細については&lt;a href=&#34;https://www.elastic.co/jp/blog/heya-elastic-stack-and-x-pack&#34;&gt;公式のブログ&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;h3 id=&#34;elastic-cloudとelastic-cloud-enterpriseの発表&#34;&gt;Elastic CloudとElastic Cloud Enterpriseの発表&lt;/h3&gt;
&lt;p&gt;2015年にElasticにジョインし、
これまでFound.no（Found）と呼ばれていた弊社のElasticsearch as a Serviceが&lt;a href=&#34;https://www.elastic.co/jp/blog/introducing-elastic-cloud-and-elastic-cloud-enterprise&#34;&gt;Elastic Cloudと名称変更&lt;/a&gt;しました。
また、Elastic Cloudで培っているノウハウを詰め込んだElastic Cloud Enterpriseも発表しました。実際に利用可能になるまでには
まだもう少しかかってしまいますが、アルファ版が公開されていますので、興味のある方は触ってみてください。&lt;/p&gt;
&lt;p&gt;Elastic{ON}2016で撮影された、&lt;a href=&#34;https://www.elastic.co/blog/life-without-elasticsearch-elasticon16&#34;&gt;「Elasticsearchがないあなたの人生はどうなりますか？」&lt;/a&gt; といった面白い動画も公開されています。&lt;/p&gt;
&lt;h2 id=&#34;elasticsearch-23リリース3月&#34;&gt;Elasticsearch 2.3リリース（3月）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/jp/blog/elasticsearch-2-3-0-and-2-2-2-released&#34;&gt;Elasticsearch 2.3.0および2.2.2をリリース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Reindex APIが登場し、Mappingの変更やShard数の変更など、色々とデータの更新などがやりやすくなりました。
また、Task Managementの機能も追加され、長時間かかる処理を間違った場合などの対処が楽になりました。
個人的には、Deprecation Loggingの機能が導入されたことが嬉しいこととなります。次期メジャーバージョンで廃止される機能についてログに出力されるようになりました。
実際に運用されているアプリで利用している機能が今後なくなるかどうかをログを見るとわかるという仕組みです。&lt;/p&gt;
&lt;h2 id=&#34;rally登場4月&#34;&gt;Rally登場（4月）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/jp/blog/announcing-rally-benchmarking-for-elasticsearch&#34;&gt;Rally登場：Elasticsearchのベンチマークツール&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Elasticsearchのベンチマークツールがリリースされました。
定期的にElasticsearchの性能を計測することは問題点を見つける事に役に立ちます。そういった手助けをしてくれるツールが公開されることは非常に便利なことかと。&lt;/p&gt;
&lt;h2 id=&#34;elastic-stack-5-alpha1-リリース4月&#34;&gt;Elastic Stack 5 alpha1 リリース（4月）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/jp/blog/elastic-stack-release-5-0-0-alpha-1&#34;&gt;Elastic Stack 5.0.0 alpha 1 リリース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ingest NodeやLucene 6、新しいKibanaのUIなど多くのものが詰まっていました。ここから多くのユーザにテストしてもらい、5.0の正式リリースを迎えることができました。&lt;/p&gt;
&lt;h2 id=&#34;elasticsearch-240リリース8月&#34;&gt;Elasticsearch 2.4.0リリース（8月）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/jp/blog/release-bonanza-elasticsearch-graph-shield-watcher-marvel-reporting-logstash-2-4-beats-1-3-and-kibana-4-6-are-now-available&#34;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.xの最後のマイナーバージョンリリースです。
Reportingなどの追加とドットつきフィールド名の復活がありました。&lt;/p&gt;
&lt;h2 id=&#34;elastic-stack-500-beta1-リリース9月&#34;&gt;Elastic Stack 5.0.0 beta1 リリース（9月）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/jp/blog/elastic-stack-release-5-0-0-beta1&#34;&gt;Elastic Stack Release - 5.0.0-beta1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ついにベータです。Painlessがスクリプトのデフォルトになったり、TimelionがKibanaに取り込まれるなど、正式リリースまであと少し！&lt;/p&gt;
&lt;h2 id=&#34;prelertチームジョイン9月&#34;&gt;Prelertチームジョイン（9月）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/blog/welcome-prelert-to-the-elastic-team&#34;&gt;Welcome Prelert to the Elastic Team&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Machine Learningエンジンを開発し、Elasticsearch,Kibanaとの組み合わせの製品をリリースしていたPrelertという会社がジョインしました。
Elasticsearchに保存された多くのデータをより活用していただくことができるかと思います。
Elastic{ON} Tour 2016 Tokyoで弊社SAの大輪の発表も人気があるものでした。まだベータ段階ですが、利用して見ることも可能です。
ビデオなどが公開されたらまたツイートしようと思います。&lt;/p&gt;
&lt;h2 id=&#34;elasticon-tour-tokyo-2016開催12月&#34;&gt;Elastic{ON} Tour Tokyo 2016開催（12月）&lt;/h2&gt;
&lt;p&gt;今年で2回目のTokyoローカルの1日イベントでした。
ブログは「まだ」書いてませんが、、、今回も盛りだくさんのイベントになりました。
早朝のトレーニング（ハンズオンではない）にも80名近くの方に参加していただけましたし、私はKibanaのキーノート＋デモという大役をもらいましたし、ちょっと大変でした。
今年もAMA（Ask Me Anything）ブースが大盛況でした。
色々な方から、弊社のサポート、開発者が色々な質問を受け、それに答えるという形です。楽しんでいただけたかと思います。
来年もぜひ開催したいなと思っています。&lt;/p&gt;
&lt;p&gt;また、&lt;a href=&#34;https://www.elastic.co/blog/first-wave-of-elasticon-17-sessions-revealed&#34;&gt;Elastic{ON}17のセッションも&lt;/a&gt;いくつか発表されています。
ぜひ、サンフランシスコで行われる本場のカンファレンスにもご参加ください！&lt;/p&gt;
&lt;h2 id=&#34;来年は&#34;&gt;来年は？&lt;/h2&gt;
&lt;p&gt;1月後半か2月に&lt;a href=&#34;https://www.meetup.com/ja-JP/Tokyo-Elastic-Fantastics/&#34;&gt;Elasticsearch勉強会&lt;/a&gt;を検討しようと思っています。スピーカーに興味のある方は連絡いただければと。&lt;/p&gt;
&lt;p&gt;会社としては、&lt;a href=&#34;https://www.elastic.co/elasticon/conf/2017/sf&#34;&gt;Elastic{ON}2017&lt;/a&gt;が3月にまた開催されます。これで3回目となります。もちろん私も参加予定なので、参加される方は、現地で会いましょう！&lt;/p&gt;
&lt;p&gt;そのほかにも&lt;a href=&#34;http://www.bigdatacon.jp/ja/&#34;&gt;BIG DATA ANALYTICS TOKYO&lt;/a&gt;やオープンソースカンファレンス（&lt;a href=&#34;http://www.ospn.jp/osc2017-osaka/&#34;&gt;大阪&lt;/a&gt;）、&lt;a href=&#34;http://event.shoeisha.jp/devsumi/20170216/&#34;&gt;デブサミ&lt;/a&gt;といったカンファレンスに参加（登壇・ブースなど）予定です。
参加される方は、ぜひブースまでお越しください。&lt;/p&gt;
&lt;p&gt;では、また来年のAdvent Calendarでお会いしましょう！&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 5.0の便利機能紹介？</title>
      <link>https://blog.johtani.info/blog/2016/12/01/elasticsearch-5-dot-0-highlight/</link>
      <pubDate>Thu, 01 Dec 2016 17:34:30 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2016/12/01/elasticsearch-5-dot-0-highlight/</guid>
      <description>Elastic stack Advent Calendar 1日目の記事になります。 Elasticsearch 5.0が10月末にリリースされました。 リリースのブログでいくつか紹介されているのですが、そこでは紹介されて</description>
      <content:encoded>&lt;p&gt;Elastic stack Advent Calendar 1日目の記事になります。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/jp/blog/elasticsearch-5-0-0-released&#34;&gt;Elasticsearch 5.0&lt;/a&gt;が10月末にリリースされました。
リリースのブログでいくつか紹介されているのですが、そこでは紹介されていない機能について2、3紹介しようと思います。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;その前に、5.0、あれ？その前は2.xじゃなかったっけ？？と困惑されている方もいるかと思うので、簡単に5となった経緯の紹介をしようかと。&lt;/p&gt;
&lt;h3 id=&#34;バージョン番号&#34;&gt;バージョン番号&lt;/h3&gt;
&lt;p&gt;なぜ2から5に飛んだのかという話ですが、このスライドがその紹介になっています。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/johtani/elastic-stack-5-dot-0-alpha1-alpha5?slide=5&#34;&gt;https://speakerdeck.com/johtani/elastic-stack-5-dot-0-alpha1-alpha5?slide=5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/elasticon/conf/2016/sf/opening-keynote&#34;&gt;Elastic{ON} 2016のキーノート&lt;/a&gt;でも紹介がありましたが、KibanaやLogstashとElasticsearchを組み合わせて使うときにバージョンのミスマッチで動かないというユーザの声が上がっていました。
2.xのリリースから、同じ日にKibana、Logstash、Beatsもリリースするようになったのですが、
やはり、バージョン番号が異なるため、ミスマッチで動かないというユーザが時々いました。&lt;/p&gt;
&lt;p&gt;Elastic Stackという名称にもなったため、バージョン番号をそろえようという事になり、
Elasticsearch、Kibana、Logstash、Beats全てが5.0.0としてリリースされ、
今後は同じバージョン番号になります。&lt;/p&gt;
&lt;p&gt;ちなみに、「5」になった理由はKibanaのメジャーバージョンが「4」だったためです。&lt;/p&gt;
&lt;p&gt;さて、では、いくつか機能の紹介を。&lt;/p&gt;
&lt;h3 id=&#34;reindex-from-remote-cluster&#34;&gt;Reindex from remote cluster&lt;/h3&gt;
&lt;p&gt;Reindexが2.3から導入されました。データの再登録ができるようになり、マッピングの変更や
Shardの数の変更などが柔軟に行えるようになりました。
便利でしたが、あくまでも同一のクラスタでデータを登録し直す形でした。&lt;/p&gt;
&lt;p&gt;5.0からはこの機能に加えて、&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html#reindex-from-remote&#34;&gt;異なるクラスタからデータを取得してReindex&lt;/a&gt;を行うことができるようになりました。
こんな形になります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;POST _reindex
{
  &amp;quot;source&amp;quot;: {
    &amp;quot;remote&amp;quot;: {
      &amp;quot;host&amp;quot;: &amp;quot;http://otherhost:9200&amp;quot;,
      &amp;quot;username&amp;quot;: &amp;quot;user&amp;quot;,
      &amp;quot;password&amp;quot;: &amp;quot;pass&amp;quot;
    },
    &amp;quot;index&amp;quot;: &amp;quot;source&amp;quot;,
    &amp;quot;query&amp;quot;: {
      &amp;quot;match&amp;quot;: {
        &amp;quot;test&amp;quot;: &amp;quot;data&amp;quot;
      }
    }
  },
  &amp;quot;dest&amp;quot;: {
    &amp;quot;index&amp;quot;: &amp;quot;dest&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;username&lt;/code&gt;と&lt;code&gt;password&lt;/code&gt;はリモートのクラスタに認証の気候が存在する場合に利用できるオプションです。
また、ReindexのAPIはクエリを使用して、必要なデータだけを取得することが可能です。
この機能により、1.xや2.xのクラスタからデータを移行することが可能になります。&lt;/p&gt;
&lt;h3 id=&#34;custom-analyzer-test-using-analyze-api&#34;&gt;Custom analyzer test using Analyze API&lt;/h3&gt;
&lt;p&gt;もう一つ、ちょっとだけ便利な機能を紹介します。
独自にAnalyzerを定義（TokenizerとToken Filterなどを個別に設定）して、その挙動を確認するとき、2.xまでは、インデックスを作成してそのインデックスに対して&lt;code&gt;_analyze&lt;/code&gt; APIを呼び出す必要がありました。&lt;/p&gt;
&lt;p&gt;5.xからは&lt;code&gt;_analyze&lt;/code&gt; APIの読み出しのパラメータで指定できるようになりました。
こんな感じです。ここでは、&lt;code&gt;lowercase&lt;/code&gt;フィルタのあとに、&lt;code&gt;{...}&lt;/code&gt;で&lt;code&gt;stop&lt;/code&gt;フィルタを
パラメータの中で、指定しています。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -XGET &#39;localhost:9200/_analyze&#39; -d &#39;
{
  &amp;quot;tokenizer&amp;quot; : &amp;quot;whitespace&amp;quot;,
  &amp;quot;filter&amp;quot; : [&amp;quot;lowercase&amp;quot;, {&amp;quot;type&amp;quot;: &amp;quot;stop&amp;quot;, &amp;quot;stopwords&amp;quot;: [&amp;quot;a&amp;quot;, &amp;quot;is&amp;quot;, &amp;quot;this&amp;quot;]}],
  &amp;quot;text&amp;quot; : &amp;quot;this is a test&amp;quot;
}&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ちょっとだけですが、Analyzerなどを試すのが楽になるのではないでしょうか？&lt;/p&gt;
&lt;p&gt;ということで、以上が1日目の記事でした。
Logstashなど、他の5.0.0に関する記事もAdvent Calendarに空きがあるようなので、個別にかこうかなと思います。お楽しみに！&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Lucene Kuromoji for NEologdで指定した品詞の単語を抜き出すIngest Pluginを書いてみた #elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2016/07/22/making-ingest-processor-plugin-with-cookiecutter/</link>
      <pubDate>Fri, 22 Jul 2016 13:26:56 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2016/07/22/making-ingest-processor-plugin-with-cookiecutter/</guid>
      <description>久しぶりに、技術的なブログ書いてます。 Ingest Processorのプラグインを作ってみたくなったので、書いてみました。 ただ書いてみるんじゃ3番煎じ</description>
      <content:encoded>&lt;p&gt;久しぶりに、技術的なブログ書いてます。&lt;/p&gt;
&lt;p&gt;Ingest Processorのプラグインを作ってみたくなったので、書いてみました。
ただ書いてみるんじゃ3番煎じになりそうなので、&lt;a href=&#34;https://cookiecutter.readthedocs.io/en/latest/readme.html&#34;&gt;cookiecutter&lt;/a&gt;を使ってみました。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;と言っても、同僚のAlexが&lt;a href=&#34;https://discuss.elastic.co/t/cookiecutter-template-for-writing-ingest-processors/52985&#34;&gt;cookiecutter-elasticsearch-ingest-processor&lt;/a&gt;と言うテンプレートを作ってくれているのを使っただけですが。（https://discuss.elastic.co に投稿された記事で、使い方がアニメgifで説明されててわかりやすいです）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cookiecutter.readthedocs.io/en/latest/readme.html&#34;&gt;cookiecutter&lt;/a&gt;とは、コマンドラインで質問に答えると、テンプレートからプロジェクトが生成できるツールです。
Elasticでは、カスタムBeatを作る時に利用する例がいつかの日本語ブログや発表資料で話題になっていました。
これのIngest Processorのプラグインバージョンです。&lt;/p&gt;
&lt;p&gt;今回は、NEologdも使ってみたかったので、Lucene Kuromoji for NEologdを利用して
指定した品詞の単語だけを抽出するProcessorを作ってみました。&lt;/p&gt;
&lt;p&gt;GitHubのプロジェクト：https://github.com/johtani/elasticsearch-ingest-kuromoji-pos-extract&lt;/p&gt;
&lt;h3 id=&#34;cookiecutterの使い方&#34;&gt;Cookiecutterの使い方&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://cookiecutter.readthedocs.io/en/latest/readme.html&#34;&gt;Cookiecutterのインストールはサイト&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cookiecutter gh:spinscale/cookiecutter-elasticsearch-ingest-processor
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;あとは、出てくる以下の項目を指定するだけです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;processor_type&lt;/code&gt; : Ingest Processorのタイプ名です。&lt;code&gt;kuromoji_part_of_speech_extract&lt;/code&gt;としました。（Alexのだと&lt;code&gt;_&lt;/code&gt;を使うとちょっと問題があるので後述）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;description&lt;/code&gt; : readme.mdに利用されます。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;developer_name&lt;/code&gt; : 名前を記載。Javaのファイルのヘッダに利用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elasticsearch_version&lt;/code&gt; : デフォルトで&lt;code&gt;5.0.0-alpha4&lt;/code&gt;が指定されているので、特に指定せず&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上の質問に答えたら、プロジェクトのディレクトリ構造が出来上がってます。
プロジェクトのビルドなどにはGradleを利用します。&lt;/p&gt;
&lt;h3 id=&#34;プロジェクトのintellij-idea用のファイルを生成&#34;&gt;プロジェクトのIntelliJ IDEA用のファイルを生成&lt;/h3&gt;
&lt;p&gt;build.gradleファイルでGradleのideaプラグインがapplyされているので、以下のコマンドを叩けばIntelliJ IDEAのプロジェクトファイル（？）が生成され、IntelliJで開けばすぐに開発ができる状態にできます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gradle idea
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;コーディング&#34;&gt;コーディング&lt;/h3&gt;
&lt;p&gt;あとは、必要処理をコーディングします。
実際にコーディングするクラスは&lt;code&gt;org.elasticsearch.plugin.ingest.kuromoji_part_of_speech_extract&lt;/code&gt;のパッケージにある以下の2つです。（パッケージ名にはprocessor_typeの名前が指定されている）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IngestKuromojiPartOfSpeechExtractPlugin&lt;/li&gt;
&lt;li&gt;KuromojiPartOfSpeechExtractProcessor&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ingestkuromojipartofspeechextractplugin&#34;&gt;IngestKuromojiPartOfSpeechExtractPlugin&lt;/h4&gt;
&lt;p&gt;Pluginというクラスは、プラグインをNodeのModuleとして登録する処理を書くクラスとなります。
生成してすぐは、次のような形になっています。（※importやクラス定義の部分は省略しています。）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; Setting&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; YOUR_SETTING &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Setting&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ingest.kuromoji_part_of_speech_extract.setting&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;value&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; value&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Setting&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Property&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;NodeScope&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Setting&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;&amp;gt;&lt;/span&gt; getSettings&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Arrays&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;asList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;YOUR_SETTING&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onModule&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NodeModule nodeModule&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; IOException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        nodeModule&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;registerProcessor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;KuromojiPartOfSpeechExtractProcessor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TYPE&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;registry&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; KuromojiPartOfSpeechExtractProcessor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Factory&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;YOUR_SETTING&lt;/code&gt;プロパティと&lt;code&gt;getSettings()&lt;/code&gt;メソッドは&lt;code&gt;elasticsearch.yml&lt;/code&gt;で指定したい設定を記述する場合の例になります。今回は特に必要ないので両方削除しました。
最終系は&lt;a href=&#34;https://github.com/johtani/elasticsearch-ingest-kuromoji-pos-extract&#34;&gt;GitHubのコード&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;h4 id=&#34;kuromojipartofspeechextractprocessor&#34;&gt;KuromojiPartOfSpeechExtractProcessor&lt;/h4&gt;
&lt;p&gt;Processorは実際にIngest Nodeで行う処理を書くところです。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String TYPE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kuromoji_part_of_speech_extract&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String field&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String targetField&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KuromojiPartOfSpeechExtractProcessor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String tag&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String field&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String targetField&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; IOException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;tag&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;field&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; field&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;targetField&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; targetField&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;IngestDocument ingestDocument&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        String content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ingestDocument&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getFieldValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;field&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// TODO implement me!
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        ingestDocument&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setFieldValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;targetField&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; content&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getType&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; TYPE&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Factory&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; AbstractProcessorFactory&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;KuromojiPartOfSpeechExtractProcessor&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

        &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; KuromojiPartOfSpeechExtractProcessor &lt;span style=&#34;color:#a6e22e&#34;&gt;doCreate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String processorTag&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Object&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; config&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            String field &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; readStringProperty&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;TYPE&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; processorTag&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; config&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;field&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            String targetField &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; readStringProperty&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;TYPE&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; processorTag&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; config&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;target_field&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default_field_name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; KuromojiPartOfSpeechExtractProcessor&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;processorTag&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; field&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; targetField&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;TYPE&lt;/code&gt;が&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/master/put-pipeline-api.html&#34;&gt;Ingest APIのPipelineでProcessorを指定するときに使う名前&lt;/a&gt;になります。ここは、cookiecutterの時にprocessor_typeに入力した文字列になっています。
&lt;code&gt;kuromoji_part_of_speech_extract&lt;/code&gt;だと長いので、&lt;code&gt;kuromoji_pos_extract&lt;/code&gt;に変えました。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;execute()&lt;/code&gt;メソッドに&lt;code&gt;// TODO implement me!&lt;/code&gt;とあります。
この部分に実際の処理を記述していきます。&lt;/p&gt;
&lt;p&gt;あとは、&lt;code&gt;Factory&lt;/code&gt;クラスでIngest APIで指定された設定項目を読み込みます。
今回作成した&lt;code&gt;elasticsearch-ingest-kuromoji-pos-extract&lt;/code&gt;では品詞を指定する必要があるので、&lt;code&gt;pos_tags&lt;/code&gt;を指定できるように処理を追加しました。&lt;/p&gt;
&lt;p&gt;私が実装したものの説明をするとちょっと長くなりそうなので、&lt;a href=&#34;https://github.com/johtani/elasticsearch-ingest-kuromoji-pos-extract&#34;&gt;GitHubのコード&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;h3 id=&#34;テストのコーディング&#34;&gt;テストのコーディング&lt;/h3&gt;
&lt;p&gt;テストのクラスもテンプレートで生成されています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;KuromojiPartOfSpeechExtractProcessorTests&lt;/li&gt;
&lt;li&gt;KuromojiPartOfSpeechExtractRestIT&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;kuromojipartofspeechextractprocessortests&#34;&gt;KuromojiPartOfSpeechExtractProcessorTests&lt;/h4&gt;
&lt;p&gt;Processorクラスのテストになります。生成直後は次のような感じです。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testThatProcessorWorks&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Object&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; document &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HashMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    document&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;source_field&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fancy source field content&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    IngestDocument ingestDocument &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; RandomDocumentPicks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;randomIngestDocument&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; document&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    KuromojiPartOfSpeechExtractProcessor processor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; KuromojiPartOfSpeechExtractProcessor&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;randomAsciiOfLength&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;10&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;source_field&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;target_field&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    processor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ingestDocument&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Object&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ingestDocument&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getSourceAndMetadata&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    assertThat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; hasKey&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;target_field&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
    assertThat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;target_field&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; is&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fancy source field content&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// TODO add fancy assertions here
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;テストメソッドも実装されていますが、パラメータの追加の設定処理やアサーションが書かれてません。
実装に合わせて、アサーションや設定処理を追加しましょう。&lt;/p&gt;
&lt;h4 id=&#34;kuromojipartofspeechextractrestit&#34;&gt;KuromojiPartOfSpeechExtractRestIT&lt;/h4&gt;
&lt;p&gt;こちらはIntegration Testになります。
実際にElasticsearchに対して外部からAPIを叩くような感じです。
APIを叩くときに利用するJSONの設定やアサーションは&lt;code&gt;src/test/resources&lt;/code&gt;にyamlファイルがあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;10_basic.yaml&lt;/li&gt;
&lt;li&gt;20_kuromoji_part_of_speech_extract_processor.yaml&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;10_basic.yaml&lt;/code&gt;はプラグインがインストールされているかの確認のテストです。特に変更する必要はないです。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;20_kuromoji_part_of_speech_extract_processor.yaml&lt;/code&gt;は実際にコーディングしたProcessorが動くかどうかのテストです。&lt;/p&gt;
&lt;p&gt;テストの内容については、&lt;a href=&#34;https://github.com/johtani/elasticsearch-ingest-kuromoji-pos-extract&#34;&gt;GitHubのコード&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;h3 id=&#34;テストの実行とzipの生成&#34;&gt;テストの実行とZipの生成&lt;/h3&gt;
&lt;p&gt;テストの実行とZipの生成は次のコマンドを実行すればOKです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gradle check
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;テストに問題があった場合は、コケますし、問題なければ&lt;code&gt;SUCCESS&lt;/code&gt;と表示が出ます。
成功した場合は&lt;code&gt;build/distributions/&lt;/code&gt;というディレクトリにzipファイルができています。
これをElasticsearchのpluginコマンドでインストールすれば動きます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bin/plugin install file:///path/to/elasticsearch-ingest-kuromoji-pos-extract/build/distribution/ingest-kuromoji_part_of_speech_extract-0.0.1-SNAPSHOT.zip
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;kuromoji_pos_extractの利用方法&#34;&gt;kuromoji_pos_extractの利用方法&lt;/h3&gt;
&lt;p&gt;Ingest APIには便利な&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/master/simulate-pipeline-api.html&#34;&gt;Simulate Pipeline API&lt;/a&gt;があります。&lt;/p&gt;
&lt;p&gt;ということで、&lt;a href=&#34;https://github.com/neologd/mecab-ipadic-neologd/blob/master/README.ja.md&#34;&gt;mecab-ipadic-NEologd&lt;/a&gt;にあったサンプルの文章を使って、使い方の説明です。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-JSON&#34; data-lang=&#34;JSON&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;POST&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;_ingest/pipeline/_simulate&lt;/span&gt;
{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pipeline&amp;#34;&lt;/span&gt; : {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kuromoji neologd extract test&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;processors&amp;#34;&lt;/span&gt; : [
      {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;kuromoji_pos_extract&amp;#34;&lt;/span&gt; : {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;field&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;body&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;target_field&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;noun_field&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pos_tags&amp;#34;&lt;/span&gt; : [
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;名詞-固有名詞-組織&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;名詞-固有名詞-一般&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;名詞-固有名詞-人名-一般&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;名詞-固有名詞-地域-一般&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;名詞-固有名詞-地域-国&amp;#34;&lt;/span&gt;
          ]
        }
      }
      ]
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;docs&amp;#34;&lt;/span&gt; : [
    {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_index&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_source&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;body&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10日放送の「中居正広のミになる図書館」（テレビ朝日系）で、SMAPの中居正広が、篠原信一の過去の勘違いを明かす一幕があった。&amp;#34;&lt;/span&gt;
      }
    }
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;結果はこちら。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-JSON&#34; data-lang=&#34;JSON&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;docs&amp;#34;&lt;/span&gt;: [
    {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;doc&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_index&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_source&amp;#34;&lt;/span&gt;: {
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;noun_field&amp;#34;&lt;/span&gt;: [
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10日&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;中居正広のミになる図書館&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;テレビ朝日&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SMAP&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;中居正広&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;篠原信一&amp;#34;&lt;/span&gt;
          ],
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;body&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10日放送の「中居正広のミになる図書館」（テレビ朝日系）で、SMAPの中居正広が、篠原信一の過去の勘違いを明かす一幕があった。&amp;#34;&lt;/span&gt;
        },
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_ingest&amp;#34;&lt;/span&gt;: {
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2016-07-22T06:18:49.007+0000&amp;#34;&lt;/span&gt;
        }
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;noun_field&lt;/code&gt;に固有名詞の単語が抜き出せているのがわかるかと思います。&lt;/p&gt;
&lt;h3 id=&#34;alexのテンプレートで困った点&#34;&gt;Alexのテンプレートで困った点&lt;/h3&gt;
&lt;p&gt;テンプレートは便利だったのですが、&lt;code&gt;processor_type&lt;/code&gt;に&lt;code&gt;_&lt;/code&gt;を使用したタイプ名を指定すると次のような問題（？）が発生しました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;クラス名が&lt;code&gt;Kuromoji_part_of_speech_extractProcessor&lt;/code&gt;となってしまう&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;深刻な問題ではないのですが、JavaだとCamel Caseが普通なのでちょっと気になって。
ということで、&lt;a href=&#34;https://github.com/spinscale/cookiecutter-elasticsearch-ingest-processor/pull/1&#34;&gt;プルリク&lt;/a&gt;作って出してみました。まだ取り込まれてないかな。&lt;/p&gt;
&lt;p&gt;取り込み前に使いたい方は以下のコマンドを実行してください。
&lt;code&gt;processor_class_name&lt;/code&gt;という項目が増えています。
デフォルトだと&lt;code&gt;processor_type&lt;/code&gt;の&lt;code&gt;_&lt;/code&gt;の部分を取り除きつつCamel Caseにしたものが入ります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cookiecutter gh:johtani/cookiecutter-elasticsearch-ingest-processor
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;まとめ&#34;&gt;まとめ&lt;/h3&gt;
&lt;p&gt;ということで、とりあえず作ってみましたというものになります。
特徴的な単語（固有名詞だけ）を抜き出して、別のフィールドにできるので、タグみたいなものをこれを使って前処理で作れるようになるかなぁと。&lt;/p&gt;
&lt;h2 id=&#34;参考ブログ元ネタ&#34;&gt;参考ブログ（元ネタ？）&lt;/h2&gt;
&lt;p&gt;インスパイア元となったブログです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.classmethod.jp/server-side/elasticsearch/ingest-plugin-useragent/&#34;&gt;User Agentを解析するIngest Pluginを書いてみた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.cybozu.io/entry/2016/07/05/080000&#34;&gt;Elasticsearch 5.0.0のIngest Node用プラグインを書いた話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
    </item>
    
    <item>
      <title>第16回Elasticsearch勉強会を開催しました。 #elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2016/06/28/16th-elasticsearch-meetup/</link>
      <pubDate>Tue, 28 Jun 2016 13:55:55 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2016/06/28/16th-elasticsearch-meetup/</guid>
      <description>第16回Elasticsearch勉強会を開催しました。 スタッフの皆さん、スピーカーの皆さん、会場提供していただいたリクルートテクノロジーズ</description>
      <content:encoded>&lt;p&gt;&lt;a href=&#34;https://elasticsearch.doorkeeper.jp/events/46539&#34;&gt;第16回Elasticsearch勉強会&lt;/a&gt;を開催しました。
スタッフの皆さん、スピーカーの皆さん、会場提供していただいた&lt;a href=&#34;http://recruit-tech.co.jp&#34;&gt;リクルートテクノロジーズさん&lt;/a&gt;、ありがとうございました！
今回は、司会だけに注力してみました（）。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h3 id=&#34;チェックイン数など&#34;&gt;チェックイン数など&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;チェックインした人：141名&lt;/li&gt;
&lt;li&gt;キャンセルしなかった人：67名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;でした。&lt;/p&gt;
&lt;p&gt;今回は、参加希望者が多くて、当日にも100名近いキャンセル待ちの方がいたので、
240名まで、参加者枠を増枠（会場キャパ190名程度）して対応しました。
まぁ、読み通り、1/3の方はキャンセルしない形でした。
天気も良く電車の遅延などもなさそうだったので、ちょっとドキドキしてたのですが。&lt;/p&gt;
&lt;p&gt;以下は簡単なメモです。&lt;/p&gt;
&lt;h2 id=&#34;logstashとelasticsearchで作るenterprise-search-platform-elastic-kosho-owa&#34;&gt;「LogstashとElasticsearchで作るEnterprise Search Platform」/ Elastic Kosho Owa&lt;/h2&gt;
&lt;p&gt;スライド：https://speakerdeck.com/kosho/enabling-enterprise-search-platform-with-elastic-stack&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使ってるLogstashの設定ファイルを elastic-japan at elastic dot co に送るとTシャツがもらえるらしい。&lt;/li&gt;
&lt;li&gt;Logstashの&lt;a href=&#34;https://github.com/logstash-plugins/logstash-filter-ruby/blob/master/lib/logstash/filters/ruby.rb&#34;&gt;filter-ruby&lt;/a&gt;はここで、evalしてcallしてるから、特にforkとかしてないかと。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;企業業界情報プラットフォームspeedaにおけるelasticsearchの活用--株式会社ユーザベース-北内-啓さん&#34;&gt;「企業・業界情報プラットフォームSPEEDAにおけるElasticsearchの活用」 / 株式会社ユーザベース 北内 啓さん&lt;/h2&gt;
&lt;p&gt;スライド：http://www.slideshare.net/tau3000/speedaelasticsearch-63510388&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アルゴリズム関連の開発担当&lt;/li&gt;
&lt;li&gt;企業データをいろんな軸で検索したい
&lt;ul&gt;
&lt;li&gt;データ数が約70億レコードになりそう（通貨 x MySQL）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;300万企業データ＋Nestedとかで持ってる。
&lt;ul&gt;
&lt;li&gt;11万フィールド？？？&lt;/li&gt;
&lt;li&gt;10台の物理サーバに24仮想マシン&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;企業名の検索
&lt;ul&gt;
&lt;li&gt;recall重視&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NewsPicksの検索機能
&lt;ul&gt;
&lt;li&gt;「日本 化粧品 売上高」業界のデータとかも観れるのかな？有料会員向け機能&lt;/li&gt;
&lt;li&gt;登録済みキーワードかどうかをRDB＋Esに検索して、ID化するっぽい
&lt;ul&gt;
&lt;li&gt;ID（Analyze必要ない）検索だから、termクエリだった、サンプルが。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ノードの役割分担
&lt;ul&gt;
&lt;li&gt;更新はMasterNode経由でDataNodeへ。&lt;/li&gt;
&lt;li&gt;検索はClientNode経由でDataNodeへ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;1.xかぁ。。。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;elasticsearchベースの全文検索システムfess--株式会社エヌツーエスエム-菅谷信介さん&#34;&gt;「Elasticsearchベースの全文検索システムFess」 / 株式会社エヌツーエスエム 菅谷信介さん&lt;/h2&gt;
&lt;p&gt;スライド：http://www.slideshare.net/shinsuke/elasticsearchfess&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;10.xからSolrをやめてElasticsearchへ。&lt;/li&gt;
&lt;li&gt;日本語検索
&lt;ul&gt;
&lt;li&gt;bigram＋形態素（1文字検索とかに対応するため）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NeologDに対応したkuromojiを利用&lt;/li&gt;
&lt;li&gt;DBFluteをESFluteとしてEs対応&lt;/li&gt;
&lt;li&gt;KOPFを組み込んで使ってる&lt;/li&gt;
&lt;li&gt;configをREST API経由で更新できるプラグインあり&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lt&#34;&gt;LT&lt;/h2&gt;
&lt;h3 id=&#34;elasticsearchとgcpのネットワークでハマった話-株式会社サイバーエージェント-平田大地-さん-daichild&#34;&gt;「ElasticsearchとGCPのネットワークでハマった話」 株式会社サイバーエージェント 平田大地 さん @daichild&lt;/h3&gt;
&lt;p&gt;スライド：https://speakerdeck.com/daic_h/gcpfalsenetutowakudehamatutahua&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hhkb2 2刀流！&lt;/li&gt;
&lt;li&gt;networkのKeep-alive周りで困ったよというお話。&lt;/li&gt;
&lt;li&gt;後で聞いたけど、&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/plugins/current/cloud-gce.html&#34;&gt;GCE Cloud Plugin&lt;/a&gt;は使ってるそうです。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;06/28 17:00追記&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pingを定期的に実行させることで回避も出来るようです。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/2.3/modules-transport.html#_tcp_transport&#34;&gt;transport.ping_schedule&lt;/a&gt;に時間を指定します。通常のNode（Transport以外）は&#39;-1&amp;rsquo;が指定してあり、動作してません。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;スクリプトフィールドで作るランキングみたいな何かiwag-さん&#34;&gt;「スクリプトフィールドで作るランキングみたいな何か」iwag さん&lt;/h3&gt;
&lt;p&gt;スライド：https://speakerdeck.com/iwag/elasticsearch-dezuo-rurankingu&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.xかぁ。。。&lt;/li&gt;
&lt;li&gt;あとは、&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html&#34;&gt;function_score&lt;/a&gt;とかも面白いですよ！&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;その他感想などのブログ&#34;&gt;その他、感想などのブログ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tsuyoshi-nakamura.hatenablog.com/entry/2016/06/28/115244&#34;&gt;第16回elasticsearch勉強会に参加してきた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://masutaka.net/chalow/2016-06-28-1.html&#34;&gt;第16回Elasticsearch勉強会に参加してきた &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;まとめ宣伝&#34;&gt;まとめ＋宣伝？&lt;/h2&gt;
&lt;p&gt;1.xがまだまだいますねぇ、早く2.xにアップしましょう！（5.0ももう直ぐだし）。懇親会でも色々と話しましたが、https://discuss.elastic.co というフォーラムあるので、ぜひ活用してください。&lt;/p&gt;
&lt;p&gt;次回は8月末か9月頭かでしょうか。
&lt;a href=&#34;http://www.ospn.jp/osc2016-kyoto/&#34;&gt;7月末にOSC京都&lt;/a&gt;に出没するので、京都で勉強会やりたいと思ってます！
会場とかスピーカーとか興味ある人連絡ください。&lt;/p&gt;
&lt;p&gt;東京の勉強会のスピーカーも随時募集中ですので、連絡ください。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>第15回Elasticsearch勉強会を開催しました。 #elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2016/03/17/15th-elasticsearch-jp/</link>
      <pubDate>Thu, 17 Mar 2016 12:43:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2016/03/17/15th-elasticsearch-jp/</guid>
      <description>第15回Elasticsearch勉強会を開催しました。 スタッフの皆さん、スピーカーの皆さん、会場提供していただいたリクルートテクノロジーズ</description>
      <content:encoded>&lt;p&gt;&lt;a href=&#34;https://elasticsearch.doorkeeper.jp/events/40444&#34;&gt;第15回Elasticsearch勉強会&lt;/a&gt;を開催しました。
スタッフの皆さん、スピーカーの皆さん、会場提供していただいた&lt;a href=&#34;http://recruit-tech.co.jp&#34;&gt;リクルートテクノロジーズさん&lt;/a&gt;、ありがとうございました！
今回は、Elastic{on} 2016開催直後ということで、大半はElastic{on}に関する話でした。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h3 id=&#34;チェックイン数など&#34;&gt;チェックイン数など&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;チェックインした人：114名&lt;/li&gt;
&lt;li&gt;キャンセルしなかった人：62名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;でした。
今回は、少しおそめで1時間前にキャンセル待ちがいない状態にしました。
まぁ、いつもの感じでしょうか。数値も安定してきた感じですかね。&lt;/p&gt;
&lt;h2 id=&#34;elasticsearchと機械学習を実際に連携させる--preferred-networks-america-inchttpswwwpreferred-networksjp-cto-久保田展行kubota-nobuyuki-さん&#34;&gt;&amp;ldquo;Elasticsearchと機械学習を実際に連携させる&amp;rdquo; / &lt;a href=&#34;https://www.preferred-networks.jp&#34;&gt;Preferred Networks America, Inc.&lt;/a&gt; CTO 久保田展行(Kubota Nobuyuki) さん&lt;/h2&gt;
&lt;p&gt;スライド：&lt;a href=&#34;http://www.slideshare.net/nobu_k/elasticsearch-59627321&#34;&gt;Elasticsearchと機械学習を実際に連携させる&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.johtani.info/blog/2016/01/08/14th-elasticcsearch-jp/&#34;&gt;前回の続き&lt;/a&gt;の話で、今回が本題でした。&lt;/p&gt;
&lt;p&gt;勉強会直前に発表された&lt;a href=&#34;http://sensorbee.io&#34;&gt;SensorBee&lt;/a&gt;をElasticsearchと一緒に使うとどんなことができるかというお話です。
まぁ、前処理重要ですよねというのが、いつものことですが、印象的でした。
いつものようにわかりやすい説明だったので、使ってブログを書いて欲しいなと。&lt;/p&gt;
&lt;p&gt;発表の中で、説明に出てきたデモとか。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://research.preferred.jp/2016/01/ces2016/&#34;&gt;CES2016でロボットカーのデモを展示してきました&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;elasticon-2016レポート--elastic-jun-ohtani&#34;&gt;&amp;ldquo;Elastic{ON} 2016レポート&amp;rdquo; / Elastic Jun Ohtani&lt;/h2&gt;
&lt;p&gt;スライド：&lt;a href=&#34;https://speakerdeck.com/johtani/elastic-on-2016-repoto&#34;&gt;elastic{on} 2016 レポート&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;写真多めで、キーノートをメインに話をしました。&lt;/p&gt;
&lt;p&gt;簡単なまとめとしては&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プロダクトロゴができました。&lt;a href=&#34;https://www.elastic.co/brand&#34;&gt;ロゴ画像などはこちら&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;次のメインバージョンは全て5.0。（&lt;a href=&#34;https://www.elastic.co/v5&#34;&gt;5.0に関する通知が欲しい人はこちらで登録できます&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/elasticon/conf/2016/sf&#34;&gt;elastic{on} 2016のビデオなどはこちら&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;BBL始めます。連絡ください&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;elasticonの過ごし方--クラスメソッド株式会社-藤本-真司-さん&#34;&gt;&amp;ldquo;Elastic{ON}の過ごし方&amp;rdquo; / クラスメソッド株式会社 藤本 真司 さん&lt;/h2&gt;
&lt;p&gt;スライド：&lt;a href=&#34;http://dev.classmethod.jp/server-side/elasticsearch/elasticsearch-study-15-lt/&#34;&gt;Elastic{ON}の過ごし方&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;印象に残ったのは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「自他共に認めるブログの会社」&lt;/li&gt;
&lt;li&gt;4/12にSAPさんに会場を借りてElastic＆クラスメソッドでイベントやります。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;やっぱりご飯が美味しいんですねぇ。
早速&lt;a href=&#34;http://dev.classmethod.jp/server-side/elasticsearch/elasticsearch-study-15-lt/&#34;&gt;ブログ&lt;/a&gt;が書かれてました。&lt;/p&gt;
&lt;h2 id=&#34;elasticon-2016-見るべきセッション資料-7選--acroquest-technology株式会社-谷本-心-さん&#34;&gt;&amp;ldquo;Elastic{ON} 2016 見るべきセッション資料 7選&amp;rdquo; / Acroquest Technology株式会社 谷本 心 さん&lt;/h2&gt;
&lt;p&gt;スライド：&lt;a href=&#34;https://speakerdeck.com/shintanimoto/elastic-on-2016-jian-rubekisetusiyonzi-liao-7xuan-number-elasticsearchjp&#34;&gt;Elastic{ON} 2016 見るべきセッション資料 7選 #elasticsearchjp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;印象に残ったのは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;東京でハンズオンやる会場提供者募集中！&lt;/li&gt;
&lt;li&gt;Ingest Node（参考：&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/master/ingest.html&#34;&gt;Ingest Nodeのドキュメントは公開中。&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;Reindex API（参考：&lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/17060&#34;&gt;Backport reindex to 2.x &lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;その他感想などのブログ&#34;&gt;その他、感想などのブログ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.classmethod.jp/server-side/elasticsearch/elasticsearch-study-15-lt/&#34;&gt;第15回elasticsearch勉強会にLTで登壇しました #elasticsearch #elasticsearchjp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/Kazuhira/20160316/1458142636&#34;&gt;第15回elasticsearch勉強会に参加してきました #elasticsearch #elasticsearchjp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;まとめ宣伝&#34;&gt;まとめ＋宣伝&lt;/h2&gt;
&lt;p&gt;来年のElastic{ON}に参加したいと思っていただけたらよかったなと。&lt;/p&gt;
&lt;p&gt;4/12にクラスメソッドさんとイベントを行います。また、ツイートすると思います。&lt;/p&gt;
&lt;p&gt;次回はいつも通りだと5月中旬になるかと思います（大丈夫かな？&lt;a href=&#34;http://www.ospn.jp/osc2016-nagoya/&#34;&gt;OSC 2016 Nagoya&lt;/a&gt;でしゃべったり、ブース出したりとかするけど）。
5末に名古屋に出没します。名古屋で勉強会できればやりたいと思ってます。会場とかスピーカーとか興味がある方は連絡ください。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>第14回Elasticsearch勉強会を開催しました。 #elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2016/01/08/14th-elasticcsearch-jp/</link>
      <pubDate>Fri, 08 Jan 2016 11:34:56 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2016/01/08/14th-elasticcsearch-jp/</guid>
      <description>あけましておめでとうございます、johtaniです。 第14回Elasticsearch勉強会を開催しました。 スタッフの皆さん、スピーカーの皆</description>
      <content:encoded>&lt;p&gt;あけましておめでとうございます、johtaniです。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://elasticsearch.doorkeeper.jp/events/36330&#34;&gt;第14回Elasticsearch勉強会&lt;/a&gt;を開催しました。
スタッフの皆さん、スピーカーの皆さん、会場提供していただいた&lt;a href=&#34;http://recruit-tech.co.jp&#34;&gt;リクルートテクノロジーズさん&lt;/a&gt;、ありがとうございました！
今年もよろしくお願いします！参加していただき盛り上げていただいた参加者の皆さんもありがとうございました。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h3 id=&#34;チェックイン数など&#34;&gt;チェックイン数など&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;チェックインした人：122名&lt;/li&gt;
&lt;li&gt;キャンセルしなかった人：58名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;でした。
今回も当日の昼の時点でキャンセル待ちがない状態にしていました。
いくつか電車が止まっていたという話を聞いていたので、開始を5分遅らせ、
受付は45分くらいまで開けておくという対応をしてもらいました。&lt;/p&gt;
&lt;h3 id=&#34;ココが辛いよelasticsearch--株式会社リクルートテクノロジー-tatakaba-さん&#34;&gt;&amp;ldquo;ココが辛いよelasticsearch&amp;rdquo; / 株式会社リクルートテクノロジー @tatakaba さん&lt;/h3&gt;
&lt;p&gt;スライド：&lt;a href=&#34;http://www.slideshare.net/takahitotakabayashi/elasticsearch-56936397&#34;&gt;ココが辛いよelasticsearch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;実際にいくつかのサービスで運用されている内容とどういった機能を利用しているか、
どういったものを独自に作っているかという話をしていただきました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;独自PluginでA/Bテストしてる&lt;/li&gt;
&lt;li&gt;Snapshotの活用&lt;/li&gt;
&lt;li&gt;Index作成は環境に合わせて行っている。&lt;/li&gt;
&lt;li&gt;バージョンは混在&lt;/li&gt;
&lt;li&gt;PusnaRSのバージョンアップの話。
&lt;ul&gt;
&lt;li&gt;2つのバージョンのクラスタを用意してリアルタイムに切り替え。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Elasticsearchの活用
&lt;ul&gt;
&lt;li&gt;QueryのRewrite：&lt;/li&gt;
&lt;li&gt;SolrのリクエストをEsで受け付けたり。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;辛い話。
&lt;ul&gt;
&lt;li&gt;バージョンアップが辛い&lt;/li&gt;
&lt;li&gt;Riverなくなるのつらい&lt;/li&gt;
&lt;li&gt;データずれるのつらい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;補足：&lt;/p&gt;
&lt;h4 id=&#34;バージョンアップについて&#34;&gt;バージョンアップについて&lt;/h4&gt;
&lt;p&gt;1.x系から2.x系にアップされるのであれば、こちらを必ず試してください。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/elastic/elasticsearch-migration&#34;&gt;https://github.com/elastic/elasticsearch-migration&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;「.」が使えなくなるという話は、Solrとの大きな違いになるのかもなぁと。
ネスト構造のデータの表記を「.」で行うというのを厳密に行えるように、
「.」を使えなくしたというのがあるかと。&lt;/p&gt;
&lt;h4 id=&#34;riverについて&#34;&gt;Riverについて&lt;/h4&gt;
&lt;p&gt;Riverがなくなった理由については、https://www.elastic.co/blog/deprecating-rivers で記載があります。
便利なのですが、負荷が偏ったり、スケールしないとかいう問題点があるかなと。&lt;/p&gt;
&lt;p&gt;良いサンプルとしては、JDBC Riverなどは、Javaのプログラムとして起動できるように変更されていたりします。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jprante/elasticsearch-jdbc/wiki/jdbc-plugin-feeder-mode-as-an-alternative-to-the-deprecated-elasticsearch-river-api&#34;&gt;https://github.com/jprante/elasticsearch-jdbc/wiki/jdbc-plugin-feeder-mode-as-an-alternative-to-the-deprecated-elasticsearch-river-api&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;（&lt;strong&gt;個人的&lt;/strong&gt; には、SolrのDIHもRiverもあんまり好きではなかったです。データの変換処理と、ロード処理は別々にしたい人だったので。）&lt;/p&gt;
&lt;h4 id=&#34;データのズレなど&#34;&gt;データのズレなど&lt;/h4&gt;
&lt;p&gt;耐障害性とか信頼性に関しては、どういった問題点があるのか、どういった対応をしているのかというのがまとめられたページが用意されています。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/resiliency/current/index.html&#34;&gt;https://www.elastic.co/guide/en/elasticsearch/resiliency/current/index.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;機械学習を利用したちょっとリッチな検索--preferred-networks-america-inc-cto-久保田展行kubota-nobuyuki-さん&#34;&gt;「機械学習を利用したちょっとリッチな検索」 / Preferred Networks America, Inc. CTO 久保田展行(Kubota Nobuyuki) さん&lt;/h3&gt;
&lt;p&gt;スライド：&lt;a href=&#34;http://www.slideshare.net/nobu_k/ss-56810268&#34;&gt;機械学習を利用したちょっとリッチな検索&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来日していただき、機械学習と検索の話をしてもらいました。
本編は次回の発表かもw&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;機械学習を元に、検索対象の情報を元の情報から増やしてあげる。&lt;/li&gt;
&lt;li&gt;増えた情報を検索できるようにする&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;今日のゴール&#34;&gt;今日のゴール：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;機械学習とはどういうものか？&lt;/li&gt;
&lt;li&gt;データの集め方とか、アノテーションとか&lt;/li&gt;
&lt;li&gt;学習の方法（ツールやライブラリに依存）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;esでの活用方法&#34;&gt;Esでの活用方法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;オフラインで学習させて、情報を付与した後に、Elasticsearchに入れる&lt;/li&gt;
&lt;li&gt;Jubatus＋fluentdで&lt;/li&gt;
&lt;li&gt;ChainerサポートのOSSのツールを公開予定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;「ここからが本当の地獄だ。。。」ってのが聴きたいw&lt;/p&gt;
&lt;h3 id=&#34;lucene-query-再考---domain-specific-query-実装----supership株式会社-インフラ事業開発本部検索グループ-大川真吾-さん&#34;&gt;「Lucene Query 再考 - Domain Specific Query 実装 -」 / Supership株式会社 インフラ事業開発本部検索グループ 大川真吾 さん&lt;/h3&gt;
&lt;p&gt;スライド：&lt;a href=&#34;http://www.slideshare.net/ShingoOKAWA/elasticsearch-20150107-56772462&#34;&gt;Lucene Query 再考 - Domain Specific Query 実装 -&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Luceneのクエリに関する話と、クエリパーサーに関する話でした。
こういった濃い話も勉強会でしてもらえると、色々な参加者に楽しんでいただけるかなぁと。
次回も続きを話してもらう予定です。&lt;/p&gt;
&lt;p&gt;補足：&lt;/p&gt;
&lt;p&gt;参考までにですが、Elasticsearchに入門したての人向けに、
Analyzerとか転置インデックスとかの話をした時のスライドになります。
&lt;a href=&#34;https://speakerdeck.com/johtani/lucenetori-ben-yu-falsejian-suo&#34;&gt;https://speakerdeck.com/johtani/lucenetori-ben-yu-falsejian-suo&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;lt&#34;&gt;LT:&lt;/h3&gt;
&lt;h4 id=&#34;fluentd-meets-beats--repeatedly-さん&#34;&gt;Fluentd meets Beats / @repeatedly さん&lt;/h4&gt;
&lt;p&gt;スライド：http://www.slideshare.net/repeatedly/fluentpluginbeats-at-elasticsearch-meetup-14&lt;/p&gt;
&lt;p&gt;参考Qiita：http://qiita.com/repeatedly/items/77af41788f0b3ccdefd2&lt;/p&gt;
&lt;p&gt;Beatsの説明をTDの人からしてもらうなどw
FluentdにBeatsからのデータを流し込めるようにしたプラグインが出たという話でした。&lt;/p&gt;
&lt;p&gt;filebeatの性能の件は社内で聞いてみようかと。&lt;/p&gt;
&lt;h4 id=&#34;elasticsearchインデクシングのパフォーマンスを測ってみた--日本ibm黒澤亮二さん&#34;&gt;Elasticsearchインデクシングのパフォーマンスを測ってみた / 日本IBM　黒澤亮二さん&lt;/h4&gt;
&lt;p&gt;スライド：&lt;a href=&#34;http://www.slideshare.net/kuron99/elasticsearch-56784623&#34;&gt;Elasticsearchインデクシングのパフォーマンスを測ってみた&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考Qiita：http://qiita.com/rjkuro/items/e79eec7ffb0511b7c678&lt;/p&gt;
&lt;p&gt;細かな性能測定の結果を駆け足で話してもらいました。
皆さんもこの指標をもとに、手元の環境を計測してみたりしてみてもらえればと。&lt;/p&gt;
&lt;p&gt;あとは、2.x系になってるので、同じ方法で計測してもらってまた
発表してもらえると嬉しいなー（棒）&lt;/p&gt;
&lt;h2 id=&#34;その他感想などのブログ&#34;&gt;その他、感想などのブログ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://acro-engineer.hatenablog.com/entry/2016/01/08/123857&#34;&gt;Elasticsearch勉強会　第14回フィードバック&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;まとめ宣伝&#34;&gt;まとめ＋宣伝&lt;/h2&gt;
&lt;p&gt;久々に（初めてかな？）、ゲストがいないのに自分が喋りませんでした。
次回は3月中旬を予定してます。
次回は、Elastic{ON}16の報告をする予定です。いろいろと発表あるだろうし。&lt;/p&gt;
&lt;p&gt;あと、今月末の1/29に&lt;a href=&#34;http://www.ospn.jp/osc2016.enterprise-osaka/&#34;&gt;オープンソースカンファレンス 2016.enterprise@Osaka&lt;/a&gt;にブース出展します。
セミナー枠でも弊社OSSプロダクトの概要を話しする予定です。
関西の方は、ぜひ参加していただければと。ブースでお待ちしております。&lt;/p&gt;
&lt;p&gt;また、スピーカーや場所が用意できたら、出張勉強会もまたやりたいなと思っています。
興味ある方は、連絡ください！&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>2015年のElasticsearch</title>
      <link>https://blog.johtani.info/blog/2015/12/25/about-elasticsearch-in-2015/</link>
      <pubDate>Fri, 25 Dec 2015 13:29:54 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/12/25/about-elasticsearch-in-2015/</guid>
      <description>今年最後のAdvent Calendarとなります。 この記事はElasticsearch Advent Calendar 2015の最終日のエントリです。 簡単に今年の変遷を</description>
      <content:encoded>&lt;p&gt;今年最後のAdvent Calendarとなります。&lt;/p&gt;
&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2015/elasticsearch&#34;&gt;Elasticsearch Advent Calendar 2015&lt;/a&gt;の最終日のエントリです。&lt;/p&gt;
&lt;p&gt;簡単に今年の変遷を、Elasticsearchをベースに振り返ってみようかと思います。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;kibana-4リリース2月&#34;&gt;Kibana 4リリース（2月）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.johtani.info/blog/2015/02/20/kibana-4-literally-ja/&#34;&gt;Kibana 4（日本語訳）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;いきなり、Elasticsearchではない話題ですが。
AggregationベースのKibanaがリリースされました。
画面が黒くないというので、話題になりましたw
12月末時点では、4.3.1になっています。
Sub Aggregationによる強力なグラフ表示や異なるインデックスに対するグラフを
一つのダッシュボードに表示できるといったことができるようになりました。&lt;/p&gt;
&lt;h2 id=&#34;セキュリティ向けプラグインshieldのリリース2月&#34;&gt;セキュリティ向けプラグインShieldのリリース（2月）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.johtani.info/blog/2015/02/27/you-know-for-security-shield-goes-ga-ja/&#34;&gt;セキュリティ向けプラグインShieldのリリース（日本語訳）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;商用向けのプラグインの第2弾です。
セキュリティ強化のためのプラグインで、いろいろなところで引き合いがあったりします。&lt;/p&gt;
&lt;h2 id=&#34;初のユーザカンファレンスelasticon開催3月&#34;&gt;初のユーザカンファレンス、Elastic{ON}開催（3月）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.johtani.info/blog/2015/03/11/attend-elasticon/&#34;&gt;#elasticon に参加中&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;サンフランシスコで、弊社初のカンファレンスが開催されました。（来年（2016年）もサンフランシスコで開催されます。）
また、ここで、以下の2点の発表がありました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ロゴ及びドメイン名などの変更&lt;/li&gt;
&lt;li&gt;Foundのジョイン&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;約1300名が参加する大イベントでした。
初の渡米で楽しんできましたが、ドメインの切り替えなどは大変でした。。。
まだ、ロゴを変えて1年経ってないということが実感できてないです。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/found&#34;&gt;Found&lt;/a&gt;のジョインはまだまだ、日本で知名度が出てないかもなぁと。
もっと広めないと。
利点としては以下の通りです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新バージョンがすぐに利用可能に。また、バージョンアップも画面で指定可能&lt;/li&gt;
&lt;li&gt;公式プラグイン＋その他いくつかのプラグインが利用可能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;elasticsearch-15-リリース4月&#34;&gt;Elasticsearch 1.5 リリース（4月）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.johtani.info/blog/2015/04/01/elasticsearch-1-5-0-released-ja/&#34;&gt;Elasticsearch 1.5.0リリース（日本語訳）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主に、resiliencyに関する改良になります。
毎リリースで信頼性向上につながる改良が含まれる形になっています。
このリリースの近くで初の東京の外での勉強会を&lt;a href=&#34;http://blog.johtani.info/blog/2015/04/04/elasticsearch-study-session-at-nagoya/&#34;&gt;名古屋で開催&lt;/a&gt;したりもしました。&lt;/p&gt;
&lt;h2 id=&#34;discusselasticcoをオープン5月&#34;&gt;discuss.elastic.coをオープン（5月）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://discuss.elastic.co&#34;&gt;https://discuss.elastic.co&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これまでは、Google Groupsを使っていましたが、Elasticが提供しているプロダクトが
別々のグループであったために、プロダクトにまたがった質問がやりにくかったり、検索がしにくかったりという問題点がありました。
今では、過去のGoogle Groupsのデータも移行されているので、是非参加して、質問・回答してみてください。
&lt;a href=&#34;https://discuss.elastic.co/c/in-your-native-tongue/18-category&#34;&gt;日本語でやりとりできるカテゴリ&lt;/a&gt;もあるので、どんどん、やりとりしていただければ。&lt;/p&gt;
&lt;h2 id=&#34;elasticsearch-16-リリース6月&#34;&gt;Elasticsearch 1.6 リリース（6月）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.johtani.info/blog/2015/06/10/elasticsearch-1-6-0-released-ja/&#34;&gt;Elasticsearch 1.6.0リリース（日本語訳）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.0に向けたUpgrade APIが含まれるなど、次期リリースに向けた準備が整いつつあるリリースでした。
他にもsynced flushの取り込みやレスポンスのJSONのフィルタリングなど細かな改善も取り込まれています。&lt;/p&gt;
&lt;h2 id=&#34;found-premiumとstandardリリース7月&#34;&gt;Found PremiumとStandardリリース（7月）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.johtani.info/blog/2015/07/07/we-just-made-found-more-awesome-ja/&#34;&gt;さらに進化したFound（日本語訳）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Foundに弊社のサポートチームがサポートできるプレミアムが追加されました。
これにより、商用プラグインとして提供しているShieldが（現在はWatcherも）利用できるなど、
より便利になりました。また、Kibana 4も無料で提供されていたりします。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/found/pricing&#34;&gt;小さなサイズのものですと、無料で試していただける&lt;/a&gt;ものもあるので、試してみてもらえればと。&lt;/p&gt;
&lt;h2 id=&#34;elasticsearch-17-リリース7月&#34;&gt;Elasticsearch 1.7 リリース（7月）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.johtani.info/blog/2015/07/22/elasticsearch-1-7-0-and-1-6-1-released-ja/&#34;&gt;Elasticsearch 1.7.0 および 1.6.1リリース（日本語訳）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1.x系、最後のリリースでした。
小さい改善ですが、セキュリティフィックス、クラスタの安定化に寄与する機能改善が含まれています。&lt;/p&gt;
&lt;p&gt;この&lt;a href=&#34;http://blog.johtani.info/blog/2015/07/16/kansai-1st-elasticsearch-jp/&#34;&gt;リリース直前に大阪、京都で勉強会も開催してみました。&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;elasticsearch-200-beta1-リリース8月&#34;&gt;Elasticsearch 2.0.0-beta1 リリース（8月）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.johtani.info/blog/2015/08/27/elasticsearch-2-0-0-beta1-released-ja/&#34;&gt;Elasticsearch 2.0.0-beta1リリース（日本語訳）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;待ちに待った、Lucene 5ベースのElasticsearchの登場でした。
doc_valuesがデフォルトになったり、エラーが構造化されて見やすくなったり、
Pipeline Aggregationが導入されたりしています。
また、問題点の洗い出しも兼ねて、ベータリリースとして、本リリースまでに多くのIssueをあげていただきました。&lt;/p&gt;
&lt;h2 id=&#34;elasticsearch-200-リリース10月&#34;&gt;Elasticsearch 2.0.0 リリース（10月）&lt;/h2&gt;
&lt;p&gt;2.0の本リリースです。リリースまでに、beta1、2及び、rc1がリリースされました。&lt;/p&gt;
&lt;p&gt;追加された機能や目玉の改善については「&lt;a href=&#34;https://speakerdeck.com/johtani/elasticsearch-2-dot-0falseshao-jie&#34;&gt;Elasticsearch 2.0の紹介&lt;/a&gt;」のスライドを参考にしていただければと。&lt;/p&gt;
&lt;p&gt;また、Elasticsearch 2.0のリリースに合わせて、商用プラグインやLogstash、Kibanaの新しいバージョンがリリースされました。
Kibanaなどは、プラットフォームとしての機能を備え、Senseや&lt;a href=&#34;http://blog.johtani.info/blog/2015/12/01/introduction-timelion/&#34;&gt;Timelion&lt;/a&gt;と言ったプラグインアプリもリリースされています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.johtani.info/blog/2015/10/29/logstash-2-0-0-released-ja/&#34;&gt;Logstash 2.0.0リリース（日本語訳）
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.johtani.info/blog/2015/10/29/kibana-4-2-0-ja/&#34;&gt;Kibana 4.2.0リリース（日本語訳）
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.johtani.info/blog/2015/10/30/sense-2-0-0-beta1-ja/&#34;&gt;Senseの歴史 - Sense 2.0.0-beta1の紹介(日本語訳)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.johtani.info/blog/2015/10/30/shield-watcher-and-marvel-2-0-ga-released-ja/&#34;&gt;Shield、Watcher、Marvel 2.0.0 GAリリース（日本語訳）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;elasticsearch-210-リリース11月&#34;&gt;Elasticsearch 2.1.0 リリース（11月）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/blog/elasticsearch-2-1-0-and-2-0-1-released&#34;&gt;Elasticsearch 2.1.0 and 2.0.1 released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;beats-100のリリース11月&#34;&gt;Beats 1.0.0のリリース（11月）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/blog/beats-1-0-0&#34;&gt;The Beats 1.0.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go言語で書かれた軽量データシッパーになります。
パケットをキャプチャしてElasticsearchに送る&lt;a href=&#34;https://www.elastic.co/downloads/beats/packetbeat&#34;&gt;Packetbeat&lt;/a&gt;、
topコマンドで取れるデータなどを&lt;a href=&#34;https://www.elastic.co/downloads/beats/topbeat&#34;&gt;Topbeat&lt;/a&gt;、
ログファイルなどを取り込み配送する&lt;a href=&#34;https://www.elastic.co/downloads/beats/filebeat&#34;&gt;Filebeat&lt;/a&gt;がリリースされました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/beats/libbeat/current/index.html&#34;&gt;libbeat&lt;/a&gt;と呼ばれる、
ベースとなるライブラリを元にしたプロダクトで、Logstashのエージェントのような使い方もできるようになっています。&lt;/p&gt;
&lt;p&gt;Go言語に興味のある方などは、調べてみてはいかがでしょう？&lt;/p&gt;
&lt;h2 id=&#34;来年は&#34;&gt;来年は？&lt;/h2&gt;
&lt;p&gt;日本では、&lt;a href=&#34;https://elasticsearch.doorkeeper.jp/events/36330&#34;&gt;1/7に第14回Elasticsearch勉強会&lt;/a&gt;を開催します。
すでに、38名のキャンセル待ちとなっていますが、おそらく、年明けにキャンセルがそこそこ出ると思うので、まだ間に合うんじゃないかなぁと。&lt;/p&gt;
&lt;p&gt;会社としては、&lt;a href=&#34;https://www.elastic.co/elasticon/conf/2016/sf&#34;&gt;Elastic{ON}16&lt;/a&gt;が控えています。参加される方は、ぜひ現地で声をかけてください！！&lt;/p&gt;
&lt;p&gt;その他にもイベント、オープンソースカンファレンス（まずは、&lt;a href=&#34;https://www.ospn.jp/osc2016.enterprise-osaka/&#34;&gt;大阪&lt;/a&gt;、&lt;a href=&#34;http://www.ospn.jp/osc2016-spring/&#34;&gt;東京&lt;/a&gt;）などに出没する予定ですので、こちらも参加していただければと。&lt;/p&gt;
&lt;p&gt;では、また来年のAdvent Calendarでお会いしましょう！&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>第13回Elasticsearch勉強会を開催しました。#elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2015/11/10/13th-elasticsearch-jp/</link>
      <pubDate>Tue, 10 Nov 2015 17:22:58 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/11/10/13th-elasticsearch-jp/</guid>
      <description>第13回Elasticsearch勉強会を開催しました。 スタッフの皆さん、スピーカーの皆さん、会場提供していただいたリクルートテクノロジーズ</description>
      <content:encoded>&lt;p&gt;&lt;a href=&#34;https://elasticsearch.doorkeeper.jp/events/33631&#34;&gt;第13回Elasticsearch勉強会&lt;/a&gt;を開催しました。
スタッフの皆さん、スピーカーの皆さん、会場提供していただいた&lt;a href=&#34;http://recruit-tech.co.jp&#34;&gt;リクルートテクノロジーズさん&lt;/a&gt;、ありがとうございました！
来年もよろしくお願いします！参加していただき盛り上げていただいた参加者の皆さんもありがとうございました。&lt;/p&gt;
&lt;p&gt;7月同様、&lt;a href=&#34;http://samuraism.com&#34;&gt;サムライズム&lt;/a&gt;の&lt;a href=&#34;https://twitter.com/yusuke&#34;&gt;@yusuke&lt;/a&gt;さんに
テキスト翻訳していただき、大変助かりました。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h3 id=&#34;チェックイン数など&#34;&gt;チェックイン数など&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;チェックインした人：100名&lt;/li&gt;
&lt;li&gt;キャンセルしなかった人：36名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;でした。
今回は当日の時点でキャンセル待ちがない状態にしていました。
雨もあって、これなかった人もいるのでしょうか。&lt;/p&gt;
&lt;h2 id=&#34;beyond-the-basics-with-elasticsearch--honza-král--elastic&#34;&gt;&amp;ldquo;Beyond the basics with Elasticsearch&amp;rdquo; / Honza Král / Elastic&lt;/h2&gt;
&lt;p&gt;スライド：https://speakerdeck.com/elasticsearch/beyond-the-basics-with-elasticsearch&lt;br&gt;
参考ビデオ（別のカンファレンスで話した時のビデオ）：https://www.youtube.com/watch?v=yIixWzjTNog&lt;/p&gt;
&lt;p&gt;Pycon HKでアジアに来ていたHonzaに、ついでに日本で話をしてもらうという企画で、
前回から1カ月足らずでの開催となりました。
Elasticsearchの基本的な検索機能とは別の機能に関して少し話をしてもらった感じです。
&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/search-percolate.html&#34;&gt;Percolator&lt;/a&gt;と&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html&#34;&gt;Aggregation&lt;/a&gt;の話でした。&lt;/p&gt;
&lt;p&gt;詳しくはビデオやスライドを見てもらうのがいいかなと。&lt;/p&gt;
&lt;h2 id=&#34;how-did-we-use-foundno-for-our-services--株式会社アイリッジtakuya-noguchi-さん-tn961ir&#34;&gt;&amp;ldquo;How did we use Found.no for our services?&amp;rdquo; / 株式会社アイリッジ　Takuya Noguchi さん @tn961ir&lt;/h2&gt;
&lt;p&gt;スライド：未定&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Foundユーザー。1.7までの話。&lt;/li&gt;
&lt;li&gt;社内で独自にクラスタを構築していたが、managed serviceを利用したいと思っていた。&lt;/li&gt;
&lt;li&gt;Found用のACLがShieldに&lt;/li&gt;
&lt;li&gt;マルチバイトのインデックス名とかも使いたいが、Nginxとの連携でちょっと。。。&lt;/li&gt;
&lt;li&gt;セキュリティ関連の話も。Securityに関する報告はこういうものも用意されてるので、こちらに相談してもらうのがいいかも。https://www.elastic.co/community/security&lt;/li&gt;
&lt;li&gt;要望がいくつか。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ログ収集の仕組みを再考しようあとマウンテンビューに行ってきました--acroquest-technology株式会社-谷本-心さん-cero_t&#34;&gt;&amp;ldquo;ログ収集の仕組みを再考しよう！　あとマウンテンビューに行ってきました。&amp;rdquo; / Acroquest Technology株式会社 谷本 心さん @cero_t&lt;/h2&gt;
&lt;p&gt;スライド：http://www.slideshare.net/shintanimoto/lets-reconsider-about-collecting-logs-plus-visiting-elasticmoutain-view&lt;/p&gt;
&lt;p&gt;ログの小話から始まり、ログに関する考え方とかを披露してもらいました。
さらに踏み込んだログの活用の方法の話になるかと思いきや、
思いっきり話が飛んで、マウンテンビューのElasticオフィスに遊びに行った写真が出てきましたw&lt;/p&gt;
&lt;p&gt;写真の後は、弊社のTanya（&lt;a href=&#34;https://www.elastic.co/elasticon/tour/2015/tokyo&#34;&gt;来月のElastic{ON} Tour Tokyo&lt;/a&gt;で来日予定）から
聞いた弊社製品に関する話をしていただきました。
きっと、Beatsに関して次は話してくれるんだろうなぁ（棒）。
流れ的には、&lt;a href=&#34;https://www.elastic.co/elasticon/conf/2016/sf&#34;&gt;来年の2月にサンフランシスコで開催されるElastic{ON}16&lt;/a&gt;につながりそうだったので、ここで宣伝しときますね。
今年3月に開催されたイベントには残念ながら日本の方はいなかったので、次回は日本の方がいると嬉しいなぁと。&lt;/p&gt;
&lt;h2 id=&#34;lt-elasticsearch-を使った単語共起頻度の計算--株式会社はてなidtakuya-a-さん&#34;&gt;LT &amp;ldquo;「Elasticsearch を使った単語共起頻度の計算」&amp;rdquo; / 株式会社はてな　id:takuya-a さん&lt;/h2&gt;
&lt;p&gt;スライド：未定&lt;/p&gt;
&lt;p&gt;一風変わったElasticsearchの使い方的な話でした。
検索用にデータを登録してあるElasticsearchから単語の頻度情報を抜き出して、
別のインデックスに登録するという感じでしょうか。
こういうのが、実は、Elasticsearchに機能としてあると便利だったりするのかもなぁと思ってみたり。&lt;/p&gt;
&lt;p&gt;LTよりはちょっと長かったですかねw&lt;/p&gt;
&lt;h2 id=&#34;その他感想などのブログ&#34;&gt;その他、感想などのブログ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://arika.hateblo.jp/entry/2015/11/09/204652&#34;&gt;elasticsearch勉強会&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;まとめ宣伝&#34;&gt;まとめ＋宣伝&lt;/h2&gt;
&lt;p&gt;今回も@yusukeさんのテキスト翻訳に助けていただきました。ほんとありがとうございます。
今年の勉強会はこれがラストになります。
来月は、トレーニングと&lt;a href=&#34;https://www.elastic.co/elasticon/tour/2015/tokyo&#34;&gt;Elastic{ON} Tour Tokyo&lt;/a&gt;があるので忙しくなりそうですが、
参加予定の方は楽しみにしていてください！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Operations : &lt;a href=&#34;http://training.elastic.co/class/Operations/Japan/Dec&#34;&gt;http://training.elastic.co/class/Operations/Japan/Dec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Developer : &lt;a href=&#34;http://training.elastic.co/class/Developer/Japan/Dec&#34;&gt;http://training.elastic.co/class/Developer/Japan/Dec&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Senseの歴史 - Sense 2.0.0-beta1の紹介(日本語訳)</title>
      <link>https://blog.johtani.info/blog/2015/10/30/sense-2-0-0-beta1-ja/</link>
      <pubDate>Fri, 30 Oct 2015 17:55:06 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/10/30/sense-2-0-0-beta1-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：The Story of Sense - Announcing Sense 2.0.0-beta1 誕生 よくある良いプロジェクト同様、Senseもビールを飲みながら考</description>
      <content:encoded>&lt;p&gt;&lt;strong&gt;※この記事は次のブログを翻訳したものになります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;https://www.elastic.co/blog/sense-2-0-0-beta1&#34;&gt;The Story of Sense - Announcing Sense 2.0.0-beta1&lt;/a&gt;&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;誕生&#34;&gt;誕生&lt;/h2&gt;
&lt;p&gt;よくある良いプロジェクト同様、Senseもビールを飲みながら考えつきました。
&lt;a href=&#34;https://en.wikipedia.org/wiki/Amstel&#34;&gt;Amstel&lt;/a&gt;での手漕ぎボートのセッションの後で。
友人の&lt;a href=&#34;https://twitter.com/jkaizer&#34;&gt;Jasper&lt;/a&gt;と私はJasperの&lt;a href=&#34;http://q42.nl/&#34;&gt;会社&lt;/a&gt;で毎年行われる
&lt;a href=&#34;http://w00t.camp/&#34;&gt;ハッカソン&lt;/a&gt;について話をしていました。
このハッカソンはどのようなアイデアでどんなチームで行うかを聞き取りされる、厳密なハッカソンです。
その時、私とJasperはChromeブラウザに別のヒストリーを表示するという作業をやると&lt;a href=&#34;https://twitter.com/anneveling&#34;&gt;Anne Veling&lt;/a&gt;に話をしていました。&lt;/p&gt;
&lt;p&gt;Jasperと私はElasticsearchのユーザでしたが、リッチなREST APIにリクエストを送信するための
便利なツールがないと知っていました。
恥ずべきことに、cURLコマンドを利用するターミナルがその時の一番良いツールでした。
皆さん、ターミナルでボディつきのリクエストをサブミットするのがどのくらい不便かというのをわかるために、
5秒ほどターミナルで実行してみてください。
タイプミスのような単純なことでさえ、すべてのコマンドを再タイプしなければならなかったり、
複数行サポートのターミナルと戦ったりです。
ウェブベースのJSONエディタを見つけ出して、それをベースにすることが必要でした。&lt;/p&gt;
&lt;h2 id=&#34;終わりなきウィークエンド&#34;&gt;終わりなきウィークエンド&lt;/h2&gt;
&lt;p&gt;リサーチをして、Anneに電話しました。
私は彼に、History Pageのプロジェクトにもコミットするが、
Elasticsearchユーザなので、便利なコンソールを開発する時間も欲しいという話をしました。
私たちは、&lt;a href=&#34;https://ace.c9.io/&#34;&gt;Ace&lt;/a&gt;オンラインエディタを利用して、
自動でAPIを認識するナレッジベースを構築し、
コンテキストに沿ったサジェストを大なうようにしました。
Anneはすぐに、それが素晴らしいと同意してくれました。
しかし、彼は、ハッカソンの基本的なルール（週末にそれが終わる必要がある）に違反しているので、
そのアイデアを却下するしかありませんでした。
確かに、私たちが提案していたものは行えませんでした。
最後に、私たちは、ChromeのHistory Pageの素晴らしい置き換えについて実装しました。&lt;/p&gt;
&lt;p&gt;それでも、私はチャレンジし、それが終わるであろうことを終わるであろうことを証明しなければなりませんでした。
次の週末（といくつかの終業後 :)）に、私はそれを作りました。
Senseの誕生です。
それは、まだバグだらけでしたが、動きました。
これを見せるとみんな興奮しました。&lt;/p&gt;
&lt;h2 id=&#34;初期&#34;&gt;初期&lt;/h2&gt;
&lt;p&gt;Knowledge Baseの拡張とバグのフィックスで数日を過ごしました。
Senseは広まり始め、ずっと古いバグのあるバージョンを利用しないといけないのかと私は恐れました。
SenseをChromeのExtentionとしてリリースすることを決め、リリースすると自動的に更新されるようにしました。
History Panelのような機能を一つづつ追加するようにしました。&lt;/p&gt;
&lt;p&gt;Elasticにジョインしてから、会社の人たちがSenseを使用しているということを聞き、とても幸せでした。
特に、&lt;a href=&#34;https://twitter.com/clintongormley&#34;&gt;Clint&lt;/a&gt;と話をしたときのことを覚えています。
彼は、&amp;ldquo;You know what Sense should do? It should use this format and allow you to have multiple requests in the editor&amp;rdquo;
「Senseになにをすべきかわかる？フォーマットを使うべきだし、エディタで複数のリクエストを持つようにするべきだ」
と言いました。
もちろん、その他のチャレンジも行いました。これは、簡単なものではなく、Aceの詳細を知る必要がありました。
それは新しいAceモード（Aceによって利用されているハイライティングロジック）です。
これは、Senseのサジェストエンジンに密に統合されました。&lt;/p&gt;
&lt;p&gt;次のものが古いSenseのスクリーンショットです。&lt;/p&gt;
&lt;p&gt;画像あり。Figure 1. Sense 0.7
&lt;a href=&#34;https://www.elastic.co/blog/sense-2-0-0-beta1&#34;&gt;※画像に関しては原文をご覧ください。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;APIのURLを入力すると、JSONのボディが入力されます。
うまく切り離すことができ、AceのスタンダードJSONモードを使っていました。
しかし、ここで、次のようなフォーマットをどうやってサポートするか考える必要がありました。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET _cluster/health
POST index/_settings
{
  &amp;quot;index&amp;quot;: { &amp;quot;number_of_replicas&amp;quot;: 3 }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これは、Aceが3つの異なるものをどうやってパースするかを知る必要があるということです。
HTTPメソッドとURLとJSONボディです。
また、困ったことに、前に説明した前に説明した通り、明らかに別々にはならないものでした。
JSONボディが完全であることを知る唯一の方法はかっこを数えることです。
それは、いくつかの作業とAceのカスタマイズが必要でしたが、それらを切り離すことができました。
そして、Senseのシンタックスが生まれたのです（Thanks Clint!）&lt;/p&gt;
&lt;h2 id=&#34;marvel時代&#34;&gt;Marvel時代&lt;/h2&gt;
&lt;p&gt;就業時間中、私の優先すべき仕事は&lt;a href=&#34;https://www.elastic.co/products/marvel&#34;&gt;Marvel&lt;/a&gt;の開発になりました。
これは、Elasticsearchのための管理と監視のためのソリューションです。
（side note: Marvelは生まれ変わっています。（&amp;quot;&lt;a href=&#34;https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released&#34;&gt;Shield, Watcher, and Marvel 2.0.0 GA Released&lt;/a&gt;&amp;quot;））
Marvelは開発環境ではフリーなので、MarvelにSenseを組み込むことにしました。
これにより、Senseの開発が日中も行えるようになり、多くのユーザに利用され始めました。
また、Senseは実際に真の&lt;a href=&#34;https://twitter.com/spenceralger&#34;&gt;JavaScript開発者&lt;/a&gt;によって開発されました。
彼は、コードをクリーンにし、ブラウザにおける最新の技術を私に教えてくれました。&lt;/p&gt;
&lt;p&gt;この期間のSenseは数回書き換えられています。
最も顕著なものは、個別のURLとJSONのサジェストエンジンを書き換えて、
1つのサジェストエンジンにしこれらのコンテキストで動作するようにし、さらに3つ目のコンテキスト（URLパラメータ）を追加したことです。&lt;/p&gt;
&lt;p&gt;新しいエンジンはまた、複数のサジェストコンテキストをメンテナンスするのが簡単になりました。
例えば、&lt;code&gt;_search API&lt;/code&gt;のソートパラメータを考えます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET _search
{
  &amp;quot;sort&amp;quot;: [
     &amp;quot;timestamp&amp;quot;: &amp;quot;desc&amp;quot;,
     &amp;quot;price&amp;quot;: {
        &amp;quot;order&amp;quot;: &amp;quot;desc&amp;quot;.
        &amp;quot;missing&amp;quot;: &amp;quot;last&amp;quot;
     },
     &amp;quot;nested_filter&amp;quot;: { &amp;quot;term&amp;quot;: { ... }},
     &amp;quot;_score&amp;quot;
  ]
}

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ユーザがどこにいるかによって、Senseは単純な値（&lt;code&gt;_score&lt;/code&gt;のような）か、
複雑な構造（&lt;code&gt;order&lt;/code&gt;と&lt;code&gt;missing&lt;/code&gt;のような）やフィルタ（&lt;code&gt;nested_filter&lt;/code&gt;のような）も
サジェストする必要があります。
これらのサジェストのパスが一度に処理され、無関係なものは除外されます。&lt;/p&gt;
&lt;h2 id=&#34;sense-20の紹介&#34;&gt;Sense 2.0の紹介！&lt;/h2&gt;
&lt;p&gt;Marvel 1.xはKibana 3.0をベースにしていました。
これは、データの探索やダッシュボードツールとして素晴らしいものでした。
しかし、Kibanaチームはさらに素晴らしいものを出しました。
Kibana 4.xはElasticsearchをバックエンドとするUIアプリを簡単に構築することができる
プラットフォームとして設計されています。
実際に、&lt;a href=&#34;https://www.elastic.co/guide/en/marvel/current/index.html&#34;&gt;Marvel 2.0&lt;/a&gt;はKibanaの
プラットフォームで利用できる最初のアプリです。&lt;/p&gt;
&lt;p&gt;Senseの話に戻します。
ElasticsearchのAPIとやりとりする一般的なコンソールです。
これをKibanaのアプリぴったりだと気付きました。
ということで、&lt;a href=&#34;https://github.com/elastic/sense/&#34;&gt;Sense 2.0&lt;/a&gt;をKibanaアプリとしてオープンソースで公開しました。
開発及び本番環境で利用してください。&lt;/p&gt;
&lt;p&gt;Figure 2. Screenshot Sense 2.0
&lt;a href=&#34;https://www.elastic.co/blog/sense-2-0-0-beta1&#34;&gt;※画像に関しては原文をご覧ください。&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;リリースのハイライト&#34;&gt;リリースのハイライト&lt;/h2&gt;
&lt;p&gt;Sense 2.0の新しい機能をここで簡単に紹介します。
（すべての変更点については&lt;a href=&#34;https://www.elastic.co/guide/en/sense/current/release_notes.html#_2_0_0_beta1&#34;&gt;こちら&lt;/a&gt;をご覧ください。）&lt;/p&gt;
&lt;h4 id=&#34;elasticsearch-20&#34;&gt;Elasticsearch 2.0&lt;/h4&gt;
&lt;p&gt;SenseのナレッジベースをElasticsearch 2.0サポートに更新しました。
新しいPipeline aggregationにも対応しています。&lt;/p&gt;
&lt;h4 id=&#34;複数リクエストの実行&#34;&gt;複数リクエストの実行&lt;/h4&gt;
&lt;p&gt;テストやいくつかの一連のコマンドを繰り返し実行したい時があるでしょう。
その時に、それら全てをSenseに記述し、
実行したいリクエストを選択状態にしてElasticsearchにリクエストできます。&lt;/p&gt;
&lt;p&gt;Figure 3. Submit multiple requests
&lt;a href=&#34;https://www.elastic.co/blog/sense-2-0-0-beta1&#34;&gt;※画像に関しては原文をご覧ください。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Senseは、Elasticsearchにリクエストを一つずつ送信し、それぞれの出力結果を右のパネルに表示します。
これは、問題のデバッグや複数のシナリオでのクエリの組み合わせの実行に非常に便利です。&lt;/p&gt;
&lt;h4 id=&#34;複数リクエストのコピーペースト&#34;&gt;複数リクエストのコピーペースト&lt;/h4&gt;
&lt;p&gt;複数リクストを選択し、フォーマットしたり、cURLのコマンドとしてコピーすることも可能です。&lt;/p&gt;
&lt;p&gt;Figure 4. Copy multiple requests as cURL
&lt;a href=&#34;https://www.elastic.co/blog/sense-2-0-0-beta1&#34;&gt;※画像に関しては原文をご覧ください。&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Delete all data in the `website` index
curl -XDELETE &amp;quot;http://localhost:9200/website&amp;quot;
# Create a document with ID 123
curl -XPUT &amp;quot;http://localhost:9200/website/blog/123&amp;quot; -d&#39;
{
  &amp;quot;title&amp;quot;: &amp;quot;My first blog entry&amp;quot;,
  &amp;quot;text&amp;quot;:  &amp;quot;Just trying this out...&amp;quot;,
  &amp;quot;date&amp;quot;:  &amp;quot;2014/01/01&amp;quot;
}&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;もちろん、複数のcURLコマンドをコピーしてSenseにペースとすると、Senseはそれらをパースしてくれます。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;Sense 2.0.0のベータリリースです。
実際に多くの作業が終わった認識です。すぐにGAが出るでしょう。&lt;/p&gt;
&lt;p&gt;Sense 2.0を知り、試していただくために、新しい&lt;a href=&#34;https://www.elastic.co/guide/en/sense/current/index.html&#34;&gt;ドキュメント&lt;/a&gt;を参考にしてください。
バグやリクエストがある場合は、&lt;a href=&#34;https://discuss.elastic.co/c/ecosystem&#34;&gt;フォーラム&lt;/a&gt;や&lt;a href=&#34;https://github.com/elastic/sense/issues&#34;&gt;GitHubのIssue&lt;/a&gt;に登録をお願いします。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Shield、Watcher、Marvel 2.0.0 GAリリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/10/30/shield-watcher-and-marvel-2-0-ga-released-ja/</link>
      <pubDate>Fri, 30 Oct 2015 16:21:31 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/10/30/shield-watcher-and-marvel-2-0-ga-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Shield, Watcher, and Marvel 2.0.0 GA Released 本日（10/28）Shield、WatcherおよびMarv</description>
      <content:encoded>&lt;p&gt;&lt;strong&gt;※この記事は次のブログを翻訳したものになります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released&#34;&gt;Shield, Watcher, and Marvel 2.0.0 GA Released&lt;/a&gt;&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;本日（10/28）Shield、WatcherおよびMarvel 2.0をリリースしました。
これが、&lt;a href=&#34;https://www.elastic.co/blog/elasticsearch-2-0-0-released&#34;&gt;Elasticsearch 2.0&lt;/a&gt;に対応したこれらのプラグインの最初のリリースです。&lt;/p&gt;
&lt;p&gt;Elasticsearch 2.0対応のほかに、ShieldとWatcher 2.0は、
セキュリティとアラートを拡張するいくつかの新しい素敵な機能も備えています。&lt;/p&gt;
&lt;h2 id=&#34;shield&#34;&gt;Shield&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;拡張可能なレルム - Sheild 1.xはユーザ認証のコア的なものを定義するのにフォーカスし
3つの認証メカニズム（&lt;em&gt;esusers&lt;/em&gt;、LDAP/AD、PKI）を提供しました。
これらを提供することで、多くのユーザおよびユースケースをカバー出来ましたが、
追加の認証メカニズムを統合する必要があることもわかっていました。
ということで、Shieldのレルムベースの認証システムをユーザが利用、拡張できるようにオープンにし、
ユーザ認証を扱うためのレルム実装をプラグインとして拡張できるようにしました。
特定もしくはプロプライエタリな認証メカニズムが必要なユーザもShieldの強力な
セキュリティ機能（ロールベースの認証、セキュアな通信など）をフルに活用できるようになりました。
カスタムレルムの詳細については、&lt;a href=&#34;https://www.elastic.co/guide/en/shield/current/custom-realms.html&#34;&gt;こちら&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;フィールドとドキュメントのACL - Shield 2.0はフィールドとドキュメントレベルのアクセス制御機能を提供します。
これは、ロールごとにアクセス可能なフィールドやドキュメントを定義できます。
この新しい機能は、設定の変更するよりも便利です。
このアクセス制御はElasticsearchのLuceneインデックスという最も低レベルで実装されています。
その結果として、このメンテナンスがより簡単であるだけでなく、より良くなっています。
詳細については&lt;a href=&#34;https://www.elastic.co/guide/en/shield/current/setting-up-field-and-document-level-security.html&#34;&gt;こちら&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ユーザなりすまし - Shield 2.0で、ユーザなりすましの機能が実装されました。
これは、ユーザ（適切なパーミッションを持った）が、他のユーザになることができ、
それらのユーザのためにリクエストを実行できます。
これは、Elasticsearch上に構築されたアプリケーションがすでにユーザ認証を行いますが、
認可はElasticsearchサイドで行う必要があるような場合に有用です。
このシナリオで、アプリケーションの&amp;quot;main&amp;quot;ユーザを設定でき、正しくなりすましを割り当て、
ElasticsearchにアプリケーションユーザとしてリクエストをElasticsearchに実行させることができます。
詳細については、&lt;a href=&#34;https://www.elastic.co/guide/en/shield/current/submitting-requests-for-other-users.html&#34;&gt;こちら&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;watcher&#34;&gt;Watcher&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SlackとHipChatインテグレーション - SlackとHipChatはチーム/グループコラボレーションツールです。
これらは、急速に主流になり、組織の主な内部コミュニケーションハブとなっています。
Watcher 2.0はチャンネル/ルームやユーザにこれらのコミュニケーションチャネル経由で、Watchの通知を行うことができるアクションを
実装しました。
&lt;a href=&#34;https://www.elastic.co/guide/en/watcher/current/configuring-slack.html&#34;&gt;slack&lt;/a&gt;や&lt;a href=&#34;https://www.elastic.co/guide/en/watcher/current/configuring-hipchat.html&#34;&gt;hipchat&lt;/a&gt;アクションについてはドキュメントをご覧ください。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Array Compare Condition - 新しいconditionはタイムシリーズのデータのスパイクを検知するのを簡単にします。
&lt;a href=&#34;https://www.elastic.co/guide/en/watcher/current/condition.html#condition-compare&#34;&gt;compare&lt;/a&gt; conditionは1.xで導入されましたが、このコンディションはElasticsearchのダイナミックスクリプト機能を有効にする必要がアンク使えます。
詳細については&lt;a href=&#34;https://www.elastic.co/guide/en/watcher/current/condition.html#condition-array-compare&#34;&gt;array_compare&lt;/a&gt; conditionをご覧ください。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Watchの有効・無効化 - ユーザからの多かったリクエストとして、Watchの無効化がありました。
1.xには、登録済みのWatchを無効にする機能がありませんでした。
これは、Watchを消すか、Watchのトリガーを変更することで回避していました。
これは、全体としてはWatchを管理するのを難しくする回避方法でしかありません。
2.0では、APIを呼び出すだけで、Watchの変更をすることなく、簡単にWatchの有効化・無効化が可能になりました。
これは1.0からあるべき基本的な機能でしたが、ついにこの問題を解決しました。
詳細は&lt;a href=&#34;https://www.elastic.co/guide/en/watcher/current/watch-active-state.html#watch-active-state&#34;&gt;こちら&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;marvel&#34;&gt;Marvel&lt;/h2&gt;
&lt;p&gt;Marvel 2.0を紹介するのに興奮しています。
Kibana 4をベースとした、再設計されたUIを持っています。
Marvel 1.xで学んだ多くのことを導入し、より使いやすく監視しやすいUIになっています。
ShieldとWatcherと同様に、最初のMarvelのリリースは将来的な成長の基盤となり
Elasticsearch2.0を効率的に管理するための主要なメトリックにフォーカスしています。&lt;/p&gt;
&lt;p&gt;画像あり。
&lt;a href=&#34;https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released&#34;&gt;※画像に関しては原文をご覧ください。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;再設計により、インタフェースを6ページに減らしています。&lt;/p&gt;
&lt;h3 id=&#34;cluster-list&#34;&gt;Cluster list&lt;/h3&gt;
&lt;p&gt;画像あり。
&lt;a href=&#34;https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released&#34;&gt;※画像に関しては原文をご覧ください。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ユーザやカスタマーの多くは複数のクラスタを利用しています。
新しいMarvelはそれらを集中的にモニタリングする一つのクラスタからそれらを簡単に監視できます。
各クラスタのデータ送信先をこのモニタリングクラスタにするだけです。&lt;/p&gt;
&lt;h3 id=&#34;cluster-overview&#34;&gt;Cluster Overview&lt;/h3&gt;
&lt;p&gt;画像あり。
&lt;a href=&#34;https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released&#34;&gt;※画像に関しては原文をご覧ください。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;クラスタオーバービューはある一つのクラスタの主要な性能メトリックを見ることができ、
素早くスパイクを発見できます。
このページはまた、アクティブなシャードのリカバリやリロケーションも見ることができます。&lt;/p&gt;
&lt;h3 id=&#34;indices-list&#34;&gt;Indices List&lt;/h3&gt;
&lt;p&gt;画像あり。
&lt;a href=&#34;https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released&#34;&gt;※画像に関しては原文をご覧ください。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;インデックスのリストにはクラスタにあるすべてのインデックスとその属性が表示されます。
テーブルはライブでアップデートされ、フィルタリングやソートも可能です。
一番大きなインデックスは？といったことも調べられます。&lt;/p&gt;
&lt;h3 id=&#34;index-detail&#34;&gt;Index Detail&lt;/h3&gt;
&lt;p&gt;画像あり。
&lt;a href=&#34;https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released&#34;&gt;※画像に関しては原文をご覧ください。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;インデックス詳細ページはインデックスの主な性能メトリックを見ることができ、シャードの配置についても表示します。&lt;/p&gt;
&lt;h3 id=&#34;nodes-list&#34;&gt;Nodes List&lt;/h3&gt;
&lt;p&gt;画像あり。
&lt;a href=&#34;https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released&#34;&gt;※画像に関しては原文をご覧ください。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ノードリストはクラスタにあるノードとその主な性能メトリックを見ることができます。
テーブルはライブでアップデートされ、フィルタリングも可能です。
高いCPU利用率やディスクの残り容量なども簡単にわかるようになっています。&lt;/p&gt;
&lt;h3 id=&#34;node-detail&#34;&gt;Node Detail&lt;/h3&gt;
&lt;p&gt;画像あり。
&lt;a href=&#34;https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released&#34;&gt;※画像に関しては原文をご覧ください。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ノード詳細ページは個別のノードに関する主な性能メトリックを見ることができ、ノードにあるシャードのリストも見ることができます。&lt;/p&gt;
&lt;p&gt;新しいMarvelはKibana 4の上に構築されたので、管理方法が変わっています。
Marvelのインストールは2つのステップがあります。
marvel-agentとmarvel user interfaceです。&lt;/p&gt;
&lt;h2 id=&#34;marvel-agent&#34;&gt;Marvel Agent&lt;/h2&gt;
&lt;p&gt;marvel-agentはElasticsearchクラスタにプラグインとしてインストールします。
主なパフォーマンス情報を取得し、ローカルもしくは分離されたモニタリングクラスタにデータを保存・送信します。&lt;/p&gt;
&lt;h2 id=&#34;marvel-user-interface&#34;&gt;Marvel User Interface&lt;/h2&gt;
&lt;p&gt;Marvel UIはKibanaのプラグインとしてインストールします。
これは、Kibana 4.2の新しいプラグインインフラを利用し、
Marvel Appとして、Kibanaのインタフェースとは個別に提供されます。
Kibanaのアプリの切り替えは次の画像の通りです。&lt;/p&gt;
&lt;p&gt;画像あり。
&lt;a href=&#34;https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released&#34;&gt;※画像に関しては原文をご覧ください。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.0リリースは私たちのプロダクトの大きな一歩です。またユーザの意見を常にお待ちしています。
ぜひ、Webフォーラム（https://discuss.elastic.co）やメール（info@elastic.co）でご意見を。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 2.0.0リリース(日本語訳)</title>
      <link>https://blog.johtani.info/blog/2015/10/29/elasticsearch-2-0-0-released-ja/</link>
      <pubDate>Thu, 29 Oct 2015 16:20:43 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/10/29/elasticsearch-2-0-0-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Elasticsearch 2.0.0 GA released Elasticsearch 1.0.0のリリース以降、 477のコミッター2,79</description>
      <content:encoded>&lt;p&gt;&lt;strong&gt;※この記事は次のブログを翻訳したものになります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;https://www.elastic.co/blog/elasticsearch-2-0-0-released&#34;&gt;Elasticsearch 2.0.0 GA released&lt;/a&gt;&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;Elasticsearch 1.0.0のリリース以降、
477のコミッター2,799のpull requestがあった、
**Elasticsearch 2.0.0 GA（Lucene 5.2.1ベース）**をリリースしました。&lt;/p&gt;
&lt;p&gt;それだけでなく、&lt;a href=&#34;#shield-watcher&#34;&gt;Shield（セキュリティプラグイン）とWatcher（アラーティングプラグイン）&lt;/a&gt;、
新しくなった&lt;a href=&#34;#marvel&#34;&gt;Marvel（モニタリングプラグイン）&lt;/a&gt;（プロダクション環境でフリー！）、
また、新しくオープンソースとなった&lt;a href=&#34;#sense&#34;&gt;Sense editor&lt;/a&gt;の2.0.0もリリースしました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0&#34;&gt;Elasticsearch 2.0.0&lt;/a&gt;のダウンロードはこちらから。
また、&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/2.0/breaking-changes-2.0.html&#34;&gt;2.0.0での重要な変更点についてはこちら&lt;/a&gt;をご覧ください。
全ての変更点については、次をご覧ください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0&#34;&gt;Changes list for Elasticsearch 2.0.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0-rc1&#34;&gt;Changes list for Elasticsearch 2.0.0-rc1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0-beta2&#34;&gt;Changes list for Elasticsearch 2.0.0-beta2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0-beta1&#34;&gt;Changes list for Elasticsearch 2.0.0-beta1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;商用プラグインについてはこちらです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/shield/2.0.0/release-notes.html#_2_0_0&#34;&gt;Shield 2.0.0 change logs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/watcher/2.0.0/release-notes.html#_2_0_0&#34;&gt;Watcher 2.0.0 change logs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;elasticsearchの新機能&#34;&gt;Elasticsearchの新機能&lt;/h2&gt;
&lt;p&gt;Elasticsearch 2.0.0には素晴らしい新機能があります。&lt;/p&gt;
&lt;h4 id=&#34;pipeline-aggregations&#34;&gt;Pipeline Aggregations&lt;/h4&gt;
&lt;p&gt;Aggregationsで導関数や移動平均のような他のAggregationの結果に対する計算が可能となります。
この機能はクライアントサイドで実装しなければなりませんでしたが、
Elasticsearchに計算させることで、より強力な解析のクエリを簡単に組み立て、クライアントのコードを簡略化できます。
これは、予測解析や予測解析や例外検知といった可能性をもたらします。
Pipeline Aggregationについては次をご覧ください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/blog/out-of-this-world-aggregations&#34;&gt;Out of this world aggregations.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/blog/staying-in-control-with-moving-averages-part-1&#34;&gt;Staying in Control with Moving Averages - Part 1.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/blog/staying-in-control-with-moving-averages-part-2&#34;&gt;Staying in Control with Moving Averages - Part 2.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;queryfilter-merging&#34;&gt;Query/Filter merging&lt;/h4&gt;
&lt;p&gt;フィルタはもうありません。
全てのフィルタ条件はクエリとなりました。
クエリコンテキストで使用した場合、関連度のスコアに影響し、フィルタコンテキストで使用した場合、
これまでのフィルタのように、ヒットしなかったドキュメントを除外するだけとなります。
この変更はクエリの実行時に自動的に最も効率的な順序で実行するように最適化されることを意味します。
例えば、遅いクエリ（フレーズやgeo）の最初の実行は速い近似フェーズで実行され、
それから、遅い正確なフェーズで結果を修正します。
フィルタコンテキストでは、直近でよく使われた条件が自動的にキャッシュされます。
詳細については、&amp;quot;&lt;a href=&#34;https://www.elastic.co/blog/better-query-execution-coming-elasticsearch-2-0&#34;&gt;Better query execution coming to Elasticsearch 2.0&lt;/a&gt;&amp;ldquo;をご覧ください。&lt;/p&gt;
&lt;h4 id=&#34;設定可能な圧縮率&#34;&gt;設定可能な圧縮率&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;_source&lt;/code&gt;のようなStored fieldsは高速なLZ4（デフォルト）で圧縮するか、インデックスサイズを小さくできるDEFLATE
で圧縮できます。
これは、特にロギングのケースで便利です。
古いインデックスをオプティマイズする前に&lt;code&gt;best_compression&lt;/code&gt;に変更することができます。
詳細については&amp;rdquo;&lt;a href=&#34;https://www.elastic.co/blog/store-compression-in-lucene-and-elasticsearch&#34;&gt;Store compression in Lucene and Elasticsearch&lt;/a&gt;&amp;ldquo;をご覧ください。&lt;/p&gt;
&lt;h4 id=&#34;堅牢に&#34;&gt;堅牢に&lt;/h4&gt;
&lt;p&gt;新しいElasticsearchはJava Security Managerの元で実行されます。
これは、セキュリティの観点で大きな前進です。
Seciruty ManagerはElastcsearchにより制限をかけ、ハッカーによりシステムに対して何でもできるようなものを制限します。
Elasticsearchはまた、インデキシングの観点でも堅牢になっています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ドキュメントはインデキシングリクエストに答える前に、耐久性のためにディスクに&lt;code&gt;fsync&lt;/code&gt;されます。&lt;/li&gt;
&lt;li&gt;すべてのファイルはチェックサムにより、早期に障害を検知します。&lt;/li&gt;
&lt;li&gt;すべてのファイルはどんなファイルへの書き込みもアトミックです&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最後に、システム管理者から要請の多かった変更として、
設定されて居ないノードがパブリックなネットワークから参加しないようになりました。
Elasticsearchは&lt;a href=&#34;https://manage.contentstack.io/blog/elasticsearch-unplugged&#34;&gt;デフォルトではローカルホストのみにバインド&lt;/a&gt;します。マルチキャストは無くなりました。（プラグインとして残っています。）&lt;/p&gt;
&lt;h4 id=&#34;パフォーマンスと信頼性&#34;&gt;パフォーマンスと信頼性&lt;/h4&gt;
&lt;p&gt;上記以外にも細かな修正がElasticsearchとLuceneにはあります。
より安定し、信頼性をあげ、簡単に設定できるようにするものです。例えば、次のようなものです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ヒープの使用率の低減（doc valuesがデフォルト、マージ時のメモリ使用率の削減、
roaring bitsetsによるフィルタキャッシュ）&lt;/li&gt;
&lt;li&gt;構造化され読みやすくなった例外&lt;/li&gt;
&lt;li&gt;設定の代わりに、フィードバックループを使用した自動調整&lt;/li&gt;
&lt;li&gt;安全で明確で信頼性のあるタイプマッピングの大きな修正&lt;/li&gt;
&lt;li&gt;クラスタ状態の差分変更による伝搬の高速化および、大きなクラスタでのより安定的に&lt;/li&gt;
&lt;li&gt;normsの圧縮の改善。これまではヒープスペースを大きく利用していた。&lt;/li&gt;
&lt;li&gt;マージの自動的な調整（不可解な設定の微調整が必要ない）&lt;/li&gt;
&lt;li&gt;より詳細なLuceneのメモリリポート&lt;/li&gt;
&lt;li&gt;最適化されたクエリ実行を活用するためにParent/childを書き換え&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;コアプラグイン&#34;&gt;コアプラグイン&lt;/h4&gt;
&lt;p&gt;公式にサポートされたコアプラグインはElasticsearchと同じバージョン番号で同じタイミングでリリースされます。
インストールするプラグインとElasticsearchの複雑なバージョンの対応表に悩まされる必要はもうありません。
コアプラグインのインストールは次のように簡略化されています。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bin/plugin install analysis-icu
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;a-nameshield-watchershieldとwatcherの新機能a&#34;&gt;&lt;a name=&#34;shield-watcher&#34;&gt;ShieldとWatcherの新機能&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;商用プラグインも新しい機能をリリースしました。&lt;/p&gt;
&lt;h4 id=&#34;shield&#34;&gt;Shield&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;フィールドおよびドキュメントレベルのアクセス制御&lt;/li&gt;
&lt;li&gt;ユーザのなりすまし&lt;/li&gt;
&lt;li&gt;カスタム拡張可能な認証レルム&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;watcher&#34;&gt;Watcher&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;個別のWatchを有効/無効に&lt;/li&gt;
&lt;li&gt;SlackやHipChatへの通知&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの詳細については“&lt;a href=&#34;https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released&#34;&gt;Shield, Watcher, and Marvel 2.0.0 GA Released&lt;/a&gt;”をご覧ください。&lt;/p&gt;
&lt;p&gt;コアプラグイン同様、商用プラグインもElasticsearchのバージョンと同じものが同時にリリースされます。
インストールは次の通りです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bin/plugin install license
bin/plugin install shield
bin/plugin install watcher
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;a-namemarvelmarvel-200はプロダクションでの利用もフリーにa&#34;&gt;&lt;a name=&#34;marvel&#34;&gt;Marvel 2.0.0はプロダクションでの利用もフリーに&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Marvelモニタリングプラグインはカスタマに非常に価値のあるもので、
ユーザの発展とともに問題を診断したり見つけたりするのに役に立ってきました。
私たちは、何を改善でき、Mαrvelを一から書き直すことで、いろいろとわかったことがあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Marvel UIを新しい&lt;a href=&#34;https://www.elastic.co/blog/kibana-4-2-0&#34;&gt;Kibanaプラットフォーム&lt;/a&gt;上に構築&lt;/li&gt;
&lt;li&gt;ダッシュボードにはより簡単に問題を発見するために、最も重要なメトリックを可視化&lt;/li&gt;
&lt;li&gt;1つのインストールで、複数のクラスタのモニタリングをサポート（商用サポート対象）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一番良い点はMarvelがすべてのElasticsearchユーザに対してプロダクション環境でフリーになったことです！
ライセンスが必要ですが、課金の必要はありません。
もし、マルチクラスタモニタリングサポートが必要な場合、それは商用サポート対象となります。&lt;/p&gt;
&lt;p&gt;詳細に関しては“&lt;a href=&#34;https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released&#34;&gt;Shield, Watcher, and Marvel 2.0.0 GA Released&lt;/a&gt;”をご覧ください。&lt;/p&gt;
&lt;h2 id=&#34;a-namesensesense-editorがオープンソースにa&#34;&gt;&lt;a name=&#34;sense&#34;&gt;Sense editorがオープンソースに&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sense（ブラウザベースのElasticsearchリクエストとDSL向けのエディタ）を
&lt;a href=&#34;https://www.elastic.co/blog/kibana-4-2-0&#34;&gt;Kibanaプラットフォーム&lt;/a&gt;のアプリとして、オープンソースにしました。
また、このリリースで新しい機能が追加されています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;複数のcURLリクエストをペースとすると、Sense表記に変更&lt;/li&gt;
&lt;li&gt;複数のSenseリクエストをcURL表記にしてコピー&lt;/li&gt;
&lt;li&gt;複数のリクエストを一度に実行可能&lt;/li&gt;
&lt;li&gt;Elasticsearch 2.0サポートとなった自動補完機能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SenseはKibanaのアプリとして次のようにインストールします。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./bin/kibana plugin --install elastic/sense
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Senseの詳細については、&amp;quot;&lt;a href=&#34;https://www.elastic.co/blog/sense-2-0-0-beta1&#34;&gt;The Story of Sense - Announcing Sense 2.0.0-beta1&lt;/a&gt;&amp;ldquo;をご覧ください。&lt;/p&gt;
&lt;h2 id=&#34;elasticsearch-migration-plugin&#34;&gt;Elasticsearch Migration Plugin&lt;/h2&gt;
&lt;p&gt;Elasticsearch Migration PluginはElasticsearch 1.xから2.0にアップグレードする時の良い出発点となります。
1.xのElasticsearchクラスタにサイトプラグインとしてインストールすると、
アップグレードする前に解決すべき問題があるかどうかを検知してくれます。
（例えば、Lucene 3のような古いインデックスや、2.0.0にした場合に動作しない問題のある
マッピング（&lt;a href=&#34;https://www.elastic.co/blog/great-mapping-refactoring&#34;&gt;The Great Mapping Refactoring&lt;/a&gt;）のような問題）&lt;/p&gt;
&lt;p&gt;プラグインに関して&lt;a href=&#34;http://github.com/elastic/elasticsearch-migration&#34;&gt;Elasticsearch Migration repository&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;ぜひ、&lt;a href=&#34;https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0&#34;&gt;Elasticsearch 2.0.0&lt;/a&gt;をダウンロードして、試してみてください。
そして、感想をTwitter(&lt;a href=&#34;https://twitter.com/elastic&#34;&gt;@elastic&lt;/a&gt;)や&lt;a href=&#34;https://discuss.elastic.co/c/elasticsearch&#34;&gt;Webフォーラム&lt;/a&gt;などで教えて下さい。
また、問題がありましたら、&lt;a href=&#34;https://github.com/elastic/elasticsearch/issues&#34;&gt;GitHub issues page&lt;/a&gt;で報告をお願いします。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Release, we have（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/10/29/release-we-have-ja/</link>
      <pubDate>Thu, 29 Oct 2015 14:18:59 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/10/29/release-we-have-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Relase, we have ※画像に関しては原文をご覧ください。 Elasticにとって大きな1日</description>
      <content:encoded>&lt;p&gt;&lt;strong&gt;※この記事は次のブログを翻訳したものになります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;https://www.elastic.co/blog/release-we-have&#34;&gt;Relase, we have&lt;/a&gt;
※画像に関しては原文をご覧ください。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;Elasticにとって大きな1日（社内では「release bonanza」と呼んでいる）です。
多くの主要なプロダクトを新たにリリースしました。
そして、本日、それらを一緒に利用する時にそれらを一緒に利用する時にユーザの体験についてまとめてみました。&lt;/p&gt;
&lt;p&gt;次の通りです。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/blog/elasticsearch-2-0-0-released&#34;&gt;Elasticsearch 2.0&lt;/a&gt;リリース。
大きなマイルストーン、チームによる改善、そして、コミュニティからの素晴らしい貢献。
Pipeline Aggsと呼ばれる新しいタイプのaggregations、
クエリとフィルタのコンセプトを統合することにより簡素化されたクエリDSL、
better compressionオプション、
JavaのSecurity Managerを有効にすることによる強化されたセキュリティ、
FSの挙動に関する強化（fsync、checksum、atmicなリネーム）、
パフォーマンス、マッピングの挙動の一貫性などなどです。
また、我々のチームによる改善も含まれているLucene 5ベースにアップグレードしています。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/blog/kibana-4-2-0&#34;&gt;Kibana 4.2&lt;/a&gt;リリース。
Elasticsearch 2.0対応、ダークテーマ、カスタマイズ可能な地図、多くの改善。
Kibana 4.2の多くに作業については外部プラグインサポートといった、内蔵に関するものでした。
この後の説明に続きます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released&#34;&gt;Marvel 2.0&lt;/a&gt;リリース。
Elasticsearch 2.0対応、合理化されたメトリックス、簡素化されたUI、
多くはKibanaプラグイン（Kibanaプラットフォーム上に構築）としての書き換えです。
このKibana拡張の最初の努力は、Kibanaのプラグインをどうやって書くか、
Kibanaユーザに公式に何をする必要があるかといったものを特定するのに役立ちました。
おっと、忘れるところでした、Marvelを全てのユーザにフリーで使えるようにしました。
マルチクラスタサポートについては有償となります。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/blog/sense-2-0-0-beta1&#34;&gt;Sense 2.0&lt;/a&gt;リリース。
2つ目のKibanaプラグインがこれです。
SenseをKibanaプラグインとして書き換えました。
Elasticsearch 2.0サポート、複数リクエストの実行、
curlへのコピーなどです。
おっと、忘れるところでした。オープンソースとすることにしました！&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released&#34;&gt;Shield + Watcher 2.0&lt;/a&gt;リリース。ElasticsearchのためのセキュリティプラグインであるShieldと、アラート管理のためのプラグインであるWatcherにも
多くの結果が入っています。
最も要求のあった機能である、フィールドお呼びドキュメントレベルでのセキュリティについて、Luceneに落とし込んで実装しました。
また、セキュリティの操作についてプラガブルに実装できるように変更しました。
Watcherは監視の無効化、SlackやHipChatへの通知（bot ops向け）が可能です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/blog/logstash-2-0-0-released&#34;&gt;Logstash 2.0&lt;/a&gt;リリース。
Elasticsearch 2.0のサポート、クリーンな停止、全面的なパフォーマンス改善、&lt;a href=&#34;https://www.elastic.co/products/beats&#34;&gt;Beats&lt;/a&gt;サポート。&lt;/p&gt;
&lt;p&gt;ご覧の通り、すべてのプロダクトに関する大きな結果です。
チーム間およびFoundの開発者との間での密な連携に感謝します。
これらが私たちが公式にElasticsearch / Kibanaをホストしている&lt;a href=&#34;https://www.elastic.co/found&#34;&gt;Found&lt;/a&gt;で
利用可能です。&lt;/p&gt;
&lt;p&gt;ひゅう、息切れしました。
チームがしてきたことは、感動的で、謙虚で、刺激的です！
Elasticが会社として、全てのユーザ、コントリビュータがどのように私たちの大きなミッションに対する結果をもたらしたかという素晴らしい良い例です。
ユーザに愛され、楽しまれ、成功に導き、革新させる製品を是非ご利用ください。ありがとうございます。&lt;/p&gt;
&lt;p&gt;&amp;ldquo;A Lion, in Africa?&amp;rdquo; - まだまだ終わりではありません。この文言で終わりにしますが、すぐに（本当にすぐに）戻ってきます。;)&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 2.0.0-beta2リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/09/18/elasticsearch-2-0-0-beta2-released-ja/</link>
      <pubDate>Fri, 18 Sep 2015 17:31:41 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/09/18/elasticsearch-2-0-0-beta2-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Elasticsearch 2.0.0-beta2 released 本日（9/17）、Lucene 5.2.1ベースのElas</description>
      <content:encoded>&lt;p&gt;&lt;strong&gt;※この記事は次のブログを翻訳したものになります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;https://www.elastic.co/blog/elasticsearch-2-0-0-beta2-released&#34;&gt;Elasticsearch 2.0.0-beta2 released&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本日（9/17）、&lt;strong&gt;Lucene 5.2.1&lt;/strong&gt;ベースの&lt;strong&gt;Elasticsearch 2.0.0-beta2&lt;/strong&gt;をリリースしました。
本リリースが2.0.0のRCの前の最後のベータリリースになります。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意事項&lt;/strong&gt;
本リリースはベータリリースであり、テストを目的としたものとなります。
Elasticsearch 2.0.0-beta2はElasticsearch 2.0.0-beta1と互換がありません。
また、Elasticsearch 2.0.0 GAと互換性があるかどうかの保証はありません。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本番環境には利用しないでください。&lt;/strong&gt;&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0-beta2&#34;&gt;Elasticsearch 2.0.0-beta2のダウンロードおよび、すべての変更についてはリンク&lt;/a&gt;をごらんください。&lt;/p&gt;
&lt;p&gt;2.0.0-beta1をテストし、問題点を報告していただいた皆様、ありがとうございます。
2.0.0-beta1のあとのElasticsearchのコアの部分の修正のほとんどはバグフィックスになりますが、
&lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/12893&#34;&gt;geo_shapeフィールドの&lt;code&gt;points_only&lt;/code&gt;最適化&lt;/a&gt;のようなちょっとした改善も含んでいます。&lt;/p&gt;
&lt;p&gt;また、本リリースでは、商用プラグインの重要な新機能もあります。
こちらについては&lt;a href=&#34;https://www.elastic.co/blog/shield-and-watcher-2.0.0-beta2-released&#34;&gt;Shield and Watcher 2.0.0-beta2 released&lt;/a&gt;をごらんください。
簡単な紹介は次の通りです。&lt;/p&gt;
&lt;h3 id=&#34;shieldの新機能&#34;&gt;Shieldの新機能&lt;/h3&gt;
&lt;h5 id=&#34;ドキュメントおよびフィールドレベルのセキュリティ&#34;&gt;ドキュメントおよびフィールドレベルのセキュリティ&lt;/h5&gt;
&lt;p&gt;Shieldは、クエリを利用したインデックスにあるドキュメントへのアクセスを制御するためのロールを定義できるようになりました。
また、ドキュメントにある特定のフィールドに関するアクセス制限も可能です。
フィルタされたエイリアスのような形ではなく、ドキュメントを検索したり、IDで取得したりする場合にこれらの制限が利用できます。
詳細は&lt;a href=&#34;https://www.elastic.co/guide/en/shield/2.0.0-beta2/setting-up-field-and-document-level-security.html&#34;&gt;Field- and Document-level Security&lt;/a&gt;をごらんください&lt;/p&gt;
&lt;h5 id=&#34;ユーザなりすまし&#34;&gt;ユーザなりすまし&lt;/h5&gt;
&lt;p&gt;特定のユーザーに他のユーザーに扮して、彼らのためにリクエストを実行する能力を与えることが、現在できます。
これは、認証がアプリケーションによって実行される場合に便利です。
そして、それは、ユーザの許可レベルを考慮するようにElasticsearchにリクエストします。
詳細は&lt;a href=&#34;https://www.elastic.co/guide/en/shield/2.0.0-beta2/submitting-requests-for-other-users.html&#34;&gt;Submitting Requests for Other Users&lt;/a&gt;をごらんください。&lt;/p&gt;
&lt;h5 id=&#34;プラガブルな認証レルム&#34;&gt;プラガブルな認証レルム&lt;/h5&gt;
&lt;p&gt;このリリースで、サードパーティの拡張のための認証レルムのインフラを公開しました。
もし、特定の認証要求があり、Shieldがサポートしていない（が、内部の認証管理システムを使いたいような）場合、
これらの要求に見合う新しい認証レルムを利用するプラグインを作成可能です。
詳細は&lt;a href=&#34;https://www.elastic.co/guide/en/shield/2.0.0-beta2/custom-realms.html&#34;&gt;Custom Realms&lt;/a&gt;をごらんください。&lt;/p&gt;
&lt;h3 id=&#34;watcherの新機能&#34;&gt;Watcherの新機能&lt;/h3&gt;
&lt;h5 id=&#34;監視の一時&#34;&gt;監視の一時&lt;/h5&gt;
&lt;p&gt;新しく、&lt;code&gt;active&lt;/code&gt; / &lt;code&gt;inactive&lt;/code&gt; の状態がwatchに追加されました。
これらは、Watchを中断したり、要求に応じて再開させたりできます。
詳しくは、&lt;a href=&#34;https://www.elastic.co/guide/en/watcher/2.0.0-beta2/watch-active-state.html&#34;&gt;Active State&lt;/a&gt;をごらんください。&lt;/p&gt;
&lt;h5 id=&#34;チャットのための新しいアクション&#34;&gt;チャットのための新しいアクション&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;slack&lt;/code&gt;と&lt;code&gt;hipchat&lt;/code&gt;アクションが追加されました。
これは、Watcherが通知を、SlackやHipchatのユーザに直接送ったり、
チームのチャットルームに送ったりすることが出来るようにします。
詳細については、&lt;a href=&#34;https://www.elastic.co/guide/en/watcher/2.0.0-beta2/actions.html#actions-slack&#34;&gt;Slack action&lt;/a&gt;および、&lt;a href=&#34;https://www.elastic.co/guide/en/watcher/2.0.0-beta2/actions.html#actions-hipchat&#34;&gt;Hipchat action&lt;/a&gt;をごらんください。&lt;/p&gt;
&lt;h2 id=&#34;20に関するこれまでのブログ記事&#34;&gt;2.0に関するこれまでのブログ記事&lt;/h2&gt;
&lt;p&gt;これまでのリリースについての情報はこれらのブログ記事をごらんください。&lt;/p&gt;
&lt;p&gt;* &lt;a href=&#34;https://www.elastic.co/blog/elasticsearch-2-0-0-beta1-released&#34;&gt;Elasticsearch 2.0.0.beta1 released&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/blog/elasticsearch-2.0.0.beta1-coming-soon&#34;&gt;Elasticsearch 2.0.0.beta1 coming soon!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/blog/great-mapping-refactoring&#34;&gt;The Great Mapping Refactoring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/blog/store-compression-in-lucene-and-elasticsearch&#34;&gt;Store compression in Lucene and Elasticsearch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/blog/better-query-execution-coming-elasticsearch-2-0&#34;&gt;Better query execution coming to Elasticsearch 2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/blog/out-of-this-world-aggregations&#34;&gt;Out of this world aggregations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/blog/staying-in-control-with-moving-averages-part-1&#34;&gt;Staying in Control with Moving Averages - Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/blog/staying-in-control-with-moving-averages-part-2&#34;&gt;Staying in Control with Moving Averages - Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/blog/core-delete-by-query-is-a-plugin&#34;&gt;The Delete by Query API Is now a plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/blog/elasticsearch-unplugged&#34;&gt;Elasticsearch unplugged - Networking changes in 2.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/2.0/index.html&#34;&gt;Elasticsearch 2.0.0-beta2のドキュメント&lt;/a&gt;や&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/2.0/breaking-changes-2.0.html&#34;&gt;2.0のbreaking changesのリスト&lt;/a&gt;もごらんください。&lt;/p&gt;
&lt;h2 id=&#34;elsticsearch-migration-plugin&#34;&gt;Elsticsearch Migration Plugin&lt;/h2&gt;
&lt;p&gt;Elasticsearch Migration Pluginは、既存のインデックスをアップグレードする
必要があるか、他に必要な行動がないかについて、Elasticsearch
2.0.0-beta2を試す前に確認する助けとなります。
Lucene 3のような古いインデックスや、2.0.0にした場合に動作しない問題のある
マッピングのような問題を発見できます。&lt;/p&gt;
&lt;p&gt;プラグインの動作に関しては[Elasticsearch Migration repository](Elasticsearch Migration repository)をごらんください。&lt;/p&gt;
&lt;h2 id=&#34;テストしましょう&#34;&gt;テストしましょう！&lt;/h2&gt;
&lt;p&gt;Elasticsearch 2.0.0 GAをすぐにリリースできるようにより多くのベータテスターをお待ちしています。&lt;/p&gt;
&lt;p&gt;ぜひ、&lt;a href=&#34;https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0-beta2&#34;&gt;Elasticsearch 2.0.0-beta2&lt;/a&gt;をダウンロードして、試してみてください。
そして、感想をTwitter(&lt;a href=&#34;https://twitter.com/elastic&#34;&gt;@elastic&lt;/a&gt;)や&lt;a href=&#34;https://discuss.elastic.co/c/elasticsearch&#34;&gt;Webフォーラム&lt;/a&gt;などで教えて下さい。
また、問題がありましたら、&lt;a href=&#34;https://github.com/elastic/elasticsearch/issues&#34;&gt;GitHub issues page&lt;/a&gt;で報告をお願いします。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch unplugged - 2.0におけるネットワークの変更(日本語訳)</title>
      <link>https://blog.johtani.info/blog/2015/08/28/elasticsearch-unplugged-ja/</link>
      <pubDate>Fri, 28 Aug 2015 12:01:30 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/08/28/elasticsearch-unplugged-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Elasticsearch unplugged - Networking changes in 2.0 Elasticsearchをローカルのマシンで起</description>
      <content:encoded>&lt;p&gt;&lt;strong&gt;※この記事は次のブログを翻訳したものになります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;https://www.elastic.co/blog/elasticsearch-unplugged&#34;&gt;Elasticsearch unplugged - Networking changes in 2.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Elasticsearchをローカルのマシンで起動します。
そして、昨日試したデータを削除するために&lt;code&gt;DELETE *&lt;/code&gt;を実行します。
すると、悲しそうな叫びを同僚が発していることに気づき、なぜそんなことになっているのか不思議に思うでしょう。。。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;Elasticsearchはいつも、親しみやすいものでした。
複数ノードのクラスタがどのように機能するのかをテストするには、
ローカルのマシンでいくつかのElasticsearchのインスタンスを起動するだけでした。
起動したインスタンスはマルチキャストを利用して自動的にお互いを見つけて、1つのクラスタになり、負荷を共有し始めます。
しかし、これは親しみやすすぎました。
カンファレンスなどで、ローカルのマシンでElasticsearchを起動してみてください。
すると100ノードのクラスタに参加しているのがすぐにわかるでしょう。&lt;/p&gt;
&lt;p&gt;もうすぐリリースされる、2.0.0-beta1では、Elasticsearchが通信先を選択するネットワークの機能に関する変更があります。
ただし、これまで通り、簡単に開発者が経験できる機能も残っています。&lt;/p&gt;
&lt;h2 id=&#34;localhostへのバインド&#34;&gt;localhostへのバインド&lt;/h2&gt;
&lt;p&gt;以前、Elasticsearchはデフォルトで、利用可能なネットワークインタフェース全てにバインドしていました。
そこから、一番適したインタフェースを&lt;code&gt;publish_host&lt;/code&gt;として選択しようとします。
このアドレスはElasticsearchがクラスタの他のノードとやりとりするためのアドレスです。&lt;/p&gt;
&lt;p&gt;Elasticsearch 2.0では、デフォルトでは、&lt;code&gt;localhost&lt;/code&gt;にのみバインドします。
&lt;code&gt;127.0.0.1&lt;/code&gt;（IPv4）と&lt;code&gt;[::1]&lt;/code&gt;（IPv6）の両方にバインドしようとします。
また、どちらかのみの環境でも動作します。
この変更は、特に指定がない限り、Elasticsearchがネットワーク上の他のノードと接続しません。
本番環境に移行する場合は、&lt;code&gt;network.host&lt;/code&gt;パラメータを使って設定しましょう。
設定は、&lt;code&gt;elasticsearch.yml&lt;/code&gt;に記述するか、コマンドラインで指定します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bin/elasticsearch --network.host 192.168.1.5
bin/elasticsearch --network.host _non_loopback_
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;network.host&lt;/code&gt;の全てのオプションについては、&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/2.0/modules-network.html&#34;&gt;network settingsのドキュメント&lt;/a&gt;をごらんください。&lt;/p&gt;
&lt;h2 id=&#34;マルチキャストは廃止&#34;&gt;マルチキャストは廃止&lt;/h2&gt;
&lt;p&gt;Elasticsearch 1.xはネットワークの他のノードに接続・探索するためにマルチキャストを使用しました。
マルチキャストは魔法のような挙動です。。。
残念ながら、マルチキャストのサポートは良くも悪くもあります。
Linuxはローカルホストでマルチキャストの待ち受けをしていません。
OS/Xは構成されたアドレスの全てのインタフェースにマルチキャストで配信できます。
また、ネットワークによってはマルチキャストはデフォルトでは使用できなくなっています。&lt;/p&gt;
&lt;p&gt;Elasticsearch 2.0は異なるアプローチを採用しました。
マルチキャストを廃止します（ただし、新たにプラグインとして提供します）。
代わりに、ローカルホストでは、Elasticsearchは&lt;code&gt;transport.tcp.port&lt;/code&gt;で指定されている範囲（デフォルトは&lt;code&gt;9300-9400&lt;/code&gt;）の最初の5ポートに対してユニキャストを使用できるようにします。&lt;/p&gt;
&lt;p&gt;これは、開発者のための、設定することなく自動的にクラスタを組むという機能を残しています。
しかし、本番に移行するときは、&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/2.0/modules-discovery-zen.html#unicast&#34;&gt;unicast hosts&lt;/a&gt;で次のようにリストを指定する必要があります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;discovery.zen.ping.unicast.hosts: [ 192.168.1.2,  192.168.1.3 ]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;unicast hostsとしてクラスタにあるノードの全てのリストを指定する必要はありません。
少なくとも、マスタノードとして選出されるべきものを指定します。
巨大なクラスタでは、3つの専用のマスタノードを持っており、この3つをunicast hostsとして設定することを推奨しています。&lt;/p&gt;
&lt;p&gt;これにより、開発の知識・経験が、私たちの推奨する本番でのネットワーク設定に、より近いものとなります。&lt;/p&gt;
&lt;h2 id=&#34;ノード情報の変更&#34;&gt;ノード情報の変更&lt;/h2&gt;
&lt;p&gt;最後に、&lt;code&gt;inet[/127.0.0.1:9200]&lt;/code&gt;といったシンタックスを廃止します。
これは、Elasticsearchが&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-nodes-info.html&#34;&gt;nodes-info API&lt;/a&gt;などで、使用していたIPアドレスのためのシンタックスです。
今は、RFCに準拠した形で表示します。
&lt;code&gt;127.0.0.1:9200&lt;/code&gt;（IPv4）や&lt;code&gt;[::1]:9200&lt;/code&gt;（IPv6）のようにです。&lt;/p&gt;
&lt;p&gt;質問がある場合は、&lt;a href=&#34;https://discuss.elastic.co/c/elasticsearch&#34;&gt;ElasticsearchのWebフォーラム&lt;/a&gt;で質問してください。ベータはもうすぐです！（翻訳した時点で、すでにベータリリースされています。）&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 2.0.0-beta1リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/08/27/elasticsearch-2-0-0-beta1-released-ja/</link>
      <pubDate>Thu, 27 Aug 2015 10:29:12 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/08/27/elasticsearch-2-0-0-beta1-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Elasticsearch 2.0.0-beta1 released 本日（8/26）、Lucene 5.2.1ベースのElas</description>
      <content:encoded>&lt;p&gt;&lt;strong&gt;※この記事は次のブログを翻訳したものになります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;https://www.elastic.co/blog/elasticsearch-2-0-0-beta1-released&#34;&gt;Elasticsearch 2.0.0-beta1 released&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本日（8/26）、&lt;strong&gt;Lucene 5.2.1&lt;/strong&gt;ベースの&lt;strong&gt;Elasticsearch 2.0.0-beta1&lt;/strong&gt;をリリースしました。
本リリースは469名のコミッターからの2,500以上ものpull requestを含んでいます。
pull requestのうち、約850が2.0のための新規のものとなります。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意事項&lt;/strong&gt;
本リリースはベータリリースであり、テストを目的としたものとなります。
Elasticsearch 2.0.0-beta1は Elasticsearch 2.0.0 GAと互換性があるかどうかの保証はありません。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本番環境には利用しないでください。&lt;/strong&gt;&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0-beta1&#34;&gt;Elasticsearch 2.0.0-beta1のダウンロードおよび、すべての変更についてはリンク&lt;/a&gt;をごらんください。&lt;/p&gt;
&lt;p&gt;Elasticsearch 2.0.0-beta1には次の新しい変更が含まれています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pipeline Aggregations：これは、他のaggregationsの結果に対するAggregationを実行できます（導関数、移動平均、Holt Winter予測アルゴリズムなども含む）&lt;/li&gt;
&lt;li&gt;ディスクやファイルシステムキャッシュにより適したより良いデータの圧縮&lt;/li&gt;
&lt;li&gt;doc-valuesがデフォルトになったこと、マージ実行時のメモリ使用量の低減、フィルターキャッシュのためのroaring bitsetsなどにより、ヒープの使用率がより効率的に。&lt;/li&gt;
&lt;li&gt;構造化された例外&lt;/li&gt;
&lt;li&gt;最適化されたクエリ実行順序、フィルタの自動キャッシュ、より高速なクエリに書き換えられたparent-child&lt;/li&gt;
&lt;li&gt;設定の代わりに、フィードバックループを使用した自動調整&lt;/li&gt;
&lt;li&gt;トランザクションログへの書き込みがデフォルトで、アトミックでかつ冗長に&lt;/li&gt;
&lt;li&gt;安全で明確で信頼性のあるタイプマッピング&lt;/li&gt;
&lt;li&gt;デフォルトでローカルホストでのみクラスタを構成&lt;/li&gt;
&lt;li&gt;クラスタ状態の差分によりより高速に変更を伝搬&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記の変更以外にも、多くのElasticsearchおよびLuceneに対する継続的な変更が含まれています。
これらは、Elasticsearch 2.0をより安全に、より簡単に、より良いものにしています。
本リリースに関するより詳しい情報が次のブログにあるので、参考にしてください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/blog/elasticsearch-2.0.0.beta1-coming-soon&#34;&gt;Elasticsearch 2.0.0.beta1 coming soon!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/blog/great-mapping-refactoring&#34;&gt;The Great Mapping Refactoring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/blog/store-compression-in-lucene-and-elasticsearch&#34;&gt;Store compression in Lucene and Elasticsearch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/blog/better-query-execution-coming-elasticsearch-2-0&#34;&gt;Better query execution coming to Elasticsearch 2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/blog/out-of-this-world-aggregations&#34;&gt;Out of this world aggregations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/blog/staying-in-control-with-moving-averages-part-1&#34;&gt;Staying in Control with Moving Averages - Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/blog/staying-in-control-with-moving-averages-part-2&#34;&gt;Staying in Control with Moving Averages - Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/blog/core-delete-by-query-is-a-plugin&#34;&gt;The Delete by Query API Is now a plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/blog/elasticsearch-unplugged&#34;&gt;Elasticsearch unplugged - Networking changes in 2.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/2.0/index.html&#34;&gt;Elasticsearch 2.0.0-beta1のドキュメント&lt;/a&gt;も参考になります。
特に、&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/2.0/breaking-changes-2.0.html&#34;&gt;2.0での重大な変更点について&lt;/a&gt;は必ずごらんください。&lt;/p&gt;
&lt;h2 id=&#34;core-plugins&#34;&gt;Core plugins&lt;/h2&gt;
&lt;p&gt;コアプラグインの開発の方法を変更しました。
公式にサポートしているプラグインは、現在&lt;a href=&#34;https://github.com/elastic/elasticsearch/tree/master/plugins&#34;&gt;elasticsearchのリポジトリ&lt;/a&gt;に含まれています。
これにより、コアと一緒にテストされ、Elasticsearchと同じタイミングでリリースされます。
コアプラグインはElasticsearchと同じバージョン番号隣ます。
インストールは次のようになります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo bin/plugin install analysis-icu
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/plugins/2.0/index.html&#34;&gt;プラグインの新しいドキュメント&lt;/a&gt;は私たちのWebサイトの&lt;a href=&#34;https://www.elastic.co/guide/index.html&#34;&gt;Guide&lt;/a&gt;にあります。&lt;/p&gt;
&lt;h2 id=&#34;commercial-plugins&#34;&gt;Commercial plugins&lt;/h2&gt;
&lt;p&gt;私たちの商用プラグインもElasticsearchと同じバージョン番号となり、Elasticsearchと一緒にリリースされます。
ShieldやWatcherはすでに2.0.0-beta1が利用可能です。
インストールのコマンドはは次のようになります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo bin/plugin install license
sudo bin/plugin install shield
sudo bin/plugin install watcher
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;MarvelおよびSenseに関する新しい情報もありますが、もう少しお待ちください。&lt;/p&gt;
&lt;p&gt;2.0.0-beta1の商用プラグインに関するドキュメントは次のリンクからごらんください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/shield/2.0.0-beta1/index.html&#34;&gt;Shield 2.0.0-beta1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/watcher/2.0.0-beta1/index.html&#34;&gt;Watcher 2.0.0-beta1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;elasticsearch-migration-plugin&#34;&gt;Elasticsearch Migration plugin&lt;/h2&gt;
&lt;p&gt;Elasticsearch 2.0.0-beta1を試す前に、
既存のインデックスのアップグレードするためになにか行う必要があるかどうかを確認するためのElasticsearch Migration Pluginもリリースしました。
2.0.0では機能しない、問題のあるマッピングなどを見つけるために便利なプラグインです。&lt;/p&gt;
&lt;p&gt;このプラグインの利用方法については&lt;a href=&#34;http://github.com/elastic/elasticsearch-migration&#34;&gt;Elasticsearch Migration repository&lt;/a&gt;をごらんください。&lt;/p&gt;
&lt;h2 id=&#34;既知の問題&#34;&gt;既知の問題&lt;/h2&gt;
&lt;p&gt;同じインデックスの異なるタイプに、同じ名前の&lt;code&gt;ip&lt;/code&gt;タイプのフィールドを追加した時に、問題があることがわかっています。
この問題は次のリリースでフィックスされます。詳細は&lt;a href=&#34;https://github.com/elastic/elasticsearch/issues/13112&#34;&gt;#13112&lt;/a&gt;をごらんください。&lt;/p&gt;
&lt;h2 id=&#34;テストしましょう&#34;&gt;テストしましょう！&lt;/h2&gt;
&lt;p&gt;Elasticsearch 2.0.0 GAをすぐにリリースできるようにより多くのベータテスターをお待ちしています。&lt;/p&gt;
&lt;p&gt;ぜひ、&lt;a href=&#34;https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0-beta1&#34;&gt;Elasticsearch 2.0.0-beta1&lt;/a&gt;をダウンロードして、試してみてください。
そして、感想をTwitter(&lt;a href=&#34;https://twitter.com/elastic&#34;&gt;@elastic&lt;/a&gt;)や&lt;a href=&#34;https://discuss.elastic.co/c/elasticsearch&#34;&gt;Webフォーラム&lt;/a&gt;などで教えて下さい。
また、問題がありましたら、&lt;a href=&#34;https://github.com/elastic/elasticsearch/issues&#34;&gt;GitHub issues page&lt;/a&gt;で報告をお願いします。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Delete by Query APIはプラグインへ（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/08/20/core-delete-by-query-is-a-plugin-ja/</link>
      <pubDate>Thu, 20 Aug 2015 13:24:04 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/08/20/core-delete-by-query-is-a-plugin-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：The Delete by Query API Is now a plugin Elasticsearchの2.0.0-beta1では、これまで</description>
      <content:encoded>&lt;p&gt;&lt;strong&gt;※この記事は次のブログを翻訳したものになります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;https://www.elastic.co/blog/core-delete-by-query-is-a-plugin&#34;&gt;The Delete by Query API Is now a plugin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Elasticsearchの2.0.0-beta1では、これまであった &lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-delete-by-query.html&#34;&gt;Delete by Query API&lt;/a&gt;が&lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/10859&#34;&gt;削除&lt;/a&gt;され、
新しく &lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/plugins/2.0/plugins-delete-by-query.html&#34;&gt;Delete by Query plugin&lt;/a&gt;に&lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/11516&#34;&gt;置き換え&lt;/a&gt;られています。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;もし、Delete by Query を利用する場合、2.0にアップグレードしたあとは、プラグインをインストールし、ドキュメントに従ってください。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bin/plugin install delete-by-query
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;なぜプラグインに&#34;&gt;なぜプラグインに？&lt;/h2&gt;
&lt;p&gt;ElasticsearchのコアなAPIの品質を保つためであり、以前のDelete by Queryの実装は簡単にはフィックスできない大きな問題がありました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;各リクエストのあとに、&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-refresh.html&#34;&gt;refresh&lt;/a&gt;を実行します。これは、&lt;a href=&#34;https://github.com/elastic/elasticsearch/issues/3593&#34;&gt;削除されたデータが想定外に検索に出てこないようにするため&lt;/a&gt;です。&lt;br&gt;
また、&lt;a href=&#34;https://github.com/elastic/elasticsearch/issues/6025&#34;&gt;セグメントが大量にでき、マージが大量に発生し、ヒープが大量に消費されてインデキシングが劇的にスローダウンし&lt;/a&gt;、クラスタの複数のノードがクラッシュしてしまう状況も引き起こしました。&lt;/li&gt;
&lt;li&gt;このクエリは、プライマリ、レプリカの両方で実行されるため、ことなるドキュメントを削除し、矛盾したレプリカ（データの破損）を引き起こしました。&lt;/li&gt;
&lt;li&gt;アップグレードが不安定になります。これは、Delete by Queryリクエストがトランザクションログの中にクエリとして残るためです。そのため、アップグレードのあとに正確にパースされなかったり正確に実行されないかもしれません。例えば、インデックスエイリアスに対するリクエストで、それが削除された後の場合に&lt;a href=&#34;https://github.com/elastic/elasticsearch/issues/10262&#34;&gt;このようなバグ&lt;/a&gt;が発生します。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;対照的に、&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/plugins/2.0/plugins-delete-by-query.html&#34;&gt;新しいプラグイン&lt;/a&gt;は、安全な実装です。
&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/guide/current/scan-scroll.html&#34;&gt;scanとscrollリクエスト&lt;/a&gt;でクエリにマッチしたIDを見つけ、そのIDを使って、&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html&#34;&gt;bulk indexing API&lt;/a&gt;で削除します。&lt;/p&gt;
&lt;p&gt;この実装は、遅い必要があります。特に、クエリが多くのドキュメントを削除する場合です。
もし、多くのドキュメントをこのAPIを利用して削除する場合、アプリケーションをテストしてください。
そして、&lt;a href=&#34;https://www.elastic.co/blog/lucenes-handling-of-deleted-documents&#34;&gt;代わりにインデックス全体を消す&lt;/a&gt;ようなアプローチに切り替えることができないか検討してください。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/plugins/2.0/delete-by-query-plugin-reason.html&#34;&gt;Delete by Query pluginのドキュメント&lt;/a&gt;に、新しい実装についての違いなどのより詳しい説明があります。&lt;/p&gt;
&lt;h2 id=&#34;elasticsearch-coreを最小限に&#34;&gt;Elasticsearch coreを最小限に&lt;/h2&gt;
&lt;p&gt;プラグインに切り替えることは、簡単な決断ではありませんでした。
多くのユーザは問題なく、Delete by Queryを利用していました。
しかし、危険が常にそこにあり、些細とは言い切れない数のユーザが上記のような深刻な問題に遭遇していました。&lt;/p&gt;
&lt;p&gt;さらに、Elsticsearchのコアは信頼できるものでなければなりません。
他のコアAPIを利用して実装できる機能は、コアに含みません。特に、それがバグを含んでいる場合。
コアのすべての機能は強固であるべきで、Delete by Queryは人気があり、高性能ですが、そうではありませんでした。&lt;/p&gt;
&lt;p&gt;必要に応じて、このような難しいトレードオフの末、信頼性と品質を選びます。&lt;/p&gt;
&lt;h2 id=&#34;マッピングの削除の廃止&#34;&gt;マッピングの削除の廃止&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-delete-mapping.html&#34;&gt;タイプのマッピングを削除する機能&lt;/a&gt;も2.0で&lt;a href=&#34;https://github.com/elastic/elasticsearch/issues/8877&#34;&gt;廃止&lt;/a&gt;されます。
これは、同じフィールド名を、異なるフィールドのタイプで再利用した場合に、インデックスの破損を引き起こす可能性があるためです。&lt;/p&gt;
&lt;p&gt;しかし、&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-all-query.html&#34;&gt;Match All Query&lt;/a&gt;で、Delete by Queryプラグインに対してタイプを指定することで、タイプのすべてのドキュメントを削除することはできます。
または、1つのインデックスに異なるタイプを複数含める代わりに、個別のインデックスに分割するようなアプローチに変更することを検討してください。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>第11回Elasticsearch勉強会を開催しました。#elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2015/07/31/11th-elasticsearch-jp/</link>
      <pubDate>Fri, 31 Jul 2015 14:41:53 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/07/31/11th-elasticsearch-jp/</guid>
      <description>第11回Elasticsearch勉強会を開催しました。 スタッフの皆さん、スピーカーの皆さん、会場提供していただいたリクルートテクノロジーズ</description>
      <content:encoded>&lt;p&gt;&lt;a href=&#34;https://elasticsearch.doorkeeper.jp/events/28321&#34;&gt;第11回Elasticsearch勉強会&lt;/a&gt;を開催しました。
スタッフの皆さん、スピーカーの皆さん、会場提供していただいた&lt;a href=&#34;http://recruit-tech.co.jp&#34;&gt;リクルートテクノロジーズさん&lt;/a&gt;、そして、Shayありがとうございました！
次回もよろしくお願いします！参加していただき盛り上げていただいた参加者の皆さんもありがとうございました。&lt;/p&gt;
&lt;p&gt;今回は、CTOのShayが来日していたので、英語でいろいろと喋ってもらいました。
4月同様、&lt;a href=&#34;http://samuraism.com&#34;&gt;サムライズム&lt;/a&gt;の&lt;a href=&#34;https://twitter.com/yusuke&#34;&gt;@yusuke&lt;/a&gt;さんに
テキスト翻訳していただき、大変助かりました。
今回はQAベースのトークだったのでちょっときつかったですね、申し訳ない。。。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h3 id=&#34;チェックイン数など&#34;&gt;チェックイン数など&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;チェックインした人：141名&lt;/li&gt;
&lt;li&gt;キャンセルしなかった人：51名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;でした。
今回はあらかじめ220名（全員が来たらキャパオーバー）としていたので、キャンセル待ちの人は
当日の午後にはいなくなっていた状態です。まぁ、こんなもんかな。結構入りましたね。ありがたいです。&lt;/p&gt;
&lt;h2 id=&#34;lt&#34;&gt;LT&lt;/h2&gt;
&lt;p&gt;今回は、少し趣向を変えて、4社の方達にLTをしていただきました。
Shayが来日しているのもあり、事前に英語でスライドを作っていただけると助かりますとお願いさせていただきました。
英語でスライドを作っていただいていたので、伝わりやすくて助かりました、スピーカーの方々ありがとうございました！&lt;br&gt;
（海外のユーザにもリンクを紹介しやすいので、英語でスライド作ってもらえるといろいろと知ってもらえるのかも。）&lt;/p&gt;
&lt;h3 id=&#34;elasticsearch-and-recruit-technologies-co-ltd--株式会社リクルートテクノロジーズ守谷-純之介さん&#34;&gt;Elasticsearch and Recruit Technologies Co., Ltd. / 株式会社リクルートテクノロジーズ　守谷 純之介さん&lt;/h3&gt;
&lt;p&gt;スライド：未定&lt;/p&gt;
&lt;p&gt;N-Gramと形態素のハイブリッドの話などをしていただきました。
@ITで連載もされてますね。ありがとうございます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/1507/08/news009.html&#34;&gt;リクルート全社検索基盤のアーキテクチャ、採用技術、開発体制はどうなっているのか (1/2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/1507/29/news010.html&#34;&gt;ElasticsearchとKuromojiを使った形態素解析とN-Gramによる検索の適合率と再現率の向上 (1/3)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Shayからは、&lt;a href=&#34;https://www.elastic.co/products/hadoop&#34;&gt;elasticsearch-hadoop&lt;/a&gt;があるから検討してねと質問（お願い？）がありましたw。&lt;/p&gt;
&lt;h3 id=&#34;elasticsearch-as-a-dmp--株式会社インティメートマージャー松田和樹さんmats116&#34;&gt;Elasticsearch as a DMP / 株式会社インティメート・マージャー　松田和樹さん　@mats116&lt;/h3&gt;
&lt;p&gt;スライド：&lt;a href=&#34;http://www.slideshare.net/im_docs/elasticsearch-as-a-dmp&#34;&gt;Elasticsearch as a DMP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;いくつかのデータソースからAEROSPIKE経由でelasticsearchにデータを登録しているようです。
Data Management Platformのエンジンの一部として、elasticsearchを利用しているようです。&lt;/p&gt;
&lt;p&gt;Shayからの質問：「どの機能を使って関心のある単語を抽出していますか？」&lt;br&gt;
回答：「&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-significantterms-aggregation.html&#34;&gt;Significant Term Aggregation&lt;/a&gt;」です。&lt;br&gt;
Shay：「おぉ、チェックしてみますw」。&lt;/p&gt;
&lt;h3 id=&#34;real-time-social-big-data-analytics-using-elasticsearch--株式会社ホットリンク宮田洋毅さんkakka_jp&#34;&gt;Real-time social big data analytics using elasticsearch / 株式会社ホットリンク宮田洋毅さん　@kakka_jp&lt;/h3&gt;
&lt;p&gt;スライド：未定&lt;/p&gt;
&lt;p&gt;ソーシャルメディアのデータを解析するのにelasticsearchにデータを入れて解析。
時間軸での解析やテキストマイニングなんかをしているみたいでした。
いろいろと独自のプラグインを作ってるようです。（興味あるなぁ）&lt;/p&gt;
&lt;p&gt;Shayからの質問：「ノード数は？」「30ノードで30シャード」&lt;/p&gt;
&lt;h3 id=&#34;elasticsearch-in-hatena-bookmark--株式会社はてなidskozawa&#34;&gt;Elasticsearch in Hatena Bookmark / 株式会社はてな　id:skozawa&lt;/h3&gt;
&lt;p&gt;スライド：&lt;a href=&#34;http://www.slideshare.net/shunsukekozawa5/elasticsearch-in-hatena-bookmark&#34;&gt;Elasticsearch in Hatena Bookmark&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;はてなブックマークの検索の歴史（MySQL -&amp;gt; Sedue -&amp;gt; Solr -&amp;gt; Elasticsearch）&lt;/li&gt;
&lt;li&gt;はてなブックマークの検索（ユーザが利用）と社内利用と、ログ解析で利用してる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Shayからの質問：「昨年会いましたよね？今はクラスタのサイズはどのくらいのサイズですか？」「メインクラスタは9データノード」&lt;/p&gt;
&lt;h2 id=&#34;open-qa-with-shay&#34;&gt;Open QA with Shay&lt;/h2&gt;
&lt;p&gt;思い出せるものだけ。。。（あとで追記します）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elasticsearch 2.0の話
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/blog/out-of-this-world-aggregations&#34;&gt;Pipeline Aggregation&lt;/a&gt;とか。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Spark Streaming対応してる？
&lt;ul&gt;
&lt;li&gt;まだ検討中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;elasticsearch-hadoopってどんなもの？HDFSにインデックス作ったりするの？
&lt;ul&gt;
&lt;li&gt;いえ、Hadoopの入出力先としてelasticsearchが使える感じ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;個人的にAWSのCloudSearchとAWSでElasticsearchはどっちがいい？
&lt;ul&gt;
&lt;li&gt;時系列データはCloudSearchだと難しいだろうし、AWS上なら&lt;a href=&#34;http://found.no&#34;&gt;found.no&lt;/a&gt;があるよ！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PostgreSQLみたいに信頼性の高いデータストアを目指してる（まだ、プライマリデータストアには使わないで）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;その他感想などのブログ&#34;&gt;その他、感想などのブログ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tech.im-dmp.net/archives/4941&#34;&gt;Elasticsearch勉強会でLTしてきました | Intimate Merger Engineer Blog &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://togetter.com/li/853331&#34;&gt;『第11回elasticsearch勉強会』のまとめ #elasticsearchjp&lt;/a&gt;
* &lt;a href=&#34;http://suzuki.tdiary.net/20150728.html#p01&#34;&gt;[Elasticsearch] 第11回 Elasticsearch 勉強会へ参加してきた - 雑文発散(2015-07-28)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kakakakakku.hatenablog.com/entry/2015/07/27/224203&#34;&gt;第11回 Elasticsearch 勉強会に参加したら英語力に危機感を覚えて最高だった&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;まとめ&#34;&gt;まとめ&lt;/h3&gt;
&lt;p&gt;今回はShayが来日したので特別バージョンでした。
もっと英語を翻訳するサポートしないとですね、反省してます。。。ぜんぜん流暢じゃないしw&lt;/p&gt;
&lt;p&gt;次回は9月に開催予定ですが、12月にまたShayが再度来日する予定です。
丸1日のイベントを検討中で、Shay以外にも開発者が来日すると思います。
どんな話が聞きたい、どんな人と話をしたいなどあれば、コメントいただければ（対応できるかは。。。）&lt;/p&gt;
&lt;p&gt;勉強会のスピーカーは随時募集中ですので、コメント、メール、ツイートなど、コンタクトしていただければと思います。 よろしくお願いいたします。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 1.7.1 および 1.6.2リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/07/29/elasticsearch-1-7-1-and-1-6-2-released-ja/</link>
      <pubDate>Wed, 29 Jul 2015 21:35:53 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/07/29/elasticsearch-1-7-1-and-1-6-2-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Elasticsearch 1.7.1 and 1.6.2 released 本日（7/29）、Lucene 4.10.4ベースのE</description>
      <content:encoded>&lt;p&gt;&lt;strong&gt;※この記事は次のブログを翻訳したものになります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;https://www.elastic.co/blog/elasticsearch-1-7-1-and-1-6-2-released&#34;&gt;Elasticsearch 1.7.1 and 1.6.2 released&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本日（7/29）、&lt;strong&gt;Lucene 4.10.4&lt;/strong&gt;ベースの&lt;strong&gt;Elasticsearch 1.7.1&lt;/strong&gt;および&lt;strong&gt;Elasticsearch 1.6.2&lt;/strong&gt; のバグフィックス版をリリースしました。
これらのリリースは稀ですが、データの欠損が発生する重要なバグのフィックスを含んでいます。
&lt;strong&gt;すべてのユーザにアップグレードを推奨します。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ダウンロードおよびすべての変更については次のリンクをごらんください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最新安定版：&lt;a href=&#34;https://www.elastic.co/downloads/past-releases/elasticsearch-1-7-1&#34;&gt;Elasticsearch 1.7.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1.6系バグフィックス：&lt;a href=&#34;https://www.elastic.co/downloads/past-releases/elasticsearch-1-6-2&#34;&gt;Elasticsearch 1.6.2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- more --&gt;
&lt;p&gt;問題のバグ(&lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/12487&#34;&gt;#12487&lt;/a&gt;)は、
同時に複数のノードが故障またはリスタートをした場合の非常にまれな状況で、
シャードのすべてのコピーがクラスタから削除されてしまう状況を発生させます。
このバグは1.5.0から含まれています。&lt;/p&gt;
&lt;p&gt;このリリースはまた、IPv4アドレスのCIDRマスクのバグのフィックス、
Shieldユーザがmore-like-this APIを利用できないバグのフィックスなど、
いくつかの変更も含んでいます（詳細は&lt;a href=&#34;https://www.elastic.co/downloads/past-releases/elasticsearch-1-7-1&#34;&gt;更新リスト&lt;/a&gt;をごらんください）。&lt;/p&gt;
&lt;p&gt;ぜひ、&lt;a href=&#34;https://www.elastic.co/downloads/past-releases/elasticsearch-1-7-1&#34;&gt;Elasticsearch 1.7.1&lt;/a&gt;をダウンロードして、試してみてください。
そして、感想をTwitter(&lt;a href=&#34;https://twitter.com/elastic&#34;&gt;@elastic&lt;/a&gt;)などで教えて下さい。
また、問題がありましたら、&lt;a href=&#34;https://github.com/elastic/elasticsearch/issues&#34;&gt;GitHub issues page&lt;/a&gt;で報告をお願いします。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 1.7.0 および 1.6.1リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/07/22/elasticsearch-1-7-0-and-1-6-1-released-ja/</link>
      <pubDate>Wed, 22 Jul 2015 15:33:37 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/07/22/elasticsearch-1-7-0-and-1-6-1-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Elasticsearch 1.7.0 and 1.6.1 released 本日（7/16）、Lucene 4.10.4ベースのE</description>
      <content:encoded>&lt;p&gt;&lt;strong&gt;※この記事は次のブログを翻訳したものになります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;https://www.elastic.co/blog/elasticsearch-1-7-0-and-1-6-1-released&#34;&gt;Elasticsearch 1.7.0 and 1.6.1 released&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本日（7/16）、&lt;strong&gt;Lucene 4.10.4&lt;/strong&gt;ベースの&lt;strong&gt;Elasticsearch 1.7.0&lt;/strong&gt;および&lt;strong&gt;Elasticsearch 1.6.1&lt;/strong&gt; のバグフィックス版をリリースしました。
これらのリリースはセキュリティフィックスを含んでおり、&lt;strong&gt;すべてのユーザにアップグレードを推奨します。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ダウンロードおよびすべての変更については次のリンクをごらんください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最新安定版：&lt;a href=&#34;https://www.elastic.co/downloads/past-releases/elasticsearch-1-7-0&#34;&gt;Elasticsearch 1.7.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1.6系バグフィックス：&lt;a href=&#34;https://www.elastic.co/downloads/past-releases/elasticsearch-1-6-1&#34;&gt;Elasticsearch 1.6.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- more --&gt;
&lt;p&gt;1.7.0が1.x系の最後のリリースとなります。
今後の新機能については、Elasticsearch 2.0以降で取り込まれる予定です。&lt;/p&gt;
&lt;p&gt;Elasticsearch 1.7.0は小さなリリースですが、2つの重要なセキュリティフィックスと
クラスタの安定化とリカバリに関する2つの重要な機能を含んでいます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#security&#34;&gt;セキュリティフィックス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#delayed&#34;&gt;シャードアロケーションを遅らせる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#prioritization&#34;&gt;インデックスリカバリの優先度&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;a-namesecurityセキュリティフィックスa&#34;&gt;&lt;a name=&#34;security&#34;&gt;セキュリティフィックス&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Elasticsearch 1.6.1 と 1.7.0 は次の2つのセキュリティフィックスを含んでいます。&lt;/p&gt;
&lt;h3 id=&#34;リモートコード実行の脆弱性&#34;&gt;リモートコード実行の脆弱性&lt;/h3&gt;
&lt;p&gt;Elasticsearch 1.6.1より前のバージョンには、transport protocol（ノードとJavaクライアント間での通信に利用）により、
リモートでコードが実行される脆弱性があります。
これは、&lt;a href=&#34;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3253&#34;&gt;CVE-2015-3253&lt;/a&gt;でのGroovyに関係しています。&lt;/p&gt;
&lt;p&gt;Groovyのダイナミックスクリプティングがオフでも脆弱性があります。
アップグレードをしないユーザは、transport protocol のポート（デフォルトで9300）信頼したエージェントからのみの
アクセスに限定することで、脆弱性から保護できます。&lt;/p&gt;
&lt;p&gt;この問題を&lt;a href=&#34;https://www.elastic.co/community/security&#34;&gt;CVE-2015-5377&lt;/a&gt;としました。&lt;/p&gt;
&lt;h3 id=&#34;ディレクトリ探索の脆弱性&#34;&gt;ディレクトリ探索の脆弱性&lt;/h3&gt;
&lt;p&gt;Elasticsearch 1.0.0から1.6.0までのバージョンで、ElasticsearchのJVMプロセスによって読み込みが可能なファイルを
取得することができるディレクトリ探索攻撃の脆弱性があります。
アップグレードをしないユーザは、信頼できない場所からの&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html&#34;&gt;Snapshot-Restore API&lt;/a&gt;の呼び出しを防ぐためにファイアウォール、リバースプロキシやShieldを使用することができます。&lt;/p&gt;
&lt;p&gt;この問題を&lt;a href=&#34;https://www.elastic.co/community/security&#34;&gt;CVE-2015-5531&lt;/a&gt;としました。&lt;/p&gt;
&lt;h2 id=&#34;a-namedelayedシャードアロケーションを遅らせるa&#34;&gt;&lt;a name=&#34;delayed&#34;&gt;シャードアロケーションを遅らせる&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Elasticsearch 1.6.0で&lt;a href=&#34;https://www.elastic.co/blog/elasticsearch-1-6-0-released#synced-flush&#34;&gt;Synced Flushing&lt;/a&gt;が導入されました。
これは、ノードのリスタート時に、更新が止まっているシャードのリカバリを劇的にスピードアップします。
しかし、この変更は、シャードの配置を無効にしている環境でのみうまく実行されます。
ノードが一時的にクラスタから外れている場合や予期せぬリブートの場合には役に立ちません。&lt;/p&gt;
&lt;p&gt;このシナリオとは次のようなものです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ノードの想定外のシャットダウン&lt;/li&gt;
&lt;li&gt;マスタがたのノードにシャードを再配置&lt;/li&gt;
&lt;li&gt;各シャードが新しい場所にネットワーク越しにコピー&lt;/li&gt;
&lt;li&gt;その間に、外れていたノードが再度クラスタにジョイン&lt;/li&gt;
&lt;li&gt;マスタは新しいノードにシャードを再配置。新しいノードに存在する既存のシャードが全く再利用されない可能性がある&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ノードレベルとクラスタレベルの両方の並列的なリカバリを抑制しても、
この&amp;quot;シャードシャッフル&amp;quot;がクラスタに対して負荷をかける可能性があります。
これは、外れたノードが再度ジョインするのを単に待つことにより防げるかもしれません。&lt;/p&gt;
&lt;h3 id=&#34;待ちましょう&#34;&gt;待ちましょう！&lt;/h3&gt;
&lt;p&gt;Elasticsearch 1.7.0は&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/1.7/delayed-allocation.html&#34;&gt;&lt;code&gt;index.unassigned.node_left.delayed_timeout&lt;/code&gt;&lt;/a&gt;設定を追加しました。デフォルトでは1分です。
これは、ノードがクラスタから外れたとき、ほかのノードにこれらのノードを再配置するまでマスタが1分待つということです。
ノードがこの1分の間に復帰した場合、マスタはローカルにあるシャードを再度配置します。&lt;/p&gt;
&lt;h3 id=&#34;なぜ1分&#34;&gt;なぜ1分？&lt;/h3&gt;
&lt;p&gt;ノードがシャットダウンし、リスタートし、復帰するために十分な時間が1分だからです。
しかし、ノードが復帰しない場合にはまだ再配置が発生することを意味します。
デフォルト値を決定するのは難しいです。
この設定をどのくらいに減らすか、増やすかを決める必要があるかもしれません。&lt;/p&gt;
&lt;p&gt;このデフォルト値は、&lt;code&gt;config/elasticsearch.yml&lt;/code&gt;ファイルに設定できますが、&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-update-settings.html&#34;&gt;インデックス設定の更新API&lt;/a&gt;を使って設定することも可能です。&lt;/p&gt;
&lt;p&gt;このデフォルトに関する知見をぜひフィードバックしてください。&lt;/p&gt;
&lt;h2 id=&#34;a-nameprioritizationインデックスリカバリの優先度a&#34;&gt;&lt;a name=&#34;prioritization&#34;&gt;インデックスリカバリの優先度&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;1.7.0の2つ目の重要な機構はフルクラスタリスタートのような後に、
どの順番でインデックスをリカバリするかという優先度をつけることができるという機能です。&lt;/p&gt;
&lt;p&gt;電源故障による、ロギング用のクラスタのダウンを想像してください。
クラスタが普及した場合、500個のインデックスをリカバリするような場合、499個のインデックスのデータは古く、
500番目のインデックスが重要です。
もっとも最近作成されたインデックスがリカバリされるまで、インデキシングを待つというようなことはできません。&lt;/p&gt;
&lt;p&gt;これまでは、インデックスはランダムな順序でリカバリされ、重要なインデックスがリカバリされるまで待つしかありませんでした。
1.7.0では、インデックスは優先度の順番でリカバリされます。
この優先度は次のプロパティで指定できます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;index.priority&lt;/code&gt;設定（大きな値が優先度が高い）&lt;/li&gt;
&lt;li&gt;インデックス作成日（新しいものが優先度が高い）&lt;/li&gt;
&lt;li&gt;インデックス名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;既存のクラスタについて特に変更せずとも、最も最近作成されたインデックスが古いものよりも復旧されます。
古いインデックスの優先度を上げるためには、&lt;code&gt;index.priority&lt;/code&gt;設定に0よりも大きな値を設定します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PUT important_index/_settings
{
  &amp;quot;index.priority&amp;quot;: 5
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;この設定は、存在するインデックスに対して更新できます。リカバリ中にもです。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;ぜひ、&lt;a href=&#34;https://www.elastic.co/downloads/past-releases/elasticsearch-1-7-0&#34;&gt;Elasticsearch 1.7.0&lt;/a&gt;をダウンロードして、試してみてください。
そして、感想をTwitter(&lt;a href=&#34;https://twitter.com/elastic&#34;&gt;@elastic&lt;/a&gt;)などで教えて下さい。
また、問題がありましたら、&lt;a href=&#34;https://github.com/elastic/elasticsearch/issues&#34;&gt;GitHub issues page&lt;/a&gt;で報告をお願いします。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>大阪と京都でElasticsearch勉強会を開催しました。 #elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2015/07/16/kansai-1st-elasticsearch-jp/</link>
      <pubDate>Thu, 16 Jul 2015 10:40:57 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/07/16/kansai-1st-elasticsearch-jp/</guid>
      <description>東京以外での勉強会の第2弾として、関西で勉強会を開催してきました。 Elasticsearch勉強会 in 大阪 Elasticsearch勉強会 in 京</description>
      <content:encoded>&lt;p&gt;東京以外での勉強会の第2弾として、関西で勉強会を開催してきました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://elasticsearch.doorkeeper.jp/events/27555&#34;&gt;Elasticsearch勉強会 in 大阪&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://elasticsearch.doorkeeper.jp/events/27553&#34;&gt;Elasticsearch勉強会 in 京都&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;会場提供をしていただいた、Yahoo!大阪、はてなのみなさん、ご協力ありがとうございました！&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.johtani.info/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20150715/osaka.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20150715/osaka.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- more --&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20150715/kamogawa.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20150715/kamogawa.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;ここからはいつものメモです。
ちなみに、大阪の勉強会に、&lt;a href=&#34;https://twitter.com/takuya_a&#34;&gt;@takuya_a&lt;/a&gt;さんと&lt;a href=&#34;https://twitter.com/5kozawa&#34;&gt;@5kozawa&lt;/a&gt;さんの両名にお越しいただき話をしていただきました。
なので、勉強会の内容はほぼ同一になります。&lt;/p&gt;
&lt;h2 id=&#34;introduction-elastic-johtani&#34;&gt;Introduction Elastic @johtani&lt;/h2&gt;
&lt;p&gt;スライド：&lt;a href=&#34;https://speakerdeck.com/johtani/introduction-elastic-1&#34;&gt;Introduction Elasticsearch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;初めての関西での勉強会ということで、ElasticsearchのOSSおよび商用プラグインの紹介をしてきました。
もちろん、Kibanaのデモもちょっとだけ。スプラトゥーンに関するデータをKibanaでちょっとだけ。
突貫でデータをかき集めたのでもう少し改良しないとですが。&lt;/p&gt;
&lt;h2 id=&#34;elasticsearch-での類似文書検索と-more-like-this-api-詳解--株式会社はてなidtakuya-a&#34;&gt;Elasticsearch での類似文書検索と More Like This API 詳解 / 株式会社はてな　id:takuya-a&lt;/h2&gt;
&lt;p&gt;スライド：&lt;a href=&#34;https://speakerdeck.com/takuyaa/elasticsearch-defalselei-si-wen-shu-jian-suo-to-more-like-this-query-api-xiang-jie&#34;&gt;Elasticsearch での類似文書検索と More Like This Query API 詳解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Elasticsearchの&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-mlt-query.html&#34;&gt;More Like This&lt;/a&gt;のソースコードリーディングみたいな感じで、
内部でどうやって処理されているかの説明を詳しくしてもらいました。&lt;/p&gt;
&lt;p&gt;前のはてなエンジニアセミナーで話をされていた検索精度の件に絡んだ内容になっているかと。
（大阪で発表してもらった時より京都での発表が分かりやすくなってました。1日で改善されたのすごい！）
MoreLikeThisだとチューニングつらいので、自分で作るために&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-termvectors.html&#34;&gt;TermVectorAPI&lt;/a&gt;でやってみたという流れかと。&lt;/p&gt;
&lt;p&gt;以下は発表後に出てきた質問のいくつかです。&lt;/p&gt;
&lt;p&gt;Q:MoreLikeThisに対してTermVectorで柔軟にできる？
A:TermVectorのAPIで統計情報が取れるので、それを使うことでさらなるデータの更新ができる。&lt;/p&gt;
&lt;p&gt;Q:TFとかの統計情報が必要なら、すべてインデックスをしたあとじゃないとちゃんとした値はとれないのでは？
A:TermVectorで取得したものをどうやって使うか&lt;/p&gt;
&lt;p&gt;Q:TermVectorAPi&amp;hellip;聞こえなかった
A:。。。&lt;/p&gt;
&lt;h2 id=&#34;elasticsearchを用いたはてなブックマークのトピック生成--株式会社はてなidskozawa&#34;&gt;Elasticsearchを用いたはてなブックマークのトピック生成 / 株式会社はてな　id:skozawa&lt;/h2&gt;
&lt;p&gt;スライド：&lt;a href=&#34;http://www.slideshare.net/shunsukekozawa5/elasticsearch-in&#34;&gt;Elasticsearchを用いたはてなブックマークのトピック生成&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-significantterms-aggregation.html&#34;&gt;Significant Terms Aggregation&lt;/a&gt;を活用してる話。
トピックページの生成のために、Significant Terms Aggregationをどうやって利用しているかなどのお話でした。&lt;/p&gt;
&lt;p&gt;トピックの集合の重複だったり、精度の判定方法とかいろいろ詳しく説明していただきました。&lt;/p&gt;
&lt;p&gt;Q:2011年と12年で11年の方が多いのは？
A:ブックマークの件数に比例&lt;/p&gt;
&lt;p&gt;Q:Significant terms aggsのsizeはいくつをつかってますか？
A:20を指定してます。&lt;/p&gt;
&lt;p&gt;Q:Yahooとかニュースをストップワードとしてますが、Yahoo自体のニュースに関してはどーしてるんですか？
A:本文とタイトルから別々に作っていて、タイトルからは弾かれますが、本文から作った時に出てきます。&lt;/p&gt;
&lt;h2 id=&#34;はてなブックマークにおける-elasticsearch-の運用まわりの話--株式会社はてなidhagihala&#34;&gt;はてなブックマークにおける Elasticsearch の運用まわりの話 / 株式会社はてな　id:hagihala&lt;/h2&gt;
&lt;p&gt;スライド：未定（おそらく公開される）&lt;/p&gt;
&lt;p&gt;体調が回復しきっていない中の発表ありがとうございました。
大幅に修正された資料が出てくるかなと。（ツイートできない数値がちらほらあったので）&lt;/p&gt;
&lt;p&gt;Elasticsearchのクラスタの構成、どういった点で困ってたのでどういう調べ方をしたのか、どういった対処をしたのか。
どのあたりが次の課題かなどの話もありました。&lt;/p&gt;
&lt;h2 id=&#34;感想反省点など&#34;&gt;感想・反省点など&lt;/h2&gt;
&lt;p&gt;大阪、京都ともに30名弱の方の参加をしていただきました。ありがとうございました。
反省点としては、ハッシュタグを告知し忘れてました。。。&lt;/p&gt;
&lt;p&gt;勉強会はやはり、東京が異常に活発で、大阪や京都はまだそれほどでもないのかなぁとも。
大阪はエンジニアの人や会社も多い気がするんですが。私の告知の仕方もあるかもなぁと。
次回があれば、大阪での事例も聞きたいので、スピーカーをもっと探さないとなと。&lt;/p&gt;
&lt;h2 id=&#34;関連ブログなど&#34;&gt;関連ブログなど&lt;/h2&gt;
&lt;p&gt;見つけたら、リンク追加していきます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://skozawa.hatenablog.com/entry/2015/07/17/194709&#34;&gt;Elasticsearch勉強会 in 大阪/京都で発表しました&lt;/a&gt;
* &lt;a href=&#34;http://stop-the-world.hatenablog.com/entry/2015/07/22/014047&#34;&gt;「Elasticsearch での類似文書検索と More Like This Query API 詳解」というタイトルで発表しました&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;その他余談&#34;&gt;その他（余談）&lt;/h2&gt;
&lt;p&gt;大阪のYahoo!さんは立地条件（梅田のすぐそば）がよく、&lt;/p&gt;


&lt;div class=&#34;box&#34; style=&#34;max-width:300&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20150715/yahoo_osaka.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20150715/yahoo_osaka.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;夜景も綺麗でした。大阪城とかも見えてました。（夜景じゃないけど。。。）&lt;/p&gt;


&lt;div class=&#34;box&#34; style=&#34;max-width:600&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20150715/view_from_yahoo.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20150715/view_from_yahoo.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;京都は祇園祭の真っ最中。&lt;/p&gt;


&lt;div class=&#34;box&#34; style=&#34;max-width:300&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20150715/naginata2.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20150715/naginata2.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;水曜日はお休みをいただいて、観光してました。ちょっと日焼けが。。。
おかげで、リフレッシュできました。三十三間堂とか良かった:)&lt;/p&gt;
&lt;p&gt;あまり、関西に縁がない（大阪15年ぶり、京都10年ぶり）ので、
もっとユーザが増えて勉強会の機運が高まると嬉しいなと。:)&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Mappingのすばらしいリファクタリング（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/07/08/great-mapping-refactoring-ja/</link>
      <pubDate>Wed, 08 Jul 2015 18:11:31 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/07/08/great-mapping-refactoring-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：The Great Mapping Refactoring Elasticsearchのユーザの悩みの最も大きなものの一つは、 タイプと</description>
      <content:encoded>&lt;p&gt;&lt;strong&gt;※この記事は次のブログを翻訳したものになります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;https://www.elastic.co/blog/great-mapping-refactoring&#34;&gt;The Great Mapping Refactoring&lt;/a&gt;&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;Elasticsearchのユーザの悩みの最も大きなものの一つは、
タイプとフィールドのマッピングに関する多義性です。
この多義性は、インデックス時の例外やクエリ時の例外、
正しくない結果、リクエストからリクエストへ変化する結果、
また、インデックスの故障やデータのロスを結果として引き起こします。&lt;/p&gt;
&lt;p&gt;Elasticsearchをより強固で予測可能な振る舞いをするようにする作業において、
フィールドやタイプのマッピングをより厳格でより信頼性を高くするかといったことに
多くの変更を費やしました。
多くのケースで、Elasticsearch v2.0で新しいインデックスを作るときにのみ、
新しいルールを強制し、これまでのインデックスに関しては後方互換性を保つようにします。&lt;/p&gt;
&lt;p&gt;しかし、幾つかのケースでは、先ほど説明したようなフィールドマッピングの
コンフリクトなどが存在するため、それらを利用できないです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;コンフリクトしたフィールドのマッピングをもつインデックスはElasticsearch v2.0にはアップグレードできません。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;もし、これらのインデックスのデータが必要ない場合は、インデックスを消せばいいです。
そうでない場合はマッピングを正しくして再度インデックスする必要があるでしょう。&lt;/p&gt;
&lt;p&gt;マッピングを正しく変更することは、私たちが簡単に決めることではありません。
ここからは、現在ある問題点と、私たちがどのように実装して解決したかについて説明します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#conflicting-field-mappings&#34;&gt;フィールドマッピングのコンフリクト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ambiguous-field-lookup&#34;&gt;あいまいなフィールドのルックアップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#type-meta-fields&#34;&gt;タイプのメタフィールド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#analyzer-settings&#34;&gt;アナライザ設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#index_name-and-path&#34;&gt;&lt;code&gt;index_name&lt;/code&gt;と&lt;code&gt;path&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mapping-update&#34;&gt;同期的なマッピングの更新&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#delete-mapping&#34;&gt;マッピングの削除&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#prepare-2_0&#34;&gt;2.0のための準備&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;a-nameconflicting-field-mappingsフィールドマッピングのコンフリクトa&#34;&gt;&lt;a name=&#34;conflicting-field-mappings&#34;&gt;フィールドマッピングのコンフリクト&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;これまで、わたしたちはドキュメントのタイプは「データベースのテーブルのようなもの」と説明していました。
タイプの目的を説明する簡単な方法だったからです。
しかし、残念なことにこれは、真実ではありません。
「同じ」インデックスの「異なるタイプ」にある同じ名前のフィールドは、
内部的に、Luceneのフィールド名が同じものになります。&lt;/p&gt;
&lt;p&gt;もし&lt;code&gt;error&lt;/code&gt;フィールドとして、ドキュメントタイプが&lt;code&gt;apache&lt;/code&gt;のものには数値（integer）を、
ドキュメントタイプが&lt;code&gt;nginx&lt;/code&gt;のものには文字列（string）を割り当てた場合、
Elasticsearchは同じLuceneのフィールドに数値と文字列のデータをもつことになります。
このフィールドに対して、検索やaggregationを行う場合、おかしな結果を受け取るか、例外が帰ってくるか、
インデックスが破損することになります。&lt;/p&gt;
&lt;p&gt;この問題を解決するために、まず、ドキュメントタイプの名前をフィールドの名前の前に追加することを考えました。
各フィールドは完全に別のものとなります。
このアプローチの利点はドキュメントタイプが実際のテーブルのようになることです。&lt;/p&gt;
&lt;p&gt;しかし、この方法には多くの欠点があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;フィールドは常に、他のタイプとは異なるものであると区別するためもしくは、複数のタイプに同じフィールドのクエリのためにワイルドカードをつけた場合、
ドキュメントタイプを前につける必要があります。&lt;/li&gt;
&lt;li&gt;複数のドキュメントタイプに対して同じフィールド名で検索する場合、クエリを個別に発行しなければならなく遅くなります。&lt;/li&gt;
&lt;li&gt;多くの検索で、既存の多くのクエリを壊してしまうために、単純な&lt;code&gt;match&lt;/code&gt;や&lt;code&gt;term&lt;/code&gt;クエリの代わりに、multi-fieldクエリを使う必要があります。&lt;/li&gt;
&lt;li&gt;圧縮の効率の悪さから、ヒープ利用量、ディスク使用量、I/Oなどが、増加します。&lt;/li&gt;
&lt;li&gt;複数のドキュメントタイプに対するaggregationは、global ordinalの利点を利用できなくなるために、遅くなり、メモリの使用量も増えます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;解決方法&#34;&gt;解決方法&lt;/h3&gt;
&lt;p&gt;最終的に、同じインデックスの同じ名前を持つ全てのフィールドは、同じマッピングを持つ必要があるというルールを採用することに決めました。
ただ、&lt;code&gt;copy_to&lt;/code&gt;や&lt;code&gt;enabled&lt;/code&gt;のようなパラメータはタイプごとに指定することができるようになっています。
これにより、データの破損、クエリ時の例外そして、おかしな結果が発生する問題を防ぎます。
クエリとaggregationは現在でも高速なままで、圧縮率を最大化し、ヒープ使用量やディスク使用率の低減させます。&lt;/p&gt;
&lt;p&gt;この解決方法の欠点は、個別のテーブルとしてタイプを扱いたいユーザが彼らの考え方を変える必要があるということです。
これは、思ったよりも問題ではありません。
実際には、多くのフィールド名はデータの明確なタイプを表現しています。
&lt;code&gt;created_date&lt;/code&gt;は常に、日付ですし、&lt;code&gt;number_of_hits&lt;/code&gt;フィールドはいつも数値です。
フィールドマッピングがコンフリクトしているユーザはデータを失ったり、おかしなデータを受け取ったり、データを欠損させています。
ベストプラクティスにユーザが従っているかどうかによらず、インデックス時に正しい振る舞いを強制することが現在の違いです。&lt;/p&gt;
&lt;p&gt;ユーザの多くがコンフリクトしていないフィールドマッピングをもっていれば、
コンフリクトが起きた場合、技術がこれらのシチュエーションを扱うことが可能になると思いませんか？
そこにはいくつかの解決方法があります。&lt;/p&gt;
&lt;h4 id=&#34;タイプの代わりにインデックスを別々に&#34;&gt;タイプの代わりにインデックスを別々に&lt;/h4&gt;
&lt;p&gt;最も簡単な解決方法です。インデックスを別々のインデックスとし、実際のデータベーステーブルのようにします。
インデックスをまたいだ検索はタイプをまたいだ検索のように動作しますし、
ソートやaggregationも同じデータタイプへのクエリのように動作します。これまでと同じ制限です。&lt;/p&gt;
&lt;h4 id=&#34;コンフリクトしたフィールドの名前の変更&#34;&gt;コンフリクトしたフィールドの名前の変更&lt;/h4&gt;
&lt;p&gt;コンフリクトがごくわずかな場合、（Logstashやアプリケーションで使っているものも一緒に）よりわかりやすいフィールド名に変更することで解決できます。
例えば、2つの&lt;code&gt;error&lt;/code&gt;フィールドがあった場合に、&lt;code&gt;error_code&lt;/code&gt;と&lt;code&gt;error_message&lt;/code&gt;に変更します。&lt;/p&gt;
&lt;h4 id=&#34;copy_toもしくはmulti-fieldsを利用&#34;&gt;&lt;code&gt;copy_to&lt;/code&gt;もしくはmulti-fieldsを利用&lt;/h4&gt;
&lt;p&gt;異なるドキュメントタイプのフィールドは別々の&lt;code&gt;copy_to&lt;/code&gt;を設定できます。
元の&lt;code&gt;error&lt;/code&gt;フィールドは&lt;code&gt;index&lt;/code&gt;の設定に&lt;code&gt;no&lt;/code&gt;が設定してあり、全てのドキュメントタイプで無効化されていますが、
特定のタイプだけ、&lt;code&gt;error&lt;/code&gt;フィールドの値を数値の&lt;code&gt;error_code&lt;/code&gt;フィールドにコピーすることができます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PUT my_index/_mapping/mapping_one
{
  &amp;quot;properties&amp;quot;: {
    &amp;quot;error&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
      &amp;quot;index&amp;quot;: &amp;quot;no&amp;quot;,
      &amp;quot;copy_to&amp;quot;: &amp;quot;error_code&amp;quot;
    },
    &amp;quot;error_code&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;他のタイプでは文字列の&lt;code&gt;error_message&lt;/code&gt;にコピーします。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PUT my_index/_mapping/mapping_two
{
  &amp;quot;properties&amp;quot;: {
    &amp;quot;error&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
      &amp;quot;index&amp;quot;: &amp;quot;no&amp;quot;,
      &amp;quot;copy_to&amp;quot;: &amp;quot;error_message&amp;quot;
    },
    &amp;quot;error_message&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;同様の解決方法として&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/master/mapping-core-types.html#multi-fields&#34;&gt;multi-field&lt;/a&gt;も使えます。&lt;/p&gt;
&lt;h4 id=&#34;各データタイプに対してネストしたフィールドに&#34;&gt;各データタイプに対してネストしたフィールドに&lt;/h4&gt;
&lt;p&gt;ときどき、Elasticsearchに送ったドキュメントやドキュメントがもっているフィールドを制御できない場合があります。
部分的なコンフリクトに加え、闇雲に、ユーザが送ってきたフィールドを受け入れると、マッピングが肥大化します。
タイムスタンプやIPアドレスをフィールド名に使うようなドキュメントがあると考えてください。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-nested-type.html&#34;&gt;&lt;code&gt;nested&lt;/code&gt; フィールド&lt;/a&gt;にすることで、&lt;code&gt;str_val&lt;/code&gt;、&lt;code&gt;int_val&lt;/code&gt;、&lt;code&gt;date_val&lt;/code&gt;というような各データタイプを利用できます。&lt;/p&gt;
&lt;p&gt;このアプローチによって、次のドキュメントは&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;message&amp;quot;: &amp;quot;some string&amp;quot;,
  &amp;quot;count&amp;quot;:   1,
  &amp;quot;date&amp;quot;:    &amp;quot;2015-06-01&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;アプリケーションによって、次のようにフォーマットしなおす必要があります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: [
    {&amp;quot;key&amp;quot;: &amp;quot;message&amp;quot;, &amp;quot;str_val&amp;quot;:  &amp;quot;some_string&amp;quot; },
    {&amp;quot;key&amp;quot;: &amp;quot;count&amp;quot;,   &amp;quot;int_val&amp;quot;:  1             },
    {&amp;quot;key&amp;quot;: &amp;quot;date&amp;quot;,    &amp;quot;date_val&amp;quot;: &amp;quot;2015-06-01&amp;quot;  }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;この解決方法は、アプリケーションサイドでより多くの作業が必要ですが、コンフリクトの問題とマッピングの肥大化の問題を同時に解決します。&lt;/p&gt;
&lt;h2 id=&#34;a-nameambiguous-field-lookupあいまいなフィールドのルックアップa&#34;&gt;&lt;a name=&#34;#ambiguous-field-lookup&#34;&gt;あいまいなフィールドのルックアップ&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;現在、フィールドの指定には&amp;quot;short name&amp;quot;、フルパス、ドキュメントタイプを前につけたフルパスが利用できます。
これらのオプションがあいまいさをもたらしています。
サンプルとして次のマッピングをご覧ください。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;mappings&amp;quot;: {
    &amp;quot;user&amp;quot;: {
      &amp;quot;properties&amp;quot;: {
        &amp;quot;title&amp;quot;: {
          &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
        }
      }
    },
    &amp;quot;blog&amp;quot;: {
      &amp;quot;properties&amp;quot;: {
        &amp;quot;title&amp;quot;: {
          &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
        },
        &amp;quot;user&amp;quot;: {
          &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
          &amp;quot;fields&amp;quot;: {
            &amp;quot;title&amp;quot;: {
              &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
            }
          }
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;title&lt;/code&gt;は&lt;code&gt;user.title&lt;/code&gt;、&lt;code&gt;blog.title&lt;/code&gt;、&lt;code&gt;blog.user.title&lt;/code&gt;のどれでしょう？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;user.title&lt;/code&gt;は&lt;code&gt;user.title&lt;/code&gt;または&lt;code&gt;blog.user.title&lt;/code&gt;のどちらでしょう？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;答えは「場合によります。」です。Elasticsearchが最初に見つけたものになります。
フィールドはリクエストごとに変わるため、各ノードでマッピングがどのようにシリアライズされたかに依存します。&lt;/p&gt;
&lt;p&gt;2.0では、フィールドを指定する時に、ドキュメントタイプを除いたフルパス名を使用するべきでしょう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;user.title&lt;/code&gt;は、&lt;code&gt;blog&lt;/code&gt;タイプの&lt;code&gt;user.title&lt;/code&gt;を意味します。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;title&lt;/code&gt;は、&lt;code&gt;user&lt;/code&gt;と&lt;code&gt;blog&lt;/code&gt;タイプの&lt;code&gt;title&lt;/code&gt;フィールドを意味します。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*title&lt;/code&gt;は&lt;code&gt;user.title&lt;/code&gt;と&lt;code&gt;title&lt;/code&gt;フィールドの両方にマッチします。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;user&lt;/code&gt;タイプの&lt;code&gt;title&lt;/code&gt;フィールドと&lt;code&gt;blog&lt;/code&gt;タイプの&lt;code&gt;title&lt;/code&gt;の違いはどのように指定するのでしょう？&lt;/p&gt;
&lt;p&gt;指定できません。&lt;a href=&#34;#conflicting-field-mappings&#34;&gt;フィールドマッピングのコンフリクト&lt;/a&gt;で説明した変更により、
&lt;code&gt;title&lt;/code&gt;フィールドは両方のタイプで同じフィールドになります。
本質的に&lt;code&gt;title&lt;/code&gt;と呼ばれる1つのフィールドになります。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;user.&lt;/code&gt;や&lt;code&gt;blog.&lt;/code&gt;のようなタイプのプレフィックスはタイプを指定することによるフィルタリングで効果があります。
クエリの&lt;code&gt;blog.title&lt;/code&gt;フィールドは&lt;code&gt;blog&lt;/code&gt;タイプのドキュメントだけを検索し、&lt;code&gt;user&lt;/code&gt;タイプのドキュメントを検索しません。
このシンタックスは誤解を招きやすいです。なぜなら、いつでも動作するわけではないからです。
aggregationやsuggestionはすべてのタイプに関する結果を含みます。
この利用のため、上記の例のあいまいさがあるので、タイプのプレフィックスはサポートしません。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重要&lt;/strong&gt; short nameやタイププレフィックスを利用したpercolatorは更新する必要があります。&lt;/p&gt;
&lt;h2 id=&#34;a-nametype-meta-fieldsタイプのメタフィールドa&#34;&gt;&lt;a name=&#34;type-meta-fields&#34;&gt;タイプのメタフィールド&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;すべてのタイプはメタフィールドを持っています。&lt;code&gt;_id&lt;/code&gt;、&lt;code&gt;_index&lt;/code&gt;、&lt;code&gt;_routing&lt;/code&gt;、&lt;code&gt;_parent&lt;/code&gt;、&lt;code&gt;_timestamp&lt;/code&gt;などです。
これらのほとんどは&lt;code&gt;index&lt;/code&gt;、&lt;code&gt;store&lt;/code&gt;、&lt;code&gt;path&lt;/code&gt;のような幾つかの設定をサポートしています。
これらの設定について次のようにシンプルにしました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_id&lt;/code&gt;と&lt;code&gt;_type&lt;/code&gt;は変更不可&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_index&lt;/code&gt;は、ドキュメントのもつインデックスを保存するために&lt;code&gt;enabled&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_routing&lt;/code&gt;は&lt;code&gt;required&lt;/code&gt;のみを指定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_size&lt;/code&gt;は&lt;code&gt;enabled&lt;/code&gt;のみ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_timestamp&lt;/code&gt;はデフォルトで保存される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_boost&lt;/code&gt;と&lt;code&gt;_analyzer&lt;/code&gt;は廃止。古いインデックスのものは無視される&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ドキュメントのフィールドから&lt;code&gt;_id&lt;/code&gt;と&lt;code&gt;_routing&lt;/code&gt;と&lt;code&gt;_timestamp&lt;/code&gt;の値を抽出することができました。
この機能は廃止されます。これは、ドキュメントのパースとコンフリクトを起こすためです。
代わりに、これらの値はURLもしくはquery stringで指定可能です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_boost&lt;/code&gt;と&lt;code&gt;_analyzer&lt;/code&gt;フィールドは例外で、すでにあるメタフィールドの設定は古いインデックスのものが採用されます。&lt;/p&gt;
&lt;h2 id=&#34;a-nameanalyzer-settingsアナライザ設定a&#34;&gt;&lt;a name=&#34;analyzer-settings&#34;&gt;アナライザ設定&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;これまで、indexとsearchのアナライザがインデックス、タイプ、フィールド、ドキュメント（&lt;code&gt;_analyzer&lt;/code&gt;フィールドで）の
それぞれのレベルで指定可能でした。
同じフィールドに対して異なるanalysis chainの組み合わせができることにより、おかしな関連度を引き起こしていました。
フィールドマッピングのコンフリクトを解消することに加え、アナライザの設定も簡略化します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Analyzedな文字列フィールドは、&lt;code&gt;analyzer&lt;/code&gt;設定と&lt;code&gt;search_analyzer&lt;/code&gt;設定（&lt;code&gt;analyzer&lt;/code&gt;設定の値をデフォルトとする）を指定できます。&lt;code&gt;index_analyzer&lt;/code&gt;設定は&lt;code&gt;analyzer&lt;/code&gt;となります。&lt;/li&gt;
&lt;li&gt;複数のタイプで同じ名前のフィールドがある場合、フィールドはすべて、同じアナライザの設定を持たなければなりません。&lt;/li&gt;
&lt;li&gt;タイプレベルのデフォルト設定の&lt;code&gt;analyzer&lt;/code&gt;、&lt;code&gt;index_analyzer&lt;/code&gt;、&lt;code&gt;search_analyzer&lt;/code&gt;設定は廃止されます。&lt;/li&gt;
&lt;li&gt;デフォルトアナライザはインデックスごとにインデックスの&lt;code&gt;analysis&lt;/code&gt;設定で設定します。これらは&lt;code&gt;default&lt;/code&gt;もしくは&lt;code&gt;default_search&lt;/code&gt;という名前で設定します。&lt;/li&gt;
&lt;li&gt;ドキュメントごとの&lt;code&gt;_analyzer&lt;/code&gt;フィールドはサポートしません。既存のインデックスのものは無視されます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;a-nameindex_name-and-pathindex_nameとpatha&#34;&gt;&lt;a name=&#34;index_name-and-path&#34;&gt;&lt;code&gt;index_name&lt;/code&gt;と&lt;code&gt;path&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;index_name&lt;/code&gt;と&lt;code&gt;path&lt;/code&gt;設定は（Elasticsearch v1.0.0から利用できる）&lt;code&gt;copy_to&lt;/code&gt;によって置き換わりました。
既存のインデックスについてはこれらは機能しますが、新しいインデックスでは指定できません。&lt;/p&gt;
&lt;h2 id=&#34;a-namemapping-update同期的なマッピングの更新a&#34;&gt;&lt;a name=&#34;mapping-update&#34;&gt;同期的なマッピングの更新&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;現在、これまで存在していないフィールドを含むドキュメントをインデキシングするとき、
フィールドはローカルのマッピングに追加され、それから、マスターに変更（新しいマッピングをすべてのシャードに適用する更新）が送信されていました。
同時に2つのシャードに同じフィールドを追加することができます。
また、そのとき、異なる2つのマッピングがある可能性があります。
1つは&lt;code&gt;double&lt;/code&gt;でもう1つは&lt;code&gt;long&lt;/code&gt;だったり、&lt;code&gt;string&lt;/code&gt;と&lt;code&gt;date&lt;/code&gt;だったりと。&lt;/p&gt;
&lt;p&gt;このような場合、マスターに最初に届いたマッピングが採用されます。
しかし、「負けた」マッピングをもつシャードでは、すでに異なるデータのタイプを利用しているため、
これを利用し続けます。
そのご、ノードをリスタートしたときに、シャードが別のノードに移動し、マスターにあるマッピングを適用します。
このとき、インデックスが破損したりデータを失ったりします。&lt;/p&gt;
&lt;p&gt;これを防ぐために、シャードはインデキシングを続ける前に、新しいマッピングがマスターによって採用されるかどうかを待つようになりました。
これはすべてのマッピングが安全に更新されます。
新しいフィールドをもっているドキュメントをインデキシングすると、前よりも処理が遅くなるでしょう。
受け入れられることを待つ必要があるためです。
しかし、クラスタの状態の更新処理のスピードが次の2つの新しい機能によって大きく改善されています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;クラスタ状態の差分&lt;/strong&gt;：可能であれば、クラスタの状態の変更はクラスタ状態全体の変更ではなく、部分的なものとする。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;シャードへのリクエストの非同期化&lt;/strong&gt;：シャードアロケーション処理中に、マスタノードは、
割り当てられていないシャードのコピーの日付が最新のものを持っているかを見つけるために、リクエストをデータノードに対して送信します。
ここで、クラスタ状態を変更する呼び出しがブロッキングで行われていました。v1.6.0から、このリクエストはバックグラウンドで非同期で実行されます。
これにより、マッピング更新のようなペンディングタスクをより早く処理できるようになります。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;a-namedelete-mappingマッピングの削除a&#34;&gt;&lt;a name=&#34;delete-mapping&#34;&gt;マッピングの削除&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;（そのタイプのドキュメントがある場合）タイプマッピングを削除できないようにします。
マッピングを削除した後に、削除されたフィールドの情報は、Luceneレベルでは存在し続け、
もし、後から同じ名前のフィールドが追加されたときにインデックスの破損を引き起こします。
そのようなマッピングは残しておくか、新しいインデックスに再インデックスすることができます。&lt;/p&gt;
&lt;h2 id=&#34;a-nameprepare-2_020のための準備a&#34;&gt;&lt;a name=&#34;prepare-2_0&#34;&gt;2.0のための準備&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;マッピングがコンフリクトしているかどうかを決めることは、手動で行うには慎重に行う必要があります。
私たちは、&lt;a href=&#34;https://github.com/elastic/elasticsearch-migration&#34;&gt;Elasticsearch Migration Plugin&lt;/a&gt;を提供します。
これは、2.0で非推奨になったり廃止された機能を利用しているかどうかを見つけるために役に立つでしょう。&lt;/p&gt;
&lt;p&gt;もし、コンフリクトしたマッピングを持っている場合、
正しいマッピングを持つ新しいインデックスにデータを再インデックスするか、
必要ないなら削除します。
これらのコンフリクトを解決しない限り2.0にはアップグレードできないでしょう。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 2.0.0.beta1リリース間近（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/07/07/elasticsearch-2-dot-0-0-dot-beta1-coming-soon-ja/</link>
      <pubDate>Tue, 07 Jul 2015 15:25:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/07/07/elasticsearch-2-dot-0-0-dot-beta1-coming-soon-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Elasticsearch 2.0.0.beta1 coming soon! Elasticsearch 2.0.0.beta1のリリースの準備をしています。</description>
      <content:encoded>&lt;p&gt;&lt;strong&gt;※この記事は次のブログを翻訳したものになります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;https://www.elastic.co/blog/elasticsearch-2.0.0.beta1-coming-soon&#34;&gt;Elasticsearch 2.0.0.beta1 coming soon!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Elasticsearch 2.0.0.beta1のリリースの準備をしています。
これは、Lucene 5.2.1に含まれる多くの改善が利用できるようになります。
このリリースに関するいくつかの機能は次のようなものです。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h4 id=&#34;pipeline-aggregations&#34;&gt;Pipeline Aggregations&lt;/h4&gt;
&lt;p&gt;差分や移動平均、他のAggregationsの結果に対する
series arithmeticのようなaggregationが利用可能になります。
この機能は、これまでは、クライアントサイドで実行する必要がありました。
しかし、この計算をより強力な解析クエリを構築してElasticsearchで
実行することができるようになります。
クライアントのコードをより簡潔にすることができます。
これにより、予測解析や異常検知のようなことができるようになります。&lt;/p&gt;
&lt;h4 id=&#34;queryfilter-merging&#34;&gt;Query/Filter merging&lt;/h4&gt;
&lt;p&gt;Filterはなくなります。全てのフィルタは、クエリになります。
クエリコンテキストで利用されると、効率的に関連度スコアを計算し、
フィルタコンテキストで利用されると、単に、
マッチしていないドキュメントを除外する（今のフィルタのようなもの）だけです
この変更は、クエリ実行が自動的に、より効率的な順番で実行されるように
最適化されることを意味します。
例えば、フレーズやgeoクエリのような遅いクエリは
まず、近似フェーズを実行し、それから、より遅い実際のフェーズが
結果に対して行われます。
フィルタコンテキストにおいて、頻繁に利用される条件は自動的にキャッシュされます。&lt;/p&gt;
&lt;h4 id=&#34;configurable-store-compression&#34;&gt;Configurable store compression&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;index.codec&lt;/code&gt;設定により、高速化のためのLZ4圧縮（&lt;code&gt;default&lt;/code&gt;）か
インデックスサイズを小さくするためのDEFLATE（&lt;code&gt;best_compression&lt;/code&gt;）を
選択できます。これは、ロギングでとくに役に立ちます。
これにより、古いインデックスオプティマイズする前に&lt;code&gt;best_compression&lt;/code&gt;に
変更できます。&lt;/p&gt;
&lt;p&gt;これらに関するブログ記事がすぐに公開されるでしょう。&lt;/p&gt;
&lt;h3 id=&#34;performance-and-resilience&#34;&gt;Performance and resilience&lt;/h3&gt;
&lt;p&gt;以降では、新しいメジャーリリースに関して簡単に紹介します。
2.0の変更の多くは内部の機能に関するものであり、
直接ユーザに関連するわけではないからです。&lt;/p&gt;
&lt;p&gt;新しいメジャーバージョンのテーマは、パフォーマンス、安定性、
堅牢性、予測可能性、そして使い勝手の良さです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;物事が予測した通りに動作する&lt;/li&gt;
&lt;li&gt;何か問題があった場合に、Elasticsearchから役立つフィードバックがある&lt;/li&gt;
&lt;li&gt;ローレベルの設定を扱う必要はなく、Elasticsearchが良い設定を決定する&lt;/li&gt;
&lt;li&gt;これらに加え、データがより安全に&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの目標は完全ではありません。
まだ、多くの改善があります。しかし、2.xブランチで、
すでに500コミットを超える大きな改善が実施されています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;on-diskの doc valuesをデフォルトで利用（これまではfielddata）。
ヒープ使用量を減らして、スケーラビリティを向上&lt;/li&gt;
&lt;li&gt;セグメントマージ処理中のメモリ使用量の削減&lt;/li&gt;
&lt;li&gt;normsの圧縮率の改善。ヒープスペースを利用している大きな処理のひとつだったため。&lt;/li&gt;
&lt;li&gt;全てのリクエストの後に、transaction logをfsyncすることで、デフォルトで耐久性を向上&lt;/li&gt;
&lt;li&gt;全てのファイル変更をアトミックに（部分的なファイルの書き出しはなし）&lt;/li&gt;
&lt;li&gt;マージを自動で制限&lt;/li&gt;
&lt;li&gt;フレーズクエリやスパンクエリを高速化&lt;/li&gt;
&lt;li&gt;フィルタキャッシュをより効率化するための圧縮されたビットセット&lt;/li&gt;
&lt;li&gt;クラスタ状態の差分更新&lt;/li&gt;
&lt;li&gt;構造化されたJSON形式の例外&lt;/li&gt;
&lt;li&gt;よりきめ細かいLuceneのメモリレポート&lt;/li&gt;
&lt;li&gt;デフォルトではlocalhostにのみバインド。開発のノードが他のクラスタにジョインするのを防ぐ&lt;/li&gt;
&lt;li&gt;parent/childのクエリ実行最適化のためにリライト&lt;/li&gt;
&lt;li&gt;Java Security Managerで必要最小限なパーミッションで実行&lt;/li&gt;
&lt;li&gt;全てのコアなプラグインをelasticsearchリポジトリに移行し、Elasticsearchのバージョンに同期してリリースされる予定&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;アップグレード前に&#34;&gt;アップグレード前に&lt;/h2&gt;
&lt;p&gt;メジャーバージョンのアップグレードは問題のあるものを一掃する機会を与えてくれます。
できる限り、これらの変更をアップグレードするために、簡単な方法を提供しようとしています。
しかし、Elasticsearch 2.0にアップグレードする前に、必要な処理が2つあります。&lt;/p&gt;
&lt;p&gt;1つ目は、フィールドとタイプマッピングに関することです。
mapping APIは、現在、それほど厳密ではありません。
内蔵された保護機構を提供する代わりに、ユーザがベストプラクティスを知っていると信頼していました。
2.0では、mappingはより厳密で安全ですが、いくつかの変更では、後方互換性を保っていません。
詳細については&lt;a href=&#34;https://www.elastic.co/blog/great-mapping-refactoring&#34;&gt;The Great Mapping Recatoring&lt;/a&gt;をごらんください。&lt;/p&gt;
&lt;p&gt;2つ目はElasticsearch 0.20以前のユーザに関する変更です。
これは、Lucene 3.xを使っています。
Elasticsearch 2.xはLucene 5をベースにしています。
Lucene 5はLucene 4.xによって作成されたインデックスの読み込みはサポートしていますが、
Lucene 3.xに関してはサポートしていません。&lt;/p&gt;
&lt;p&gt;Elasticsearch 0.20以前のバージョンによって生成されたインデックスを持っている場合、
Elasticsearch 2.xのクラスタをスタートすることはできません。
これらの古いインデックスを削除するか、Elaticsearch 1.6.0以上に含まれている
&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-upgrade.html&#34;&gt;upgrade API&lt;/a&gt;を使用してアップグレードする必要があります。&lt;/p&gt;
&lt;p&gt;upgrade APIの実行は2つのジョブを実行します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;古いLuceneフォーマットのセグメントを最新のフォーマットで書き換えます&lt;/li&gt;
&lt;li&gt;Elasticsearch 2.xによって読み込めるようという印をインデックスに追加します&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;全てのセグメントを最新バージョンにアップグレードするのも良い案ですが、
アップグレード前に必要な処理を最小限に抑えることも可能です。
（Lucene 3.xのセグメントだけをアップグレード）
その場合は、&lt;code&gt;only_ancient_segments&lt;/code&gt;パラメータを指定します。&lt;/p&gt;
&lt;h2 id=&#34;elasticsearch-migration-plugin&#34;&gt;Elasticsearch Migration Plugin&lt;/h2&gt;
&lt;p&gt;Elasticsearch 2.0 に移行する前に、インデックスがアップグレードが必要なのか、
ほかになにかするべきことがあるのかをチェックする助けになる
Elasticsearch Migration Pluginをリリースしました。&lt;/p&gt;
&lt;p&gt;まず、プラグインをインストールします&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./bin/plugin -i elastic/elasticsearch-migration
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;プラグインのインストール後はノードのリスタートは必要ありません。&lt;/p&gt;
&lt;p&gt;以下のリンクをブラウザで開きます。&lt;/p&gt;
&lt;p&gt;http://localhost:9200/_plugin/migration&lt;/p&gt;
&lt;p&gt;（&lt;code&gt;localhost:9200&lt;/code&gt;はインストールしたホスト名に変更してください。）&lt;/p&gt;
&lt;p&gt;Migration pluginに関してバグやご意見がある場合は、&lt;a href=&#34;http://github.com/elastic/elasticsearch-migration/issues&#34;&gt;GitHubのIssue&lt;/a&gt;にお願いします。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>さらに進化したFound（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/07/07/we-just-made-found-more-awesome-ja/</link>
      <pubDate>Tue, 07 Jul 2015 15:20:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/07/07/we-just-made-found-more-awesome-ja/</guid>
      <description>4ヶ月前に、Found joined our team at Elasticをアナウンスしました。 Foundの素晴らしいチームと一緒に仕事をしていますが、彼らによって、より</description>
      <content:encoded>&lt;p&gt;4ヶ月前に、&lt;a href=&#34;https://www.elastic.co/blog/welcome-found&#34;&gt;Found joined our team at Elastic&lt;/a&gt;をアナウンスしました。
Foundの素晴らしいチームと一緒に仕事をしていますが、彼らによって、より素晴らしい
hosted Elasticsearchを提供することになりました。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;私たちがともに密接に働くことにより、本日（2015/7/1）、
&lt;a href=&#34;https://www.elastic.co/products/found&#34;&gt;新しい2つのFound&lt;/a&gt;を提供することになりました。
Found StandardはこれまでのFoundの機能に加え、さらに低価格を提供します。
Found Premiumは、SLAサポートと、ShieldやWatcherを将来Found上で提供します。&lt;/p&gt;
&lt;h2 id=&#34;found-standard&#34;&gt;Found Standard&lt;/h2&gt;
&lt;p&gt;Foundは素晴らしいです。専用のElasticsearchクラスタ、簡単なスケール、
ビルトインのセキュリティそして、時間単位での課金などを持っています。
私たちは、hosted Elasticsearchを探している方に、
Foundが適したソリューションであると思っていますし、
すべての方に利用できて手頃な価格であるということを確信したいと思っています。&lt;/p&gt;
&lt;p&gt;本日（2015/07/01）からFoundの価格をかなり低価格にし、
&lt;strong&gt;月額50ドル以下&lt;/strong&gt;でhosted Elasticsearchを簡単に試してもらえるようにしました。&lt;/p&gt;
&lt;p&gt;価格を下げることは正しい重要なステップですが、
Foundを利用している全ての人に、より良い経験を持っていただきたいと考えています。
低価格化と一緒に、&lt;strong&gt;free backups&lt;/strong&gt;と&lt;strong&gt;built in SSD&lt;/strong&gt;もFoundで提供を始めることになります。&lt;/p&gt;
&lt;p&gt;Foundの重要な特徴の一つが、高可用性のために、クラスタをいくつのデータセンターに持つかを
選択できることです。
データは重要です。これが正しい選択でユーザの助けになると考えています。
これにより、私たちの価格は、&lt;strong&gt;複数のデータセンターにより安価に&lt;/strong&gt;配置することができます。&lt;/p&gt;
&lt;p&gt;また、KibanaもElasticsearchのデータを可視化する素晴らしい方法だと考えています。
Kibana 4が最新バージョンですが、
これは、サーバサイドコンポーネントを持っています。
これは、サービスとしてこれを提供するために、追加の料金がかかることを意味します。
Foundチームが築いた素晴らしい基盤とKibanaチームの努力により、
hosted Elasticsearchクラスタで&lt;strong&gt;無料のKibana 4&lt;/strong&gt;を7月15日より提供することになりました。&lt;/p&gt;
&lt;h2 id=&#34;found-premium&#34;&gt;Found Premium&lt;/h2&gt;
&lt;p&gt;また、私たちは、オープンソースプロダクトに関してサブスクリプションを提供していますが、
Found Standardに対しても提供することになりました。
これが、Found Premiumです。&lt;/p&gt;
&lt;p&gt;フォーラムベースのサポートよりもSLAベースのサポートを望んでいる場合、
プロダクトを開発しているチームからのサポートを受けることができるオプションを
提供し始めました。
クリティカルなイベントを持っていたり、私たちのプロダクトに関する
問題を予測するためのベストなヘルプやガイダンス、アドバイスを探しているような場合にサポートします。&lt;/p&gt;
&lt;p&gt;さらに近い将来、サブスクリプションの一部として、&lt;a href=&#34;https://www.elastic.co/products/shield&#34;&gt;Shield&lt;/a&gt;（Elasticasearchのセキュリティプラグイン）や&lt;a href=&#34;https://www.elastic.co/products/watcher&#34;&gt;Watcher&lt;/a&gt;（アラーティングプラグイン）が利用できるようになります。&lt;/p&gt;
&lt;p&gt;私たちのチームがともに働き、多くのことを可能にし、すばらしい仕事をユーザに提供したかを
将来も楽しみです。
私は非常に誇りに思っていますし、気に入っていただけたらと思っています。
ぜひ、&lt;a href=&#34;https://www.elastic.co/webinars/getting-started-with-found&#34;&gt;7/15のWebnarに参加して&lt;/a&gt;くわしい話を聞いていただき、疑問を解消してください。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 1.6.0リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/06/10/elasticsearch-1-6-0-released-ja/</link>
      <pubDate>Wed, 10 Jun 2015 13:31:02 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/06/10/elasticsearch-1-6-0-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Elasticsearch 1.6.0 released 本日（6/9）、Lucene 4.10.4ベースのElas</description>
      <content:encoded>&lt;p&gt;&lt;strong&gt;※この記事は次のブログを翻訳したものになります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;https://www.elastic.co/blog/elasticsearch-1-6-0-released&#34;&gt;Elasticsearch 1.6.0 released&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本日（6/9）、&lt;strong&gt;Lucene 4.10.4&lt;/strong&gt;ベースの&lt;strong&gt;Elasticsearch 1.6.0&lt;/strong&gt;をリリースしました。
このリリースはElasticsearchの最新の安定バージョンとなります。
また、素晴らしい新機能がいくつか追加されています。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;ul&gt;
&lt;li&gt;synced flushによるリスタートの高速化
* シャード配置は保留中のタスクをブロックしない&lt;/li&gt;
&lt;li&gt;レスポンスボディのJSONのフィルタリング&lt;/li&gt;
&lt;li&gt;共有ファイルシステムリポジトリに対するセキュリティフィックス&lt;/li&gt;
&lt;li&gt;古いインデックスのためのUpgrade API&lt;/li&gt;
&lt;li&gt;Kibanaユーザのためのハイライトの強化&lt;/li&gt;
&lt;li&gt;Windowsユーザのための&lt;code&gt;mlockall&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;より詳細なスクリプト設定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/downloads/past-releases/elasticsearch-1-6-0&#34;&gt;すべての変更リストとダウンロード&lt;/a&gt;はこちらをごらんください。&lt;/p&gt;
&lt;h2 id=&#34;synced-flushによるリスタートの高速化&#34;&gt;synced flushによるリスタートの高速化&lt;/h2&gt;
&lt;p&gt;1.6.0より前のバージョンでは、メンテナンスやローリングアップグレード時の
ノードの再起動で、必要であるかどうかに関わらず、多くの場合、
ノードのすべてのシャードのすべてのデータを再度コピーする必要がありました。
この新しいsynced flush機能により、
sync-flushされたインデックスに対して、既存のデータを再利用し、
より早くクラスタを正常な状態にすることができるようにします。&lt;/p&gt;
&lt;p&gt;ここで、この変更以前にどのように動いていたかを説明します。
すでにあるレプリカシャードは、ノードがリスタートした後に、
プライマリから復元するときに、
最初のステップはプライマリにあるセグメントとレプリカにあるセグメントを
比較することです。そして、セグメントに違いがあった場合にコピーされます。
問題は、セグメントプライマリのセグメントのマージと
レプリカのセグメントのマージが別々に起こっており、
各シャードのセグメントが完全に異なるが、
それらが同じデータを持っているという点です。&lt;/p&gt;
&lt;p&gt;新しいsynced-flush機能では、&lt;code&gt;sync_id&lt;/code&gt;がプライマリと
レプリカシャードに、シャードのコンテンツが同一であるという判別するために、
書き込まれます。これは、リカバリがセグメントの比較のステップを
スキップできることを意味します。
リカバリのスピードを高速にします。&lt;/p&gt;
&lt;p&gt;synced flushはアイドル状態のインデックスで自動的に実行されます。
直前の5分間でデータが登録、更新削除されていないインデックスに対してです。
これは、ロギングのユースケースで特に役に立ちます。
機能のインデックスはインデキシングがストップしたあとの5分で自動的に
syncされるでしょう。&lt;/p&gt;
&lt;p&gt;ノードのリスタートやクラスタのリスタートが必要で、
自動的に発生するsyncを待てない場合は次のようなことが可能です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;インデキシングを停止（実行中のリクエストが停止するのも待つ）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-cluster.html&#34;&gt;シャードのアロケーションを停止&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-synced-flush.html&#34;&gt;synced-flush&lt;/a&gt;リクエストの発行&lt;/li&gt;
&lt;li&gt;ノードのリスタート&lt;/li&gt;
&lt;li&gt;シャードのアロケーションの再開&lt;/li&gt;
&lt;li&gt;クラスタの状態がグリーンになるまで待つ&lt;/li&gt;
&lt;li&gt;インデキシングの再開&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &amp;ldquo;シャードのアロケーションを停止&amp;quot;のステップが必要です。
これがない場合、Elasticsearchはノードの再起動が始まると、
異なるノードにシャードの再配置を始めます。
これは、新しいノードにシャードデータの全てをコピーする必要があります。&lt;/p&gt;
&lt;p&gt;ドキュメントのインデキシング、更新、削除のあとに最初のフラッシュが
発生したときに、
シャードの&lt;code&gt;sync_id&lt;/code&gt;が自動的に無効化されます。
詳細については&lt;a href=&#34;https://github.com/elastic/elasticsearch/issues/11336&#34;&gt;#11336&lt;/a&gt;と&lt;a href=&#34;https://github.com/elastic/elasticsearch/issues/11179&#34;&gt;#11179&lt;/a&gt;をごらんください。&lt;/p&gt;
&lt;h2 id=&#34;シャード配置は保留中のタスクをブロックしない&#34;&gt;シャード配置は保留中のタスクをブロックしない&lt;/h2&gt;
&lt;p&gt;多数のノードやインデックスを持っているユーザは
クラスタ全体のリスタートのあとのシャードのリカバリで、
長い間、リカバリが止まって見えることに気づいたかもしれません。
これらのリカバリが止まって見える間は、クラスタ設定の更新のような軽微なアクションでさえ、
例外が発生したり、その設定が反映されるまでに長時間かかるといったことが起きていました。
この問題の兆候は保留中のタスクのキューが大きくなることです。&lt;/p&gt;
&lt;p&gt;これらの遅延の原因はシャードの配置のプロセスにあります。
配置されるべきシャードのコピーを
持っているのがどのノードかを全てのデータノードに聞きます。
多くのシャードや遅いディスクを持ったデータノードは
反応するのに時間がかかります。
特に、シャードのリカバリがすでにI/Oを利用しているような時です。
このバージョン以前のものは、シャード情報のためのリクエストを
同期的に処理していました。
クラスタ状態の更新はアロケーションプロセスを続けるために
必要な情報を待っている間、ブロックされます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/elastic/elasticsearch/issues/11262&#34;&gt;#11262&lt;/a&gt;での変更は
この情報のためのリクエストを非同期にします。
クラスタ状態の更新はこのタスクによってブロックされません。
これは、保留中のタスクがより早く処理でき、
クラスタが変更に対してより早く反応できます。
処理中のshard infoリクエストの数は
&lt;code&gt;number_of_in_flight_fetch&lt;/code&gt;キーとしてcluster-health APIで取得できます。&lt;/p&gt;
&lt;p&gt;さらに、シャードがある理由で復旧に失敗すると、
クラスタは、シャードのリカバリが成功するまで、同じノードに対して
シャードをアロケーションしないようにします。&lt;/p&gt;
&lt;h2 id=&#34;レスポンスボディのjsonのフィルタリング&#34;&gt;レスポンスボディのJSONのフィルタリング&lt;/h2&gt;
&lt;p&gt;Elasticsearchは全ての情報を返します。
例えば、検索リクエストは&lt;code&gt;_index&lt;/code&gt;、&lt;code&gt;_type&lt;/code&gt;、&lt;code&gt;_id&lt;/code&gt;、
&lt;code&gt;_score&lt;/code&gt;、&lt;code&gt;_source&lt;/code&gt;を返します。
しかし、全ての情報が必要でない場合があります。
また、これらのデータを遅いネットワークで転送することは
遅延の原因となります。&lt;/p&gt;
&lt;p&gt;ユーザはこの検索メタデータを無効にするための特殊な設定を
行ったり、他のAPIのレスポンスのフォーマットを
コントロールするための設定があります。
&lt;a href=&#34;https://github.com/elastic/elasticsearch/issues/10980&#34;&gt;#10980&lt;/a&gt;の変更で、任意のレスポンスボディのJSONに対して、
必要な要素だけを取得する機能が追加されました。
&lt;code&gt;filter_path&lt;/code&gt;パラメータを使用します。&lt;/p&gt;
&lt;p&gt;例えば、検索リクエストからは&lt;code&gt;total&lt;/code&gt;数と、各要素の&lt;code&gt;hits&lt;/code&gt;の配列を欲しい場合、
次のように指定します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET _search?filter_path=hits.total,hits.hits
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-nodes-info.html&#34;&gt;nodes-info API&lt;/a&gt;から各ノードの&lt;code&gt;http_address&lt;/code&gt;だけを取得したい場合は、
ノード名の部分にワイルドカード(&lt;code&gt;*&lt;/code&gt;)を使用します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET _nodes?filter_path=nodes.*.http_address
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;単一の&lt;code&gt;*&lt;/code&gt;がJSON階層の1つの階層に対しての
ワイルドカードとして機能します。
2つの&lt;code&gt;**&lt;/code&gt;は複数階層に対してとなります。
複数のフィルタはカンマ区切りで指定可能です。
詳細について&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/common-options.html#_response_filtering&#34;&gt;Response filtering&lt;/a&gt;をごらんください。&lt;/p&gt;
&lt;h2 id=&#34;共有ファイルシステムリポジトリに対するセキュリティフィックス&#34;&gt;共有ファイルシステムリポジトリに対するセキュリティフィックス&lt;/h2&gt;
&lt;p&gt;本リリースはsnapshot-restoreで使われる
&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html#_shared_file_system_repository&#34;&gt;共有ファイルシステムリポジトリ&lt;/a&gt;に関するセキュリティ強化の変更が含まれます。
現在、Elasticsearchのユーザは、Elasticsearchプロセスによって書き込み可能
任意のディレクトリに&lt;code&gt;.snapshot&lt;/code&gt;ファイルを書き込むことができます。
&lt;a href=&#34;https://github.com/elastic/elasticsearch/issues/11284&#34;&gt;#11284&lt;/a&gt;の変更で、リポジトリのために使用できるディレクトリを
強制的に指定できるようになりました。
適切なディレクトリが&lt;code&gt;config/elasticsearch.yml&lt;/code&gt;設定ファイルの
&lt;code&gt;path.repo&lt;/code&gt;に指定される必要があります。&lt;/p&gt;
&lt;p&gt;次のように設定されたElasticsearchインスタンスはこのセキュリティ問題に対して影響を受けにくいです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;root&lt;/code&gt;ではなく&lt;code&gt;elasticsearch&lt;/code&gt;ユーザとしてElasticsearchを実行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elasticsearch&lt;/code&gt;ユーザが&lt;code&gt;data&lt;/code&gt;ディレクトリに対してのみ
書き込み権限を持っていて、共有ファイルシステムリポジトリに対しても利用できる&lt;/li&gt;
&lt;li&gt;ファイアウォールやプロキシ、Shieldを使って、snapshot APIの実行を任意のユーザから実行されるのを防いでいる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この問題を&lt;a href=&#34;https://www.elastic.co/community/security&#34;&gt;CVE-2015-4165&lt;/a&gt;としています。&lt;/p&gt;
&lt;h2 id=&#34;古いインデックスのためのupgrade-api&#34;&gt;古いインデックスのためのUpgrade API&lt;/h2&gt;
&lt;p&gt;Elasticsearch 2.0以降では、
Lucene 5ベースとなり、Lucene 3
（Elasticsearchのバージョンでは0.90以前）
によって書き出されたセグメントを含んだインデックスを読み込むことが
できなくなります。
これらの「古いインデックス」はLucene 4にアップグレードする必要があり、
2.0-compatibleとして印をつける必要があります。
そうしなければ、Elasticsearch 2.0に以降できないでしょう。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-upgrade.html&#34;&gt;upgrade API&lt;/a&gt;は
、最新のLuceneフォーマットにインデックスにある全てのセグメントを
アップグレードするためにすでに利用できます。
また、最新のフォーマットは性能向上やバグフィックスといった利点もあります。
さらに、2.0-compatibleとして古いインデックスをマークする設定も
書き込むことができます。
さらに、&lt;code&gt;upgrade_only_ancient_segments&lt;/code&gt;オプションが
Lucene 3のセグメントだけをアップグレードするために利用でき、
移行前の必要な処理を減らすことができます。&lt;/p&gt;
&lt;h2 id=&#34;kibanaユーザのためのハイライトの強化&#34;&gt;Kibanaユーザのためのハイライトの強化&lt;/h2&gt;
&lt;p&gt;KibanaユーザはElasticsearchのハイライトについて2つの点で問題を見つけていました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ワイルドカードでフィールド名を指定した場合に、ハイライトに適さないフィールドも帰ってくる（日付や数値のフィールドなど）&lt;/li&gt;
&lt;li&gt;古いインデックスが非常に大きなターム（&amp;gt; 32kB）を含んでいて、ハイライトが失敗する。
最近のバージョンでは、これらの大きなタームはインデックス時に除去される&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/elastic/elasticsearch/issues/11364&#34;&gt;#11364&lt;/a&gt;の変更で
これらの問題が修正されました。
ワイルドカードを利用したフィールド名では、stringフィールドのみを返し、非常に長いタームによる例外は無視するようになります。&lt;/p&gt;
&lt;h2 id=&#34;windowsユーザのためのmlockall&#34;&gt;Windowsユーザのための&lt;code&gt;mlockall&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;速いGCはノードの安定性と性能について重要です。
小さなバイトのヒープでさえ、ディスクにスワップすることを許可してしまうと、GCに対して大きな影響が出てしまいます。
ですので、これらのコストは排除されるべきです。&lt;/p&gt;
&lt;p&gt;Linuxユーザは&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-configuration.html#setup-configuration-memory&#34;&gt;&lt;code&gt;bootstrap.mloclall&lt;/code&gt;設定&lt;/a&gt;による恩恵を受けています。
これは、RAMにJVMのヒープを起動時にロックします。
&lt;a href=&#34;https://github.com/elastic/elasticsearch/issues/10887&#34;&gt;#10887&lt;/a&gt;では、同様の機能をWindowsユーザにも提供します。&lt;/p&gt;
&lt;h2 id=&#34;より詳細なスクリプト設定&#34;&gt;より詳細なスクリプト設定&lt;/h2&gt;
&lt;p&gt;Scriptsはリクエストにインラインで指定できます。
&lt;code&gt;.scripts&lt;/code&gt;インデックスにインデックスもでき、&lt;code&gt;config/&lt;/code&gt;ディレクトリ配下にファイルとして保存もできます。
これまでは、インラインかインデックスされたスクリプトの両方を同時に有効無効にすることが選択できましたが、
&lt;code&gt;.scripts&lt;/code&gt;インデックスをプロキシやShieldで保護することもできました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/elastic/elasticsearch/issues/10116&#34;&gt;#10116&lt;/a&gt;で追加されたより詳細なスクリプトの設定で、インラインか、インデックスされたものか、ファイル化を個別に言語ごとに設定できるようになりました。
また、例えば、search APIではスクリプトを許可するが、update APIでは許可しないといったような設定も可能です。&lt;/p&gt;
&lt;h2 id=&#34;最後に&#34;&gt;最後に&lt;/h2&gt;
&lt;p&gt;ぜひ、&lt;a href=&#34;https://www.elastic.co/downloads/past-releases/elasticsearch-1-6-0&#34;&gt;Elasticsearch 1.6.0&lt;/a&gt;を試してみてください。
そして、感想をTwitter(&lt;a href=&#34;https://twitter.com/elastic&#34;&gt;@elastic&lt;/a&gt;)や&lt;a href=&#34;https://discuss.elastic.co/c/elasticsearch&#34;&gt;Webフォーラム&lt;/a&gt;などで教えて下さい。
また、問題がありましたら、&lt;a href=&#34;https://github.com/elastic/elasticsearch/issues&#34;&gt;GitHub issues page&lt;/a&gt;で報告をお願いします。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>第10回Elasticsearch勉強会を開催しました。#elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2015/06/02/10th-elasticsearch-jp/</link>
      <pubDate>Tue, 02 Jun 2015 15:06:36 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/06/02/10th-elasticsearch-jp/</guid>
      <description>第10回Elsticsearch勉強会を開催しました。 スタッフの皆さん、スピーカーの皆さん、開場提供していただいたリクルートテクノロジーズさ</description>
      <content:encoded>&lt;p&gt;&lt;a href=&#34;https://elasticsearch.doorkeeper.jp/events/25297&#34;&gt;第10回Elsticsearch勉強会&lt;/a&gt;を開催しました。
スタッフの皆さん、スピーカーの皆さん、開場提供していただいた&lt;a href=&#34;http://recruit-tech.co.jp&#34;&gt;リクルートテクノロジーズさん&lt;/a&gt;、ありがとうございました！
次回もよろしくお願いします！参加していただき盛り上げていただいた参加者の皆さんもありがとうございました。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;今回も新規の方が結構いたような気がしました。
最終的に、124人がアプリでチェックインした形になりました。
直前にキャンセル待ちから繰り上がると来れない人がいますよねぇ。
多少キャパシティオーバーするくらいの人数で募集するのがいいのでしょうか。
あと、カードが2枚不明で。。。心あたりある人いないでしょうか？&lt;/p&gt;
&lt;p&gt;さて、いつもの通り簡単なメモです。&lt;/p&gt;
&lt;h2 id=&#34;elasticon報告有償プラグインの紹介elastic-jun-ohtani-johtani&#34;&gt;Elastic{ON}報告＋有償プラグインの紹介　Elastic Jun Ohtani @johtani&lt;/h2&gt;
&lt;p&gt;スライド：&lt;a href=&#34;https://speakerdeck.com/johtani/elastic-on-bao-gao-toshang-yong-puraguinfalseshao-jie&#34;&gt;elastic{ON}報告と商用プラグインの紹介&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;少し時間が経ってしまいましたが、弊社初のカンファレンス&lt;a href=&#34;http://www.elasticon.com&#34;&gt;elastic{ON}&lt;/a&gt;の紹介をしました。
約1300名の方に参加していただいたカンファレンスで、非常に盛り上がりました。
Microsoft、GitHubなど、いろいろな会社の方が話をしたり、弊社のエンジニアが濃い話をしたりと。
今回は、日本の方はいなかったですが、次回は日本からも参加してもらえると嬉しいです！&lt;/p&gt;
&lt;p&gt;あとは、5月に弊社にも日本の営業の人が入社したので、有償プラグインについて簡単ですが説明をしました。
プラグインなどに興味があるかたがいらっしゃいましたら、Twitterなどで連絡いただければと。
もちろん、弊社サイトからの問い合わせでも大丈夫です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/elasticon&#34;&gt;カンファレンスの資料やビデオが弊社サイトで公開&lt;/a&gt;されています。
ぜひ一度見ていただければと。&lt;/p&gt;
&lt;h2 id=&#34;awsで実現するelasticsearchの大規模運用-株式会社インティメートマージャー松田和樹さんmats116httpstwittercommats116&#34;&gt;AWSで実現するelasticsearchの大規模運用 株式会社インティメート・マージャー　松田和樹さん　&lt;a href=&#34;https://twitter.com/mats116&#34;&gt;@mats116&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;スライド：&lt;a href=&#34;http://www.slideshare.net/im_docs/elasticsearch-48873206&#34;&gt;第10回elasticsearch勉強会 公開用資料&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;パブリックDMPのサービスの裏側でElasticsearchを利用しているというお話でした。
AWS Auto Scalingに詳しくないので、勉強しないといけないんですが、
リバランスがどのくらいの頻度で発生するのかはちょっと気になります。&lt;/p&gt;
&lt;p&gt;SSDを利用したり、doc valuesを利用したりと、性能を気にしながら利用されている点、負荷試験を行って検証されていたりと、
参考になる話でした。
今回はインフラ側の話に寄っていたので、今度はアプリ側でどんな使い方をしているかといった話を聞いてみたいですね！&lt;/p&gt;
&lt;h2 id=&#34;spark-in-small-or-middle-scale-data-processing-with-elasticsearch株式会社ビズリーチ-島本多可子さん-chibochibo03httpstwittercomchibochibo03&#34;&gt;Spark in small or middle scale data processing with Elasticsearch　株式会社ビズリーチ 島本　多可子さん &lt;a href=&#34;https://twitter.com/chibochibo03&#34;&gt;@chibochibo03&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;スライド：&lt;a href=&#34;http://www.slideshare.net/chibochibo/spark-with-elasticsearch&#34;&gt;Spark in small or middle scale data processing with Elasticsearch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ScalaとSparkとElasticsearchで検索サービスを作っている話でした。
サービスのアーキテクチャの選別についての説明を順を追って説明していただきました。
失敗と言われていたアーキテクチャを見た時に、「あー、それは。。。」と思っていたら、
思った通りの改善案のアーキテクチャが出てきたので少しホッとしましたw&lt;/p&gt;
&lt;p&gt;JSONのクエリが辛いという話がありましたが、&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/search-validate.html&#34;&gt;validate API&lt;/a&gt;などを利用してもらって、事前にチェックをしてもらうと
少しは改善できるかもなぁと。&lt;/p&gt;
&lt;p&gt;Sparkをぼんやりとしかわかってないので、もう一度話を聴きたいなぁと思ったので、
押しかけて話を聴きたいと思います。&lt;/p&gt;
&lt;p&gt;話の中で出てきた自作のScalaのElasticsearchクライアントがHTTPのクライアントになった理由が知りたかったです。&lt;/p&gt;
&lt;h2 id=&#34;lt&#34;&gt;LT&lt;/h2&gt;
&lt;h3 id=&#34;elasticsearchのサジェスト機能を使った話株式会社アイスタイル渡邊-紘太朗さん-ktaro_whttpstwittercomktaro_w&#34;&gt;Elasticsearchのサジェスト機能を使った話　株式会社アイスタイル　渡邊 紘太朗さん &lt;a href=&#34;https://twitter.com/ktaro_w&#34;&gt;@ktaro_w&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;スライド：&lt;a href=&#34;http://www.slideshare.net/ktaro_w/elasticsearch-48826694&#34;&gt;Elasticsearchのサジェスト機能を使った話&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ぴったり5分でしたwまだ2年目なのにこんなにうまく話をしていただけるとは。。。&lt;/p&gt;
&lt;p&gt;Gatling便利そうですね。サーバが1台しかないので、単一インデックスの方が性能が出るだろうなと。
Elasticsearchは1インデックスに対してデフォルトだと5シャードで、シャード単位でLuceneのインデックスが作成されます。
この話で行くと、18インデックスを作ると、かなりの数のファイルI/Oが発生するので、いろいろなインデックスに検索をすると
キツいだろうなと。&lt;/p&gt;
&lt;p&gt;サジェストについての日本語の資料が少ないという事だったので、ブログを書いてもらえると嬉しいですw&lt;/p&gt;
&lt;h3 id=&#34;elasticsearchで作る形態素解析サーバ株式会社エヌツーエスエム菅谷信介さん&#34;&gt;Elasticsearchで作る形態素解析サーバ　株式会社エヌツーエスエム　菅谷信介さん&lt;/h3&gt;
&lt;p&gt;スライド：&lt;a href=&#34;http://www.slideshare.net/shinsuke/es-analyzeapi201506&#34;&gt;Elasticsearchで作る形態素解析サーバ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;いつも発表ありがとうございます。私以外の最多発表者じゃないかという話でした。
今回はElasticsearchを形態素解析サーバにしてしまおうという話で、ちょっと面白い話でした。
Elasticsearch以外の場所で形態素解析したい場合には手軽に使えるかもしれないですし、Elasticsearchと同じ解析結果を別の場所で欲しい場合にも便利かも。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/johtani/elasticsearch-extended-analyze&#34;&gt;extended analyze API&lt;/a&gt;の紹介までしていただいて。。。&lt;/p&gt;
&lt;p&gt;ちなみに、今は、extended analyze プラグインも指定したAttributeの情報だけ返せるようになってたり、
マルチバリューへの対応もしていたりします。
そのうち本家のanalyze APIに機能を取り込む予定です。（早くしないと）&lt;/p&gt;
&lt;h3 id=&#34;開発効率up-elasticsearch-client-tool-作ってみたナレッジワークス株式会社木戸国彦さん-9215httpstwittercom9215&#34;&gt;開発効率UP! Elasticsearch Client Tool 作ってみた　ナレッジワークス株式会社　木戸国彦さん &lt;a href=&#34;https://twitter.com/9215&#34;&gt;@9215&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;スライド：&lt;a href=&#34;https://speakerdeck.com/kunihikokido/kai-fa-xiao-lu-atupu-elasticsearch-client-tool-zuo-tutemita&#34;&gt;開発効率アップ!Elasticsearch Client Tool 作ってみた&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hello Elasticsearch!にはお世話になっている人が多いんじゃないかなと。
今回はSublime Textのプラグインのお話でした。（すみません、Sublime Text使ってなくて。。。）
AtomとかIntellijのプラグインもあるとうれしいなー&lt;/p&gt;
&lt;h3 id=&#34;変わり種プラグインの作り方日本ibm黒澤亮二さん&#34;&gt;変わり種プラグインの作り方　日本IBM　黒澤亮二さん&lt;/h3&gt;
&lt;p&gt;スライド：&lt;a href=&#34;http://www.slideshare.net/kuron99/elasticsearch-plugin-48848087&#34;&gt;変わり種プラグインの作り方&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Elasticsearchの拡張ポイントの話と、簡単なプラグインの作り方と少しElasticsearch内部の話をしていただきました。
Foundの資料が上がってました。さすが。あそこのブログは面白い話が多いんですよね。
社内で実際に使われてる話とかも聞いてみたい！&lt;/p&gt;
&lt;h2 id=&#34;その他感想などのブログ&#34;&gt;その他、感想などのブログ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://suzuki.tdiary.net/20150602.html&#34;&gt;第10回 Elasticsearch 勉強会へ参加してきた昨日の話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/t-sato/items/45ec24b8df9155d6488f&#34;&gt;第10回elasticsearch勉強会 #elasticsearch #elasticsearchjp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.shibayu36.org/entry/2015/06/02/162724&#34;&gt;第10回elasticsearch勉強会に行ってきました&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tech.im-dmp.net/archives/3271&#34;&gt;elasticsearch勉強会に登壇してきました&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;懇親会で24Fに移動していただくということで、少し手間をかけてしまいました、すみませんでした。
今回も初参加の方がそこそこいたんじゃないかなと。
あとは、AWSサミットがあるために上京してて参加しましたという方もいらっしゃいました。
大きなカンファレンスの期間の前後に行うとこんなメリットもあるんですね、今後の参考にしたいと思います。
次回は7/27を予定しています。CTOのShayが来日予定です！&lt;/p&gt;
&lt;p&gt;あと、東京以外の勉強会も検討しつつあります。興味のある方はコメントやTwitterで反応をいただけると嬉しいです。&lt;/p&gt;
&lt;p&gt;スピーカーは随時募集中ですので、コメント、メール、ツイートなど、コンタクトしていただければと思います。
よろしくお願いいたします。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Logstashを使ったElasticsearchの再インデックス（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/05/26/reindex-elasticsearch-with-logstash-ja/</link>
      <pubDate>Tue, 26 May 2015 16:08:10 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/05/26/reindex-elasticsearch-with-logstash-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Reindex Elasticsearch With Logstash Thanks David! マッピングを変更したり、インデックスの設定を変更したり、あるサ</description>
      <content:encoded>&lt;p&gt;&lt;strong&gt;※この記事は次のブログを翻訳したものになります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;http://david.pilato.fr/blog/2015/05/20/reindex-elasticsearch-with-logstash/&#34;&gt;Reindex Elasticsearch With Logstash&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks David!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;マッピングを変更したり、インデックスの設定を変更したり、あるサーバから他のサーバや、
あるクラスタから他のクラスタ（例えば複数のデータセンターのような場合）にデータを再インデックスしたくなることがあるでしょう。&lt;/p&gt;
&lt;p&gt;後者のような場合は&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html&#34;&gt;SnapshotやRestoreの機能&lt;/a&gt;を利用することもできますが、インデックスの設定を変更をしたい場合は
その他の方法が必要になります。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/blog/logstash-1-5-0-ga-released&#34;&gt;Logstash 1.5.0&lt;/a&gt;で、
&lt;a href=&#34;https://www.elastic.co/guide/en/logstash/current/plugins-inputs-elasticsearch.html&#34;&gt;elasticsearch input&lt;/a&gt;と&lt;a href=&#34;https://www.elastic.co/guide/en/logstash/current/plugins-outputs-elasticsearch.html&#34;&gt;elasticsearch output&lt;/a&gt;を使うことで、とても簡単に再インデックスができます。&lt;/p&gt;
&lt;p&gt;ではやってみましょう。&lt;/p&gt;
&lt;h2 id=&#34;古いクラスタ&#34;&gt;古いクラスタ&lt;/h2&gt;
&lt;p&gt;elasticsearch 1.5.2 はすでにダウンロード済みとして、&lt;code&gt;localhost:9200&lt;/code&gt;で&lt;code&gt;old&lt;/code&gt;という名前のクラスタを起動します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;bin/elasticsearch --cluster.name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;old
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;クラスタに&lt;code&gt;person&lt;/code&gt;という名前のインデックスが存在します。
これは、5シャードで、100万件のドキュメントを持っています。&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.johtani.info/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;http://david.pilato.fr/blog/images/reindex-es01/sense01.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;http://david.pilato.fr/blog/images/reindex-es01/sense01.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&#34;新しいクラスタ&#34;&gt;新しいクラスタ&lt;/h2&gt;
&lt;p&gt;次に新しいクラスタを起動します。
&lt;code&gt;localhost:9201&lt;/code&gt;で&lt;code&gt;new&lt;/code&gt;という名前のクラスタを起動します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;bin/elasticsearch --cluster.name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;new
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;こちらは、空です。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -XGET &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://localhost:9201/person&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;error&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IndexMissingException[[person] missing]&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;404&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;logstashのインストール&#34;&gt;Logstashのインストール&lt;/h2&gt;
&lt;p&gt;次に、Logstash 1.5.0をダウンロードして、インストールします。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;wget http://download.elastic.co/logstash/logstash/logstash-1.5.0.tar.gz
tar xzf logstash-1.5.0.tar.gz
cd logstash-1.5.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;logstashの設定ファイル&lt;code&gt;logstash.conf&lt;/code&gt;を次のように設定します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;input {
  # We read from the &amp;quot;old&amp;quot; cluster
  elasticsearch {
    hosts =&amp;gt; [ &amp;quot;localhost&amp;quot; ]
    port =&amp;gt; &amp;quot;9200&amp;quot;
    index =&amp;gt; &amp;quot;person&amp;quot;
    size =&amp;gt; 500
    scroll =&amp;gt; &amp;quot;5m&amp;quot;
    docinfo =&amp;gt; true
  }
}

output {
  # We write to the &amp;quot;new&amp;quot; cluster
  elasticsearch {
    host =&amp;gt; &amp;quot;localhost&amp;quot;
    port =&amp;gt; &amp;quot;9201&amp;quot;
    protocol =&amp;gt; &amp;quot;http&amp;quot;
    index =&amp;gt; &amp;quot;%{[@metadata][_index]}&amp;quot;
    index_type =&amp;gt; &amp;quot;%{[@metadata][_type]}&amp;quot;
    document_id =&amp;gt; &amp;quot;%{[@metadata][_id]}&amp;quot;
  }
  # We print dots to see it in action
  stdout {
    codec =&amp;gt; &amp;quot;dots&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;実行と修正&#34;&gt;実行と修正&lt;/h2&gt;
&lt;p&gt;実行します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;bin/logstash -f logstash.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;ドキュメントのチェックと修正&#34;&gt;ドキュメントのチェックと修正&lt;/h3&gt;
&lt;p&gt;何が起きたでしょう？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -XGET &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://localhost:9200/person/person/AU1wqyQWZJKU8OibfxgH&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_index&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;person&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;person&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AU1wqyQWZJKU8OibfxgH&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;found&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_source&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tali Elyne&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dateOfBirth&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1955-05-03&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;gender&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;female&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;children&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;marketing&amp;#34;&lt;/span&gt;: {
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;cars&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;shoes&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;toys&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;fashion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;music&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;garden&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;electronic&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;hifi&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;food&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;846&lt;/span&gt;
      },
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;: {
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;country&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Germany&amp;#34;&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;zipcode&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0099&amp;#34;&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;city&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bonn&amp;#34;&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;countrycode&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DE&amp;#34;&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: [
            &lt;span style=&#34;color:#ae81ff&#34;&gt;7.075943707068682&lt;/span&gt;,
            &lt;span style=&#34;color:#ae81ff&#34;&gt;50.72883500730124&lt;/span&gt;
         ]
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;もう一方のクラスタと比較してみましょう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -XGET &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://localhost:9201/person/person/AU1wqyQWZJKU8OibfxgH&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_index&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;person&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;person&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AU1wqyQWZJKU8OibfxgH&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;found&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_source&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tali Elyne&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dateOfBirth&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1955-05-03&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;gender&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;female&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;children&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;marketing&amp;#34;&lt;/span&gt;: {
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;cars&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;shoes&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;toys&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;fashion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;music&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;garden&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;electronic&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;hifi&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;food&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;846&lt;/span&gt;
      },
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;: {
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;country&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Germany&amp;#34;&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;zipcode&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0099&amp;#34;&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;city&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bonn&amp;#34;&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;countrycode&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DE&amp;#34;&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: [
            &lt;span style=&#34;color:#ae81ff&#34;&gt;7.075943707068682&lt;/span&gt;,
            &lt;span style=&#34;color:#ae81ff&#34;&gt;50.72883500730124&lt;/span&gt;
         ]
      },
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;@version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;@timestamp&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2015-05-20T09:53:44.089Z&amp;#34;&lt;/span&gt;
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Logstashは&lt;code&gt;@version&lt;/code&gt;と&lt;code&gt;@timestamp&lt;/code&gt;フィールドを追加してしました。
これらを除去したいので、&lt;a href=&#34;http://www.elastic.co/guide/en/logstash/current/plugins-filters-mutate.html&#34;&gt;Mutate filter plugin&lt;/a&gt;の&lt;a href=&#34;http://www.elastic.co/guide/en/logstash/current/plugins-filters-mutate.html#plugins-filters-mutate-remove_field&#34;&gt;&lt;code&gt;remove_field&lt;/code&gt;&lt;/a&gt;を使います。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;filter {
  mutate {
    remove_field =&amp;gt; [ &amp;quot;@timestamp&amp;quot;, &amp;quot;@version&amp;quot; ]
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;マッピングのチェックと修正&#34;&gt;マッピングのチェックと修正&lt;/h3&gt;
&lt;p&gt;実際に、logstashは&lt;code&gt;_source&lt;/code&gt;フィールドを既存のドキュメントから読み込み、
それらを新しいクラスタに直接投入しています。
しかし、logstashはマッピングについてはケアしていません。&lt;/p&gt;
&lt;p&gt;古いマッピングと新しいマッピングを比較するために、マッピングを取得してみましょう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -XGET &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://localhost:9200/person/person/_mapping&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;person&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mappings&amp;#34;&lt;/span&gt;: {
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;person&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;: {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
                     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;city&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;not_analyzed&amp;#34;&lt;/span&gt;
                     },
                     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;country&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;not_analyzed&amp;#34;&lt;/span&gt;
                     },
                     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;countrycode&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;not_analyzed&amp;#34;&lt;/span&gt;
                     },
                     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;geo_point&amp;#34;&lt;/span&gt;
                     },
                     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;zipcode&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
                     }
                  }
               },
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;children&amp;#34;&lt;/span&gt;: {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;
               },
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dateOfBirth&amp;#34;&lt;/span&gt;: {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;date&amp;#34;&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;format&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dateOptionalTime&amp;#34;&lt;/span&gt;
               },
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;gender&amp;#34;&lt;/span&gt;: {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;not_analyzed&amp;#34;&lt;/span&gt;
               },
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;marketing&amp;#34;&lt;/span&gt;: {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
                     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;cars&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;
                     },
                     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;electronic&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;
                     },
                     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;fashion&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;
                     },
                     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;food&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;
                     },
                     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;garden&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;
                     },
                     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;hifi&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;
                     },
                     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;music&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;
                     },
                     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;shoes&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;
                     },
                     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;toys&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;
                     }
                  }
               },
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
               }
            }
         }
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -XGET &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://localhost:9201/person/person/_mapping&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;person&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mappings&amp;#34;&lt;/span&gt;: {
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;person&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;: {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
                     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;city&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
                     },
                     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;country&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
                     },
                     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;countrycode&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
                     },
                     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;double&amp;#34;&lt;/span&gt;
                     },
                     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;zipcode&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
                     }
                  }
               },
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;children&amp;#34;&lt;/span&gt;: {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;
               },
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dateOfBirth&amp;#34;&lt;/span&gt;: {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;date&amp;#34;&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;format&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dateOptionalTime&amp;#34;&lt;/span&gt;
               },
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;gender&amp;#34;&lt;/span&gt;: {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
               },
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;marketing&amp;#34;&lt;/span&gt;: {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
                     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;cars&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;
                     },
                     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;electronic&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;
                     },
                     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;fashion&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;
                     },
                     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;food&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;
                     },
                     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;garden&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;
                     },
                     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;hifi&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;
                     },
                     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;music&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;
                     },
                     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;shoes&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;
                     },
                     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;toys&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;
                     }
                  }
               },
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
               }
            }
         }
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これにより、いくつかの相違を発見できます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;geo_point&amp;#34;&lt;/span&gt;
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;double&amp;#34;&lt;/span&gt;
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;データをインデックスする「前」に、実際に利用したいマッピングでインデックスを作成しておくことで、
この問題に対処できます。
この時点で、オリジナルのマッピングを望んだ形に変更することができます。例えば、アナライザを変更したりです。
また、インデックスの設定を新しく定義することもできます。
デフォルトでは、Elasticsearchは5つのシャードと各シャードに対して1つのレプリカを作成します。
しかし、この時点でもう一度変更することが可能です。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -XDELETE &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://localhost:9201/person&amp;#34;&lt;/span&gt;
curl -XPUT &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://localhost:9201/person&amp;#34;&lt;/span&gt; -d&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#34;settings&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;number_of_shards&amp;#34;: 1,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;number_of_replicas&amp;#34;: 0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&amp;#39;&lt;/span&gt;
curl -XPUT &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://localhost:9201/person/person/_mapping&amp;#34;&lt;/span&gt; -d&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#34;person&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;properties&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;#34;address&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;properties&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          &amp;#34;city&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            &amp;#34;type&amp;#34;: &amp;#34;string&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            &amp;#34;index&amp;#34;: &amp;#34;not_analyzed&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          },
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          &amp;#34;country&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            &amp;#34;type&amp;#34;: &amp;#34;string&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            &amp;#34;index&amp;#34;: &amp;#34;not_analyzed&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          },
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          &amp;#34;countrycode&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            &amp;#34;type&amp;#34;: &amp;#34;string&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            &amp;#34;index&amp;#34;: &amp;#34;not_analyzed&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          },
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          &amp;#34;location&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            &amp;#34;type&amp;#34;: &amp;#34;geo_point&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          },
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          &amp;#34;zipcode&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            &amp;#34;type&amp;#34;: &amp;#34;string&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      },
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;#34;children&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;type&amp;#34;: &amp;#34;long&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      },
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;#34;dateOfBirth&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;type&amp;#34;: &amp;#34;date&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;format&amp;#34;: &amp;#34;dateOptionalTime&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      },
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;#34;gender&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;type&amp;#34;: &amp;#34;string&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;index&amp;#34;: &amp;#34;not_analyzed&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      },
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;#34;marketing&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;properties&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          &amp;#34;cars&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            &amp;#34;type&amp;#34;: &amp;#34;long&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          },
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          &amp;#34;electronic&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            &amp;#34;type&amp;#34;: &amp;#34;long&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          },
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          &amp;#34;fashion&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            &amp;#34;type&amp;#34;: &amp;#34;long&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          },
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          &amp;#34;food&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            &amp;#34;type&amp;#34;: &amp;#34;long&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          },
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          &amp;#34;garden&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            &amp;#34;type&amp;#34;: &amp;#34;long&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          },
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          &amp;#34;hifi&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            &amp;#34;type&amp;#34;: &amp;#34;long&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          },
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          &amp;#34;music&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            &amp;#34;type&amp;#34;: &amp;#34;long&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          },
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          &amp;#34;shoes&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            &amp;#34;type&amp;#34;: &amp;#34;long&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          },
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          &amp;#34;toys&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            &amp;#34;type&amp;#34;: &amp;#34;long&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      },
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;#34;name&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;type&amp;#34;: &amp;#34;string&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;さて、もう一度再インデックスしましょう！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;bin/logstash -f logstash.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;http://david.pilato.fr/blog/images/reindex-es01/sense02.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;http://david.pilato.fr/blog/images/reindex-es01/sense02.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&#34;インデックスやタイプ名の変更&#34;&gt;インデックスやタイプ名の変更&lt;/h2&gt;
&lt;p&gt;もちろん、インデックス名やタイプ名、IDを変更したい場合も変更が可能です！:)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;elasticsearch&lt;/span&gt; {
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;host&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;port&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;9201&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;protocol&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;europe_people&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;index_type&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;someone&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;document_id&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%{[@metadata][_id]}&amp;#34;&lt;/span&gt;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 1.5.2 および 1.4.5リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/04/28/elasticsearch-1-5-2-and-1-4-5-released-ja/</link>
      <pubDate>Tue, 28 Apr 2015 15:14:08 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/04/28/elasticsearch-1-5-2-and-1-4-5-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Elasticsearch 1.5.2 Released 本日（4/27）、Lucene 4.10.4ベースのEla</description>
      <content:encoded>&lt;p&gt;&lt;strong&gt;※この記事は次のブログを翻訳したものになります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;https://www.elastic.co/blog/elasticsearch-1-5-2-and-1-4-5-released&#34;&gt;Elasticsearch 1.5.2 Released&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本日（4/27）、&lt;strong&gt;Lucene 4.10.4&lt;/strong&gt;ベースの&lt;strong&gt;Elasticsearch 1.5.1&lt;/strong&gt;および&lt;strong&gt;Elasticsearch 1.4.5&lt;/strong&gt; をセキュリティバグフィックス版をリリースしました。
ダウンロードおよびすべての変更については次のリンクをごらんください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最新安定版：&lt;a href=&#34;https://www.elastic.co/downloads/past-releases/elasticsearch-1-5-2&#34;&gt;Elasticsearch 1.5.2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1.4系バグフィックス：&lt;a href=&#34;https://www.elastic.co/downloads/past-releases/elasticsearch-1-4-5&#34;&gt;Elasticsearch 1.4.5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;本リリースはディレクトリトラバーサルの脆弱性のフィックスです。すべてのユーザにアップグレードを勧めます。&lt;/em&gt;&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;過去のリリースに関するブログは以下のリンクを参照してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;1.5&lt;/em&gt;:&lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-5-1-released/&#34;&gt;1.4.1&lt;/a&gt;,
&lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-5-0-released/&#34;&gt;1.5.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;1.4&lt;/em&gt;:&lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-4-4-released/&#34;&gt;1.4.4&lt;/a&gt;,&lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-4-3-released/&#34;&gt;1.4.3&lt;/a&gt;,
&lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-4-2-released/&#34;&gt;1.4.2&lt;/a&gt;,&lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-4-1-released/&#34;&gt;1.4.1&lt;/a&gt;,
&lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-4-0-released/&#34;&gt;1.4.0&lt;/a&gt;, &lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-4-0-beta-released/&#34;&gt;1.4.0.Beta1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;すべての&lt;a href=&#34;https://www.elastic.co/downloads/past-releases/elasticsearch-1-5-2&#34;&gt;1.5.2&lt;/a&gt;および&lt;a href=&#34;https://www.elastic.co/downloads/past-releases/elasticsearch-1-4-5&#34;&gt;1.4.5&lt;/a&gt;の変更についてはリンクをごらんください。以下では、セキュリティの問題について紹介します。&lt;/p&gt;
&lt;h2 id=&#34;ディレクトリトラバーサル脆弱性の発見&#34;&gt;ディレクトリトラバーサル脆弱性の発見&lt;/h2&gt;
&lt;p&gt;1.5.2および1.4.5以前の全バージョンのElasticsearchで、ディレクトリトラバーサル攻撃に対する脆弱性がみつかりました。
攻撃者はElasticsearchを実行しているサーバからファイルを取得することができます。
この脆弱性はインストールしたばかりのElasticsearchには存在しません。
この脆弱性は&amp;quot;site plugin&amp;quot;がインストールされると露呈します。
ElasticのMarvelプラグインおよびコミュニティサポートの多くのプラグイン（例：Kopf、BigDesk、Head）がsite pluginです。
Elastic Shield、Licensing、Cloud-AWS、Cloud-GCE、Cloud-Azure、analysis pluginおよびriverプラグインはsite pluginでは&lt;em&gt;ありません&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;この問題を&lt;a href=&#34;https://www.elastic.co/community/security&#34;&gt;CVE-2015-3337&lt;/a&gt;としました。&lt;/p&gt;
&lt;p&gt;バージョン1.5.2と1.4.5はこの脆弱性に対して対策済みで、私たちはすべてのユーザにアップグレードを勧めています。&lt;/p&gt;
&lt;p&gt;アップグレードを望まないユーザはいくつかの方法でこの脆弱性に対して対応可能ですが、これらの方法はsite pluginを動作させなくします。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;site pluginをインストールしているノードの&lt;code&gt;elasticsearch.yml&lt;/code&gt;の&lt;code&gt;http.disable_sites&lt;/code&gt;を&lt;code&gt;true&lt;/code&gt;に設定し、Elasticsearchのノードを再起動&lt;/li&gt;
&lt;li&gt;ファイアウォールもしくはプロキシを利用して、&lt;code&gt;/_plugin&lt;/code&gt;へのHTTPリクエストをブロック&lt;/li&gt;
&lt;li&gt;すべてのsite pluginをすべてのElasticsearchノードからアンインストール&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この問題を報告していただいた、DocuSignのJohn Heasmanに感謝いたします。&lt;/p&gt;
&lt;h2 id=&#34;他の変更について&#34;&gt;他の変更について&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/10526&#34;&gt;インデックスされたスクリプトおよびテンプレート&lt;/a&gt;を上書きもしくは削除時に、キャッシュからも完全に削除する。&lt;/li&gt;
&lt;li&gt;geo-shapeの多数のフィックス（&lt;code&gt;distance_error_pct&lt;/code&gt;を利用した場合の、重要な&lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/10679&#34;&gt;precisionに関するフィックス&lt;/a&gt;を含む）&lt;/li&gt;
&lt;li&gt;インデックステンプレートのデフォルトマッピングがバルクインデキシング中にも考慮するように修正&lt;/li&gt;
&lt;li&gt;Shadowレプリカが&lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/10688&#34;&gt;ファイルシステムの遅延&lt;/a&gt;に対する対障害性を向上し、プライマリシャードの&lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/10585&#34;&gt;よりスムーズなリロケーション&lt;/a&gt;をサポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/elastic/elasticsearch/issues/10602&#34;&gt;geo-contexts&lt;/a&gt;をcompletion suggesterで使用した場合のマッピングのリフレッシュループを改善&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;いくつかの重要な変更がv1.4.5にバックポートされています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/elastic/elasticsearch/issues/10463&#34;&gt;大きなシャードのリカバリを早くする&lt;/a&gt;ためのシャードリカバリ中のマージを可能に
* &lt;a href=&#34;http://github.com/elastic/elasticsearch/issues/9797&#34;&gt;truncated translogs&lt;/a&gt;の操作をグレースフルに&lt;/li&gt;
&lt;li&gt;マージが遅くなる場合に、&lt;a href=&#34;http://github.com/elastic/elasticsearch/issues/9986&#34;&gt;delete-by-queryを減速&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ぜひ、&lt;a href=&#34;https://www.elastic.co/downloads/past-releases/elasticsearch-1-5-2&#34;&gt;Elasticsearch 1.5.2&lt;/a&gt;をダウンロードして、試してみてください。
そして、感想をTwitter(&lt;a href=&#34;https://twitter.com/elastic&#34;&gt;@elastic&lt;/a&gt;)などで教えて下さい。
また、問題がありましたら、&lt;a href=&#34;https://github.com/elastic/elasticsearch/issues&#34;&gt;GitHub issues page&lt;/a&gt;で報告をお願いします。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>第9回Elasticsearch勉強会を開催しました。#elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2015/04/17/9th-elasticsearch-jp/</link>
      <pubDate>Fri, 17 Apr 2015 14:41:54 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/04/17/9th-elasticsearch-jp/</guid>
      <description>第9回Elsticsearch勉強会を開催しました。 スタッフの皆さん、スピーカーの皆さん、開場提供していただいたリクルートテクノロジーズさん</description>
      <content:encoded>&lt;p&gt;&lt;a href=&#34;https://elasticsearch.doorkeeper.jp/events/23012&#34;&gt;第9回Elsticsearch勉強会&lt;/a&gt;を開催しました。
スタッフの皆さん、スピーカーの皆さん、開場提供していただいた&lt;a href=&#34;http://recruit-tech.co.jp&#34;&gt;リクルートテクノロジーズさん&lt;/a&gt;、ありがとうございました！
次回もよろしくお願いします！参加していただき盛り上げていただいた参加者の皆さんもありがとうございました。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;今回はトレーニングで来日していたIgorとNathanによる特別公演でした。
昨年同様、&lt;a href=&#34;http://samuraism.com&#34;&gt;サムライズム&lt;/a&gt;の&lt;a href=&#34;https://twitter.com/yusuke&#34;&gt;@yusuke&lt;/a&gt;さんに
テキスト翻訳していただき、大変助かりました。ほんとうにすごかった。。。&lt;/p&gt;
&lt;h3 id=&#34;チェックイン数など&#34;&gt;チェックイン数など&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;今回はチェックインした人：119名&lt;/li&gt;
&lt;li&gt;キャンセルしなかった人：45名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;でした。今回はキャンセル待ちのまま当日を迎えた人もいなかったので良かったかなと。
今回から懇親会ページを別にしてみました。本編の勉強会に参加登録していた方には何度かメールを出していたので、
見つけていなかった人は以内とは思うのですが、勉強会のページと間違える人がいたらしいという話を聞きました。
Doorkeeperで1イベントで複数のチケットにそれぞれの参加者数を設定できるようになると嬉しいかもなぁ。&lt;/p&gt;
&lt;p&gt;さて、いつもの通り簡単なメモです。
本当に簡単にですが。&lt;/p&gt;
&lt;h2 id=&#34;resiliency-in-elasticsearch-and-lucene--igor-motov&#34;&gt;Resiliency in Elasticsearch and Lucene / Igor Motov&lt;/h2&gt;
&lt;p&gt;スライド：https://speakerdeck.com/elastic/resiliency-in-elasticsearch-and-lucene&lt;/p&gt;
&lt;p&gt;※上記スライドは少し古いバージョンです。公開されたら差し替える予定です。&lt;/p&gt;
&lt;p&gt;サンフランシスコで行われた&lt;a href=&#34;https://www.elastic.co/elasticon&#34;&gt;Elastic{ON}&lt;/a&gt;（弊社初のカンファレンス）で行われたセッションの
改良版といったところでしょうか。
話の中で登場した機能などのリンクをざっとアップしておきます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.elastic.co/guide/en/elasticsearch/guide/current/fielddata.html&#34;&gt;Fielddata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.elastic.co/guide/en/elasticsearch/guide/current/doc-values.html&#34;&gt;Doc Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.elastic.co/guide/en/elasticsearch/resiliency/current/index.html&#34;&gt;Resiliency Status&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kibana4-whats-new---nathan-zamecnik&#34;&gt;Kibana4: What&amp;rsquo;s New ? / Nathan Zamecnik&lt;/h2&gt;
&lt;p&gt;スライド：未定&lt;/p&gt;
&lt;p&gt;Kibana4の紹介をデモを交えてという感じでした。
こちらは、スライドよりもデモを見てもらうのが一番いいのですが。。。&lt;/p&gt;
&lt;p&gt;いくつかQAがあったので補足を。ちなみに、Issueのラベルに実装される予定のバージョンが付与されてたりします。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Q：グラフをPDFでエクスポートとかできますか？
&lt;ul&gt;
&lt;li&gt;A：4.3.0で実装される予定です。関連Issueはこちら。https://github.com/elastic/kibana/issues/509&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q：巨大な数値の場合にKB、MBなどといった表示は可能ですか？
&lt;ul&gt;
&lt;li&gt;A：4.1.0で実装される予定です。関連Issueはこちら。https://github.com/elastic/kibana/issues/1543&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q：地図のズームを固定することはできますか？
&lt;ul&gt;
&lt;li&gt;A：4.1.0で実装される予定です。関連Issueはこちら。https://github.com/elastic/kibana/issues/1442&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;その他感想などのブログ&#34;&gt;その他、感想などのブログ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://suzuki.tdiary.net/20150415.html#p01&#34;&gt;[Elasticsearch] 第9回 Elasticsearch 勉強会へ参加してきた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;今回は特別バージョンでした。かなり詳しい話だったので面白かったと思います。
Kibanaはデモを見ていただけましたし。また、海外から人を呼べるといいなぁ。&lt;/p&gt;
&lt;p&gt;次回は6月ごろをめどに計画しようかと。
スピーカーは随時募集中ですので、コメント、メール、ツイートなど、コンタクトしていただければと思います。 よろしくお願いいたします。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 1.5.1リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/04/13/elasticsearch-1-5-1-released-ja/</link>
      <pubDate>Mon, 13 Apr 2015 11:34:31 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/04/13/elasticsearch-1-5-1-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Elasticsearch 1.5.1 Released 本日（4/9）、Lucene 4.10.4ベースのElas</description>
      <content:encoded>&lt;p&gt;&lt;strong&gt;※この記事は次のブログを翻訳したものになります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;https://www.elastic.co/blog/elasticsearch-1-5-1-released&#34;&gt;Elasticsearch 1.5.1 Released&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本日（4/9）、&lt;strong&gt;Lucene 4.10.4&lt;/strong&gt;ベースの&lt;strong&gt;Elasticsearch 1.5.1&lt;/strong&gt; をリリースしました。
このリリースはElasticsearchの最新の安定バージョンとなります。&lt;/p&gt;
&lt;p&gt;すべての変更については&lt;a href=&#34;https://www.elastic.co/downloads/past-releases/elasticsearch-1-5-1&#34;&gt;download Elasticsearch 1.5.1 here&lt;/a&gt;をごらんください。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;本リリースはシャードを新しいノードに配置するスピードを改善するためのバグフィックスを含んでいます。
シャードのリカバリーの最初のフェーズで、コピー元のノードからコピー先のノードへすべてのセグメントをコピーします。
このフェーズ中には登録、更新削除のリクエストはトランザクションログに記録され、リカバリが終了したあとに
コピー先のノードでトランザクションログが再生されます。
シャードが大きい場合、トランザクションログに多数のイベントがたまってしまいます。&lt;/p&gt;
&lt;p&gt;以前では、新しいセグメントのマージはリカバリ中のコピー先のノードでは、実行できませんでした。
大きなトランザクションログは結果として、小さな新しいセグメントを多く生成し、リカバリのスピードに非常に影響を与えます。
Issue &lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/10463&#34;&gt;#10463&lt;/a&gt;は
リカバリ中のコピー先のシャードのマージを可能にする変更です。&lt;/p&gt;
&lt;p&gt;その他の注目すべきバグフィックスは次のものになります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多くの削除によりバージョンマップがいっぱいになった場合にrefreshを実行するように変更(&lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/10312&#34;&gt;#10312&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;多数のスナップショットを含んだリポジトリの管理の改善(&lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/10366&#34;&gt;#10366&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;実験的な機能である&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-inner-hits.html&#34;&gt;inner hits&lt;/a&gt;のバグフィックス(&lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/10388&#34;&gt;#10388&lt;/a&gt;, &lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/10353&#34;&gt;#10353&lt;/a&gt;, &lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/10309&#34;&gt;#10309&lt;/a&gt;, &lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/10235&#34;&gt;#10235&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最後に、&lt;a href=&#34;https://www.elastic.co/blog/deprecating_rivers&#34;&gt;Riverが非推奨となりました&lt;/a&gt;、まだ見ていない場合は記事をご覧ください。&lt;/p&gt;
&lt;p&gt;ぜひ、&lt;a href=&#34;https://www.elastic.co/downloads/past-releases/elasticsearch-1-5-1&#34;&gt;Elasticsearch 1.5.1&lt;/a&gt;をダウンロードして、試してみてください。
そして、感想をTwitter(&lt;a href=&#34;https://twitter.com/elastic&#34;&gt;@elastic&lt;/a&gt;)などで教えて下さい。
また、問題がありましたら、&lt;a href=&#34;https://github.com/elastic/elasticsearch/issues&#34;&gt;GitHub issues page&lt;/a&gt;で報告をお願いします。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch勉強会 in 名古屋を開催しました。#elasticsearch #elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2015/04/04/elasticsearch-study-session-at-nagoya/</link>
      <pubDate>Sat, 04 Apr 2015 09:47:19 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/04/04/elasticsearch-study-session-at-nagoya/</guid>
      <description>Elasticsearch勉強会 in 名古屋を開催しました。 初の東京以外での勉強会です。 企画、セッションなどお手伝いいただいた@smogamiさ</description>
      <content:encoded>&lt;p&gt;&lt;a href=&#34;https://elasticsearch.doorkeeper.jp/events/21984&#34;&gt;Elasticsearch勉強会 in 名古屋&lt;/a&gt;を開催しました。
初の東京以外での勉強会です。
企画、セッションなどお手伝いいただいた&lt;a href=&#34;https://twitter.com/smogami&#34;&gt;@smogami&lt;/a&gt;さん、&lt;a href=&#34;https://twitter.com/mzp&#34;&gt;@mzp&lt;/a&gt;さんありがとうございました！&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.johtani.info/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:500&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20150406/nagoya.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20150406/nagoya.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- more --&gt;
&lt;h2 id=&#34;elasticsearchelk-stack紹介-johtani&#34;&gt;Elasticsearch/ELK stack紹介 @johtani&lt;/h2&gt;
&lt;p&gt;スライド：&lt;a href=&#34;https://speakerdeck.com/johtani/introduction-elasticsearch-and-elk-elasticsearchmian-qiang-hui-in-nagoya&#34;&gt;Introduction Elasticsearch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;初回（次回があるかはわかりませんが。。。）ということもあり、Elasticsearchの説明を行いました。
あと、LogstashとKibanaも。
Kibanaについては、手元の環境でいつものアクセスログのデモやなどを行いました。
また、LTの後に時間があったので、前回の勉強会で利用したチェックリストの説明なども。&lt;/p&gt;
&lt;h2 id=&#34;スタンドファームにおけるelasticsearch導入事例-mzphttpstwittercommzp-さん&#34;&gt;スタンドファームにおけるElasticsearch導入事例 &lt;a href=&#34;https://twitter.com/mzp&#34;&gt;@mzp&lt;/a&gt; さん&lt;/h2&gt;
&lt;p&gt;スライド：後日アップ？&lt;/p&gt;
&lt;p&gt;* 使ってるのはKibana3&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アクセスログが保存されてたけど、活用できてなかった。&lt;/li&gt;
&lt;li&gt;Fluentd、Elasticsearch、Kibanaをいれて、可視化してみた。&lt;/li&gt;
&lt;li&gt;普通にログ検索が簡単にできて嬉しい&lt;/li&gt;
&lt;li&gt;システムのレスポンスの性能値などを可視化できるようにして性能改善中&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kibanaでログ分析を1年続けてみたら業務システムの保守と運用が捗った仮-smogamihttpstwittercomsmogami-さん&#34;&gt;Kibanaでログ分析を1年続けてみたら業務システムの保守と運用が捗った(仮) &lt;a href=&#34;https://twitter.com/smogami&#34;&gt;@smogami&lt;/a&gt; さん&lt;/h2&gt;
&lt;p&gt;スライド：「&lt;a href=&#34;https://speakerdeck.com/exoego/how-and-why-i-have-been-leveraging-kibana-for-devops&#34;&gt;Kibanaでログ分析を1年続けてみたら業務システムの保守と運用が捗った&lt;/a&gt;」&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;名古屋でJavaの勉強会を主催してみたり（最近できてないけど）&lt;/li&gt;
&lt;li&gt;導入するのになかなか大変だった（ファイアウォールだったりが）。。。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kibanaを使ってどんなことをしてるのか？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;既存システムなどの機能の実行回数やレスポンス時間の推移&lt;/li&gt;
&lt;li&gt;曜日ごとにもチェック&lt;/li&gt;
&lt;li&gt;どの機能がよく使われるのか？&lt;/li&gt;
&lt;li&gt;対象となっているシステムはJavaのシステム。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;QA&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Q：ログの出力は新規に追加したのか？
&lt;ul&gt;
&lt;li&gt;A : ログの出力自体はLog4Jの設定を変更しただけ。もともと、各メソッドの開始と終了にそれぞれ時間が出力される仕組みがある。&lt;br&gt;
ログの読み込み自体は自作ツールを利用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;飛び込みlt-dabitshttpstwittercomdabits-さん&#34;&gt;飛び込みLT &lt;a href=&#34;https://twitter.com/dabits&#34;&gt;@dabits&lt;/a&gt; さん&lt;/h2&gt;
&lt;p&gt;スライド：未定&lt;/p&gt;
&lt;p&gt;Kibanaの使い道&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;KPIツール&lt;/li&gt;
&lt;li&gt;エゴサーチツール - Twitterや2chなどのデータを解析ソーシャル分析みたいな感じ？
* ダッシュボードを用意してあげる場合もあるが、触っていろんな機能を試す人も。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;感想反省点など&#34;&gt;感想・反省点など&lt;/h2&gt;
&lt;p&gt;30名弱の方に参加していただきました。ありがとうございました。
東京の勉強会でもそうですが、半分くらいが検索、半分くらいがログ解析関連に興味がある感じでした。
飛び込みLTもしていただけましたし。会場内限定の話もいくつか。&lt;/p&gt;
&lt;h4 id=&#34;場所&#34;&gt;場所&lt;/h4&gt;
&lt;p&gt;場所が少しわかりにくかったかなと。。。建物の入り口に看板がないので、1名に看板役として立っていただきました。
ただ、設備は充実していましたし、室内も綺麗でよかったです。&lt;/p&gt;


&lt;div class=&#34;box&#34; style=&#34;max-width:300&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20150406/seminar_room.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20150406/seminar_room.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h4 id=&#34;懇親会&#34;&gt;懇親会&lt;/h4&gt;
&lt;p&gt;11名（+私）でした。美味しい手羽先などをいただきながら、Elasticsearch以外のことでも盛り上がりましたw。
また、名古屋の観光名所なども教えてもらったりと有意義な時間でしたw。&lt;/p&gt;
&lt;p&gt;ということで、少しでもElasticsearch、Kibana、Logstashなどのユーザが増えてくれればうれしいかなと。
私抜きでも勉強会はできると思うので、今後も開いてもらえるとうれしいかぎりです。
初めての東京以外での勉強会でどんな感じの方が利用しているのか、興味があるのかといったことも知ることができました。&lt;/p&gt;
&lt;h2 id=&#34;関連ブログなど&#34;&gt;関連ブログなど&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.exoego.net/2015/04/kibana4-use-case.html&#34;&gt;Kibana4活用事例を話しました&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;その他余談&#34;&gt;その他（余談）&lt;/h2&gt;
&lt;p&gt;コンパルという喫茶店のアイスコーヒー。ちょっと新鮮な体験でした。


&lt;div class=&#34;box&#34; style=&#34;max-width:300&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20150406/ice_coffee.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20150406/ice_coffee.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;あとは、日曜日に観光場所として教えてもらった、&lt;a href=&#34;http://www.tcmit.org/&#34;&gt;トヨタ産業技術記念館&lt;/a&gt;にも行ってみました。
一人だったけど、非常に楽しめました。実演とかあって、わかりやすいし。
トヨタが自動織機の会社が始まりだってのは知らなかった。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 1.5.0リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/04/01/elasticsearch-1-5-0-released-ja/</link>
      <pubDate>Wed, 01 Apr 2015 12:38:16 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/04/01/elasticsearch-1-5-0-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Elasticsearch 1.5.0 Released 本日（3/23）、Lucene 4.10.4ベースのEla</description>
      <content:encoded>&lt;p&gt;&lt;strong&gt;※この記事は次のブログを翻訳したものになります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;https://www.elastic.co/blog/elasticsearch-1-5-0-released&#34;&gt;Elasticsearch 1.5.0 Released&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本日（3/23）、&lt;strong&gt;Lucene 4.10.4&lt;/strong&gt;ベースの&lt;strong&gt;Elasticsearch 1.5.0&lt;/strong&gt; をリリースしました。
このリリースはElasticsearchの最新の安定バージョンとなります。
多くの&lt;em&gt;resiliency(復元性、弾力性) enhancement&lt;/em&gt;とバグフィックスを含んでおり、
すべてのユーザにアップグレードを推奨しています。&lt;/p&gt;
&lt;p&gt;すべての変更については&lt;a href=&#34;https://www.elastic.co/downloads/past-releases/elasticsearch-1-5-0&#34;&gt;download Elasticsearch 1.5.0 here&lt;/a&gt;をごらんください。&lt;/p&gt;
&lt;p&gt;460PRという大量の変更を含む本リリースは、Elasticsearchをよりresilient(弾力のあるもの)にするために
費やされています。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h3 id=&#34;inner-hits&#34;&gt;Inner hits&lt;/h3&gt;
&lt;p&gt;本リリースで追加された、Elasticsearchに最もリクエストされたものの一つがinner hitsです。
これは、&lt;code&gt;has_child&lt;/code&gt;もしくは&lt;code&gt;nested&lt;/code&gt;クエリにマッチした子のドキュメントを、各親ドキュメントと一緒に返すことができます。&lt;/p&gt;
&lt;p&gt;例えば、&lt;code&gt;blog&lt;/code&gt;という親ドキュメントと&lt;code&gt;comment&lt;/code&gt;という子ドキュメントを持っているとします。
この時、&amp;ldquo;full text search&amp;quot;というコメントを持ったブログ記事を検索したいとします。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/my_index/blog/_search&lt;/span&gt;
{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;has_child&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;:       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;comment&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;score_mode&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sum&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;match&amp;#34;&lt;/span&gt;: {
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;body&amp;#34;&lt;/span&gt;:   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;full text search&amp;#34;&lt;/span&gt;
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上記のリクエストは、親の&lt;code&gt;blog&lt;/code&gt;ドキュメントを返します。
しかし、どのコメントが関係しているのかはわかりません。
関連しているコメントを検索して親ごとにグルーピングするために、
少し手間のかかる2回目のクエリを実行する必要があります。&lt;/p&gt;
&lt;p&gt;Inner hitsがこれを変えてくれます。
&lt;code&gt;inner_hits&lt;/code&gt;パラメータを次のように、上記のクエリに追加するだけです！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/my_index/blog/_search&lt;/span&gt;
{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;has_child&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;:       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;comment&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;score_mode&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sum&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;match&amp;#34;&lt;/span&gt;: {
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;body&amp;#34;&lt;/span&gt;:   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;full text search&amp;#34;&lt;/span&gt;
        }
      },
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;inner_hits&amp;#34;&lt;/span&gt;: {}
    }
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;検索結果の各&lt;code&gt;blog&lt;/code&gt;記事に、&lt;code&gt;inner_hits&lt;/code&gt;という項目があり、そこに検索にヒットしたコメントの
上位3件（デフォルト値）が返ってきます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hits&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; [
  {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_index&amp;#34;&lt;/span&gt;:   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;my_index&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_type&amp;#34;&lt;/span&gt;:    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;blog&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_id&amp;#34;&lt;/span&gt;:      &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_score&amp;#34;&lt;/span&gt;:   &lt;span style=&#34;color:#ae81ff&#34;&gt;3.68&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_source&amp;#34;&lt;/span&gt;:  { &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt; },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;inner_hits&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;comment&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;total&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;hits&amp;#34;&lt;/span&gt;: [
          {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_type&amp;#34;&lt;/span&gt;:    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;comment&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_id&amp;#34;&lt;/span&gt;:      &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_score&amp;#34;&lt;/span&gt;:   &lt;span style=&#34;color:#ae81ff&#34;&gt;2.79&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_source&amp;#34;&lt;/span&gt;: {
              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;body&amp;#34;&lt;/span&gt;:   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Full text search is the bomb&amp;#34;&lt;/span&gt;
            }
          },
          { &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt; },
          { &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt; }
        ]
      }
    }
  }
]
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;inner_hits&lt;/code&gt;部分は、第2の検索リクエストに似ています。
&lt;code&gt;size&lt;/code&gt;や&lt;code&gt;from&lt;/code&gt;パラメータを含めるくことで、挙動をカスタマイズできます。
また、検索から想像するであろう、ページネーション、ソート、ハイライト、&lt;code&gt;_source&lt;/code&gt;フィルタリングなどといった機能もサポートします。&lt;/p&gt;
&lt;p&gt;Inner hitsはparent-childおよび、&lt;code&gt;nested&lt;/code&gt;ドキュメントをサポートします。
この機能は、現時点では&lt;code&gt;experimental&lt;/code&gt;ラベルが付与されています。
このラベルは、この機能が将来変更されたり、削除されたりする可能性があるかもしれないことを意味します。
詳細については、&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/1.5/search-request-inner-hits.html&#34;&gt;Inner Hits documentation&lt;/a&gt;をごらんください。&lt;/p&gt;
&lt;h3 id=&#34;shadow-replicas&#34;&gt;Shadow replicas&lt;/h3&gt;
&lt;p&gt;Elasticsearchはそれ自身の冗長性に常に気をつけています。
それは、レプリカシャード（各プライマリシャードの冗長なコピー）を持っています。
これは、プライマリシャードを失った時に、データをロスしないようにするためのものです。
レプリカシャードはまた、検索のスループットをスケールアウトするためにも利用できます。
多くのレプリカ（ノードを伴うことで。）はスループットを増加させます。&lt;/p&gt;
&lt;p&gt;しかし、ユーザによってはElsticsearchを分散ファイルシステム上でホスティングしており、すでに、
ファイルシステムがレプリケーションと冗長性を担当しています。
ファイルシステムが同じことしているので、各シャードのコピーを複数持つことはあまり意味がありません。&lt;/p&gt;
&lt;p&gt;Shadowレプリカはノードを追加することによる検索スループットをスケールアウトすることが、
余分なストレージやインデキシングのコストを払うことなく、可能になります。
代わりに、各シャドーレプリカはプライマリシャードを持っている共有ファイルシステムにread-onlyでアクセスします。
Shadowレプリカは定期的にファイルシステムのビューをリフレッシュし、プライマリシャードのどんな変更も検知するでしょう。&lt;/p&gt;
&lt;p&gt;プライマリシャードが失敗したら、Shadowレプリカがプライマリに昇格し、
失敗したプライマリによって書き込まれたトランザクションログを読み込みリプレイできます。&lt;/p&gt;
&lt;p&gt;この機能は&lt;em&gt;experimental&lt;/em&gt;マークが付いています。詳細については&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-shadow-replicas.html&#34;&gt;Shadow Replicas documentation&lt;/a&gt;をごらんください。&lt;/p&gt;
&lt;h3 id=&#34;resiliency-improvements&#34;&gt;Resiliency improvements&lt;/h3&gt;
&lt;p&gt;Elasticsearch 1.1 から 1.3では、インデックスのすべてのファイルのチェックサムを追加し、
それらのファイルが壊れているかどうかをチェックするために利用することにフォーカスしました。
1.4では、Zen discoveryと分散モデルについて大きな改良を加えました。&lt;/p&gt;
&lt;p&gt;これらの変更にともなう、より詳細な統計情報やより詳細なロギングがElasticsearchやLuceneの以前のバージョンに存在した
未知の問題を明るみに出しました。
Elasticsearch 1.5.0では、これらの問題の多くに対処しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ElasticsearchとLuceneの以前のバージョンにあるバグがインデックスの故障を引き起こしていました。&lt;br&gt;
チェックサムコードのおかげで、これらを発見できました。現在は、Elasticsearchの起動時に自動的にLucene3.x&lt;br&gt;
(Elasticsearch 0.20.x以前)が作成したセグメントを検知して、シャードをオープンする前に、新しいフォーマットを使って、
新しいコミットポイントを書き出します。(&lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/9899&#34;&gt;#9899&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1.3.xもしくは以前のバージョンからローリングアップグレードは、ローカルのシャードデータを再利用しようとせずに、&lt;br&gt;
シャード全体をコピーしようとします。1.3.2と以前のバージョンが実行されているノードからローリングアップグレードすることは
圧縮をオフにしない限りできなくなりました。(&lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/9925&#34;&gt;#9925&lt;/a&gt;)&lt;br&gt;
1.3.xやそれ以前のバージョンからアップグレードする場合、ローリングアップデートする代わりにクラスタの再起動を考えたほうがいいかもしれません。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非同期環境は予測することが難しいです。時に、最も予測していないことが起きるからです。&lt;br&gt;
シャード配置、リカバリ、削除のコードの多くが単純化され、状態変更をよりアトミックで決定的にするための変更によりリファクタリングされました。&lt;br&gt;
(&lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/8720&#34;&gt;#8720&lt;/a&gt;, &lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/9799&#34;&gt;#9799&lt;/a&gt;, &lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/9784&#34;&gt;#9784&lt;/a&gt;, &lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/9801&#34;&gt;#9801&lt;/a&gt;, &lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/9083&#34;&gt;#9083&lt;/a&gt;, &lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/8579&#34;&gt;#8579&lt;/a&gt;, &lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/8436&#34;&gt;#8436&lt;/a&gt;, &lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/8092&#34;&gt;#8092&lt;/a&gt;, &lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/9902&#34;&gt;#9902&lt;/a&gt;, &lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/6644&#34;&gt;#6644&lt;/a&gt;, &lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/8350&#34;&gt;#8350&lt;/a&gt;, &lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/9770&#34;&gt;#9770&lt;/a&gt;, &lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/9616&#34;&gt;#9616&lt;/a&gt;, &lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/9439&#34;&gt;#9439&lt;/a&gt;, &lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/8350&#34;&gt;#8350&lt;/a&gt;, &lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/8494&#34;&gt;#8494&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同様に、変更はクラスタ状態の更新が常に前進するということを確実にしました。更新の受け取り順序が順不同であったり、&lt;br&gt;
マスターだったノードからの更新を受け取った場合に混乱させていました。
(&lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/9632&#34;&gt;#9632&lt;/a&gt;, &lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/9541&#34;&gt;#9541&lt;/a&gt;, &lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/9503&#34;&gt;#9503&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;チェックサムとチェックサムのバリデーションの強化(&lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/8723&#34;&gt;#8723&lt;/a&gt;,&lt;br&gt;
&lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/8599&#34;&gt;#8599&lt;/a&gt;, &lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/8587&#34;&gt;#8587&lt;/a&gt;, &lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/8407&#34;&gt;#8407&lt;/a&gt;, &lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/8010&#34;&gt;#8010&lt;/a&gt;, &lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/8018&#34;&gt;#8018&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;disk threshold allocation deciderを速く(&lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/8803&#34;&gt;#8803&lt;/a&gt;)、賢く(&lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/7785&#34;&gt;#7785&lt;/a&gt;)、自動化(&lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/8270&#34;&gt;#8270&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;auto-generated IDの利用時のインデキシングのスピードアップのためのに追加された最適化を除去。&lt;br&gt;
たまにドキュメントを重複して登録するため(&lt;a href=&#34;https://github.com/elastic/elasticsearch/pull/7729&#34;&gt;#7729&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;download-now&#34;&gt;Download now&lt;/h3&gt;
&lt;p&gt;ぜひ、&lt;a href=&#34;https://www.elastic.co/downloads/past-releases/elasticsearch-1-5-0&#34;&gt;Elasticsearch 1.5.0&lt;/a&gt;をダウンロードして、試してみてください。
そして、感想をTwitter(&lt;a href=&#34;https://twitter.com/elastic&#34;&gt;@elastic&lt;/a&gt;)などで教えて下さい。
また、問題がありましたら、&lt;a href=&#34;https://github.com/elastic/elasticsearch/issues&#34;&gt;GitHub issues page&lt;/a&gt;で報告をお願いします。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>セキュリティ向けプラグインShieldのリリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/02/27/you-know-for-security-shield-goes-ga-ja/</link>
      <pubDate>Fri, 27 Feb 2015 18:49:56 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/02/27/you-know-for-security-shield-goes-ga-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：you know, for security: shield goes ga 1/27にShield 1.0 をリリースしました。 Elasticsearc</description>
      <content:encoded>&lt;p&gt;&lt;strong&gt;※この記事は次のブログを翻訳したものになります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;http://www.elasticsearch.org/blog/you-know-for-security-shield-goes-ga/&#34;&gt;you know, for security: shield goes ga&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1/27にShield 1.0 をリリースしました。
Elasticsearch向けの私たちのセキュリティプラグインの最初のリリースです。
11月にShieldについてアナウンスしてから、Elsaticsearchのためのセキュリティの機能は、
一般的に望まれているものから始まり、具体的な考えと実行できる計画へと変遷し、それが、いま現実となりました。&lt;/p&gt;
&lt;p&gt;十分にセキュアな環境に、Elasticsearchクラスタをセキュアな状態でデプロイできるようにするため、
私たちは継続的にカスタマーやユーザーからのリクエストを受け取り、統合されたソリューションになるようにしてきました。&lt;/p&gt;
&lt;p&gt;私たちは、そのようなプロダクトがどうあるべきか調査することから始め、
カスタマーとユーザが必要とするセキュリティとはどんなものかを理解するために多くの時間を費やしました。
その結果がShieldです。
Shieldは、ElasticsearchクラスタをセキュアにするElasticsearchの有償プラグインです。
私たちは、ShieldをDev、Gold、Platinumサブスクリプションの一部として、追加料金なしで提供します。&lt;/p&gt;
&lt;p&gt;最初のリリースでは、基本的な機能と基盤にフォーカスしています。
Elasticsearch自身に対しても、セキュリティに対して準備してきました。
拡張性の側面だけでなく、Elasticsearchにあるデータフローについても再考してきました。
Elasticsearchクラスタをセキュアにする場合に、具体的な価値を即座に届けるだけでなく、素早く拡張できるようにも開発しました。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h3 id=&#34;機能&#34;&gt;機能&lt;/h3&gt;
&lt;p&gt;Shield 1.0は次の5つにフォーカスしています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;認証(Authentication)&lt;/li&gt;
&lt;li&gt;認可(Authorization)&lt;/li&gt;
&lt;li&gt;暗号化通信とノードの認可(Encrypted Communication &amp;amp; Node Authentication)&lt;/li&gt;
&lt;li&gt;IPフィルタリング&lt;/li&gt;
&lt;li&gt;監査証跡(Audit Trail)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;認証authentication&#34;&gt;認証(Authentication)&lt;/h3&gt;
&lt;p&gt;セキュリティの大部分はアイデンティティについてです（例えば、だれがこのAPIを呼び出したのか？システムに何のサービスが接続するか？など）
サービスのライフタイムのある時点で、サブジェクト（例えばユーザー）を現在実行中のサブプロセスなどに結びつけることです。
この関係性を持つためには、サブプロセスを実行する前にユーザの身元を確認するように命じます。
ユーザの身元の確認のプロセスをAuthenticationと呼び、ElasticsearchのすべてのAPIコールでそれが実行されます。&lt;/p&gt;
&lt;p&gt;認証の手法は多くの異なるものがあります。
それぞれの手法は、ユーザが認証されたという資格（Authentication Token）を、それぞれのタイプで提供するようにユーザに要求します。
Shield 1.0ではシンプルに、必要なauthentication tokenをユーザ/パスワードペアとしています。
（これは、Shieldの認証基盤が簡単に拡張でき、将来は異なるauthentication tokenもサポートできることを意味します。）&lt;/p&gt;
&lt;p&gt;ユーザの資格を受け取ることだけでは不十分で、次に、それらをチェックする必要があります。
Shieldでは、これはレルムの責務です。
レルムは認証プロバイダ/サービスとしてみることができます。
妥当なユーザであると判断/解決されたか、
authentication tokenが適切な資格を持っていない/単に知らないユーザであるということで、拒否されたかです。
Shieldの認証メカニズムでは、複数のレルムを設定でき、さらに、あるレルムの戻り値を扱う他のレルム、というようなchainとすることもできます。
Shield 1.0は3つのレルムをサポートします。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;esusers - Elasticsearchによって管理されるファイルベースのレルムです。
これは、ファイルにユーザを定義することができます。（Apacheサーバのhtpasswdファイルのようなもの）
このレルムは外部への依存はなく、Shieldをインストールすれば、デフォルトで使用できます。
このレルムは配置が簡単で、マルチテナントなElasticsearchクラスタに対して使用できます。
マルチテナントなElasticsearchクラスタとは、クラスタを複数のアプリでシェアすることをテナントと言います。
また、すべてのユーザがパスワードを忘れてしまうような&amp;quot;emergency&amp;quot;な代替レルムも対応可能です。
(誰もシステムに入れないような状況のことです)&lt;/li&gt;
&lt;li&gt;LDAP - 外部のLDAPサーバでユーザを認証するレルムです。
このレルムは組織のLDAPサーバで管理/保存されているユーザをすでに持っている組織を対象としています。&lt;/li&gt;
&lt;li&gt;Active Directory - LDAPのタイプの1つで、Active Directoryに対する設定になります。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;レルムはelasticsearch.yml設定ファイルで、次のように設定可能です。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;shield.authc
realms:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    esuser:
        type: esusers
        order: 0

    ldap:
        type: ldap
        order: 1
        url: ldaps://url/to/ldap1/server

    ldap_fallback:
        type: ldap
        order: 2
        url: ldaps://url/to/ldap2/server
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;上記のようにrealmsが一つのチェインとして参照されます。
レルムごとに、設定された順序で、それらは参照されます。&lt;/p&gt;
&lt;p&gt;NOTE : Shieldには、esusersファイルに保存されたユーザを管理するためのコマンドラインツールもあります。&lt;/p&gt;
&lt;h2 id=&#34;認可authorization&#34;&gt;認可(authorization)&lt;/h2&gt;
&lt;p&gt;認可(Authorization)は保護されたリソースにアクセスするユーザを許可するか拒否するかということです。
モダンなシステムは、ユーザのパーミッションのために、ロールベースのアクセスコントロール（RBAC）モデルを利用します。
このモデルでは、各ユーザはロールの集合に関連していて、それぞれのロールには、パーミッションの集合が定義されています。
これは、洗練された設定で、パーミッションを機能的なグループで共有させることができます。
例えば、次のようなロールを定義したとします。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;employee&lt;/em&gt; - すべての従業員は部門をまたいだ会社のデータへアクセスできます（例えば、コンタクトやディレクトリ情報など）&lt;/li&gt;
&lt;li&gt;&lt;em&gt;sales&lt;/em&gt; - すべての営業職は営業データにアクセスできる（例えば、流通ルート、ルート、顧客）&lt;/li&gt;
&lt;li&gt;&lt;em&gt;finace&lt;/em&gt; - すべての財務の従業員は財務データにアクセスできる（例えば、予算、経費、伝票）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;財務部門の&lt;code&gt;Ann&lt;/code&gt;は従業員と財務のロールを持っており、会社のディレクトリと財務データにアクセスでできます。&lt;/p&gt;
&lt;p&gt;認可プロセスはユーザがリクエストに関連したユーザが必要で、このプロセスのために、認証フェーズの後に直接実行されます。&lt;/p&gt;
&lt;p&gt;Shieldは2つのタイプのリソースを定義します。クラスタとインデックスです。
これらは、すべてのAPIコールで保護されます。
さらに、それらに関連したパーミッションとロールも定義できます。
一度定義をすると、ロールはユーザもしくはLDAP/ADのグループに関係します。
ロールは&lt;strong&gt;roles.yml&lt;/strong&gt;設定ファイルで定義されます。
設定のサンプルは次のようになります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;admin:
    cluster: all
    indices:
        &#39;*&#39; : all

monitor:
    cluster: monitor
    indices:
        &#39;*&#39;: monitor

employee:
    indices:
        &#39;company_directory&#39; : read

sales:
    indices:
        &#39;opportunities&#39; : read, write
        &#39;accounts&#39; : read, write

finance:
    indices:
        &#39;expenses&#39; : read, write
        &#39;purchases&#39; : read, write
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上記のサンプルで、次の5つのロールを定義しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;admin&lt;/em&gt; - 管理者のロールで、すべてのクラスターレベルの操作とすべてのインデックスに対してすべてのインデックスレベルの操作を実行可能です。
(¥*インデックスはすべてのインデックスにマッチするワイルドカード)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;monitor&lt;/em&gt; - システム/クラスタのモニタリングのためのロール。このロールのユーザはすべてのクラスタとインデックスレベルの情報の読み取りの
APIにアクセス可能だが、インデックスのデータへの読み書きや設定の更新は不能&lt;/li&gt;
&lt;li&gt;&lt;em&gt;employee&lt;/em&gt; - compnay_directoryにあるすべてのデータへの読み取りアクセスを与えられたロール。このロールはクラスタレベルへのアクセスやデータの書き込みアクセスは持っていない
(特にcompany。洗濯されたグループの人々はcompanyディレクトリの更新は可能だが、employeeは読み取りのみが可能)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;sales&lt;/em&gt; - opportunitiesとaccountsインデックスの読み書きができるロール&lt;/li&gt;
&lt;li&gt;&lt;em&gt;finance&lt;/em&gt; - expensesとpurchasesの両方に読み書きができるロール&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記のサンプルで定義されている&lt;code&gt;all&lt;/code&gt;と&lt;code&gt;read&lt;/code&gt;と&lt;code&gt;write&lt;/code&gt;として名前がつけられた権限です。
これらは、予約語で、Elasticsearchのローレベルのアクションを複数含んだ権限です。
（&lt;code&gt;write&lt;/code&gt;は&lt;code&gt;index, delete, delete_by_query, bulk, update&lt;/code&gt;の操作を含んでいます。）
多くのケースで、これらのハイレベルの名前が付けられた権限で十分ですが、特定のロールに特定のアクションを明示的に指定することもできます。
次のようになります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hr:
    indices:
        &#39;company_directory&#39; : indices:data/write/index, indices:data/write/update
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ここまで説明した認可のレルムは、各ユーザに関連するロールを識別するためのものです。
内部のesuserレルムでは、提供されるesuserコマンドラインツールを使ってロールはユーザに割り当てたり変更したりもできます。
LDAPやActive Directoryでは、LDAP/ADグループにShieldのロールを割り当てることができます。&lt;/p&gt;
&lt;p&gt;認証と認可の両方を用いることで、ユーザリクエストに対して、ユーザごとに許可/不許可をすることができます。&lt;/p&gt;
&lt;h3 id=&#34;暗号化通信&#34;&gt;暗号化通信&lt;/h3&gt;
&lt;p&gt;認可はElasticsearchのデータを機能的な観点（許可されたユーザだけが操作を可能にする）で保護しますが、
クライアントからElasticsearchクラスタへ、もしくはクラスタのノード間では暗号化されていないデータを送るためまだ危険があります。
第三者が登頂したり、オンザフライでデータを書き換えたりといった可能性やクラスタを壊すことができます。&lt;/p&gt;
&lt;p&gt;Shield 1.0はElasticsearchのすべての通信チャネルをセキュアにすることができます。
クラスタ内のノード間のチャネルやクライアントに公開されているチャネルです。
これは、SSL/TLS通信を導入して実現します。&lt;/p&gt;
&lt;p&gt;Shieldで使えるSSLはElasticsearchのtransportサービスをSSL/TLSで通信できるものに置き換えます。
これは、ノード間通信チャネルと、HTTP transport（REST APIを提供するもの）のそれぞれに設定可能です。&lt;/p&gt;
&lt;p&gt;ShieldのSSL/TLSは、スタンダードなJavaのものとkeystoreとtruststoreを基本にしたものが利用可能です。
SSL/TLSを設定すると、各ノードのキーストアに証明書をインポートする必要があります。
CAがサインした証明書を使うことも、CAが信頼したものとして許可許諾されたものを使うことが可能です。
これは、信頼されたすべてのCAとして知られているtrust storeが必要です。
新しいノードをクラスタに追加するときに、すべての必要な少なくとも一つの信頼されたCAから発行されてサインされたものが必要になります。
クラスタで個別のノードがすべてのkeystore/truststoreを更新する必要性なしに。？？&lt;/p&gt;
&lt;p&gt;通信チャネルを安全にする方法やSSL/TLS設定をどのように行うかは&lt;a href=&#34;http://www.elasticsearch.org/guide/en/shield/current/securing-nodes.html&#34;&gt;Shieldのドキュメント&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;h3 id=&#34;ノード間認証&#34;&gt;ノード間認証&lt;/h3&gt;
&lt;p&gt;強く推奨しますが、許可されたノードだけがクラスタに接続できるようにするために、ノードの認証をSSL transportに設定することができます。
これは、&lt;code&gt;shield.transport.client.auth&lt;/code&gt;に&lt;code&gt;true&lt;/code&gt;を設定することで可能です。
設定した場合、ノード間でSSLハンドシェイクが行われ、接続されたノードが接続に来たノードのクライアント認証を要求しチェックします。
もし、チェックに失敗した場合は、SSLシェイクハンドが失敗し接続が拒否されます。&lt;/p&gt;
&lt;h3 id=&#34;sslクライアント認証&#34;&gt;SSLクライアント認証&lt;/h3&gt;
&lt;p&gt;transportレベルでノード認証が必要なようなら、次のような疑問がわくでしょう。
Elasticsearchはクラスタに接続するTransportクライアントを使うときはどのように振る舞うのか？
Transportクライアントはクラスタの他のノードと同じチャネルを使うため、コネクションを確立するときに、ノードが他のノードと異なるかどうかを見極めることはできません。&lt;/p&gt;
&lt;p&gt;この時、もっとも単純な解決は、Transportクライアントも同様に許可を与えることです。
それは、認証を解決するときに、他の問題（潜在的な悪意）を引き起こします。
Transportクライアントが他のクラスタのノードを偽装しようとすることです。これは望んでいません。&lt;/p&gt;
&lt;p&gt;幸いなことに、良い解決方法があります。
トランスポートプロファイルです。
Elasticsearch 1.4で導入されたトランスポートプロファイルは、トランスポートレイヤー（異なるホスト/ポートにバインドされる）のために複数のネットワークチャネルを設定することができます。
Shieldはこのサポートを、プロファイルごとに異なるSSL設定をできるように拡張します。
また、ノードのタイプとクライアントプロファイルタイプの間に明確な違いを設定することも可能です。
これを用いると、2つのプロファイルを設定できるようになります。
ひとつは、クライアントのためのもので、もうひとつはクラスタのノードのためのものです。
これにより、クライアントのための認証の問題が必要なくなり、Shieldはクライアントプロファイルをもった限定されたクライアントからのリクエストを保証します。&lt;/p&gt;
&lt;h3 id=&#34;ipフィルタリング&#34;&gt;IPフィルタリング&lt;/h3&gt;
&lt;p&gt;これは、厳密には、認証カテゴリではありませんが関係しています。
Shieldはそれ自身がIPフィルタリングのメカニズムを持っています。
これは、許可/不許可のIPのリストを設定することができます。
これらのフィルタリングのルールは複数のレベルで設定可能です。
transportチャネル、transportプロファイルレベル、そして、HTTPチャネルです。
次の設定は、それらの設定のサンプルです。（設定ファイルはelasticsearch.ymlになります）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;shield:

    transport.filter:
        allow:
            - &#39;127.0.0.1&#39;
            - &#39;2001:0db8:1234:0000:0000:8a2e:0370:73
        deny:
            - &#39;10.0.0.0/8&#39;
            - &#39;2001:0db8:1234::/48&#39;
            - &#39;*.google.com&#39;

    http.filter:
        allow: [ &#39;10.0.0.0/8&#39; ]
        deny: [ &#39;127.0.0.1&#39; ]

transport.profiles:
    client:
        shield.filter.deny: [ &#39;_all&#39; ]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;このように、IPv4とIPv6、CIDR、ホスト名、ワイルドカードが利用できます。
また、この機能はホストOSのIPテーブルに設定することで追加できるが、Shieldにそれを保持し、それらの設定を単純化し、
デプロイの全体から除去できることにも注意してください（詳細は&lt;a href=&#34;http://www.elasticsearch.org/guide/en/shield/current/ip-filtering.html&#34;&gt;ドキュメントのIPフィルタリングをご覧ください&lt;/a&gt;）。&lt;/p&gt;
&lt;h3 id=&#34;監査証跡audit-trail&#34;&gt;監査証跡（Audit Trail）&lt;/h3&gt;
&lt;p&gt;セキュアなシステムの必須機能の一つで、監査硝石により、Elasticsearchに発生した重要なイベントをトラッキングすることが可能です。
これらのイベントを保存することは、Elasticsearchクラスタの重要なアクティビティの証拠を提供でき、
不審な/悪意のある可能性のあるイベントを追跡するときの診断ツールにもなります。&lt;/p&gt;
&lt;p&gt;Shield 1.0.0で、監査証跡は監査/アクセスlogを一般的なElasticsearchのログとは個別に保存します。
それらは、構造化されているため、読んだりパースするのが容易で、イベントのタイプも分類されています。
また、情報のレベルを設定することができ、各イベントをlogレベルの設定で書き出すことができます。
以下が、イベントのリストです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;anonymous_access_denied&lt;/em&gt; - 認証トークンがないユーザからのリクエストがあった時のログ&lt;/li&gt;
&lt;li&gt;&lt;em&gt;authentication_failed&lt;/em&gt; - リクエストされたユーザの認証に失敗した時のログ&lt;/li&gt;
&lt;li&gt;&lt;em&gt;access_denied&lt;/em&gt; - 認証されたユーザが許可されていない操作を実行した時のログ&lt;/li&gt;
&lt;li&gt;&lt;em&gt;access_granted&lt;/em&gt; - 認証されたユーザが許可された操作を実行した時のログ&lt;/li&gt;
&lt;li&gt;&lt;em&gt;tampered_request&lt;/em&gt; - 不正に書き換えられたリクエストが到着したのを検知した時のログ&lt;/li&gt;
&lt;li&gt;&lt;em&gt;connection_granted&lt;/em&gt; - ノードもしくはtransportクライアントがIPフィルタのルールにパスした時のログ&lt;/li&gt;
&lt;li&gt;&lt;em&gt;connection_denied&lt;/em&gt; - ノードもしくはtransportクライアントがIPフィルタリングルールの制限により却下された時のログ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Shieldの監査証跡についてより詳しく知りたい方は、&lt;a href=&#34;http://www.elasticsearch.org/guide/en/shield/current/auditing.html&#34;&gt;ドキュメント&lt;/a&gt;をごらんください。&lt;/p&gt;
&lt;h3 id=&#34;次のバージョンでは&#34;&gt;次のバージョンでは？&lt;/h3&gt;
&lt;p&gt;ここまで紹介したように、これはまだ始まりにすぎません。
Shieldに追加される多くの機能があり、しっかりとした基盤を構築したところです。
Shieldの次のバージョンでは、以下の機能の追加にフォーカスするでしょう。（これらだけに限ったわけではありません。）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;APIによる設定、管理&lt;/li&gt;
&lt;li&gt;より拡張され、柔軟なLDAP/Active Directoryサポート&lt;/li&gt;
&lt;li&gt;レルムタイプの追加（kerberos、anonymous、certificatesなどなど）&lt;/li&gt;
&lt;li&gt;セッションベースの認証&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ShieldはElasticsearch社の2番目の（&lt;a href=&#34;http://www.elasticsearch.com/products/marvel?_ga=1.40546982.567962035.1389706748&#34;&gt;Marvel&lt;/a&gt;に続く）商用プロダクトです。
ダウンロードして開発環境で評価してください。
インストールは他のプラグインと同様の方法です（インストール方法についての詳細は&lt;a href=&#34;http://www.elasticsearch.org/guide/en/shield/current/index.html&#34;&gt;こちら&lt;/a&gt;）。
一度インストールすると、30日の試用ライセンスが始まります。
もし、さらに時間が必要な場合は、sales@elasticsearch.comまで連絡してください。&lt;/p&gt;
&lt;p&gt;私たちのすべてのプロダクトについてフィードバックをお待ちしています。
Shieldの商用利用、機能、ロードマップ、その他のセキュリティに関するトピックなど、質問がありましたら、
&lt;a href=&#34;http://www.elasticsearch.com/contact/?_ga=1.32250170.567962035.1389706748&#34;&gt;サイトからご連絡ください&lt;/a&gt;。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch Coreトレーニング開催</title>
      <link>https://blog.johtani.info/blog/2015/02/27/2nd-tokyo-training/</link>
      <pubDate>Fri, 27 Feb 2015 17:10:29 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/02/27/2nd-tokyo-training/</guid>
      <description>4月13日から3日間、ElasticsearchのCoreトレーニングが東京で開催されます。 Early Birdということで、3/14までに申し込みす</description>
      <content:encoded>&lt;p&gt;&lt;a href=&#34;https://purchases.elasticsearch.com/class/Tokyo/2015-04-13&#34;&gt;4月13日から3日間、ElasticsearchのCoreトレーニング&lt;/a&gt;が東京で開催されます。
Early Birdということで、3/14までに申し込みすると割引があります。
興味のある方は、見ていただければと。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;また、4/15にElasticsearch勉強会を開催します。
トレーニングに弊社のエンジニアが来日しますので、なにか話をしてもらう予定です。&lt;/p&gt;
&lt;p&gt;募集は後日、&lt;a href=&#34;https://elasticsearch.doorkeeper.jp&#34;&gt;Elasticsearch勉強会&lt;/a&gt;のDoorkeeperで行います。
興味のある方は、登録しておいていただければと。&lt;/p&gt;
&lt;p&gt;トレーニングや勉強会でお待ちしております。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Kibana 4（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/02/20/kibana-4-literally-ja/</link>
      <pubDate>Fri, 20 Feb 2015 14:05:52 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/02/20/kibana-4-literally-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：kibana 4. literally. Kibana 4は現在、文字通り、抽象的に、概念的に、精神的に、そしてとても楽しく</description>
      <content:encoded>&lt;p&gt;&lt;strong&gt;※この記事は次のブログを翻訳したものになります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;http://www.elasticsearch.org/blog/kibana-4-literally/&#34;&gt;kibana 4. literally.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kibana 4は現在、文字通り、抽象的に、概念的に、精神的に、そしてとても楽しく、プロダクションレディになりました。
1週間前に準備はできていましたが、満足できるものであるという確信を得たいと思っていました。
そして、Kibana 4.0.0 GAをリリースしました。
次のものはサンプルのスクリーンショットと前日譚です。
これらに興奮してしまった方のために、2ステップのプランを用意しました。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ダウンロードする：&lt;a href=&#34;http://www.elasticsearch.org/overview/kibana/installation/&#34;&gt;Kibana 4 downloads&lt;/a&gt;ページからダウンロードします。&lt;/li&gt;
&lt;li&gt;理解する：&lt;a href=&#34;http://www.elasticsearch.org/guide/en/kibana/current/index.html&#34;&gt;Kibana 4 docs&lt;/a&gt;ページを読んで理解します。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Tip : もし、まだ、あなたのクラスタが&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-4-4/&#34;&gt;Elasticsearch 1.4.4&lt;/a&gt;でない場合は、アップグレードする必要があります。&lt;br&gt;
Tip2 : Kibana 4 RC1からアップグレードする場合は、configを移行する必要があります。&lt;a href=&#34;https://gist.github.com/spalger/8daf6c2b7f2954639e38&#34;&gt;こちらのgistを参照&lt;/a&gt;&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;前日譚---the-back-story&#34;&gt;前日譚 - the back story&lt;/h2&gt;
&lt;p&gt;Kibanaはすでに問題解決のためのツールになっています。
なぜ、毎晩2時に呼び出されるんでしょう？
そのコードがプロダクションに入ったのはいつですか？
その結果、何を壊しました？
私たちはそれらを解決しました。
世界的に、長い間、だれも夜中の2時に呼び出されませんでした。知ってます？。&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.johtani.info/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://www.elastic.co/assets/blt5dddb0351d09a397/Screen-Shot-2015-02-17-at-1.25.15-PM-1024x692.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://www.elastic.co/assets/blt5dddb0351d09a397/Screen-Shot-2015-02-17-at-1.25.15-PM-1024x692.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;*しかし、ここには落とし穴があります。*答えが簡単になれば、問題が難しくなります。
楽な勝利は簡単でした。では、難しい問題（深さが3層の問題）を解きましょう。
複数の要素、複数のフィールドそして、複数のデータソースを分析する必要がある問題を解きましょう。
Kibana 4は少ない時間と労力で最も難しい問題を解決してくれます。&lt;/p&gt;
&lt;p&gt;Kibana 3で学んだことをKibana 4に取り込みました。
なぜ10億のデータを持っているのに、地図には1000個しかプロットできないのでしょう？
1つのチャートに1つのフィールドなんでしょう？
なぜ、1つのパネルに1つのチャートなんでしょう？
なぜ、1つのダッシュボードに1つのインデックスなんでしょう？
5つのシナリオを用意し、2つのフィールドにまたがったデータを比較し、
1つのダッシュボードに3つのインデックスのデータを表示してみましょう。
さぁ、やりましょう。終わったらアイスクリーム（トッピング付きの）を取りに行きましょう。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://www.elastic.co/assets/blte1c56cdf8c51674d/Screen-Shot-2015-02-17-at-1.24.14-PM-1024x624.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://www.elastic.co/assets/blte1c56cdf8c51674d/Screen-Shot-2015-02-17-at-1.24.14-PM-1024x624.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&#34;the-plot&#34;&gt;the plot&lt;/h2&gt;
&lt;p&gt;アイスクリームのように、問題には多くの種類があります。
そのために、Kibanaをナポリ風アイスクリーム（3色アイス）のように分割しました。
嫌いな種類は除いて。
もし、あなたがKibanaのユーザ歴が長い場合、最初のタブの&lt;em&gt;Discover&lt;/em&gt;がホームであることが正しく感じるでしょう。
これにより、短時間で、検索し、レコードを見つけ、簡単な問題を解決できます。
簡単な問題とは、すべてを物語る1行のデータを見つけることによって解決する問題です。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://www.elastic.co/assets/blta5b9c4d326d1bab7/Screen-Shot-2015-02-17-at-1.55.18-PM1-1024x573.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://www.elastic.co/assets/blta5b9c4d326d1bab7/Screen-Shot-2015-02-17-at-1.55.18-PM1-1024x573.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;物事が簡単な検索で説明できるものよりも複雑になった時、チャートとグラフで魔法を作る時間です。
&lt;em&gt;Visualize&lt;/em&gt;タブを開き、Elasticsearchのaggregationの力を利用してデータを解析しましょう。
&lt;em&gt;Visualize&lt;/em&gt;は複数の次元の性質のデータを見せ、今まで尋ねたことがないような質問に対して素早く回答するチャートやテーブル、
地図を作成できます。
あなたが最初に尋ねる質問は「先週サイトが遅かったのはなぜ？」でした。
しかし、データによって明らかにされた質問は「なぜ、クリスマスに東京からの平均ファイルサイズリクエストがスパイクしたのか？」です。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://www.elastic.co/assets/blt8458a51cb72ffdc9/Screen-Shot-2015-02-18-at-11.13.37-AM-1024x617.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://www.elastic.co/assets/blt8458a51cb72ffdc9/Screen-Shot-2015-02-18-at-11.13.37-AM-1024x617.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;最後に、&lt;em&gt;Dashboard&lt;/em&gt;でこれらを1つにします。&lt;/p&gt;
&lt;p&gt;大きなスクリーンに配置して、こう言います。
「あなたの答えはこのリンクにあります。また、Wikiに埋め込んで、データをCSVにエクスポートしてメールしました。
アイスクリームを食べた後に、自叙伝の第1章を書きました。もっとアイスを持ってきてください。かき混ぜますから。」&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://www.elastic.co/assets/blte214158911741112/Screen-Shot-2015-02-17-at-3.30.30-PM-1024x715.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://www.elastic.co/assets/blte214158911741112/Screen-Shot-2015-02-17-at-3.30.30-PM-1024x715.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;それぞれのタブで見てきた詳細については、&lt;a href=&#34;http://www.elasticsearch.org/blog/kibana-4-beta-1-released/&#34;&gt;Kibana 4 Beta 1 : Released&lt;/a&gt;をごらんください。&lt;/p&gt;
&lt;h2 id=&#34;to-be-continued&#34;&gt;to be continued&amp;hellip;&lt;/h2&gt;
&lt;p&gt;居眠りをする時間はあります？いいえ、Kibana 4.1についてすでに作業中で、将来の大きなプランを持っています。
多くの労力はKibana 4の土台の安定と実用性を構築することに使われました。
また、Elasticsearchアプリケーションの将来を構築するプラットフォームを作りました。
すべてのものは拡張できるように設計されています。
例えば、可視化はより良くなるように構築されています。
オープンソースは私たちのGitHubアカウント以上のものです。
それは、新しく素晴らしいものを誰もが作ることができる構造を作ることが私たちの約束です。&lt;/p&gt;
&lt;p&gt;Kibanaでグラフなどを構築したり、Elasticsearchを利用したアプリケーションを作成するために、
私たち開発者のブログを参考にしてください。
ちょっと見てみたいですか？
Elastic{ON}15のSpencer Algerのトークをチェックしてください。&lt;/p&gt;
&lt;p&gt;あなた方なしでは、私たちはここにはいないですし、あなた方の助けがなければ何もできません。
ぜひ、GitHubでのissueや提案、貢献をお待ちしています。
もしくは、IRCでFreenodeの#kibanaに参加してください。&lt;/p&gt;
&lt;h2 id=&#34;extra-credit&#34;&gt;extra credit&lt;/h2&gt;
&lt;p&gt;Kibana 4のすべての話に興味がありますか？私たちのKibana 4ベータに関する過去のブログをチェックしてください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.elasticsearch.org/blog/kibana-4-beta-1-released/&#34;&gt;Kibana 4 Beta 1: Released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.elasticsearch.org/blog/kibana-4-beta-2-get-now/&#34;&gt;Kibana 4 Beta 2: Get it now&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.elasticsearch.org/blog/kibana-4-beta-3-now-more-filtery/&#34;&gt;Kibana 4 Beta 3: Now more filtery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.elasticsearch.org/blog/kibana-4-rc1-is-now-available/&#34;&gt;Kibana 4 RC1: Freshly baked&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最後に、Kibanaの利用に関する話をお持ちなら、ぜひ聞かせてください。
stories at elasticsearch dot comもしくは&lt;a href=&#34;http://www.twitter.com/elasticsearch&#34;&gt;@elasticsearch&lt;/a&gt;に連絡をください。
あなたの話を世界にどのようにシェアしているかごらんください。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 1.4.4および1.3.9リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/02/20/elasticsearch-1-4-4-and-1-3-9-released-ja/</link>
      <pubDate>Fri, 20 Feb 2015 14:05:34 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/02/20/elasticsearch-1-4-4-and-1-3-9-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：elasticsearch 1.4.4 and 1.3.9 released 本日（2/20）、Elasticsearch 1.4.</description>
      <content:encoded>&lt;p&gt;&lt;strong&gt;※この記事は次のブログを翻訳したものになります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-4-4-and-1-3-9-released/&#34;&gt;elasticsearch 1.4.4 and 1.3.9 released&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本日（2/20）、&lt;strong&gt;Elasticsearch 1.4.4&lt;/strong&gt;と&lt;strong&gt;Elasticsearch 1.3.9&lt;/strong&gt;をリリースしました。
これはバグフィックスリリースとなります。
主に、Lucene expression scriptsを使う場合のRPMとDEBパッケージの
パッケージング問題のフィックスをしたものです。
&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-4-4&#34;&gt;1.4.4のダウンロードこちらのリンク&lt;/a&gt;からアクセスできます。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;fixes&#34;&gt;fixes&lt;/h2&gt;
&lt;p&gt;1.4.3のRPMおよびDEBパッケージにはAntlrとASMの&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/pull/9696&#34;&gt;依存関係の不足&lt;/a&gt;がありました。
この依存はElasticsearchでLucene expression scriptsを利用する場合に必要になります。
Groovyに関する&lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-4-3-and-1-3-8-released/&#34;&gt;1.4.3の変更&lt;/a&gt;により、多くのユーザがLucene explression scriptsを利用することが予想されるため、すぐに、1.4.4をリリースしました。&lt;/p&gt;
&lt;p&gt;また、このリリースには、クラスタの保留タスクに関するいくつかのバグフィックスも含まれています。
さらに、date histogramで負のインターバルの場合に&lt;code&gt;OutOfMemoryError&lt;/code&gt;を引き起こすバグも
修正されています。&lt;/p&gt;
&lt;p&gt;すべての変更については&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-4-4&#34;&gt;1.4.4のリリースノート&lt;/a&gt;および&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-3-9&#34;&gt;1.3.9のリリースノート&lt;/a&gt;をごらんください。&lt;/p&gt;
&lt;h2 id=&#34;フィードバック&#34;&gt;フィードバック&lt;/h2&gt;
&lt;p&gt;私たちはフィードバックをお待ちしています。
Twitter(&lt;a href=&#34;https://twitter.com/elasticsearch&#34;&gt;@elasticsearch&lt;/a&gt;)もしくは&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/issues&#34;&gt;GitHub issues page&lt;/a&gt;で教えてください。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>名古屋でElasticsearch勉強会を開催します</title>
      <link>https://blog.johtani.info/blog/2015/02/18/preparing-elasticsearch-meetup-in-nagoya/</link>
      <pubDate>Wed, 18 Feb 2015 15:22:53 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/02/18/preparing-elasticsearch-meetup-in-nagoya/</guid>
      <description>来る、4月4日の土曜日の午後に名古屋でElasticsearch勉強会を開催予定です。 「初」の東京以外の勉強会です。 Twitterでこのよう</description>
      <content:encoded>&lt;p&gt;来る、4月4日の土曜日の午後に名古屋でElasticsearch勉強会を開催予定です。
「初」の東京以外の勉強会です。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;Twitterでこのようなツイートを見かけまして。&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p&gt;名古屋でElasticsearchの勉強会やりたい機運（今のところ2人）。&lt;/p&gt;&amp;mdash; mogami (@smogami) &lt;a href=&#34;https://twitter.com/smogami/status/562864387632136192&#34;&gt;2015, 2月 4&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;これは！ということで、名古屋で勉強会をやろうかと思います。30名程度の場所を借りて実施予定です。
募集はいつもの、&lt;a href=&#34;http://elasticsearch.doorkeeper.jp&#34;&gt;elasticsearch勉強会のDoorkeeper&lt;/a&gt;で行う予定です。
ページの準備まで少々待ちください。（おそらく、3月中旬くらい）
私自身はElasticsearchやELKについて話をしようと思っています。そのほかに、2,3名のスピーカーの方を予定しています。
LTなど興味がある人がいたら、連絡ください。&lt;/p&gt;
&lt;p&gt;これを機に（？）他の場所でも勉強会を開催したいと考えています。
ニーズがどのくらいありそうなのかが、まだよくわかっていませんが、関西などでニーズがあるんじゃないかと期待していたり。&lt;/p&gt;
&lt;p&gt;興味のある方は、コメント欄、Twitterなどでコンタクトしてもらえればと。
（連絡来るとうれしいなぁ。）&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>第8回Elasticsearch勉強会を開催しました。#elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2015/02/16/8th-elasticsearch-jp/</link>
      <pubDate>Mon, 16 Feb 2015 15:02:23 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/02/16/8th-elasticsearch-jp/</guid>
      <description>第8回Elsticsearch勉強会を開催しました。 スタッフの皆さん、スピーカーの皆さん、開場提供していただいたリクルートテクノロジーズさん</description>
      <content:encoded>&lt;p&gt;&lt;a href=&#34;http://elasticsearch.doorkeeper.jp/events/19923&#34;&gt;第8回Elsticsearch勉強会&lt;/a&gt;を開催しました。
スタッフの皆さん、スピーカーの皆さん、開場提供していただいた&lt;a href=&#34;http://recruit-tech.co.jp&#34;&gt;リクルートテクノロジーズさん&lt;/a&gt;、ありがとうございました！
次回もよろしくお願いします！参加していただき盛り上げていただいた参加者の皆さんもありがとうございました。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;今回は出足が好調で、早々に180人の枠を超えるという嬉しい事態でしたが、
キャンセル待ちが残っているにもかからわらず、来られていない方が67名もいるということで、キャンセル待ちの方には申し訳なかったです。
もうすこし、キャンセルをしてもらえると嬉しいんですが。。。
今回はメールを当日に1度しか打ってないからかなぁ。&lt;/p&gt;
&lt;p&gt;さて、いつもの通り簡単なメモです。
本当に簡単にですが。&lt;/p&gt;
&lt;h2 id=&#34;elasticsearch導入チェックリスト-elasticsearch株式会社-jun-ohtani-johtani&#34;&gt;「Elasticsearch導入チェックリスト？」 Elasticsearch株式会社 Jun Ohtani @johtani&lt;/h2&gt;
&lt;p&gt;スライド：&lt;a href=&#34;https://speakerdeck.com/johtani/elasticsearchdao-ru-tietukurisuto&#34;&gt;Elasticsearch導入チェックリスト？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Elasticsearchを開発環境や本番に導入する前に気にかけて欲しいことについて発表しました。
元ネタは&lt;a href=&#34;http://www.elasticsearch.org/webinars/elasticsearch-pre-flight-checklist/&#34;&gt;elasticsearch pre-flight checklist&lt;/a&gt;です。
少々古いのですが、私が今回話した内容以外にもモニタリングなどについての話も盛り込まれています。
時間がある方は、見ていただければと。&lt;/p&gt;
&lt;h2 id=&#34;elasticsearch-クエリとスキーマ定義のすごい細かい話株式会社ドワンゴ-藤堂淳也-さん&#34;&gt;「Elasticsearch クエリとスキーマ定義のすごい細かい話」株式会社ドワンゴ 藤堂淳也 さん&lt;/h2&gt;
&lt;p&gt;スライド：&lt;a href=&#34;https://speakerdeck.com/jtodo/elasticsearch-kueritosukimading-yi-falsexi-kaihua&#34;&gt;Elasticsearch クエリとスキーマ定義のすごい細かい話&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;フィールドのチェックを別途インデキシングするアプリで行っている。利用できるものだけElasticsearchに投げる&lt;/li&gt;
&lt;li&gt;実際に本番環境で利用しているマッピングに対してフィールドを追加する手順について&lt;/li&gt;
&lt;li&gt;「これもドキュメントに書いてあるんですが」という感じでドキュメントに色々書いてあるので読みましょうというありがたい発表でした。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実際に試行錯誤したり検証するときに行ったことを喋ってもらえたので、どういった点を気にしながら運用、設計するかというのがわかりやすかったです。&lt;/p&gt;
&lt;h2 id=&#34;elasticsearchとkibanaで実現する30億reqdayのリアルタイム分析株式会社サイバーエージェント山田直行さんsatully&#34;&gt;「ElasticsearchとKibanaで実現する、30億req/dayのリアルタイム分析」株式会社サイバーエージェント　山田直行さん　@satully&lt;/h2&gt;
&lt;p&gt;スライド：&lt;a href=&#34;http://www.slideshare.net/Satully/elasticsearch8-elasticsearchkibana-30reqday&#34;&gt;ElasticsearchとKibanaで実現する、30億req/dayのリアルタイム分析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;会場が21時までしか抑えられていないという失態で、ドタバタしてて前半は聞けてないです。。。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前回の発表では30日分Elasticsearchに入れていたが、今は3日分のみ保存&lt;/li&gt;
&lt;li&gt;レポートなどにはRedshift＋Tableauを利用&lt;/li&gt;
&lt;li&gt;Kibana3をメインに使っているが、Kibana4も検討予定？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;QA&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Q：なぜ、ELBを挟んでいるのか？
&lt;ul&gt;
&lt;li&gt;A：特に考えておいているわけではない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q：インデックスの構成は？
&lt;ul&gt;
&lt;li&gt;A：1日に2つのインデックス。Bitされたもの、入札されないもの&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q：searchのnodeをやめたのは？
&lt;ul&gt;
&lt;li&gt;A：前回発表した勉強会での懇親会で話を聞いたり、他の方と話を聞いて、不要と判断したため&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;はてなのメディア面を支えるelasticsearch株式会社はてな山家雄介さんyanbe&#34;&gt;「はてなのメディア面を支えるElasticsearch」株式会社はてな　山家雄介さん　@yanbe&lt;/h2&gt;
&lt;p&gt;スライド：未定。おそらく、開発者ブログに公開されるかと。&lt;/p&gt;
&lt;p&gt;* アドテク系にもやってるらしい。BrandSafeはてな&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;はてなブックマークのデータを魅せ方を変える機能などで大活躍。&lt;a href=&#34;http://bkuma.hatena.ne.jp&#34;&gt;B!KUMA&lt;/a&gt;とか&lt;/li&gt;
&lt;li&gt;その日の話題の見出し自動生成機能。Significant Terms Aggregationsを利用。&lt;/li&gt;
&lt;li&gt;こちらの&lt;a href=&#34;http://bookmark.hatenastaff.com/entry/2015/02/05/190331&#34;&gt;「自然言語処理技術を用いたはてなブックマークの新機能「トピック」をベータリリースしました」&lt;/a&gt;エントリに関係あるのかな？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;記事の魅せ方を検索できる管理画面ではElasticsearchのクエリDSLを活用されているとのことでした。
検索専門の人でなくても検索式を簡単にくみたてられる画面を用意して、ElasticsearchのクエリDSLに変換するようにしていると。
確かに、クエリをそのまま組み立ててもらうよりも利用しやすい画面がある方がいいですよね。バックエンドはJSとPerlのライブラリとのことでした。&lt;/p&gt;
&lt;h2 id=&#34;その他感想などのブログ&#34;&gt;その他、感想などのブログ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://takudo.hatenablog.jp/entry/2015/02/14/101749&#34;&gt;2015-02-13 第8回 elasticsearch 勉強会 @ 丸の内 リクルート 41Fアカデミーホール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://suzuki.tdiary.net/20150213.html&#34;&gt; [Elasticsearch] 第8回 elasticsearch 勉強会へ参加してきた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/t-sato/items/8e353ccf7d7bba46f635&#34;&gt;第8回elasticsearch勉強会 #elasticsearch #elasticsearchjp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://keyamb.hatenablog.com/entry/2015/02/16/015916&#34;&gt;第8回 Elasticsearch 勉強会に行ってきた #elasticsearch #elasticsearchjp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.yoslab.com/entry/2015/02/13/203251&#34;&gt;勉強会メモ - 第8回elasticsearch勉強会&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;今回も検索からログまでいろんな話になったので、面白かったかと。
参加された方は新しい方が多かったんじゃないかなぁと。（集計結果で見れないのかな、Doorkeeper）。&lt;/p&gt;
&lt;p&gt;今回は、みなさんに21時に41Fから33Fへ移動していただくという大失態があったので、大変申し訳なかったです。
次回（4月中旬）は、このようなことがないように気をつけますので、今後もよろしくお願いいたします。&lt;/p&gt;
&lt;p&gt;あと、東京以外の勉強会も検討しつつあります。興味のある方はコメントやTwitterで反応をいただけると嬉しいです。&lt;/p&gt;
&lt;p&gt;スピーカーは随時募集中ですので、コメント、メール、ツイートなど、コンタクトしていただければと思います。 よろしくお願いいたします。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Groovyスクリプトをダイナミックスクリプトなしで実行(日本語訳)</title>
      <link>https://blog.johtani.info/blog/2015/02/12/running-groovy-scripts-without-dynamic-scripting-ja/</link>
      <pubDate>Thu, 12 Feb 2015 15:13:09 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/02/12/running-groovy-scripts-without-dynamic-scripting-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：running groovy scripts without dynamic scripting Elasticsearch1.3.8と1.4.3のリリースによ</description>
      <content:encoded>&lt;p&gt;&lt;strong&gt;※この記事は次のブログを翻訳したものになります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;http://www.elasticsearch.org/blog/running-groovy-scripts-without-dynamic-scripting/&#34;&gt;running groovy scripts without dynamic scripting&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Elasticsearch1.3.8と1.4.3のリリースにより、デフォルトで、リクエストに含まれるGroovyスクリプトや
インデックスに保存されたスクリプトを動的に実行する機能をオフにしました。
しかし、Groovyはまだデフォルトのスクリプト言語です。
本ブログ記事では、少しだけダイナミックだが、サンドボックスではない言語のためのスクリプトを
どのように使い続けるかを説明します。&lt;/p&gt;
&lt;p&gt;本ブログ記事は、それが何を意味し、さらに重要なのは、安全に重要なタスクを実行させるためにスクリプトを
どのように使用し続けるかを理解する助けとなるはずです。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;ダイナミックスクリプトとは&#34;&gt;ダイナミックスクリプトとは？&lt;/h2&gt;
&lt;p&gt;Elasticsearchに詳しくない方のために、Elasticsearchでは、
さまざまなリクエストの一部としてスクリプトを送信することができます。
search、aggregation、update、upsert、delete by queryなどです。
あなたのユースケースのために、通常の動作よりも拡張した動作をさせるためにスクリプトを追加できます。&lt;/p&gt;
&lt;p&gt;例えば、以下のリクエストは、ダイナミックスクリプトを含んでいます。
&lt;code&gt;field1&lt;/code&gt;と&lt;code&gt;field2 + shift&lt;/code&gt;が同じ値を持っている時だけドキュメントを返します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/_search&lt;/span&gt;
{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;:{
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;filtered&amp;#34;&lt;/span&gt;:{
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;filter&amp;#34;&lt;/span&gt;:{
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;script&amp;#34;&lt;/span&gt;:{
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;script&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;doc[&amp;#39;field1&amp;#39;].value == (doc[&amp;#39;field2&amp;#39;].value + shift)&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;lang&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;groovy&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;params&amp;#34;&lt;/span&gt;:{
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;shift&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
          }
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;言語を変えることもできます。
それは、当然、シンタックスが変わったり、制限が追加（例えば、Groovyスクリプトの代わりに&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-scripting.html#_lucene_expressions_scripts&#34;&gt;Lucene　Expressions&lt;/a&gt;に変更）されることもあります。
&lt;code&gt;lang&lt;/code&gt;パラメータによって言語を指定できます。&lt;/p&gt;
&lt;h3 id=&#34;なぜそれはダイナミック&#34;&gt;なぜそれはダイナミック？&lt;/h3&gt;
&lt;p&gt;上記の例はダイナミックスクリプトです。
それは、実際のスクリプトの部分はサーバサイドで&lt;em&gt;動的に&lt;/em&gt;解釈されコンパイルされる必要があるからです。
ダイナミックスクリプトはElasticsearchのAPIによってデータノードに送信されます。
これは、&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-scripting.html#_indexed_scripts&#34;&gt;インデックスされたスクリプト(indexed script)&lt;/a&gt;も含みます。&lt;/p&gt;
&lt;p&gt;言い換えると、もし、スクリプトがデータノード全てに保存されていなければ、
それは、ダイナミックスクリプトとして扱われます。&lt;/p&gt;
&lt;h2 id=&#34;dynamic-scriptingをオフにするとどうなるか&#34;&gt;dynamic scriptingをオフにするとどうなるか？&lt;/h2&gt;
&lt;p&gt;最新のリリースでの変更により、Groovyのdynaic scriptingはデフォルトでオフになりました。
先ほどのスクリプトについても同様で、もし、先ほどのリクエストを実行すると、次のようなエラーが発生します。
(一部省略してあります。)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;error&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SearchPhaseExecutionException[Failed to execute phase [query], all shards failed; shardFailures {[8FJ02MofSnqVvOQ10BXxhQ][test][0]: SearchParseException[[test][0]: from[-1],size[-1]: Parse Failure [Failed to parse source [{...}]]]; nested: ScriptException[dynamic scripting for [groovy] disabled]...&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;エラーメッセージの重要な箇所は「ScriptException[dynamic scripting for [groovy] disabled]」です。&lt;/p&gt;
&lt;h2 id=&#34;スクリプティングを使い続けるには&#34;&gt;スクリプティングを使い続けるには？&lt;/h2&gt;
&lt;p&gt;Elasticsearchでスクリプトを実行するには3つの方法があります。
2つのダイナミックな方法は、リクエストごとのスクリプト（上述）かインデックスされた
スクリプト(indexed script)を使う方法です。
インデックスされたスクリプトを使うことは、Elasticsearch自身にGroovyスクリプトを保管することで
利用で、それらを要求に応じて利用することです。
（これは、実際には十分機能しますが、これではまだ、信頼できないユーザに対して彼らのスクリプトを実行できます）
RDBのように保存されたプロシージャとして同じ方法で実行させるものと同様です。
前もって、スクリプトを記述しておき、リクエストの一部として後から、名前で呼び出して実行可能です。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/_search&lt;/span&gt;
{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;:{
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;filtered&amp;#34;&lt;/span&gt;:{
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;filter&amp;#34;&lt;/span&gt;:{
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;script&amp;#34;&lt;/span&gt;:{
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;script_id&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;your_custom_script&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;lang&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;groovy&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;params&amp;#34;&lt;/span&gt;:{
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;shift&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
          }
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;あまり変わっていないことに気づくでしょう。
&lt;code&gt;script&lt;/code&gt;の部分が、前もって記述されたスクリプトの名前&lt;code&gt;script_id&lt;/code&gt;に変更されただけです。&lt;/p&gt;
&lt;p&gt;Elasticsearchにスクリプトを提供するダイナミックではない方法はインデックスに保存する代わりに、
ディスクにファイルとしてスクリプトを保存することです。
そうすることで、各スクリプトを設定として保存します。
これは、どのようなスクリプト言語に対してもダイナミックスクリプティングをオフにしたまま、
サンドボックス化されないスクリプトを使い続けることができる方法です。&lt;/p&gt;
&lt;p&gt;最初のサンプルで、Groovyスクリプトは&lt;code&gt;doc[&#39;field1&#39;].value == doc[&#39;field2&#39;].value + shift&lt;/code&gt;でした。
これを、&lt;code&gt;.groovy&lt;/code&gt;拡張子を持ったファイルとして書き出すことができます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;doc[&#39;field1&#39;].value == (doc[&#39;field2&#39;].value + shift)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;もし、このファイルに&lt;code&gt;your_custom_script.groovy&lt;/code&gt;ちう名前をつけて、
Elasticsearchのすべてのデータノードの&lt;code&gt;config/scripts&lt;/code&gt;ディレクトリに保存すると、
Elasticsearchは60秒（elasticsearch.ymlの&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-scripting.html#_automatic_script_reloading&#34;&gt;&lt;code&gt;watcher.interval&lt;/code&gt;で変更可能&lt;/a&gt;）でこのスクリプトを認識し、今後のリクエストに利用できるようにプリコンパイルするでしょう。
そのファイルはElasticsearch実行ユーザによって読み込みができる必要があります。
これをディスクに書き込んだ後、あなたの設定ディレクトリは次のようになっています。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config/
  elasticsearch.yml
  logging.yml
  scripts/
    your_custom_script.groovy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これは、各リクエストやインデックスされたスクリプトをスクリプトとして動的に送信しませんが、
信頼された環境にスクリプトを追加することでダイナミックスクリプトとなることを許します。&lt;/p&gt;
&lt;h2 id=&#34;ディスクに書かれたスクリプトを使用する&#34;&gt;ディスクに書かれたスクリプトを使用する&lt;/h2&gt;
&lt;p&gt;スクリプトは、ロードされたスクリプトになるまでは、利用できません。
ログファイルに次のようなログが表示されるまではです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[2015-02-11 11:14:47,066][INFO ][script                   ] [Sergei Kravinoff] compiling script file [/path/to/elasticsearch-1.4.3/config/scripts/your_custom_script.groovy]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;すべてのElasticsearchのデータノードでスクリプトが読み込まれたら、
それを利用することができます。
利用するために、&lt;code&gt;file&lt;/code&gt;（&lt;code&gt;script_id&lt;/code&gt;ではありません！）としてスクリプト名を指定します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/_search&lt;/span&gt;
{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;:{
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;filtered&amp;#34;&lt;/span&gt;:{
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;filter&amp;#34;&lt;/span&gt;:{
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;script&amp;#34;&lt;/span&gt;:{
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;your_custom_script&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;lang&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;groovy&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;params&amp;#34;&lt;/span&gt;:{
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;shift&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
          }
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note:&lt;code&gt;lang&lt;/code&gt;は必須ではありません。Groovyがデフォルトの言語のためです。
もし、違うスクリプト言語を使いたい、もしくは、デフォルトの言語を（例えば、Lucene Expressionsへ）
変更したい場合、言語が正しいスクリプトを見つけるために提供されている必要があります。
一番良い方法は、アプリケーションが&lt;code&gt;lang&lt;/code&gt;パラメータを含んでいることを勧めます。
これは、将来、デフォルトのスクリプト言語が変更されても、問題ないからです。&lt;/p&gt;
&lt;h2 id=&#34;質問&#34;&gt;質問？&lt;/h2&gt;
&lt;p&gt;もし、質問があれば、遠慮なくTwitter(&lt;a href=&#34;https://twitter.com/elasticsearch&#34;&gt;@elasticsearch&lt;/a&gt;)で教えて下さい。
また、問題がありましたら、&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/issues&#34;&gt;GitHub issues page&lt;/a&gt;で報告をお願いします。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch　1.4.3および1.3.8リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/02/12/elasticsearch-1-4-3-and-1-3-8-released-ja/</link>
      <pubDate>Thu, 12 Feb 2015 12:39:53 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/02/12/elasticsearch-1-4-3-and-1-3-8-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：elasticsearch 1.4.3 and 1.3.8 released 本日、Lucene 4.10.3をベースにしたElas</description>
      <content:encoded>&lt;p&gt;&lt;strong&gt;※この記事は次のブログを翻訳したものになります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-4-3-and-1-3-8-released/&#34;&gt;elasticsearch 1.4.3 and 1.3.8 released&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本日、&lt;strong&gt;Lucene 4.10.3&lt;/strong&gt;をベースにした&lt;strong&gt;Elasticsearch 1.4.3&lt;/strong&gt;と、&lt;strong&gt;セキュリティ&lt;/strong&gt;とバグフィックスリリースである、&lt;strong&gt;Elasticsearch 1.3.8&lt;/strong&gt;をリリースしました。
ダウンロードおよび変更リストはそれぞれ次のリンクからアクセスできます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最新ステーブルリリース：&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-4-3&#34;&gt;Elasticsearch 1.4.3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1.3.x系バグフィックス：&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-3-8&#34;&gt;Elasticsearch 1.3.8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;過去のリリースに関するブログ（公式）はこちら。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.4:&lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-4-2-released/&#34;&gt;1.4.2&lt;/a&gt;,
&lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-4-1-released/&#34;&gt;1.4.1&lt;/a&gt;,
&lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-4-0-released/&#34;&gt;1.4.0&lt;/a&gt;, &lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-4-0-beta-released/&#34;&gt;1.4.0.Beta1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1.3:&lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-4-2-released/&#34;&gt;1.3.7&lt;/a&gt;,
&lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-4-1-released/&#34;&gt;1.3.6&lt;/a&gt;,
&lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-4-0-released/&#34;&gt;1.3.5&lt;/a&gt;, &lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-3-4-released/&#34;&gt;1.3.4&lt;/a&gt;, &lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-3-3-released/&#34;&gt;1.3.3&lt;/a&gt;, &lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-3-2-released/&#34;&gt;1.3.2&lt;/a&gt;, &lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-3-1-released/&#34;&gt;1.3.1&lt;/a&gt;, &lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-3-0-released/&#34;&gt;1.3.0&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;すべての変更については&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-4-3&#34;&gt;1.4.3のリリースノート&lt;/a&gt;および&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-3-8&#34;&gt;1.3.8のリリースノート&lt;/a&gt;をごらんください。
以下では、セキュリティの問題について紹介します。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;groovy-scripting-の脆弱性&#34;&gt;groovy scripting の脆弱性&lt;/h2&gt;
&lt;p&gt;Elasticsearchのバージョン1.3.0から1.3.7および1.4.0から1.4.2で、Groovyスクリプトエンジンに脆弱性が発見されました。
脆弱性は、攻撃者がGroovyスクリプトをサンドボックスを避けて構築でき、
ElasticsearchのJava VMを実行しているユーザとしてシェルコマンドを実行できます。&lt;/p&gt;
&lt;p&gt;この問題をCVE-2015-1427として報告済みです。&lt;/p&gt;
&lt;p&gt;バージョン1.3.8と1.4.3では、デフォルトで、Groovyに対してのサンドボックスをオフにしました。
結果として、&lt;strong&gt;ダイナミックスクリプトの実行はGroovyに対してもオフとなります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;もし、脆弱性のあるバージョンで実行している場合、v1.3.8かv1.4.3にアップグレードするか、ダイナミックなGroovyスクリプトをクラスタの
すべてのノードに対して次の設定を追加することで、オフにします。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;script.groovy.sandbox.enabled: false
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これは、Groovyのサンドボックスをオフにし、リクエストの一部としてインラインで受け付けるダイナミックなGroovyスクリプトや
特殊な&lt;code&gt;.scripts&lt;/code&gt;インデックスに保存されているスクリプトを実行しません。&lt;/p&gt;
&lt;p&gt;それまでは、各データノードの&lt;code&gt;config/scripts&lt;/code&gt;ディレクトリにファイルとして保存されたGroovyスクリプトは
まだ、利用可能です。詳細の情報については&lt;a href=&#34;http://www.elasticsearch.org/blog/running-groovy-scripts-without-dynamic-scripting/&#34;&gt;Running scripts without dynamic scripting&lt;/a&gt;をごらんください。&lt;/p&gt;
&lt;h2 id=&#34;future-scripting-plans&#34;&gt;future scripting plans&lt;/h2&gt;
&lt;p&gt;安全なダイナミックスクリプティング言語としてGroovyを失うことは、Elasticsearchにとって痛手です。
update APIやsearch APIやaggregationsフレームワークの一部としてScriptを使います。
それらは、静的なAPIでは簡単に表現できない、カスタムなトリックをユーザに実行できるようにします。&lt;/p&gt;
&lt;p&gt;残念ながら、Groovyチームとこの問題を議論した後、Groovy言語もサンドボックスによってきちんと保護されている
というにはあまりにもダイナミックであるという結論に達しました。
Groovyは、デフォルトでは利用できなくなります。
利用可能なダイナミックスクリプト言語としては&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-scripting.html#_lucene_expressions_scripts&#34;&gt;Lucene Expressions言語&lt;/a&gt;のみとなります。
Expressionsははやいですが、それらは非常に限定されています。数値のフィールドでのみ実行可能で、ループをサポートしていません。&lt;/p&gt;
&lt;p&gt;より強力で（しかし安全な）ミニ言語になるようにExpressionsを拡張することを調査しています。
これは、Scriptユーザが現在持っている最も一般的なユースケースを少なくとも助けるでしょう。
この拡張は長期間のプロジェクトであり、進化には時間がかかるでしょう。&lt;/p&gt;
&lt;p&gt;ぜひ、&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-4-3&#34;&gt;Elasticsearch 1.4.3&lt;/a&gt;をダウンロードして、試してみてください。
そして、感想をTwitter(&lt;a href=&#34;https://twitter.com/elasticsearch&#34;&gt;@elasticsearch&lt;/a&gt;)などで教えて下さい。
また、問題がありましたら、&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/issues&#34;&gt;GitHub issues page&lt;/a&gt;で報告をお願いします。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>CROSS 2015で話をしてきました #cross2015</title>
      <link>https://blog.johtani.info/blog/2015/01/29/talk-at-cross2015/</link>
      <pubDate>Thu, 29 Jan 2015 11:59:28 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/01/29/talk-at-cross2015/</guid>
      <description>今年もCROSS参加しました。そして、話もしてきました。 今年は横浜の大さん橋でした。横浜はあんまりこないので、乗り換えでおたおたしてしまいま</description>
      <content:encoded>&lt;p&gt;今年もCROSS参加しました。そして、話もしてきました。
今年は横浜の大さん橋でした。横浜はあんまりこないので、乗り換えでおたおたしてしまいましたが。。。&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.johtani.info/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20150129/oosanbashi.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20150129/oosanbashi.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- more --&gt;
&lt;p&gt;なかなかいい景色でした。（寒いけど）
「おおさんばし」って読むんですね。「だいさんばし」だと思ってた。。。&lt;/p&gt;
&lt;p&gt;以下はいつもの、自分用メモです。&lt;/p&gt;
&lt;h2 id=&#34;俺はどうしてそのデータストアを選択したのか-銀河と小宇宙を語る会&#34;&gt;俺はどうしてそのデータストアを選択したのか 〜銀河と小宇宙を語る会〜&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://2015.cross-party.com/program/c1&#34;&gt;http://2015.cross-party.com/program/c1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;遅れて入ったので、ちゃんと聴けてないです。&lt;/p&gt;
&lt;h4 id=&#34;最近注目しているデータストアは&#34;&gt;最近注目しているデータストアは？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Postgresql。JSON型が気になってる。&lt;/li&gt;
&lt;li&gt;AiroSpike。データ型のあるデータストアが気になってる。&lt;/li&gt;
&lt;li&gt;MongoDB。&lt;strike&gt;JSON使いたいなら、これじゃないの？&lt;/strike&gt;&lt;/li&gt;
&lt;li&gt;AWSのAurora。&lt;strike&gt;インスタンスタイプを選ばなくていい&lt;/strike&gt;（選ばないといけないらしい）とか、勝手にスケールしてくれるし、MySQL互換。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;今こそ語るエンジニアの幸せな未来&#34;&gt;今こそ語るエンジニアの幸せな未来&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://2015.cross-party.com/program/x3&#34;&gt;http://2015.cross-party.com/program/x3&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「無職初日です。」&lt;/li&gt;
&lt;li&gt;Web系の人？とか質問されて、自分が何系かいつもわからなくなるなぁ。&lt;/li&gt;
&lt;li&gt;「働きがいは会社が提供するのか、個人が見つけるのか？」
&lt;ul&gt;
&lt;li&gt;個人かなぁ。会社がなにをやってるかにもよる気がするかなぁ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「辞めると伝えると、やりたいようにやれって言われるw」&lt;/li&gt;
&lt;li&gt;リモートできるかできないか。&lt;/li&gt;
&lt;li&gt;「働きがい」というキーワードが出てると普通は怪しい会社w&lt;/li&gt;
&lt;li&gt;今は、働きやすさを高くしないと人が雇えなくなってきている。&lt;/li&gt;
&lt;li&gt;欧米のミドルウェアだと、35歳定年説はない。→日本でもそうじゃないですか？&lt;/li&gt;
&lt;li&gt;漫然と進んでるとダメ。→そりゃそうだ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;全文検索エンジン群雄割拠あなたが使うべきはどれだ&#34;&gt;全文検索エンジン群雄割拠〜あなたが使うべきはどれだ！〜&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://2015.cross-party.com/program/c4&#34;&gt;http://2015.cross-party.com/program/c4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;スライド：https://speakerdeck.com/johtani/elasticsearchfalseshao-jie-tote-zheng-cross-2015&lt;/p&gt;
&lt;p&gt;楽しんでいただけましたでしょうか？
ちょっと話が長くなってしまい、あとの方の時間が少なかった気がしますが。。。&lt;/p&gt;
&lt;p&gt;Kibanaのバックエンドとして認識されている人もいたので、検索エンジンですよというのをアピールするいい機会になったので良かったです。
もちろん、Kibanaとの組み合わせも面白いので、少しでも興味をもっていただき、触っていただけたらなぁと。&lt;/p&gt;
&lt;p&gt;話をする機会を用意していただいた、&lt;a href=&#34;https://twitter.com/yamakatu&#34;&gt;やまかつさん&lt;/a&gt;、その他のスピーカーのみなさん、ありがとうございました！。&lt;/p&gt;
&lt;p&gt;Elasticsearchに関して何か興味質問などありましたら、気軽にコンタクトしてください。Twitterとかブログコメントなどで。&lt;/p&gt;
&lt;h2 id=&#34;プレモルタイム以降&#34;&gt;プレモルタイム以降&lt;/h2&gt;
&lt;p&gt;プレモルの写真撮るの忘れてました。。。重要なのに。。。&lt;/p&gt;
&lt;p&gt;美味しくプレモルをいただきながら、何人かの方に声をかけていただき、話をすることができました。
こういう時間がとってあるのがいいですよね。
色々なところでElasticsearchを使っていただいているようで、うれしい限りです。
DMMの方とも話ができたし。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;今年はプレモルを飲みに行くだけかなぁと思っていたのですが、話をする人になってました。（おかしいなぁ）
来年もあれば、きっと参加するかなぁと。ではまた来年！&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20150129/night.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20150129/night.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;夜景きれいですね。（端っこに写ってる船は&lt;a href=&#34;http://www.asukacruise.co.jp/facility/view/&#34;&gt;飛鳥II&lt;/a&gt;でした。）&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 2.0系のIssueの紹介</title>
      <link>https://blog.johtani.info/blog/2014/12/25/pickup-elasticsearch-2-0-0-labels/</link>
      <pubDate>Thu, 25 Dec 2014 15:53:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/12/25/pickup-elasticsearch-2-0-0-labels/</guid>
      <description>この記事はElasticsearch Advent Calndar 2014の25日目のエントリです。 あっという間に最終日です。来年につなげるという意味で、Elasti</description>
      <content:encoded>&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2014/elasticsearch&#34;&gt;Elasticsearch Advent Calndar 2014&lt;/a&gt;の25日目のエントリです。&lt;/p&gt;
&lt;p&gt;あっという間に最終日です。来年につなげるという意味で、Elasticsearchの2系のIssueをいくつかピックアップして紹介してみます。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;現在、ElasticsearchのGitHubリポジトリは、大きく3つのブランチで作業しています。
&lt;code&gt;master&lt;/code&gt;、&lt;code&gt;1.x&lt;/code&gt;、&lt;code&gt;1.4&lt;/code&gt;です。&lt;code&gt;master&lt;/code&gt;と&lt;code&gt;1.x&lt;/code&gt;の大きな違いとしては、&lt;code&gt;master&lt;/code&gt;はLuceneの5.x系を採用している点です。&lt;/p&gt;
&lt;p&gt;なお、これから紹介するIssueは現在、確定していない項目も含んでいます。実際に2.0がリリースされるタイミングでは
採用されない場合もあります。&lt;/p&gt;
&lt;h2 id=&#34;upgrade-master-to-lucene-50-snapshot-8347-closed&#34;&gt;Upgrade master to lucene 5.0 snapshot #8347 (closed)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/pull/8347&#34;&gt;https://github.com/elasticsearch/elasticsearch/pull/8347&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先ほど書きましたが、Luceneの5に対応するためのPRです。
Lucene 5に関してはLuceneのコミッターのMikeさんの&lt;a href=&#34;http://blog.mikemccandless.com/2014/11/apache-lucene-500-is-coming.html&#34;&gt;ブログ記事&lt;/a&gt;も参考になります。&lt;/p&gt;
&lt;p&gt;Lucene 5に変更することで、BitSetに関する改善が多く含まれることになります。
メモリの利用量、圧縮などの改善が多く含まれています。
もう1点大事な点としては、Lucene 5系ではLucene 3系のインデックスを読み込むことができなくなる点です。
Luceneの下位互換の範囲は1つ前のメジャーバージョン（5.x系の場合は4.xまでが対象）となっています。&lt;/p&gt;
&lt;h2 id=&#34;filter-cache-add-a-_cache-auto-option-and-make-it-the-defaultclosed&#34;&gt;Filter cache: add a &lt;code&gt;_cache: auto&lt;/code&gt; option and make it the default.（closed）&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/pull/8573&#34;&gt;https://github.com/elasticsearch/elasticsearch/pull/8573&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Filter cacheは、&lt;code&gt;true&lt;/code&gt;もしくは&lt;code&gt;false&lt;/code&gt;の設定が利用できますが、filterの種類にも依存します。
その辺りの条件を加味しつつ、よしなにCacheをコントロールしてくれます。&lt;/p&gt;
&lt;h2 id=&#34;remove-andornot-in-favour-of-bool-filter-8960open--discuss&#34;&gt;Remove and/or/not in favour of &lt;code&gt;bool&lt;/code&gt; filter #8960（open / discuss）&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/issues/8960&#34;&gt;https://github.com/elasticsearch/elasticsearch/issues/8960&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;似ているが少し異なる&lt;code&gt;and&lt;/code&gt;、&lt;code&gt;or&lt;/code&gt;、&lt;code&gt;not&lt;/code&gt;フィルタと&lt;code&gt;bool&lt;/code&gt;フィルタが存在しています。
これらをわかりやすくするために、&lt;code&gt;bool&lt;/code&gt;フィルタに統一しましょうという話し合いをしています。&lt;/p&gt;
&lt;h2 id=&#34;input-validation-9059open--discuss&#34;&gt;Input validation #9059（open / discuss）&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/issues/9059&#34;&gt;https://github.com/elasticsearch/elasticsearch/issues/9059&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;色々な入力に関するチェックを追加しようというIssueです。
たとえば、ディレクトリ名やファイル名、URLのパスやクエリストリング、フィールドのパスやスクリプトなどです。
Validationがあると、変な設定をして頭をかかえることもなくなるかなぁと。&lt;/p&gt;
&lt;h2 id=&#34;refactor-analysis-framework-8961open&#34;&gt;Refactor analysis framework #8961（open）&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/issues/8961&#34;&gt;https://github.com/elasticsearch/elasticsearch/issues/8961&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;新しくAnalyzerを作った場合に、色々な場所に登録必要があったりします。インデックスレベルとノードレベルです。（Kuromojiプラグインなどが参考になります。）
また、インデックスごとにカスタムのAnalyzerを設定するので、1つのノードに同じAnalyzerを何度も設定しないといけません。
よりシンプルにするために、Analyzerをノード単位で設定しようという提案です。&lt;/p&gt;
&lt;h2 id=&#34;remove-possibility-for-conflicting-field-definitions-and-ambiguous-field-resolution-8870open&#34;&gt;Remove possibility for conflicting field definitions and ambiguous field resolution #8870（open）&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/issues/8870&#34;&gt;https://github.com/elasticsearch/elasticsearch/issues/8870&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;同じインデックスに、異なるtypeで、同じフィールド名があった場合、いろいろと良くないことがあったりします。
たとえば、フィールドのタイプがintegerとstringと異なる場合に、インデックスレベルで検索を行うとうまく検索できなかったりと。
この問題を解消するために、より明確にしようというIssueです。
たとえば、フィールド名を指定するためには、フルパスで記述をするだとか、フィールドマッピングに関してはインデックスレベルで内部で保持をするなど。&lt;/p&gt;
&lt;h2 id=&#34;validation-of-mappings-request-to-reject-unsupported-fields-7205closed&#34;&gt;Validation of mappings request to reject unsupported fields #7205（closed）&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/issues/7205&#34;&gt;https://github.com/elasticsearch/elasticsearch/issues/7205&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1.xでも取り込まれますが、嬉しい機能なので紹介します。
これまでは、mappingsでスペルミスをした場合（たとえば、field設定で&amp;quot;indexx&amp;quot;といったミス）には、その項目は単に無視されるだけでした。
これが、v1.xでは、エラーに&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;ということで、簡単ですが、v2.0.0に向けたIssueをピックアップして紹介してみました。
上記以外にも多くの改善、提案が2.0に向けて行われています。
興味のある方は、&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/issues?q=is%3Aopen+is%3Aissue+label%3Av2.0.0&#34;&gt;v2.0.0&lt;/a&gt;ラベルでIssueを検索してみてはいかがでしょうか？&lt;/p&gt;
&lt;p&gt;今年もあとわずかとなりました。
今年の2月にElasticsearchの1.0がリリースされ、あっという間に1.4なりました。まだまだ改善しています。&lt;/p&gt;
&lt;p&gt;来年もElasticsearchに興味をもっていただければ嬉しいです。
&lt;a href=&#34;http://www.elasticon.com/&#34;&gt;Elasticsearch初のユーザカンファレンスのサイトもオープン&lt;/a&gt;しました。
Elasticsearchに関するいろいろな話が聞ける機会だと思います。登録をお待ちしています。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Marvel 1.3.0リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2014/12/18/marvel-1-3-0-released-ja/</link>
      <pubDate>Thu, 18 Dec 2014 17:06:48 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/12/18/marvel-1-3-0-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：marvel 1.3.0 released 12/17に、Elasticsearch Marvel 1.3.0をリリースしました</description>
      <content:encoded>&lt;p&gt;&lt;strong&gt;※この記事は次のブログを翻訳したものになります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;http://www.elasticsearch.org/blog/marvel-1-3-0-released/&#34;&gt;marvel 1.3.0 released&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;12/17に、&lt;strong&gt;Elasticsearch Marvel 1.3.0&lt;/strong&gt;をリリースしました。
Marvelの以前のリリースから、Elasticsearchでは様々なことがありました（Elasticsearch 1.4のリリースなど）。
このバージョンでは、モニタリングにクエリキャッシュや新しいcircuit breakerなどのような機能を追加してあります。
Senseのナレッジベースは最新のAPIを含むものに拡張されています。
また、&lt;a href=&#34;http://www.elasticsearch.org/overview/shield/&#34;&gt;Shield&lt;/a&gt;のリリースに向けた準備として、HTTPsのサポートも追加しました。&lt;/p&gt;
&lt;p&gt;アップグレードのために、Elasticsearchの全てのノードに最新版のMarvelプラグインをインストールする必要があります。
また、他のJavaプラグインと同様に、Marvelの新バージョンを有効にするために、各ノードを（1台ずつ）リスタートする必要があるでしょう。
アップグレードプロセスについての詳細は、&lt;a href=&#34;http://www.elasticsearch.org/guide/en/marvel/current/upgrade.html#upgrade&#34;&gt;Marvelドキュメント&lt;/a&gt;をごらんください。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;まとめとして、ここに本リリースに関する改善点をいかにリストアップしておきます。&lt;/p&gt;
&lt;h3 id=&#34;agent&#34;&gt;agent&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;追加：
&lt;ul&gt;
&lt;li&gt;httpsのサポート&lt;/li&gt;
&lt;li&gt;デフォルトのMarvelの設定（以前は常に9200）ではなく、ローカルノードのポートを自動的に検出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;改善：
&lt;ul&gt;
&lt;li&gt;marvelインデックステンプレートに関するエラーチェックと耐障害性(それに対するチェックと追加時のチェック)&lt;/li&gt;
&lt;li&gt;エラーログに関するくり返しの抑制&lt;/li&gt;
&lt;li&gt;URLパラメータによるインデックス名を指定する_bulk exportコマンド。これは、&lt;code&gt;rest.action.multi.allow_explicit_index&lt;/code&gt;がfalseに設定されているときに有用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正：
&lt;ul&gt;
&lt;li&gt;ES 1.4.0のtribe nodeがMarvelのインストール時に初期化されない問題&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;削除：
&lt;ul&gt;
&lt;li&gt;UIで表示されないoptional shard level statsを除去&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;monitoring-ui&#34;&gt;monitoring ui&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;追加：
&lt;ul&gt;
&lt;li&gt;ES 1.4.0で導入された新しいcircuit breakerを追加&lt;/li&gt;
&lt;li&gt;circuit breakerのlimitをグラフにプロット&lt;/li&gt;
&lt;li&gt;QueryCacheのグラフを追加&lt;/li&gt;
&lt;li&gt;index throttlingのグラフの追加&lt;/li&gt;
&lt;li&gt;Index writerとバージョンのmapのメモリ使用量のグラフの追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正：
&lt;ul&gt;
&lt;li&gt;Network Transport Bytes Receivedグラフに実際の送信量を表示&lt;/li&gt;
&lt;li&gt;Node Statsダッシュボードでいくつかのスレッドプールの不足&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sense&#34;&gt;sense&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;追加：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mappingsをインデックスでオートコンプリートするしないの設定を可能に&lt;/li&gt;
&lt;li&gt;Cluster Reroute API&lt;/li&gt;
&lt;li&gt;Search APIのQuery Cacheパラメータ&lt;/li&gt;
&lt;li&gt;Analyze API&lt;/li&gt;
&lt;li&gt;Validate Query API&lt;/li&gt;
&lt;li&gt;Put Percolator API&lt;/li&gt;
&lt;li&gt;cluster.routing.allocation.*設定&lt;/li&gt;
&lt;li&gt;Function Scoreクエリのweightパラメータ&lt;/li&gt;
&lt;li&gt;Flush API&lt;/li&gt;
&lt;li&gt;Terms Aggregationのshow_term_doc_count_errorパラメータ&lt;/li&gt;
&lt;li&gt;Update API&lt;/li&gt;
&lt;li&gt;_geo_distanceソートオプション&lt;/li&gt;
&lt;li&gt;Significant Terms aggregationを1.4.0にアップデート&lt;/li&gt;
&lt;li&gt;Mapping APIにメタデータフィールドを追加&lt;/li&gt;
&lt;li&gt;Get Index API&lt;/li&gt;
&lt;li&gt;Scripted Metric Aggregation&lt;/li&gt;
&lt;li&gt;simple_query_stringクエリ&lt;/li&gt;
&lt;li&gt;More Like Thisクエリを1.4.0にアップデート&lt;/li&gt;
&lt;li&gt;has_childクエリ/フィルタのmin_childrenとmax_childrenオプション&lt;/li&gt;
&lt;li&gt;terms aggs/significant terms aggsのヒントオプション&lt;/li&gt;
&lt;li&gt;Mappings APIのtransform&lt;/li&gt;
&lt;li&gt;インデックスされたscriptとtemplate
* Geo Bounds aggregation&lt;/li&gt;
&lt;li&gt;Top Hits aggregation&lt;/li&gt;
&lt;li&gt;Terms aggregationのcollect_modeオプション&lt;/li&gt;
&lt;li&gt;Percentiles Rank aggregation&lt;/li&gt;
&lt;li&gt;Disk Threshold Allocator設定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修正：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URLオートコンプリートの挙動（プロトコルとホストのような組み合わせ）&lt;/li&gt;
&lt;li&gt;nested typeマッピングのinclude_in_parentとinclude_in_rootの不足&lt;/li&gt;
&lt;li&gt;Rangeフィルタでのgt、gte、lt、lte&lt;/li&gt;
&lt;li&gt;Existsフィルタのオートコンプリート&lt;/li&gt;
&lt;li&gt;Snapshot、Restore APIのリポジトリ設定の時オートコンプリートの失敗&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;いつものように、Elasticsearch Marvelを改善するために、フィードバックをお待ちしています。
&lt;a href=&#34;https://groups.google.com/forum/?fromgroups#!forum/elasticsearch&#34;&gt;ElasticsearchユーザML&lt;/a&gt;や&lt;a href=&#34;http://www.twitter.com/elasticsearch&#34;&gt;Twitter&lt;/a&gt;に質問や意見お送りください。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 1.4.2および1.3.7リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2014/12/18/elasticsearch-1-4-2-released-ja/</link>
      <pubDate>Thu, 18 Dec 2014 14:26:14 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/12/18/elasticsearch-1-4-2-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：elasticsearch 1.4.3 and 1.3.8 released 本日、Lucene 4.10.3をベースにしたElas</description>
      <content:encoded>&lt;p&gt;&lt;strong&gt;※この記事は次のブログを翻訳したものになります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-4-3-and-1-3-8-released/&#34;&gt;elasticsearch 1.4.3 and 1.3.8 released&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本日、&lt;strong&gt;Lucene 4.10.3&lt;/strong&gt;をベースにした&lt;strong&gt;Elasticsearch 1.4.3&lt;/strong&gt;と、&lt;strong&gt;セキュリティ&lt;/strong&gt;フィックスとバグフィックスリリースである、&lt;strong&gt;Elasticsearch 1.3.8&lt;/strong&gt;をリリースしました。
ダウンロードおよび変更リストはそれぞれ次のリンクからアクセスできます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最新ステーブルリリース：&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-4-3&#34;&gt;Elasticsearch 1.4.3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1.3.x系バグフィックス：&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-3-8&#34;&gt;Elasticsearch 1.3.8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;過去のリリースに関するブログ（公式）はこちら。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.4:&lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-4-1-released/&#34;&gt;1.4.1&lt;/a&gt;,
&lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-4-0-released/&#34;&gt;1.4.0&lt;/a&gt;, &lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-4-0-beta-released/&#34;&gt;1.4.0.Beta1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1.3:&lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-4-1-released/&#34;&gt;1.3.6&lt;/a&gt;,
&lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-4-0-released/&#34;&gt;1.3.5&lt;/a&gt;, &lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-3-4-released/&#34;&gt;1.3.4&lt;/a&gt;, &lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-3-3-released/&#34;&gt;1.3.3&lt;/a&gt;, &lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-3-2-released/&#34;&gt;1.3.2&lt;/a&gt;, &lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-3-1-released/&#34;&gt;1.3.1&lt;/a&gt;, &lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-3-0-released/&#34;&gt;1.3.0&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;すべての変更については&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-4-2&#34;&gt;1.4.2のリリースノート&lt;/a&gt;および&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-3-7&#34;&gt;1.3.7のリリースノート&lt;/a&gt;をごらんください。
以下では、重要な変更について紹介します。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;bug-fixes&#34;&gt;bug fixes&lt;/h2&gt;
&lt;p&gt;Elasticsearchに対して広範囲にわたってランダムなテストを行っています。以下の問題を見つけ、修正するのに役立っています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プライマリシャードを持つnodeがレプリカシャードをプライマリから復旧している間に、リスタートした場合に、プライマリ上のトランザクションログが削除されデータをロスする(&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/pull/8917&#34;&gt;#8917&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;scriptインデックスが普及した場合に、ScriptService全体がデッドロック(&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/pull/8901&#34;&gt;#8901&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Index Writerのロックを強制的に解放することによるシャードの破損(&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/pull/8892&#34;&gt;#8892&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;パフォーマンス改善&#34;&gt;パフォーマンス改善&lt;/h2&gt;
&lt;p&gt;複雑な設定をもつ大きめのクラスタをもつユーザは、小さなスケールではわからない性能ボトルネックに直面します。
彼らの報告が次の改善をもたらす助けとなりました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用可能なディスク空間に基づいてシャードの配置を決定する、disk allocation deciderの速度改善とクラスタリスタート後のリカバリ速度の改善(&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/pull/8803&#34;&gt;#8803&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;以前よりも高速な共有ファイルシステムでのSnapshot生成(&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/pull/8749&#34;&gt;#8749&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;不要なクラスタ状態変更の削減とそれによるネットワークトラフィックの削減およびリカバリの速度向上(&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/pull/8933&#34;&gt;#8933&lt;/a&gt;, &lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/pull/8413&#34;&gt;#8413&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;index stats APIはシャードリカバリによるブロックしない(&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/pull/8910&#34;&gt;#8910&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;試してみてください&#34;&gt;試してみてください。&lt;/h2&gt;
&lt;p&gt;ぜひ、&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-4-2&#34;&gt;Elasticsearch 1.4.2&lt;/a&gt;をダウンロードして、試してみてください。
そして、感想をTwitter(&lt;a href=&#34;https://twitter.com/elasticsearch&#34;&gt;@elasticsearch&lt;/a&gt;)などで教えて下さい。
また、問題がありましたら、&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/issues&#34;&gt;GitHub issues page&lt;/a&gt;で報告をお願いします。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>JJUG ナイトセミナーでLuceneの簡単な紹介をしてきました。#JJUG</title>
      <link>https://blog.johtani.info/blog/2014/12/17/jjug-night-seminar-dec-2014/</link>
      <pubDate>Wed, 17 Dec 2014 18:41:54 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/12/17/jjug-night-seminar-dec-2014/</guid>
      <description>「【東京】JJUG ナイト・セミナー「機械学習・自然言語処理特集！」12/17（水）開催」でLuceneの話をしてきました。 本当にごく簡単な入</description>
      <content:encoded>&lt;p&gt;&lt;a href=&#34;http://jjug.doorkeeper.jp/events/18378&#34;&gt;「【東京】JJUG ナイト・セミナー「機械学習・自然言語処理特集！」12/17（水）開催」&lt;/a&gt;でLuceneの話をしてきました。
本当にごく簡単な入門です。
Luceneをさわるきっかけにしてもらえたら嬉しいです。&lt;/p&gt;
&lt;p&gt;そのほかにも面白い話が聞けましたので、簡単ですがメモを。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;jjugの2014年振り返り&#34;&gt;JJUGの2014年振り返り&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;だいたい、毎月ナイトセミナーかCCCを開催&lt;/li&gt;
&lt;li&gt;イベント系に、のべ3100名が参加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;java-でカジュアルにはじめる機械学習&#34;&gt;Java でカジュアルにはじめる機械学習&lt;/h2&gt;
&lt;h3 id=&#34;小宮-篤史さんスマートニュース株式会社&#34;&gt;小宮 篤史さん(スマートニュース株式会社)&lt;/h3&gt;
&lt;p&gt;スライド：&lt;a href=&#34;https://speakerdeck.com/komiya_atsushi/number-jjug-java-dekaziyuarunihazimeruji-jie-xue-xi&#34;&gt;#JJUG - Java でカジュアルにはじめる機械学習&lt;/a&gt;&lt;br&gt;
ブログ：&lt;a href=&#34;http://blog.k11i.biz/2014/12/jjug-java.html&#34;&gt;#JJUG ナイトセミナー「機械学習・自然言語処理特集！」で Java でカジュアルに機械学習する話をしてきました&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ガチの人は寝ててください。&lt;/li&gt;
&lt;li&gt;機械学習でできること
&lt;ul&gt;
&lt;li&gt;分類・識別&lt;/li&gt;
&lt;li&gt;予測・回帰&lt;/li&gt;
&lt;li&gt;パターンマイニング・アソシエーションルール&lt;/li&gt;
&lt;li&gt;クラスタリング&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;上2つは教師あり学習/下2つは教師なし学習&lt;/li&gt;
&lt;li&gt;データとしては、日構造では扱えないので、「特徴量」を抽出して「特徴ベクトル」を作って、処理をするのが機械学習&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;得られた結果の正しさの測定などなど&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;機械学習の実装は辛いので、車輪の再発明をやめましょう！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Javaで使える機械学習&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Weka：とりあえず使ってみるならこれ？&lt;/li&gt;
&lt;li&gt;MLlib：Sparkで使われてる&lt;/li&gt;
&lt;li&gt;Mahout：オワコン？&lt;/li&gt;
&lt;li&gt;SAMOA：Stormの上で利用できる&lt;/li&gt;
&lt;li&gt;Jubatus：Javaクライアントあり。&lt;/li&gt;
&lt;li&gt;h2o：Deep learningをJavaでやるなら、これ。&lt;/li&gt;
&lt;li&gt;ほかにもあったけど、スライド見ていただければ。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;機械学習をはじめるのに使えるデータセット&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;UCI Machine learning repository&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Iris（アヤメデータ）は機械学習界のHello world&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wekaを使ったサンプルコード&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sparkmllibではじめるスケーラブルな機械学習&#34;&gt;Spark/MLlibではじめるスケーラブルな機械学習&lt;/h2&gt;
&lt;h3 id=&#34;猿田-浩輔さん株式会社エヌティティデータ&#34;&gt;猿田 浩輔さん(株式会社エヌ・ティ・ティ・データ)&lt;/h3&gt;
&lt;p&gt;スライド：（後日、リンクがあれば更新予定）&lt;/p&gt;
&lt;p&gt;* Spark+MLlibを語る上で外せない話題&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hadoopとの違い？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;まずはHadoopの話&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HadoopによるK-meansのデモ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hadoopの問題点に対するSparkの解決策&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spark 1.0系からJava8で書ける&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;QA：&lt;/p&gt;
&lt;p&gt;Q： データをキャッシュできるという話でしたが、キャッシュするということは、ジョブが途中で失敗した場合は最初からやり直しになるのでしょうか？
A： キャッシュしたデータが残っている場合は、途中から再開出来ます。キャッシュしたデータを持ったマシンがこけたら、最初からやり直しです。&lt;/p&gt;
&lt;h2 id=&#34;luceneと日本語の検索&#34;&gt;Luceneと日本語の検索&lt;/h2&gt;
&lt;h3 id=&#34;自分&#34;&gt;自分&lt;/h3&gt;
&lt;p&gt;スライド：&lt;a href=&#34;https://speakerdeck.com/johtani/lucenetori-ben-yu-falsejian-suo&#34;&gt;Luceneと日本語の検索&lt;/a&gt;
サンプルのリポジトリ：&lt;a href=&#34;https://github.com/johtani/jjug-example&#34;&gt;jjug-example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;自然言語処理にからめて何か話をしてくださいと話を受けていたのですが、自然言語処理については「形態素解析」くらいしか出てこなかったですけど。。。
Luceneがどんなものかを超概要で話をしてみました。少しでもLuceneがどんなものかをわかってもらえたら嬉しいです。&lt;/p&gt;
&lt;p&gt;もっと詳しく知りたい方は、スライドにある参考資料などを見ていただければと。&lt;/p&gt;
&lt;p&gt;Javaで書くのもいいんですが、もっと簡単に検索したい場合はElasticsearchを使うのが便利ですよ！で締めくくりたかったのですが、発表では失敗してしまいました。。。
Elasticsearchの起動からデータ登録、検索までは&lt;a href=&#34;https://speakerdeck.com/johtani/elasticsearch-and-kibana&#34;&gt;こちらのスライド&lt;/a&gt;を見ていただければ簡単さがわかると思います。&lt;/p&gt;
&lt;p&gt;また、Kuromojiを利用した時に、Tokenizerなどが出力するTokenの品詞情報を見たい場合に便利な&lt;a href=&#34;https://github.com/johtani/elasticsearch-extended-analyze&#34;&gt;Elasticsearch用プラグイン&lt;/a&gt;も作っています。
こちらも、Elasticsearchと一緒に使ってみてください。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;機械学習に関していろんなツールがあるのだなぁと。
懇親会でもちょっと話しましたが、アルゴリズムの選定とか、アルゴリズムに適したデータの作成など、前処理のノウハウとかが大変そうだなぁといつも思います。
機械学習はいつもぼやーっとしか理解してないので。。。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCZ5gDYmqI0tOeg-fEkCD2CQ&#34;&gt;JJUGさんはYouTubeの動画&lt;/a&gt;もあるようなので、過去の面白そうなセミナーも合わせてみてみると面白いと思います。&lt;/p&gt;
&lt;p&gt;毎度のことですが、なんでも良いので、発表した後のフィードバックをいただけるとうれしいです。
今後の励みや改善につながるので。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>2014年のElasticsearch</title>
      <link>https://blog.johtani.info/blog/2014/12/01/about-elasticsearch-in-2014/</link>
      <pubDate>Mon, 01 Dec 2014 18:05:48 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/12/01/about-elasticsearch-in-2014/</guid>
      <description>早いもので、師走です。今年もあと少しとなりました。ということで、Advent Calendarの季節が始まりました。 この記事はElastics</description>
      <content:encoded>&lt;p&gt;早いもので、師走です。今年もあと少しとなりました。ということで、Advent Calendarの季節が始まりました。&lt;/p&gt;
&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2014/elasticsearch&#34;&gt;Elasticsearch Advent Calndar 2014&lt;/a&gt;の1日目のエントリです。&lt;/p&gt;
&lt;p&gt;1日目ということで、簡単に今年の変遷を振り返りつつ、今年導入された新機能についてピックアップしてみようかと思います。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;10リリースlucene-460&#34;&gt;1.0リリース(Lucene 4.6.0)&lt;/h2&gt;
&lt;p&gt;今年一番の目玉と思いますが、1月にRCが公開されて、1.0.0が2月にリリースされました。
（ElasticSearch Serverの翻訳が昨年末に終わってレビューをしていた段階での発表だったので個人的にはきついタイミングでした）
1.0の主な変更点はこちら。&lt;/p&gt;
&lt;h3 id=&#34;elasticsearchsが小文字に&#34;&gt;Elasticsearch（Sが小文字に）&lt;/h3&gt;
&lt;p&gt;1.0からSが小文字になりました。(&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/issues/4634&#34;&gt;#4634&lt;/a&gt;)
0.90以前のバージョンについては、Sが大文字になっています。
ややこしいですが、今年の3月に出版された黒い&lt;a href=&#34;http://www.amazon.co.jp/dp/4048662023/ref=as_sl_pc_tf_lc?tag=johtani-22&amp;amp;camp=243&amp;amp;creative=1615&amp;amp;linkCode=as1&amp;amp;creativeASIN=4048662023&amp;amp;adid=0YAE2J8RE36SX7N3R06Z&amp;amp;&amp;amp;ref-refURL=http%3A%2F%2Fblog.johtani.info%2F&#34;&gt;ElasticSearch Server日本語版&lt;/a&gt;は原著が0.20で日本語版にするタイミングで0.90に対応しました。
このため、こちらの書籍のタイトルはSが大文字となっています。
（なお、&lt;a href=&#34;https://www.packtpub.com/big-data-and-business-intelligence/elasticsearch-server-second-edition&#34;&gt;原著の2nd Edition&lt;/a&gt;は小文字になっています）&lt;/p&gt;
&lt;h3 id=&#34;snapshotrestoreの導入とgatewayの廃止&#34;&gt;Snapshot/Restoreの導入とGatewayの廃止&lt;/h3&gt;
&lt;p&gt;0.90以前のバージョンでは、&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/modules-gateway.html#modules-gateway&#34;&gt;gatewayというモジュール&lt;/a&gt;で、S3などにインデックスのメタデータなどを保存する機能がありました。
この機能は、0.20からlocal以外はdeprecatedとなりました。&lt;/p&gt;
&lt;p&gt;インデックスのバックアップ、リストアのために、1.0で実装されたのが&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-snapshots.html#modules-snapshots&#34;&gt;Snapshot/Restore&lt;/a&gt;です。
Snapshot/Restoreでは、インデックスごと、もしくはクラスタ全体をリモートにあるリポジトリにスナップショットを取ることが可能となりました。
初期リリースの段階では、共有ファイルシステムのみでしたが、現在は、S3やHDFSなどに保存が可能となっています。&lt;/p&gt;
&lt;h3 id=&#34;aggregation&#34;&gt;Aggregation&lt;/h3&gt;
&lt;p&gt;Facetをより強力にしたものです。Facetでは、指定したフィールドの集計のみでした。
データの解析などを行うには、独自で集計する必要がありました。
この機能をより柔軟に行えるように実装したのが&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-aggregations.html&#34;&gt;Aggregation&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;たとえば、アクセスログを日毎に集計し、さらに日毎の集計に対して国別の集計やユーザエージェントごとの集計をさらに行うといった感じです。
Facetの場合は、日毎の検索結果に対して個別に集計するのみでしたが、Aggregationを使うことで、1週間の検索結果に対して、
日毎に国別の集計を行うといったことが可能になっっています。&lt;/p&gt;
&lt;h3 id=&#34;cat-api&#34;&gt;cat API&lt;/h3&gt;
&lt;p&gt;&amp;ldquo;=^.^=&amp;ldquo;猫が出てくるAPIです。(違う)&lt;/p&gt;
&lt;p&gt;Elasticsearchでは、クラスタの状態などが全てREST APIで取得でき、JSONで結果が帰ってきていました。
JSONはプログラムなどで処理を行う場合は便利ですが、コンソールで確認したり、管理系のツールでメールで通知する場合などは見にくいことがあります。
これを解消したのが&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/cat.html&#34;&gt;&lt;code&gt;_cat&lt;/code&gt; API&lt;/a&gt;です。（&lt;a href=&#34;http://www.elasticsearch.org/blog/introducing-cat-api/&#34;&gt;公式の紹介ブログはこちら&lt;/a&gt;）&lt;/p&gt;
&lt;h3 id=&#34;circuit-breaker&#34;&gt;Circuit Breaker&lt;/h3&gt;
&lt;p&gt;OOMが発生しそうなfielddataの読み込みを検知して、事前に防ぐ機構になります。
初期段階ではFielddataに対してのものから実装されました。&lt;/p&gt;
&lt;h2 id=&#34;11リリースlucene-461&#34;&gt;1.1リリース(Lucene 4.6.1)&lt;/h2&gt;
&lt;p&gt;3月にリリースされました。Elasticsearchはまだまだ発展しているため、リリースのサイクルが短いのが特徴です。&lt;/p&gt;
&lt;p&gt;1.x系では、&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/setup-upgrade.html#setup-upgrade&#34;&gt;Rolling Upgrade&lt;/a&gt;が導入されました。このため、クラスタ全体を停止することなく、クラスタのアップグレードが可能になりました。&lt;/p&gt;
&lt;h3 id=&#34;search-templates&#34;&gt;search templates&lt;/h3&gt;
&lt;p&gt;検索クエリをテンプレートとして登録することができる&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html#search-template&#34;&gt;search templates&lt;/a&gt;です。
JSONでクエリを記述できるのは便利ですが、毎回組み立てるのは大変かもしれません。
特に、固定のクエリをプログラムから利用するような場合などです。
テンプレートとして登録しておくことで、検索時に値を埋め込むだけで検索ができるようになりました。&lt;/p&gt;
&lt;h3 id=&#34;aggregationの強化&#34;&gt;Aggregationの強化&lt;/h3&gt;
&lt;p&gt;Aggregationの種類が増えました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-aggregations-metrics-cardinality-aggregation.html#search-aggregations-metrics-cardinality-aggregation&#34;&gt;cardinality&lt;/a&gt;：ユニークユーザ数の集計などが行えるaggregationです。HyperLogLog++アルゴリズムを利用した実装になっています。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-aggregations-bucket-significantterms-aggregation.html&#34;&gt;significant_terms&lt;/a&gt;：単語の数による集計ではなく、コレクション全体に対する単語の頻度と、検索結果に対する単語の頻度を計算することで、重要度を計ることができます。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-aggregations-metrics-percentile-aggregation.html#search-aggregations-metrics-percentile-aggregation&#34;&gt;percentiles&lt;/a&gt;：パーセンタイル値を計算できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;12リリースlucene-48系&#34;&gt;1.2リリース(Lucene 4.8系)&lt;/h2&gt;
&lt;h3 id=&#34;java-7必須&#34;&gt;Java 7必須&lt;/h3&gt;
&lt;p&gt;利用しているLuceneがJava 7必須となったためです。また、Java 6のEOLも切れてますし。&lt;/p&gt;
&lt;h3 id=&#34;dynamic-scriptingがデフォルトオフ&#34;&gt;dynamic scriptingがデフォルトオフ&lt;/h3&gt;
&lt;p&gt;採用していたMVELがサンドボックス化に対応していないため、危険を回避するためにオフとなりました。&lt;/p&gt;
&lt;h3 id=&#34;インデキシングとマージング&#34;&gt;インデキシングとマージング&lt;/h3&gt;
&lt;p&gt;インデキシングとマージ処理に関するさまざまな改善。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flushのthreasholdを操作回数ではなく、サイズや時間によるものに変更&lt;/li&gt;
&lt;li&gt;デフォルトをConcurrentMergeSchedulerに変更&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;13リリースlucene-490系&#34;&gt;1.3リリース(Lucene 4.9.0系)&lt;/h2&gt;
&lt;h3 id=&#34;セキュリティ関連&#34;&gt;セキュリティ関連&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;JSONPのデフォルトオフ&lt;/li&gt;
&lt;li&gt;MVELの非推奨化（1.4で削除）＋&lt;code&gt;script.disable_dynamic&lt;/code&gt;のデフォルト値が&lt;code&gt;sandbox&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;aggregationの強化-1&#34;&gt;aggregationの強化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-aggregations-metrics-top-hits-aggregation.html#search-aggregations-metrics-top-hits-aggregation&#34;&gt;top hits&lt;/a&gt;：Field Collapsing/combiningと呼ばれる機能です。たとえば、いくつかのサイトのHTMLを収集して検索機能を提供する場合に、ドメインごとに1件ずつ検索結果に出したい場合などに利用できる機能です。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その他にも以下のaggregationが追加されています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-aggregations-metrics-percentile-rank-aggregation.html&#34;&gt;percentile ranks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-aggregations-metrics-geobounds-aggregation.html&#34;&gt;geo bounds&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mappingのtransform&#34;&gt;mappingのtransform&lt;/h3&gt;
&lt;p&gt;Mappingに&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-transform.html#mapping-transform&#34;&gt;transform&lt;/a&gt;機能が追加されました。
mappingにドキュメントの値を元に、インデキシング時に変換処理を記述できます。
たとえば、特定のフィールドにある値がある場合にだけ、あるフィールドに値を入れるなどといったことが可能になります。&lt;/p&gt;
&lt;h3 id=&#34;ディスク関連&#34;&gt;ディスク関連&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;disk based shard allocation deciderが導入されました。ノードのディスクの使用率を元に、シャードを配置しても良いかといった決定を行う機構です。&lt;/li&gt;
&lt;li&gt;チェックサムによるファイルのチェック（Lucene4.9で導入されたコードへの切り替え）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;14リリースlucene-410系&#34;&gt;1.4リリース(Lucene 4.10系)&lt;/h2&gt;
&lt;p&gt;ベータ版が出されるほど、多くの改善が入っています。&lt;/p&gt;
&lt;h3 id=&#34;resiliency&#34;&gt;resiliency&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#memory-mgmt&#34;&gt;メモリ使用量の低下&lt;/a&gt;によるノードの安定性向上
&lt;ul&gt;
&lt;li&gt;DocValues、リクエストごとのcircuit breakerなど&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;discoveryアルゴリズムの改善による&lt;a href=&#34;#cluster-stability&#34;&gt;クラスタの安定性&lt;/a&gt;向上&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#checksums&#34;&gt;チェックサム&lt;/a&gt;の導入による破損したデータの検知&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;セキュリティ関連-1&#34;&gt;セキュリティ関連&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CORSをデフォルト無効&lt;/li&gt;
&lt;li&gt;Groovyがデフォルトのスクリプト言語に。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;aggregationの強化-2&#34;&gt;Aggregationの強化&lt;/h3&gt;
&lt;p&gt;以下のaggregationが追加されています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/search-aggregations-bucket-filters-aggregation.html#search-aggregations-bucket-filters-aggregation&#34;&gt;filter&lt;/a&gt;、&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/search-aggregations-bucket-children-aggregation.html#search-aggregations-bucket-children-aggregation&#34;&gt;children&lt;/a&gt;、&lt;a href=&#34;%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88&#34;&gt;scripted_metric&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;upgrade-api&#34;&gt;Upgrade API&lt;/h3&gt;
&lt;p&gt;インデックスを最新のバージョンのものにアップグレードするためのAPIです。
Luceneは下位互換を保ってくれているため、古いバージョンのインデックスも読み込むことが可能です。
ただ、最新バージョンで使える機能が制限されていたりということもあります。
クラスタにあるインデックスをアップグレードするのにかかる時間や必要かどうかといったことを取得できる仕組みも提供します。&lt;/p&gt;
&lt;p&gt;また、Lucene自体は、1つ前のメジャーバージョン（4.x系だと3.x系まで）までの互換性は提供していますが、
2つ前のメジャーバージョンの互換性がなくなります。
Luceneも5.x系のブランチが作成されており、5系のリリースにより、3系との互換性がなくなります。
5系のリリースに対応する場合にも、こちらのAPIが助けになるかと。&lt;/p&gt;
&lt;h3 id=&#34;141&#34;&gt;1.4.1&lt;/h3&gt;
&lt;p&gt;11/27に&lt;a href=&#34;http://blog.johtani.info/blog/2014/11/27/elasticsearch-1-4-1-released-ja/&#34;&gt;1.4.1がリリース&lt;/a&gt;されました。
シャードの配置やparent/child、nestedドキュメントの改善などが行われています。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;ということで、駆け足で、1月から11月までのElasticsearchの流れを追ってみました。
1.0で大きな機能追加、改善が行われ、その後も活発に開発が行われています。
要望などがあれば、MLで聞いてみたりやGitHubに登録するなどを行っていただければと。&lt;/p&gt;
&lt;p&gt;あと、今年から来年にかけての大きなイベントとして、
&lt;a href=&#34;http://www.elasticon.com/&#34;&gt;Elasticsearch初のユーザカンファレンスのサイトがオープン&lt;/a&gt;しました。
Elasticsearchに関するいろいろな話が聞ける機会だと思うので、興味のある方は見ていただければと。&lt;/p&gt;
&lt;p&gt;では、また次のAdvent Calendarで！（最終日の予定ですが、空きがあるのでなにか書くかも）&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 1.4.1および1.3.6リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2014/11/27/elasticsearch-1-4-1-released-ja/</link>
      <pubDate>Thu, 27 Nov 2014 11:43:32 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/11/27/elasticsearch-1-4-1-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：elasticsearch 1.4.1 and 1.3.6 released 本日、Lucene 4.10.2をベースにしたElas</description>
      <content:encoded>&lt;p&gt;&lt;strong&gt;※この記事は次のブログを翻訳したものになります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-4-1-released/&#34;&gt;elasticsearch 1.4.1 and 1.3.6 released&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本日、&lt;strong&gt;Lucene 4.10.2&lt;/strong&gt;をベースにした&lt;strong&gt;Elasticsearch 1.4.1&lt;/strong&gt;と、バグフィックスリリースである、&lt;strong&gt;Elasticsearch 1.3.6&lt;/strong&gt;をリリースしました。
ダウンロードおよび変更リストはそれぞれ次のリンクからアクセスできます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最新ステーブルリリース：&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-4-1&#34;&gt;Elasticsearch 1.4.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1.3.x系バグフィックス：&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-3-6&#34;&gt;Elasticsearch 1.3.6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;過去のリリースに関するブログ（公式）はこちら。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.4:&lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-4-0-released/&#34;&gt;1.4.0&lt;/a&gt;, &lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-4-0-beta-released/&#34;&gt;1.4.0.Beta1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1.3:&lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-4-0-released/&#34;&gt;1.3.5&lt;/a&gt;, &lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-3-4-released/&#34;&gt;1.3.4&lt;/a&gt;, &lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-3-3-released/&#34;&gt;1.3.3&lt;/a&gt;, &lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-3-2-released/&#34;&gt;1.3.2&lt;/a&gt;, &lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-3-1-released/&#34;&gt;1.3.1&lt;/a&gt;, &lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-3-0-released/&#34;&gt;1.3.0&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;すべての変更については&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-4-1&#34;&gt;1.4.1のリリースノート&lt;/a&gt;および&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-3-6&#34;&gt;1.3.6のリリースノート&lt;/a&gt;をごらんください。
以下では、重要な変更について紹介します。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;shard-allocation&#34;&gt;shard allocation&lt;/h2&gt;
&lt;p&gt;Elasticsearch 1.3.0で、&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/index-modules-allocation.html#disk&#34;&gt;disk based shard allocation&lt;/a&gt;が
デフォルトで有効になっています。
もし、ノードのディスクの使用量が&lt;code&gt;law&lt;/code&gt;で指定された値（85%）を超えた場合、ノードにはシャードが配置されません。
また、&lt;code&gt;high&lt;/code&gt;で指定された値（90%）を超えた場合、シャードを他のノードへ移動します。&lt;/p&gt;
&lt;p&gt;Elasticsearch 1.4.1では、disk based shard allocationに3つの改良が追加されました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ディスク使用量のチェックはシャードがクラスタに配置されるタイミングでのみ実施していた。現在は60秒ごとに使用量をチェック。(&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/pull/8270&#34;&gt;#8270&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ディスクフルメッセージは&lt;code&gt;DEBUG&lt;/code&gt;レベルでログに出力されていました。なぜ、新しいシャードが配置されないのかを説明するのが困難でした。現在は&lt;code&gt;WARN&lt;/code&gt;レベルで30秒ごとにログに出力されます。(&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/pull/8382&#34;&gt;#8382&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;以前は、シャードをもう一つのノードへ動かすべきかどうか決めるとき、allocation deciderはノードにあるシャードのサイズを考慮するだけでした。現在は、動かされるシャードのサイズも考慮します。これにより、必要最小限のシャードの移動量となります。(&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/pull/8569&#34;&gt;#8569&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;parentchild-and-nested-documents&#34;&gt;parent/child and nested documents&lt;/h2&gt;
&lt;p&gt;Elasticsearch 1.4.0で、parent/childとnestedドキュメントに対して（新しいセグメントを開くときに）固定長ビットセットフィルタを構築しキャッシュしました。クエリ、フィルタおよびAggregationを常に速くするためにです。
多くの&lt;code&gt;nested&lt;/code&gt;フィールドを持つユーザにとっては、以前のバージョンよりもヒープの使用量が大きくなってしまいました。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nested&lt;/code&gt; aggregationによって処理されるドキュメントの順序を変更すること(&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/pull/8454&#34;&gt;#8454&lt;/a&gt;)によって、固定長ビットセットフィルタが子のドキュメントに対して必要でなくなりました。
現在は、親のドキュメント（つまり、nested&lt;strong&gt;ではない&lt;/strong&gt;ドキュメント）を表すフィルタのみをキャッシュしています。これにより必要なキャッシュ空間のサイズを減少しました。(&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/pull/8414&#34;&gt;#8414&lt;/a&gt;、&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/pull/8440&#34;&gt;#8440&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&#34;date-ranges&#34;&gt;date ranges&lt;/h2&gt;
&lt;p&gt;2つの日付範囲に関する問題がこのリリースで修正されました。
1つ目は、日付を丸めるかというものです。例えば、&lt;code&gt;timestamp&lt;/code&gt;フィールドに1秒の解像度の値があるとします。
&lt;code&gt;{&amp;quot;lt&amp;quot;: &amp;quot;2014/11/26||/d&amp;quot;}&lt;/code&gt;という&lt;code&gt;range&lt;/code&gt;フィルタは&lt;code&gt;2014/11/26 00:00:00&lt;/code&gt;未満のタイムスタンプのデータを結果として返しました。
しかし、&lt;code&gt;lt&lt;/code&gt;を&lt;code&gt;lte&lt;/code&gt;に変更した場合、&lt;code&gt;2014/11/27 00:00:00&lt;/code&gt;以外の値も含めたいです。&lt;/p&gt;
&lt;p&gt;以前は、&lt;code&gt;lte&lt;/code&gt;は&lt;code&gt;2014/11/27 00:00:00&lt;/code&gt;のタイムスタンプも含めてしまっていました。現在は、想定通りの動作をします。(&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/pull/8556&#34;&gt;#8556&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;2つ目のバグは日付の範囲条件に&lt;code&gt;now()&lt;/code&gt;を利用したaliasとpercolatorフィルタです。
&lt;code&gt;now()&lt;/code&gt;の値を、フィルタが作成したタイミングで決定していました。フィルタが実行されるたびに更新せずにです。
&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/pull/8534&#34;&gt;#8534&lt;/a&gt;で、&lt;code&gt;now()&lt;/code&gt;はaliasとpercolatorで想定通りの動作をします。&lt;/p&gt;
&lt;h2 id=&#34;試してみてください&#34;&gt;試してみてください。&lt;/h2&gt;
&lt;p&gt;ぜひ、&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-4-1&#34;&gt;Elasticsearch 1.4.1&lt;/a&gt;をダウンロードして、試してみてください。
そして、感想をTwitter(&lt;a href=&#34;https://twitter.com/elasticsearch&#34;&gt;@elasticsearch&lt;/a&gt;)などで教えて下さい。
また、問題がありましたら、&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/issues&#34;&gt;GitHub issues page&lt;/a&gt;で報告をお願いします。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>インデックステンプレートとLogstash</title>
      <link>https://blog.johtani.info/blog/2014/11/25/import-apache-accesslog-using-logstash-2/</link>
      <pubDate>Tue, 25 Nov 2014 16:25:46 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/11/25/import-apache-accesslog-using-logstash-2/</guid>
      <description>前回の「Logstashを利用したApacheアクセスログのインポート」の続きです。 前回の記事では、Logstashの設定ファイルについて説</description>
      <content:encoded>&lt;p&gt;前回の「&lt;a href=&#34;http://blog.johtani.info/blog/2014/11/21/import-apache-accesslog-using-logstash/&#34;&gt;Logstashを利用したApacheアクセスログのインポート&lt;/a&gt;」の続きです。
前回の記事では、Logstashの設定ファイルについて説明しました。
今回は「Elasticsearchに設定するインデックステンプレート」について説明します。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;テンプレートの設定&#34;&gt;テンプレートの設定&lt;/h2&gt;
&lt;p&gt;Elasticsearchでは、登録するデータの特性に合わせてMappingを定義する方がデータを効率良く扱うことができる場合があります。
この場合、通常ですと、インデックス作成時にMappingを指定します。&lt;/p&gt;
&lt;p&gt;ただ、今回は、&lt;a href=&#34;http://blog.johtani.info/blog/2014/11/21/import-apache-accesslog-using-logstash#output-elasticsearch&#34;&gt;インデックス名に「年」を含める形&lt;/a&gt;で指定してあります。
「年」はLogstashで処理したデータによって決まります。このため、あらかじめMappingを指定してインデックスを作成するのは難しいです。&lt;/p&gt;
&lt;p&gt;このような場合に便利な機能として、「&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-templates.html#indices-templates&#34;&gt;インデックステンプレート&lt;/a&gt;」があります。&lt;/p&gt;
&lt;h3 id=&#34;インデックステンプレートとは&#34;&gt;インデックステンプレートとは&lt;/h3&gt;
&lt;p&gt;実際のテンプレートの説明に入る前に、少しだけ説明を。
インデックステンプレートとは、インデックスが作成されるタイミングで自動的に適用される設定をテンプレートとして登録できる機能のことです。
実際にテンプレートが適用されるかどうかは、インデックス名で判断されます。&lt;/p&gt;
&lt;p&gt;例えば、大して重要でもなく、データ量も少ないインデックス用のテンプレートとして、シャード数が1、レプリカ数が0、&amp;quot;_source&amp;quot;を保存しない設定のテンプレートを登録する場合、
次のようになります。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;curl -XPUT localhost:9200/_template/template_1 -d &amp;#39;&lt;/span&gt;
{
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;template&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;te*&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;settings&amp;#34;&lt;/span&gt; : {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;number_of_shards&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;number_of_replicas&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
  },
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mappings&amp;#34;&lt;/span&gt; : {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type1&amp;#34;&lt;/span&gt; : {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_source&amp;#34;&lt;/span&gt; : { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;enabled&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; }
    }
  }
}
&lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;_template&lt;/code&gt;がインデックステンプレートを登録するためのエンドポイントです。
&lt;code&gt;template_1&lt;/code&gt;がこのテンプレートのIDです。削除などについては、このIDを利用します。&lt;/p&gt;
&lt;p&gt;そして、重要なのは、&amp;quot;&lt;code&gt;template&lt;/code&gt;&amp;ldquo;の設定です。
&amp;ldquo;&lt;code&gt;template&lt;/code&gt;&amp;ldquo;には、このテンプレートが適用されるべきインデックス名を記載します。
上記サンプルでは&lt;code&gt;te*&lt;/code&gt;となっているため、&lt;code&gt;te&lt;/code&gt;で始まる名前のインデックスを作成した場合にテンプレートにある設定が適用されます。&lt;/p&gt;
&lt;h3 id=&#34;今回利用するテンプレート&#34;&gt;今回利用するテンプレート&lt;/h3&gt;
&lt;p&gt;私がJJUG CCCや第7回Elasticsearch勉強会のKibana4のデモで利用したインデックスのテンプレートは次のものになります。
&amp;ldquo;&lt;code&gt;template&lt;/code&gt;&amp;ldquo;には、&lt;a href=&#34;http://blog.johtani.info/blog/2014/11/21/import-apache-accesslog-using-logstash/#output-elasticsearch&#34;&gt;前回の記事で紹介したoutput/elasticsearchの設定&lt;/a&gt; に合致する&lt;code&gt;new_demo_access_log-*&lt;/code&gt;を指定しています。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;curl -XPUT localhost:9200/_template/new_access_log_for_demo -d &amp;#39;&lt;/span&gt;
{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;template&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;new_demo_access_log-*&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;settings&amp;#34;: &lt;/span&gt;{
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;number_of_shards&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;number_of_replicas&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mappings&amp;#34;: &lt;/span&gt;{
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_default_&amp;#34;: &lt;/span&gt;{
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dynamic_templates&amp;#34;: &lt;/span&gt;[
        {
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;string_template&amp;#34;: &lt;/span&gt;{
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mapping&amp;#34;: &lt;/span&gt;{
              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;index&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;not_analyzed&amp;#34;&lt;/span&gt;,
              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
            },
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;match_mapping_type&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;match&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;
          }
        }
      ],
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;properties&amp;#34;: &lt;/span&gt;{
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;path&amp;#34;: &lt;/span&gt;{
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;multi_field&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;fields&amp;#34;: &lt;/span&gt;{
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;no_analyzed&amp;#34;: &lt;/span&gt;{
              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;index&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;not_analyzed&amp;#34;&lt;/span&gt;,
              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
            },
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;analyzed&amp;#34;: &lt;/span&gt;{
              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;index&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;analyzed&amp;#34;&lt;/span&gt;,
              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
            }
          }
        },
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;referer&amp;#34;: &lt;/span&gt;{
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;multi_field&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;fields&amp;#34;: &lt;/span&gt;{
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;no_analyzed&amp;#34;: &lt;/span&gt;{
              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;index&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;not_analyzed&amp;#34;&lt;/span&gt;,
              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
            },
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;analyzed&amp;#34;: &lt;/span&gt;{
              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;index&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;analyzed&amp;#34;&lt;/span&gt;,
              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
            }
          }
        },
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;agent&amp;#34;: &lt;/span&gt;{
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;multi_field&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;fields&amp;#34;: &lt;/span&gt;{
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;no_analyzed&amp;#34;: &lt;/span&gt;{
              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;index&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;not_analyzed&amp;#34;&lt;/span&gt;,
              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
            },
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;analyzed&amp;#34;: &lt;/span&gt;{
              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;index&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;analyzed&amp;#34;&lt;/span&gt;,
              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
            }
          }
        },
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;geoip&amp;#34;: &lt;/span&gt;{
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;object&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;properties&amp;#34;: &lt;/span&gt;{
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;: &lt;/span&gt;{
              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;geohash&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;geohash_precision&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,
              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;geo_point&amp;#34;&lt;/span&gt;,
              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;lat_lon&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;geohash_prefix&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
            }
          }
        },
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;response&amp;#34;: &lt;/span&gt;{
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;copy_to&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;response_int&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
        },
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;bytes&amp;#34;: &lt;/span&gt;{
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;
        },
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;response_int&amp;#34;: &lt;/span&gt;{
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;integer&amp;#34;&lt;/span&gt;
        }
      }
    }
  }
}
&lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;settings設定&#34;&gt;settings設定&lt;/h4&gt;
&lt;p&gt;デモ用であり、手元で2台のノードを起動するということもあり、&lt;code&gt;number_of_shards&lt;/code&gt;に&lt;code&gt;2&lt;/code&gt;を、&lt;code&gt;number_of_replicas&lt;/code&gt;に&lt;code&gt;0&lt;/code&gt;を指定してあります。&lt;/p&gt;
&lt;h4 id=&#34;mappings設定&#34;&gt;mappings設定&lt;/h4&gt;
&lt;h5 id=&#34;インデックスのタイプ&#34;&gt;インデックスのタイプ&lt;/h5&gt;
&lt;p&gt;Mappingsの指定は通常、特定の&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/glossary.html#glossary-type&#34;&gt;タイプ&lt;/a&gt;を指定します。
今回のデモでは、1種類しかないのですが、タイプ名を特に意識しないために、&lt;code&gt;_default_&lt;/code&gt;を使用しました。
この場合、任意のタイプに適用されることとなります。
タイプを指定してMappingの設定を行う場合は&lt;code&gt;_default_&lt;/code&gt;の部分に特定のタイプ名を記入します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mappings&amp;#34;: &lt;/span&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_default_&amp;#34;: &lt;/span&gt;{
    &lt;span style=&#34;color:#ae81ff&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;ダイナミックテンプレート&#34;&gt;ダイナミックテンプレート&lt;/h5&gt;
&lt;p&gt;次は&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-root-object-type.html#_dynamic_templates&#34;&gt;ダイナミックテンプレート&lt;/a&gt;です。
インデックステンプレートはインデックスの設定をテンプレート化しました。ダイナミックテンプレートはフィールドに対してテンプレートを設定できます。&lt;/p&gt;
&lt;p&gt;以下のダイナミックテンプレートでは、&lt;code&gt;string&lt;/code&gt;タイプのフィールドのデフォルト設定を変更しています。
通常、&lt;code&gt;string&lt;/code&gt;タイプのフィールドは&lt;code&gt;analyzed&lt;/code&gt;となりますが、&lt;code&gt;not_analyzed&lt;/code&gt;に変更してあります。
詳しく検索したいフィールドの方が少ないためです。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;...
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dynamic_templates&amp;#34;: &lt;/span&gt;[
  {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;string_template&amp;#34;: &lt;/span&gt;{
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mapping&amp;#34;: &lt;/span&gt;{
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;index&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;not_analyzed&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
      },
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;match_mapping_type&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;match&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;
    }
  }
],
...  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;multi_field指定&#34;&gt;multi_field指定&lt;/h5&gt;
&lt;p&gt;検索もしたいし、Terms Aggregationでも利用したいフィールドについては、&lt;code&gt;multi_field&lt;/code&gt;を利用して、
&lt;code&gt;analyzed&lt;/code&gt;と&lt;code&gt;not_analyzed&lt;/code&gt;の2種類のフィールドを用意しています。
&lt;code&gt;multi_field&lt;/code&gt;設定を用いることで、1つのJSONのデータから、異なる形のフィールドを用意することが可能です。&lt;/p&gt;
&lt;p&gt;今回のテンプレートでは、&lt;code&gt;path&lt;/code&gt;、&lt;code&gt;referer&lt;/code&gt;、&lt;code&gt;agent&lt;/code&gt;に&lt;code&gt;multi_field&lt;/code&gt;を指定しました。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;...
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;path&amp;#34;: &lt;/span&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;multi_field&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;fields&amp;#34;: &lt;/span&gt;{
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;no_analyzed&amp;#34;: &lt;/span&gt;{
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;index&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;not_analyzed&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;analyzed&amp;#34;: &lt;/span&gt;{
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;index&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;analyzed&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
    }
  }
},
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;例えば、上記の設定の場合、入力のJSONは&lt;code&gt;path&lt;/code&gt;というデータのみですが、インデックス上には&lt;code&gt;path.no_analyzed&lt;/code&gt;と
&lt;code&gt;path.analyzed&lt;/code&gt;というフィールドができあがります。
実際に検索する場合は、&lt;code&gt;path.analyzed:検索したい文字列&lt;/code&gt;という形で検索をすることで、いわゆる部分一致のような検索が可能です。
また、完全一致をしたい場合は&lt;code&gt;path.no_analyzed:検索したい文字列&lt;/code&gt;という指定になります。
用途を考えると、&lt;code&gt;request&lt;/code&gt;も指定したほうが良いかもしれません。&lt;/p&gt;
&lt;h5 id=&#34;geoip&#34;&gt;geoip&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.johtani.info/blog/2014/11/21/import-apache-accesslog-using-logstash#filter-geoip&#34;&gt;Logstashでgeoipデータ&lt;/a&gt;を付与していました。
このgeoipのデータをKibana4で利用するために、geoデータとして登録する必要があります。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;geoip&amp;#34;: &lt;/span&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;object&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;properties&amp;#34;: &lt;/span&gt;{
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;: &lt;/span&gt;{
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;geohash&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;geohash_precision&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;geo_point&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;lat_lon&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;geohash_prefix&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
    }
  }
},
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上記の設定がgeoデータの指定です。
&lt;code&gt;type&lt;/code&gt;に&lt;code&gt;object&lt;/code&gt;が指定してありますが、これは、geoipのデータがネストしているためです。
geoipオブジェクトのうち、緯度経度のデータは&lt;code&gt;location&lt;/code&gt;に入っているため、こちらに緯度経度関係の設定を指定します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;type&amp;quot;: &amp;quot;geo_point&amp;quot;&lt;/code&gt;：&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-geo-point-type.html#mapping-geo-point-type&#34;&gt;&lt;code&gt;geo_point&lt;/code&gt;&lt;/a&gt;タイプであることを指定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;geohash&amp;quot;: true&lt;/code&gt;：緯度経度のデータをもとに、geohashの値もインデックス&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;geohash_precision&amp;quot;: 10&lt;/code&gt;：geohashの精度の指定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;lat_lon&amp;quot;: true&lt;/code&gt;：緯度経度を個別の&lt;code&gt;.lat&lt;/code&gt;、&lt;code&gt;.lon&lt;/code&gt;というフィールドにもインデックス&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;geohash_prefix&amp;quot;: true&lt;/code&gt;：該当するgeohashのみでなく、その親にあたるgeohashについてもインデックスする&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;responseresponse_intbytes&#34;&gt;response、response_int、bytes&lt;/h5&gt;
&lt;p&gt;最後は、response、response_int、bytesです。&lt;/p&gt;
&lt;p&gt;responseには、HTTPステータスコードが入ります。
文字列としても扱いたいですが、integerとして、Renge Aggregationなどを行いたいので、
response_intというフィールドにも値を入れています。
&lt;code&gt;multi_field&lt;/code&gt;でも可能ですが、ここでは、&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-core-types.html#copy-to&#34;&gt;&lt;code&gt;copy_to&lt;/code&gt;&lt;/a&gt;を利用しました。
&lt;code&gt;copy_to&lt;/code&gt;を用いることで、異なるフィールドに値をコピーすることができます。&lt;/p&gt;
&lt;p&gt;bytesについては、longで扱いたいとういう理由だけです。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;response&amp;#34;: &lt;/span&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;copy_to&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;response_int&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
},
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;bytes&amp;#34;: &lt;/span&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;
},
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;response_int&amp;#34;: &lt;/span&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;integer&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;今回はデモに利用したインデックスてプレートについて説明しました。
前回の、Logstashの設定とこのインデックステンプレートを用いることで、Kibanaで解析するデータの準備ができます。
実際の操作などについては、また次回の記事で説明しようかと思います。&lt;/p&gt;
&lt;p&gt;不明な点、誤植などありましたら、コメント欄へお願いします。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Logstashを利用したApacheアクセスログのインポート</title>
      <link>https://blog.johtani.info/blog/2014/11/21/import-apache-accesslog-using-logstash/</link>
      <pubDate>Fri, 21 Nov 2014 17:30:39 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/11/21/import-apache-accesslog-using-logstash/</guid>
      <description>JJUG CCCや第7回Elasticsearch勉強会のKibana4のデモにアクセスログを利用しました。 ただ、セッションでは、どうやってElas</description>
      <content:encoded>&lt;p&gt;JJUG CCCや第7回Elasticsearch勉強会のKibana4のデモにアクセスログを利用しました。&lt;/p&gt;
&lt;p&gt;ただ、セッションでは、どうやってElasticsearchに投入したのかという詳しい話をしていませんでした。
本記事では、データ取り込み時に利用したLogstashの設定ファイルについて説明します。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;Logstashの設定の説明に入る前に、全体の流れを。
「ApacheアクセスログをKibana4により可視化」です。&lt;/p&gt;
&lt;h2 id=&#34;材料の準備&#34;&gt;材料の準備&lt;/h2&gt;
&lt;p&gt;「ApacheアクセスログをKibana4により可視化」に必要な材料は次の通りです。
（今回は起動するところまでいかないので、実際に必要なのは次回以降になります。）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java 7（u55以上を1つ）&lt;/li&gt;
&lt;li&gt;Logstash 1.4.2（1つ）&lt;/li&gt;
&lt;li&gt;Elasticsearch 1.4.0（1つ）&lt;/li&gt;
&lt;li&gt;Kibana4 Beta2（1つ）&lt;/li&gt;
&lt;li&gt;Apacheのアクセスログ（適量）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Apacheのアクセスログ以外は、公式サイトからダウンロードできます。
それぞれをダウンロードして、起動できるようにしておきましょう。&lt;/p&gt;
&lt;p&gt;※1台のマシン上で行う場合は、アクセスログの量を少なめにするなどの対策をとりましょう。
※今回は、1台のマシン（Mac）上で、VMなどを利用せず、それぞれ直接起動するものとします。&lt;/p&gt;
&lt;h2 id=&#34;可視化の手順と流れ&#34;&gt;可視化の手順と流れ&lt;/h2&gt;
&lt;p&gt;可視化の流れとしては、&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Logstashでファイルを読み込み、各種処理（パースしたり、情報を追加したり、切り出したり）&lt;/li&gt;
&lt;li&gt;Elasticsearchに保存&lt;/li&gt;
&lt;li&gt;Kibanaでグラフを作ったり、検索してみたり&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;です。&lt;/p&gt;
&lt;p&gt;今回は、1のLogstashでファイルを読み込んだりする設定ファイルの説明です。&lt;/p&gt;
&lt;h3 id=&#34;logstashの設定&#34;&gt;Logstashの設定&lt;/h3&gt;
&lt;h4 id=&#34;logstashの基本&#34;&gt;Logstashの基本&lt;/h4&gt;
&lt;p&gt;まずは、Logstashの設定ですが、簡単にLogstashの説明を。
Logstashは大きく3つのパーツに分かれています。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;input：データの入力処理&lt;/li&gt;
&lt;li&gt;filter：inputで読み込んだデータに対する操作など&lt;/li&gt;
&lt;li&gt;output：データの出力処理&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;inputでデータを読み込み（複数可）、filterでデータに対して各種処理を行い、outputでデータを指定されたところに出力（複数可）します。&lt;/p&gt;
&lt;h4 id=&#34;アクセスログの読み込み設定&#34;&gt;アクセスログの読み込み設定&lt;/h4&gt;
&lt;p&gt;アクセスログの読み込み処理は大まかに次のようなものとなります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;アクセスログを読み込む（input/file）&lt;/li&gt;
&lt;li&gt;読み取ったアクセスログを各フィールド（IPアドレス、ユーザエージェントなど）に分割（filter/grok）&lt;/li&gt;
&lt;li&gt;日付のパース（filter/date）&lt;/li&gt;
&lt;li&gt;クライアントIPアドレスにgeoipの情報を付加（filter/geoip）&lt;/li&gt;
&lt;li&gt;リクエストのパスの第1階層の抽出（filter/grok）&lt;/li&gt;
&lt;li&gt;ユーザエージェントのパース（filter/useragent）&lt;/li&gt;
&lt;li&gt;Elasticsearchへの出力（output/elasticsearch）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;設定ファイルは次のようなものになります。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;input {
  file {
    path &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Users/johtani/demo_access_log/*/*.log&amp;#34;&lt;/span&gt;
    start_position &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;beginning&amp;#34;&lt;/span&gt;
  }
}

filter {
  grok {
    match &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%{COMBINEDAPACHELOG}&amp;#34;&lt;/span&gt; }
    break_on_match &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
    tag_on_failure &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_message_parse_failure&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
  }
  date {
    match &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dd/MMM/YYYY:HH:mm:ss Z&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
    locale &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; en
  }
  geoip {
    source &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clientip&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
  }
  grok {
    match &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;request&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^/%{WORD:first_path}/%{GREEDYDATA}$&amp;#34;&lt;/span&gt; }
    tag_on_failure &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_request_parse_failure&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
  }
  useragent {
    source &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;agent&amp;#34;&lt;/span&gt;
    target &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;useragent&amp;#34;&lt;/span&gt;
  }
}

output {
  elasticsearch {
    host &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;
    index &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;new_demo_access_log-%{year}&amp;#34;&lt;/span&gt;
    cluster &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;demo_cluster&amp;#34;&lt;/span&gt;
    protocol &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;1-アクセスログを読み込むinputfile&#34;&gt;1. アクセスログを読み込む（input/file）&lt;/h5&gt;
&lt;p&gt;inputの&lt;a href=&#34;http://logstash.net/docs/1.4.2/inputs/file&#34;&gt;fileモジュール(a)&lt;/a&gt;を使用してアクセスログのファイルを読み込みます。
&lt;code&gt;path&lt;/code&gt;でアクセスログのファイルのパスを指定します。
今回利用したアクセスログは&lt;code&gt;demo_access_log/2010/access20100201.log&lt;/code&gt;といった日毎のファイルに分割されていたため、
&lt;code&gt;*&lt;/code&gt;を利用してファイルのパスを指定しました。
また、今回は既存のファイルの読み込みだけのため、&lt;code&gt;start_position&lt;/code&gt;に&lt;code&gt;beginning&lt;/code&gt;を指定してあります。
デフォルトでは&lt;code&gt;end&lt;/code&gt;が指定されるため、Logstashを起動後に追記されたログから対象になってしまうためです。
その他の設定については、公式ガイドをご覧ください。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;input {
  file { &lt;span style=&#34;color:#75715e&#34;&gt;# a&lt;/span&gt;
    path &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Users/johtani/demo_access_log/*/*.log&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# b&lt;/span&gt;
    start_position &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;beginning&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# c&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Logstashでは、ファイルをどこまで読み込んだかという情報を保持するために、&lt;a href=&#34;http://logstash.net/docs/1.4.2/inputs/file#sincedb_path&#34;&gt;sincedb&lt;/a&gt;を利用しています。
設定変更後に同じファイルを最初から読み込みたい場合などは、こちらのファイルを一旦削除するなどの対応が必要です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ちなみに、読み込んだデータは次のようなJSONになっています。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;読み込んだアクセスログ&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;@version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;@timestamp&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2014-11-21T06:16:21.644Z&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jupiter.local&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Users/johtani/demo_access_log/2010/access20100201.log&amp;#34;&lt;/span&gt;}
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;特に指定がない場合は、&lt;code&gt;message&lt;/code&gt;に読み込んだデータが入ってきます。
&lt;code&gt;@timestamp&lt;/code&gt;がLogstashが読み込んだ時刻、&lt;code&gt;host&lt;/code&gt;はLogstashが動作しているホスト名です。
&lt;code&gt;path&lt;/code&gt;はfileモジュールが読み込んだファイルのパスを設定しています。
この後の処理で、どこの項目に対して処理を行うかといったことが重要になるので、&lt;/p&gt;
&lt;h5 id=&#34;2-読み取ったアクセスログを各フィールドipアドレスユーザエージェントなどに分割filtergrok&#34;&gt;2. 読み取ったアクセスログを各フィールド（IPアドレス、ユーザエージェントなど）に分割（filter/grok）&lt;/h5&gt;
&lt;p&gt;2.〜6.の処理は、inputで読み込んだ1アクセスログに対する処理となります。&lt;/p&gt;
&lt;p&gt;ここでは、&lt;a href=&#34;http://logstash.net/docs/1.4.2/filters/grok&#34;&gt;grokフィルタ&lt;/a&gt;を使用して
Apacheのアクセスログを各フィールドに分割します。
Logastashでは、簡単に使えるようにいくつかの&lt;a href=&#34;https://github.com/elasticsearch/logstash/tree/v1.4.2/patterns&#34;&gt;パターン&lt;/a&gt;が用意されています。
Apacheのログのために、&lt;a href=&#34;https://github.com/elasticsearch/logstash/blob/v1.4.2/patterns/grok-patterns#L91&#34;&gt;&lt;code&gt;COMBINEDAPACHELOG&lt;/code&gt;&lt;/a&gt;というのが用意されています。
今回はこちらを使用しています。その他にも日付などパターンが用意されているので、試してみてください。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;message&lt;/code&gt;にアクセスログが入っているので、こちらの項目に対して&lt;code&gt;COMBINEDAPACHELOG&lt;/code&gt;のパターンを
&lt;code&gt;match&lt;/code&gt;で適用してフィールドに抜き出します。
&lt;code&gt;tag_on_failure&lt;/code&gt;は、&lt;code&gt;match&lt;/code&gt;でパースに失敗した場合に、&lt;code&gt;tag&lt;/code&gt;というフィールドに指定した文字列を出力する機能になります。
デフォルトだと&lt;code&gt;_grokparsefailure&lt;/code&gt;が付与されますが、ここでは、どの処理で失敗したがを判別するために文字列を変更しています。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;filter {
  grok {
    match &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%{COMBINEDAPACHELOG}&amp;#34;&lt;/span&gt; }
    break_on_match &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
    tag_on_failure &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_message_parse_failure&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
  }
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;clientip&lt;/code&gt;、&lt;code&gt;ident&lt;/code&gt;、&lt;code&gt;auth&lt;/code&gt;、&lt;code&gt;timestamp&lt;/code&gt;、&lt;code&gt;verb&lt;/code&gt;、&lt;code&gt;request&lt;/code&gt;、&lt;code&gt;httpversion&lt;/code&gt;、&lt;code&gt;response&lt;/code&gt;、&lt;code&gt;bytes&lt;/code&gt;、&lt;code&gt;referrer&lt;/code&gt;、&lt;code&gt;agent&lt;/code&gt;がgrokフィルタにより抜き出された項目です。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;アクセスログ&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;@version&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;@timestamp&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2014-11-21T07:20:54.387Z&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jupiter.local&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Users/johtani/demo_access_log/2010/access20100201.log&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;clientip&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;クライアントのIPアドレス&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ident&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;auth&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;01/Feb/2010:00:00:26 +0900&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;verb&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;request&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/images/favicon.ico&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;httpversion&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.1&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;response&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;200&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;bytes&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;318&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;referrer&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&amp;#34;-\&amp;#34;&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;agent&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&amp;#34;Mozilla/5.0 (Windows; U; Windows NT 5.1; ja; rv:1.9.1.7) Gecko/20091221 Firefox/3.5.7 (.NET CLR 3.5.30729)\&amp;#34;&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;3-日付のパースfilterdate&#34;&gt;3. 日付のパース（filter/date）&lt;/h5&gt;
&lt;p&gt;Logstashは特に指定がない場合、inputでデータを取り出した日付が&lt;code&gt;@timestamp&lt;/code&gt;となります。
そして、このフィールドが特に指定がない場合は、Elasticsearchのデータの日付となり、Kibanaで利用する日付となります。&lt;/p&gt;
&lt;p&gt;リアルタイムにアクセスログを読み込む場合は、読み込んだ日時でもほぼ問題はありませんが、過去データの場合はそうもいきません。
そこで、&lt;a href=&#34;http://logstash.net/docs/1.4.2/filters/date&#34;&gt;&lt;code&gt;dateフィルタ&lt;/code&gt;&lt;/a&gt;を使用して、&lt;code&gt;@timestamp&lt;/code&gt;の値を書き換えます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;date {
  match &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dd/MMM/YYYY:HH:mm:ss Z&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
  locale &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; en
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上記では、&lt;code&gt;timestamp&lt;/code&gt;という項目に対して&lt;code&gt;dd/MMM/YYYY:HH:mm:ss Z&lt;/code&gt;という日付パターンの場合に値を書き換える設定となります。
なお、日付の月の部分が&lt;code&gt;Feb&lt;/code&gt;となっているため、&lt;code&gt;locale&lt;/code&gt;に&lt;code&gt;en&lt;/code&gt;を指定しています。Logstashが動作するマシンの&lt;code&gt;locale&lt;/code&gt;が&lt;code&gt;ja&lt;/code&gt;などの場合にパースに失敗するためです。&lt;/p&gt;
&lt;h5 id=&#34;a-namefilter-geoip4-クライアントipアドレスにgeoipの情報を付加filtergeoipa&#34;&gt;&lt;a name=&#34;filter-geoip&#34;&gt;4. クライアントIPアドレスにgeoipの情報を付加（filter/geoip）&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;どの国からのアクセスかなどを判別したいので、IPアドレスを元にgeoipを利用してより詳細な情報を付与します。
Logstashでもこの機能が用意されており、簡単に利用ができます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;geoip {
  source &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clientip&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これだけです。対象とするIPアドレスのフィールドを指定しているだけです。
&lt;code&gt;geoip&lt;/code&gt;というフィールドが追加され、次のような情報が付与されます。
国名、緯度経度、タイムゾーンなどです。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;  
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;geoip&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ip&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IPアドレス&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;country_code2&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;JP&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;country_code3&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;JPN&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;country_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Japan&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;continent_code&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AS&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;latitude&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;longitude&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;138&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;timezone&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Asia/Tokyo&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;: [
      &lt;span style=&#34;color:#ae81ff&#34;&gt;138&lt;/span&gt;,
      &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;
    ]
  }
  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;5-リクエストのパスの第1階層の抽出filtergrok&#34;&gt;5. リクエストのパスの第1階層の抽出（filter/grok）&lt;/h5&gt;
&lt;p&gt;リクエストされたURLは&lt;code&gt;request&lt;/code&gt;フィールドにありますが、個別のURLだと、大まかな集計が大変です。
もちろん、クエリで処理することもできますが、Logstashで処理するついでに、第1階層のディレクトリ名を抽出しておくことで、
検索や集計を行いやすくしておきます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;grok {
  match &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;request&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^/%{WORD:first_path}/%{GREEDYDATA}$&amp;#34;&lt;/span&gt; }
  tag_on_failure &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_request_parse_failure&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;また、grokフィルタの登場です。
今回は、&lt;code&gt;WORD:first_path&lt;/code&gt;という記述方法で、&lt;code&gt;WORD&lt;/code&gt;パターンにマッチした文字列を&lt;code&gt;first_path&lt;/code&gt;というフィールドに展開する指定をしています。&lt;/p&gt;
&lt;p&gt;例えば、サイトのスクリプトなどが&lt;code&gt;scripts&lt;/code&gt;というディレクトリにある場合は、&lt;code&gt;first_path&lt;/code&gt;の値を利用して、
後続のフィルタでログデータを出力しないといった処理にも使えます。&lt;/p&gt;
&lt;h5 id=&#34;6-ユーザエージェントのパースfilteruseragent&#34;&gt;6. ユーザエージェントのパース（filter/useragent）&lt;/h5&gt;
&lt;p&gt;Logstashではユーザエージェントの文字列から、いくつかの情報を付与するフィルタも用意されています。
&lt;a href=&#34;http://logstash.net/docs/1.4.2/filters/useragent&#34;&gt;&lt;code&gt;useragent&lt;/code&gt;フィルタです。&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;useragent {
  source =&amp;gt; &amp;quot;agent&amp;quot;
  target =&amp;gt; &amp;quot;useragent&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;agent&lt;/code&gt;というフィールドにユーザエージェントの文字列があるので、このフィールドに対してフィルタを適用します。
元の文字列も取っておきたいので、&lt;code&gt;useragent&lt;/code&gt;という別のフィールドに出力するように指定してあります。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;useragent&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Firefox&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Windows XP&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;os_name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Windows XP&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;device&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Other&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;major&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;17&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;minor&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;
}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このように、OS名やバージョン名などが抽出できます。&lt;/p&gt;
&lt;h5 id=&#34;a-nameoutput-elasticsearch7-elasticsearchへの出力outputelasticsearcha&#34;&gt;&lt;a name=&#34;output-elasticsearch&#34;&gt;7. Elasticsearchへの出力（output/elasticsearch）&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;最後は、&lt;a href=&#34;http://logstash.net/docs/1.4.2/outputs/elasticsearch&#34;&gt;Elasticsearchへのデータの出力設定&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;index&lt;/code&gt;にて、出力するindex名を指定してあります。
また、年毎のインデックス名にするために&lt;code&gt;%{year}&lt;/code&gt;を利用しています。
&lt;a href=&#34;http://logstash.net/docs/1.4.2/configuration#sprintf&#34;&gt;sprintf format&lt;/a&gt;です。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;elasticsearch {
  host &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;
  index &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;new_demo_access_log-%{year}&amp;#34;&lt;/span&gt;
  cluster &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;demo_cluster&amp;#34;&lt;/span&gt;
  protocol &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;ということで、今回はアクセスログをLogstashにて読み込む時の設定について説明してきました。
次回は、実際にLogstashを起動してElasticsearchにデータを登録するところまでを説明します。&lt;/p&gt;
&lt;p&gt;JJUG CCCや勉強会のデモに用いたデータは、
Elasticsearchにデータを登録する前にテンプレートも設定してありました。こちらについても、次回説明しようと思います。&lt;/p&gt;
&lt;p&gt;不明な点、誤植などありましたら、コメント欄へお願いします。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>第7回Elasticsearch勉強会を開催しました。#elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2014/11/19/hold-on-7th-elasticsearch-jp/</link>
      <pubDate>Wed, 19 Nov 2014 11:19:07 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/11/19/hold-on-7th-elasticsearch-jp/</guid>
      <description>第7回Elsticsearch勉強会を開催しました。 スタッフの皆さん、スピーカーの皆さん、開場提供していただいたリクルートテクノロジーズさん</description>
      <content:encoded>&lt;p&gt;&lt;a href=&#34;http://elasticsearch.doorkeeper.jp/events/16837&#34;&gt;第7回Elsticsearch勉強会&lt;/a&gt;を開催しました。
スタッフの皆さん、スピーカーの皆さん、開場提供していただいた&lt;a href=&#34;http://recruit-tech.co.jp&#34;&gt;リクルートテクノロジーズさん&lt;/a&gt;、ありがとうございました！
次回もよろしくお願いします！参加していただき盛り上げていただいた参加者の皆さんもありがとうございました。&lt;/p&gt;
&lt;p&gt;昨日も紹介しましたが、&lt;a href=&#34;http://qiita.com/advent-calendar/2014/elasticsearch&#34;&gt;Elasticsearch Advent Calendar 2014&lt;/a&gt;を用意してみました。まだ、空きがありますので、登録お待ちしております！&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;今回は出足が好調で、早々に180人の枠を超えるという嬉しい事態でした。
最終的な参加人数は130名程度で、懇親会参加者が50名弱といったところです。&lt;/p&gt;
&lt;h2 id=&#34;kibana4&#34;&gt;「Kibana4」&lt;/h2&gt;
&lt;h3 id=&#34;elasticsearch-inc-jun-ohtani-johtani&#34;&gt;Elasticsearch Inc. Jun Ohtani @johtani&lt;/h3&gt;
&lt;p&gt;スライド：&lt;a href=&#34;https://speakerdeck.com/johtani/kibana4&#34;&gt;Kibana4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ということで、Kibana4の紹介と、Kibana4のBeta2を利用したデモを行いました。
デモの開始のところで少し環境がうまく動いてなくて手間取ってしまいましたが。。。&lt;/p&gt;
&lt;p&gt;発表で1点だけ修正があります。JRubyを選択しているのがElasticsearchのライブラリを使用するためという説明をしましたが、
こちらは、Logstashに関する話でした。Kibana4は現時点では、ElasticsearchへのProxyとしての動作が主なものとなります。Rubyでも動作可能です。
bin/kibanaについてはJavaを使った起動になります。
参考：https://github.com/elasticsearch/kibana/tree/master/src/server&lt;/p&gt;
&lt;p&gt;発表でも主張しましたが、ダウンロードして、Elasticsearchを用意すれば簡単に動作させることが可能です。
ぜひ、ローカルで試して見てもらえればと思います。
今回のデモのデータを入れるのに利用したLogstashの設定などについては、ブログで記事を書こうと思います。&lt;/p&gt;
&lt;h2 id=&#34;niconicoの検索を支えるelasticsearch&#34;&gt;niconicoの検索を支えるElasticsearch&lt;/h2&gt;
&lt;h3 id=&#34;株式会社ドワンゴ-伊藤-祥-さん&#34;&gt;株式会社ドワンゴ 伊藤 祥 さん&lt;/h3&gt;
&lt;p&gt;スライド：&lt;a href=&#34;https://speakerdeck.com/shoito/niconico-elasticsearch&#34;&gt;niconicoの検索を支えるElasticsearch&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;リアルタイム検索の実現、新しい検索への対応&lt;/li&gt;
&lt;li&gt;検索のアーキテクチャとか。&lt;/li&gt;
&lt;li&gt;Capistranoでデプロイとかを管理&lt;/li&gt;
&lt;li&gt;1.4.1が出たら、クラスタを更新予定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ということで、実際に導入した話から、現在の運用の仕方、クラスタのアップグレードなど多岐にわたる内容でおもしろかったです。
遭遇した問題点とかもあったので。
Marvel便利なのでぜひ導入を検討してもらえればw&lt;/p&gt;
&lt;h2 id=&#34;elasticsearch-at-crowdworks&#34;&gt;Elasticsearch at CrowdWorks &lt;/h2&gt;
&lt;h3 id=&#34;株式会社クラウドワークス-九岡-佑介-さん-mumoshu&#34;&gt;株式会社クラウドワークス 九岡 佑介 さん @mumoshu&lt;/h3&gt;
&lt;p&gt;スライド：&lt;a href=&#34;http://www.slideshare.net/mumoshu/20141118-es&#34;&gt;Elasticsearch at CrowdWorks&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;会社の紹介&lt;/li&gt;
&lt;li&gt;仕事が検索対象&lt;/li&gt;
&lt;li&gt;検索時間が1桁減少！&lt;/li&gt;
&lt;li&gt;Graceful Degradationで失敗したら、InnoDB FTSで代替：&lt;a href=&#34;https://github.com/crowdworks/gracefully&#34;&gt;Gracefully&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.found.no&#34;&gt;found.no&lt;/a&gt;のサービスを利用&lt;/li&gt;
&lt;li&gt;elasticsearch-modelの拡張を作成してOSSとして公開：&lt;a href=&#34;https://github.com/crowdworks/elasticsearch-model-extensions&#34;&gt;elasticsearch-model-extensions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Gracefullyで切り替えとかは面白いなと思いました。
検索での利用の話でしたが、他のシーンでも使えそうですよね。
日本にFoundユーザがいるのも初めて知りました。
彼らの開発者ブログも質の良い情報が載っているので、参考になりますよね。&lt;/p&gt;
&lt;p&gt;次は、どんなMappingで運用しているのかとか、どういった工夫をしているかといった点を詳しく聞きたいなと思いました。
またお待ちしております。&lt;/p&gt;
&lt;h2 id=&#34;1分で作るelasticsearchプラグイン&#34;&gt;1分で作るElasticsearchプラグイン&lt;/h2&gt;
&lt;h3 id=&#34;株式会社エヌツーエスエム-菅谷-信介-さん&#34;&gt;株式会社エヌツーエスエム 菅谷 信介 さん&lt;/h3&gt;
&lt;p&gt;スライド：&lt;a href=&#34;http://www.slideshare.net/shinsuke/plugins-ates7&#34;&gt;Elasticsearchプラグインの作り方&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;* プラグインの作り方とか。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;十数個のプラグインの紹介。プラグインはこちらで公開中。&lt;a href=&#34;https://github.com/codelibs/&#34;&gt;https://github.com/codelibs/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;実際に、業務で必要なものから作成&lt;/li&gt;
&lt;li&gt;まだまだ作りたいものがある&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コミュニティ還元できるものはPR送ってもらえるとうれしいです。
前よりは体制も増えてるので、PRも目にとまるようになってるはずです。&lt;/p&gt;
&lt;p&gt;あとは、使ってみたいと思う方も多数いると思うので、ぜひ、OSSなので、貢献しましょう！
フィードバックがあるだけで、OSS活動やってるものにとってはやる気につながると思いますし。&lt;/p&gt;
&lt;h2 id=&#34;ltgisとして活用するelasticsearch&#34;&gt;LT：GISとして活用するElasticsearch &lt;/h2&gt;
&lt;h3 id=&#34;船戸-隆さん&#34;&gt;船戸 隆さん&lt;/h3&gt;
&lt;p&gt;スライド：&lt;a href=&#34;https://speakerdeck.com/tfunato/gistositehuo-yong-suruelasticsearch&#34;&gt;GISとして活用するElasticsearch &lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;java-jaからIngressの青（Registance）の勧誘に来られた方w&lt;/li&gt;
&lt;li&gt;APIをハックして、情報を取得し、Kibanaで可視化&lt;/li&gt;
&lt;li&gt;残念ながら、APIが変更されて見れなくなったらしい。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ingress実際にやったことはないのですが、おもしろそうでした。
発表される方の会社の採用紹介ではなく、Ingressの勧誘をされるとは想定外でしたw&lt;/p&gt;
&lt;p&gt;興味のあるデータをKibanaで可視化するのも面白い例だと思うので、活用してもらえればと思います。&lt;/p&gt;
&lt;h2 id=&#34;その他感想などのブログ&#34;&gt;その他、感想などのブログ&lt;/h2&gt;
&lt;p&gt;適当に見つけたブログを列挙してあります。これもあるよ！などあれば、教えてください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.yoslab.com/entry/2014/11/18/203159&#34;&gt;勉強会メモ - 第7回elasticsearch勉強会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/t-sato/items/940ccfa9e4a668b91967&#34;&gt;第7回elasticsearch勉強会 #elasticsearch #elasticsearchjp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;JJUGの時とは違い、Elasticsearch勉強会ではさすがに、企業としてのElasticsearchの知名度が高かったのはありがたいことでした。
自分の発表のために始めた勉強会でもありますが、まだまだ、発表するときは緊張しますし、分かりにくいんじゃないかなぁと思うことも多々あります。
この辺がわかりにくかった、この辺をもっと知りたいなど、フィードバックをお待ちしております。&lt;/p&gt;
&lt;p&gt;冒頭にも書きましたが、&lt;a href=&#34;http://qiita.com/advent-calendar/2014/elasticsearch&#34;&gt;Elasticsearch Advent Calendar 2014&lt;/a&gt;の登録をお待ちしております。どんなことでも歓迎なので、Elasticsearch、Kibana、Logstashなどについて書いてもらえるとうれしいです。&lt;/p&gt;
&lt;p&gt;次回ももちろん2ヶ月後くらいに行います。 スピーカー募集中ですので、コメント、メール、ツイートなど、コンタクトしていただければと思います。 よろしくお願いいたします。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 1.4.0および1.3.5リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2014/11/06/elasticsearch-1-4-0-ja/</link>
      <pubDate>Thu, 06 Nov 2014 01:30:33 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/11/06/elasticsearch-1-4-0-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：elasticsearch-1.4.0 and 1.3.5 released 本日、Lucene 4.10.2をベースにし</description>
      <content:encoded>&lt;p&gt;&lt;strong&gt;※この記事は次のブログを翻訳したものになります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-4-0-released/&#34;&gt;elasticsearch-1.4.0 and 1.3.5 released&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本日、&lt;strong&gt;Lucene 4.10.2&lt;/strong&gt;をベースにした&lt;strong&gt;Elasticsearch 1.4.0&lt;/strong&gt;と、バグフィックスリリースである、&lt;strong&gt;Elasticsearch 1.3.5&lt;/strong&gt;をリリースしました。
ダウンロードおよび変更リストはそれぞれ次のリンクからアクセスできます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最新ステーブルリリース：&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-4-0&#34;&gt;Elasticsearch 1.4.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1.3.x系バグフィックス：&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-3-5&#34;&gt;Elasticsearch 1.3.5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1.3ブランチに関する過去のリリースについてのブログは次のとおりです：&lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-3-4-released/&#34;&gt;1.3.4&lt;/a&gt;, &lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-3-3-released/&#34;&gt;1.3.3&lt;/a&gt;, &lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-3-2-released/&#34;&gt;1.3.2&lt;/a&gt;, &lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-3-1-released/&#34;&gt;1.3.1&lt;/a&gt;, &lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-3-0-released/&#34;&gt;1.3.0&lt;/a&gt;.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;Beta1リリースでも言及しましたが、1.4.0の主なテーマは*resiliency(復元性、弾力性)*です。
Elasticsearchをより安定し信頼性のあるものにし、メモリ管理を改善し、ディスカバリアルゴリズムを改善し、破損したデータの検知を改善しました。
Beta1リリースからのハイライトも含んでいます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Doc values (インデックス時にディスクに保存される&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/fielddata-formats.html#fielddata-formats&#34;&gt;fielddata&lt;/a&gt;)がヒープ利用率を激減&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/index-modules-fielddata.html#request-circuit-breaker&#34;&gt;Request circuit breaker&lt;/a&gt;:
メモリを消費しすぎる検索リクエストの中断&lt;/li&gt;
&lt;li&gt;Bloom filterの&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/indices-update-settings.html#codec-bloom-load&#34;&gt;デフォルト無効&lt;/a&gt;、高速なインデキシングのためにもはや必要とされないため。&lt;/li&gt;
&lt;li&gt;ノードディスカバリ、シャードリカバリの数多くのバグフィックス及び改善&lt;/li&gt;
&lt;li&gt;データ破損の早期検知のためのチェックサムのさらなる利用&lt;/li&gt;
&lt;li&gt;GroovyをMVELの代わりに&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/modules-scripting.html#modules-scripting&#34;&gt;デフォルトスクリプト言語に&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CORSを&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/modules-http.html#_settings_2&#34;&gt;デフォルト無効&lt;/a&gt;に。XSS攻撃防止の為。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/index-modules-shard-query-cache.html#index-modules-shard-query-cache&#34;&gt;クエリキャッシュ&lt;/a&gt;、変更されていないシャードからすぐにaggregation結果を返す&lt;/li&gt;
&lt;li&gt;新しいAggregation：&lt;code&gt;filter&lt;/code&gt;(&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/search-aggregations-bucket-filters-aggregation.html#search-aggregations-bucket-filters-aggregation&#34;&gt;ドキュメント&lt;/a&gt;)、&lt;code&gt;children&lt;/code&gt;(&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/search-aggregations-bucket-children-aggregation.html#search-aggregations-bucket-children-aggregation&#34;&gt;ドキュメント&lt;/a&gt;)、&lt;code&gt;scripted_metric&lt;/code&gt;(&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/search-aggregations-metrics-scripted-metric-aggregation.html#search-aggregations-metrics-scripted-metric-aggregation&#34;&gt;ドキュメント&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;新しい&lt;code&gt;GET /index&lt;/code&gt;API。インデックスのsettings、mappings、warmers、aliasesを1回のリクエストで返却(&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/indices-get-index.html#indices-get-index&#34;&gt;ドキュメント&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;自動付与ドキュメントIDのためのFlake ID。プライマリキーの探索パフォーマンスの改善。&lt;/li&gt;
&lt;li&gt;ドキュメントに変更のない更新によるドキュメントの再インデックスの防止&lt;/li&gt;
&lt;li&gt;&lt;code&gt;function_score&lt;/code&gt;クエリの関数で&lt;code&gt;weight&lt;/code&gt;パラメータによる個別の改善を可能に。(&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/query-dsl-function-score-query.html#_weight&#34;&gt;ドキュメント&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;詳細については&lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-4-0-beta-released/&#34;&gt;1.4.0.Beta1のブログ(英語)&lt;/a&gt;(&lt;a href=&#34;http://blog.johtani.info/blog/2014/10/02/elasticsearch-1-4-0-beta-released-ja/&#34;&gt;日本語訳&lt;/a&gt;)をご覧ください。&lt;/p&gt;
&lt;p&gt;Beta1以降の1.4.0の変更の全てについては、&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-4-0&#34;&gt;1.4.0 release notes&lt;/a&gt;でご覧いただけます。
以下では、2つの主な変更について紹介します。&lt;/p&gt;
&lt;h2 id=&#34;http-pipelining&#34;&gt;HTTP Pipelining&lt;/h2&gt;
&lt;p&gt;HTTP pipeliningは複数のリクエストを1回のコネクションで、関連するレスポンスを待つことなく送信することができます。
そして、レスポンスは、受け取ったリクエストと同じ順序で返却されます。
HTTP/1.1の仕様で、pipeliningのサポートが必要です。ElasticsearchはHTTP/1.1であるとしてきましたが、pipeliningはサポートしていませんでした。この問題は.NETユーザで問題を引き起こしました。&lt;/p&gt;
&lt;p&gt;現在、HTTP pipeliningは公式にサポート済みで、デフォルトで利用できます。&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/pull/8299&#34;&gt;#8299&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;h2 id=&#34;upgrade-api&#34;&gt;Upgrade API&lt;/h2&gt;
&lt;p&gt;Luceneのすべてのリリースではバグフィックスや最適化が提供されます。しかし、多くのユーザは古いバージョンのLuceneで作成されたインデックスを持っており、より最新の改善による利点を利用できないことがあります。
新しい&lt;code&gt;upgrade&lt;/code&gt;APIは、あなたのインデックスすべてもしくは一部を最新のLuceneフォーマットに透過的にアップグレードできます。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GET _upgrade&lt;/code&gt;リクエストは、インデックスのアップグレードが必要かどうかを提示し、アップグレードに必要なセグメントのサイズをリポートすることによって、どのくらいの時間が必要かの目安を提供します。
&lt;code&gt;POST _upgrade&lt;/code&gt;コマンドはバックグラウンドでインデックスを最新のLuceneフォーマットに書き換えます。&lt;/p&gt;
&lt;p&gt;より詳しい情報は&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/indices-upgrade.html&#34;&gt;&lt;code&gt;upgrade&lt;/code&gt;APIドキュメント&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;h2 id=&#34;試してみてください&#34;&gt;試してみてください。&lt;/h2&gt;
&lt;p&gt;Beta1リリースを利用し、経験・体験を報告していただいたベータテスターの方々に感謝します。
1.4.0がこれまでの最高のリリースになると確信しています。
ぜひ、&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-4-0&#34;&gt;Elasticsearch 1.4.0&lt;/a&gt;をダウンロードして、試してみてください。
そして、感想をTwitter(&lt;a href=&#34;https://twitter.com/elasticsearch&#34;&gt;@elasticsearch&lt;/a&gt;)などで教えて下さい。
また、問題がありましたら、&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/issues&#34;&gt;GitHub issues page&lt;/a&gt;で報告をお願いします。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>validate APIの利用</title>
      <link>https://blog.johtani.info/blog/2014/10/27/how-to-use-validate-api/</link>
      <pubDate>Mon, 27 Oct 2014 18:42:31 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/10/27/how-to-use-validate-api/</guid>
      <description>久しぶりに翻訳ではないブログを。書こうと思いながらかけてなかったので。。。 今回はvalidate APIの紹介です。 背景 Elasticsear</description>
      <content:encoded>&lt;p&gt;久しぶりに翻訳ではないブログを。書こうと思いながらかけてなかったので。。。&lt;/p&gt;
&lt;p&gt;今回は&lt;a href=&#34;http://www.elasticsearch.org/guide/ep/elasticsearch/reference/current/search-validate.html&#34;&gt;validate API&lt;/a&gt;の紹介です。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;Elasticsearchのクエリは&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl.html&#34;&gt;Query DSL&lt;/a&gt;というJSONで
クエリを定義できるものを提供しています。
これは、様々な&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-queries.html&#34;&gt;クエリ&lt;/a&gt;、&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-filters.html&#34;&gt;フィルタ&lt;/a&gt;を定義するために必要です。&lt;/p&gt;
&lt;p&gt;自分の望んでいる条件を記述するために、JSONのネストと格闘することも必要となります。。。
また、クエリ、フィルタには様々なパラメータが用意されています。
これらのパラメータをすべて覚えるのは無理でしょうし、タイプミスなどもありますよね。
タイプミスやカッコのミスマッチなどで格闘して1時間が経過してしまったなどもあると思います。&lt;/p&gt;
&lt;p&gt;そんな時に便利なAPIとして用意されているのが&lt;a href=&#34;http://www.elasticsearch.org/guide/ep/elasticsearch/reference/current/search-validate.html&#34;&gt;validate API&lt;/a&gt;です。&lt;/p&gt;
&lt;h2 id=&#34;利用方法&#34;&gt;利用方法&lt;/h2&gt;
&lt;p&gt;APIが用意されています。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://ホスト名:ポート番号/インデックス名/タイプ名/_validate/query
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;インデックス名&lt;/code&gt;や&lt;code&gt;タイプ名&lt;/code&gt;は省略可能ですが、マッピングが異なると思うので、タイプ名まで指定するほうが良いと思います。
上記のAPIに対してクエリを送信するだけです。&lt;/p&gt;
&lt;h3 id=&#34;クエリの確認&#34;&gt;クエリの確認&lt;/h3&gt;
&lt;p&gt;たとえば、&lt;a href=&#34;https://gist.github.com/johtani/08dee5fb4da62037ef9e&#34;&gt;こちらのGist&lt;/a&gt;にあるようなマッピングのインデックスに対して
検索クエリを組み立てていて、エラーが出るとします。
※このクエリは&lt;code&gt;match_all&lt;/code&gt;のところを&lt;code&gt;match_al&lt;/code&gt;と、&lt;code&gt;l&lt;/code&gt;が1文字足りないクエリになっています。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;検索クエリのリクエスト（エラーあり）&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET pref_aggs/_search
{
  &amp;quot;query&amp;quot;: {
    &amp;quot;match_al&amp;quot;: {}
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;実行結果のレスポンス&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
   &amp;quot;error&amp;quot;: &amp;quot;SearchPhaseExecutionException[Failed to execute phase [query], all shards failed; shardFailures {[rwkb01chTZq2V7FD0Tlwrw][pref_aggs][0]: SearchParseException[[pref_aggs][0]: from[-1],size[-1]: Parse Failure [Failed to parse source [{\n  \&amp;quot;query\&amp;quot;: {\n    \&amp;quot;match_al\&amp;quot;: { }\n  }\n}\n]]]; nested: QueryParsingException[[pref_aggs] No query registered for [match_al]]; }{[rwkb01chTZq2V7FD0Tlwrw][pref_aggs][1]: SearchParseException[[pref_aggs][1]: from[-1],size[-1]: Parse Failure [Failed to parse source [{\n  \&amp;quot;query\&amp;quot;: {\n    \&amp;quot;match_al\&amp;quot;: { }\n  }\n}\n]]]; nested: QueryParsingException[[pref_aggs] No query registered for [match_al]]; }]&amp;quot;,
   &amp;quot;status&amp;quot;: 400
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;とこんなかんじで、エラーが帰っては来るのですが、非常に読みづらいです。&lt;/p&gt;
&lt;p&gt;そこで、&lt;code&gt;validate API&lt;/code&gt;を利用します。
リクエスト先を&lt;code&gt;/_search&lt;/code&gt;から&lt;code&gt;/_validate/query&lt;/code&gt;に変更します。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;validate API&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET pref_aggs/_validate/query
{
  &amp;quot;query&amp;quot;: {
    &amp;quot;match_al&amp;quot;: {}
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;validate APIのレスポンス&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
   &amp;quot;valid&amp;quot;: false,
   &amp;quot;_shards&amp;quot;: {
      &amp;quot;total&amp;quot;: 1,
      &amp;quot;successful&amp;quot;: 1,
      &amp;quot;failed&amp;quot;: 0
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;すると、非常にシンプルな結果が返ってきます。
&lt;code&gt;&amp;quot;valid&amp;quot;: false&lt;/code&gt;となっているため、クエリに問題があることがわかります。&lt;/p&gt;
&lt;h3 id=&#34;エラーの詳細&#34;&gt;エラーの詳細&lt;/h3&gt;
&lt;p&gt;問題がある事自体はわかりましたが、エラーの内容も知りたいですよね？
その場合は、&lt;code&gt;explain&lt;/code&gt;というパラメータを追加します。
（正しくは&lt;code&gt;explain=true&lt;/code&gt;を追加しますが、&lt;code&gt;=true&lt;/code&gt;を省略可能です。）&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;validate API(explainあり、クエリ自体は省略)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET pref_aggs/_validate/query?explain
{...}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;validate APIのレスポンス&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
   &amp;quot;valid&amp;quot;: false,
   &amp;quot;_shards&amp;quot;: {
      &amp;quot;total&amp;quot;: 1,
      &amp;quot;successful&amp;quot;: 1,
      &amp;quot;failed&amp;quot;: 0
   },
   &amp;quot;explanations&amp;quot;: [
      {
         &amp;quot;index&amp;quot;: &amp;quot;pref_aggs&amp;quot;,
         &amp;quot;valid&amp;quot;: false,
         &amp;quot;error&amp;quot;: &amp;quot;org.elasticsearch.index.query.QueryParsingException: [pref_aggs] No query registered for [match_al]&amp;quot;
      }
   ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;explanations&lt;/code&gt;という項目が追加されました。
ここに&lt;code&gt;error&lt;/code&gt;という項目として、エラーの詳細が返ってきます。&lt;code&gt;_search&lt;/code&gt;の時よりも見やすいですね。
今回のエラーは、&lt;code&gt;match_all&lt;/code&gt;が正しいクエリですの、&lt;em&gt;&lt;code&gt;match_al&lt;/code&gt;というクエリは登録されていないというエラー&lt;/em&gt;でした。
では、クエリを修正して実行しましょう。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;validate API(エラー無し)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET pref_aggs/_validate/query?explain
{
  &amp;quot;query&amp;quot;: {
    &amp;quot;match_all&amp;quot;: {}
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;validate APIのレスポンス&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
   &amp;quot;valid&amp;quot;: true,
   &amp;quot;_shards&amp;quot;: {
      &amp;quot;total&amp;quot;: 1,
      &amp;quot;successful&amp;quot;: 1,
      &amp;quot;failed&amp;quot;: 0
   },
   &amp;quot;explanations&amp;quot;: [
      {
         &amp;quot;index&amp;quot;: &amp;quot;pref_aggs&amp;quot;,
         &amp;quot;valid&amp;quot;: true,
         &amp;quot;explanation&amp;quot;: &amp;quot;ConstantScore(*:*)&amp;quot;
      }
   ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;今度はクエリに問題はありません。&lt;code&gt;&amp;quot;valid&amp;quot;: true&lt;/code&gt;です。
そして、&lt;code&gt;explanations&lt;/code&gt;の項目には、&lt;code&gt;error&lt;/code&gt;の代わりに&lt;code&gt;explanation&lt;/code&gt;という項目が返ってきました。
これが、実際にElasticsearch内部で実行されるクエリになります。&lt;/p&gt;
&lt;h3 id=&#34;実際のクエリに利用される単語の確認&#34;&gt;実際のクエリに利用される単語の確認&lt;/h3&gt;
&lt;p&gt;この機能はこの他に、クエリの解析にも利用できます。
思ったとおりに検索にヒットしない場合があって、困ったことはないですか？
フィールドに指定されたアナライザによっては、単語を変形したりするものが存在します。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;サンプルマッピング&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PUT /validate_sample
{
  &amp;quot;mappings&amp;quot;: {
    &amp;quot;several_analyzer&amp;quot;: {
      &amp;quot;properties&amp;quot;: {
        &amp;quot;title&amp;quot;: {&amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;},
        &amp;quot;body_ja&amp;quot;: {&amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;, &amp;quot;analyzer&amp;quot;: &amp;quot;kuromoji&amp;quot;},
        &amp;quot;body_en&amp;quot;: {&amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;, &amp;quot;analyzer&amp;quot;: &amp;quot;english&amp;quot;}
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例えば、このように&lt;code&gt;kuromoji&lt;/code&gt;、&lt;code&gt;english&lt;/code&gt;、デフォルト(&lt;code&gt;standard&lt;/code&gt;)アナライザを利用したマッピングがあるとします。
このフィールドに対して&lt;code&gt;powerful&lt;/code&gt;という単語で検索したとします。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;validate API&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET /validate_sample/_validate/query?explain
{
  &amp;quot;query&amp;quot;: {
    &amp;quot;multi_match&amp;quot;: {
      &amp;quot;fields&amp;quot;: [&amp;quot;body_en&amp;quot;,&amp;quot;body_ja&amp;quot;,&amp;quot;title&amp;quot;],
      &amp;quot;query&amp;quot;: &amp;quot;powerful&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;この場合、レスポンスは次のとおりです。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;validate APIのレスポンス&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
   &amp;quot;valid&amp;quot;: true,
   &amp;quot;_shards&amp;quot;: {
      &amp;quot;total&amp;quot;: 1,
      &amp;quot;successful&amp;quot;: 1,
      &amp;quot;failed&amp;quot;: 0
   },
   &amp;quot;explanations&amp;quot;: [
      {
         &amp;quot;index&amp;quot;: &amp;quot;validate_sample&amp;quot;,
         &amp;quot;valid&amp;quot;: true,
         &amp;quot;explanation&amp;quot;: &amp;quot;(title:powerful | body_en:power | body_ja:powerful)&amp;quot;
      }
   ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;title&lt;/code&gt;、&lt;code&gt;body_ja&lt;/code&gt;については入力された単語がそのままクエリとして利用されています。
&lt;code&gt;body_en&lt;/code&gt;については、&lt;code&gt;power&lt;/code&gt;という単語に変換されて実行されています。
これは、&lt;code&gt;english&lt;/code&gt;アナライザがステミングを行った結果がクエリとして利用されるという意味です。
また、&lt;code&gt;powerful&lt;/code&gt;を&lt;code&gt;秋葉原&lt;/code&gt;といった日本語に変更して実行すると次のようになります。
日本語は&lt;code&gt;standard&lt;/code&gt;アナライザなどでは、1文字ずつ区切られてしまうことがわかります。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;validate APIのレスポンス&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
   &amp;quot;valid&amp;quot;: true,
   &amp;quot;_shards&amp;quot;: {
      &amp;quot;total&amp;quot;: 1,
      &amp;quot;successful&amp;quot;: 1,
      &amp;quot;failed&amp;quot;: 0
   },
   &amp;quot;explanations&amp;quot;: [
      {
         &amp;quot;index&amp;quot;: &amp;quot;validate_sample&amp;quot;,
         &amp;quot;valid&amp;quot;: true,
         &amp;quot;explanation&amp;quot;: &amp;quot;((title:秋 title:葉 title:原) | (body_en:秋 body_en:葉 body_en:原) | ((body_ja:秋葉 body_ja:秋葉原) body_ja:原))&amp;quot;
      }
   ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;このように、クエリの単語がどのような単語に変換されてクエリに利用されているかなども知ることが可能です。&lt;/p&gt;
&lt;p&gt;また、クエリを組み立てて、ヒットするはずが、0件となってしまうという場合にも、どのようなクエリが組み立てられているかを確認するという点で、
&lt;code&gt;validate API&lt;/code&gt;が役立ちます。
検索がヒットするが、望んだクエリになっていないのでは？という場合は&lt;code&gt;_search API&lt;/code&gt;の&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-request-explain.html&#34;&gt;&lt;code&gt;explain&lt;/code&gt;パラメータ&lt;/a&gt;を
利用すれば、クエリの構成がわかるのですが、検索結果が0件の場合はクエリの構成は表示されません。&lt;/p&gt;
&lt;h2 id=&#34;解決できない問題は&#34;&gt;解決できない問題は？&lt;/h2&gt;
&lt;p&gt;便利なvalidate APIですが、以下の問題に対しては残念ながら確認できません。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;query&lt;/code&gt;以外の項目のvalidate不可
&lt;ul&gt;
&lt;li&gt;たとえば、&lt;code&gt;_search API&lt;/code&gt;の&lt;code&gt;size&lt;/code&gt;などの項目についてはチェックできないです。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;存在しないフィールドの指定
&lt;ul&gt;
&lt;li&gt;上記&lt;code&gt;validate_sample&lt;/code&gt;のマッピングの例でクエリに&lt;code&gt;body_eng&lt;/code&gt;という存在しないフィールドを指定してもエラーとはなりません。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;書いたクエリがうまく動かない、JSONのタグがおかしいといった場合は、
まずはこの&lt;code&gt;validate API&lt;/code&gt;で確認してみるのがオススメです。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Sonatypeのバージョン番号で困ったので</title>
      <link>https://blog.johtani.info/blog/2014/10/15/versioning-of-sonatype/</link>
      <pubDate>Wed, 15 Oct 2014 15:26:08 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/10/15/versioning-of-sonatype/</guid>
      <description>Elasticsearch 1.4.0.Beta1がリリースされました。 個人でelasticsearch-extended-analyzeというプラグインを開発してま</description>
      <content:encoded>&lt;p&gt;&lt;a href=&#34;http://blog.johtani.info/blog/2014/10/02/elasticsearch-1-4-0-beta-released-ja/&#34;&gt;Elasticsearch 1.4.0.Beta1がリリース&lt;/a&gt;されました。&lt;/p&gt;
&lt;p&gt;個人で&lt;a href=&#34;https://github.com/johtani/elasticsearch-extended-analyze&#34;&gt;elasticsearch-extended-analyze&lt;/a&gt;というプラグインを開発してます。
こちらも1.4.0.Beta1に対応するべく作業をしてて、少し戸惑ったことがあったので、メモをば。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;ここ最近はプラグインのバージョン番号をElasticsearchのバージョン番号と同じものを利用していました。
（プラグインの機能追加をサボってる？？）
その時に、&lt;code&gt;1.4.0.Beta1&lt;/code&gt;という番号を指定したのですが、意味不明なエラーに悩まされてしまいまして。&lt;/p&gt;
&lt;p&gt;プラグインのリリースでは、以下のコマンドを実行します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mvn release:prepare
$ mvn release:perform
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最初のコマンド（prepare）で、パッケージングを実施し、Githubにリリースタグを打ったバージョンがpushされます。
次のコマンド（perform）で、パッケージングされたzipファイルがsonatypeのサイトに公開するためにアップロードされます。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1.4.0.Beta1&lt;/code&gt;というバージョン文字列を利用した場合、prepareは問題なく実行できたのですが、
performで以下の様なエラーが返ってきました。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Return code is: 401, ReasonPhrase: Unauthorized.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;バージョン番号が&lt;code&gt;1.3.0&lt;/code&gt;では特に問題はなかったのですが、、、
結局、バージョン番号を&lt;code&gt;1.4.0-beta1&lt;/code&gt;に変更すると問題なくリリースが完了しました。&lt;/p&gt;
&lt;p&gt;mike_neckさんと話をしていて、&lt;a href=&#34;http://semver.org&#34;&gt;Semantic Versioning&lt;/a&gt;に関係しているのかなぁという話にはなったのですが、
詳しく調べていません。。。&lt;/p&gt;
&lt;p&gt;そのうち調べようかなぁ。。。。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>elasticsearch 1.4.0.Beta1のリリース</title>
      <link>https://blog.johtani.info/blog/2014/10/02/elasticsearch-1-4-0-beta-released-ja/</link>
      <pubDate>Thu, 02 Oct 2014 19:14:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/10/02/elasticsearch-1-4-0-beta-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：elasticsearch 1.4.0.beta1 released 本日、Lucene 4.10.1をベースにした、Elast</description>
      <content:encoded>&lt;p&gt;※この記事は次のブログを翻訳したものになります。&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-4-0-beta-released/&#34;&gt;elasticsearch 1.4.0.beta1 released&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本日、&lt;em&gt;Lucene 4.10.1&lt;/em&gt;をベースにした、&lt;em&gt;Elasticsearch 1.4.0.Beta1&lt;/em&gt;をリリースしました。
&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-4-0-Beta1&#34;&gt;Elasticsearch 1.4.0.Beta1&lt;/a&gt;からダウンロードできます。
また、すべての変更点に関してもこちらをご覧ください。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;1.4.0のテーマは*resiliency(復元性、弾力性)*です。
&lt;em&gt;resiliency&lt;/em&gt;とはElasticsearchをより安定し信頼性のあるものにすることを意味します。
すべての機能が正常に機能している場合は信頼することは簡単です。
予想外のことが発生した時に難しくなります：ノードでout of memoryの発生、スローGCや重いI/O、ネットワーク障害、不安定なデータの送信によるノードのパフォーマンス低下など。&lt;/p&gt;
&lt;p&gt;本ベータリリースは、resiliencyの主な3つの改善を含んでいます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#memory-mgmt&#34;&gt;メモリ使用量の低下&lt;/a&gt;によるノードの安定性向上&lt;/li&gt;
&lt;li&gt;discoveryアルゴリズムの改善による&lt;a href=&#34;#cluster-stability&#34;&gt;クラスタの安定性&lt;/a&gt;向上&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#checksums&#34;&gt;チェックサム&lt;/a&gt;の導入による破損したデータの検知&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分散システムは複雑です。
決して想像できないような状況をシミュレーションするために、ランダムなシナリオを作成する広範囲なテストスイートを持っています。
しかし、無数のエッジケース(特殊なケース)があることも認識しています。
1.4.0.Beta1はこれまで私たちが行ってきた改善のすべてを含んでいます。
これらの変更を実際にテストしていただき、&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/issues&#34;&gt;何か問題があった場合は私たちに教えてください&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;a-namememory-mgmtメモリ管理a&#34;&gt;&lt;a name=&#34;memory-mgmt&#34;&gt;メモリ管理&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ヒープ空間は限られたリソースです。
上限を32GBとし、利用可能なRAMの50%をヒープの上限にすることを推奨します。
この上限を超えた場合、JVMは圧縮したポインタを使用することができず、GCが非常に遅くなります。
ノードの不安定性の主な原因は遅いGCです。それは、次のようなことから発生します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;メモリプレッシャー&lt;/li&gt;
&lt;li&gt;スワップ(参照：&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/setup-configuration.html#setup-configuration-memory&#34;&gt;memory settings&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;非常に大きなヒープ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本リリースは、メモリ管理の改善し、（結果として）ノードの安定性を改善するいくつかの変更を含んでいます。&lt;/p&gt;
&lt;h3 id=&#34;doc-values&#34;&gt;doc values&lt;/h3&gt;
&lt;p&gt;メモリの利用の最も大きなものの1つは&lt;strong&gt;fielddata&lt;/strong&gt;です
aggregation、ソート、スクリプトがフィールドの値に素早くアクセスするために、フィールドの値をメモリにロードして保持します。
ヒープは貴重なため、1ビットも無駄にしないためにメモリ内のデータは高度な圧縮と最適化を行っています。
これは、ヒープスペース以上のデータをもつまでは、非常によく動作します。
これは、多くのノードを追加することによって常に解決できる問題です。
しかし、CPUやI/Oが限界に達してしまうずっと前に、ヒープ空間の容量に到達します。&lt;/p&gt;
&lt;p&gt;最近のリリースは、&lt;strong&gt;doc values&lt;/strong&gt;によるサポートがあります。
基本的に、doc valuesはin-memory fielddataと同じ機能を提供します。
doc valuesの提供する利点は、それらが、非常に少量のヒープ空間しか使用しない点です。
doc valuesはメモリからではなく、ディスクから読み込まれます。
ディスクアクセスは遅いですが、doc valuesはカーネルのファイルシステムキャッシュの利点を得られます。
ファイルシステムキャッシュはJVMヒープとはことなり、32GBの制限による束縛がありません。
ヒープからファイルシステムキャッシュにfielddataを移行することによって、より小さなヒープを使うことができます。これは、GCがより早くなり、ノードが更に安定することを意味します。&lt;/p&gt;
&lt;p&gt;本リリースより前は、doc valuesはin-memory fielddataよりもかなり遅かったです。
本リリースに含まれる変更は、パフォーマンスをかなり向上させ、in-memory fielddataとほぼ同じくらいの速度になっています。&lt;/p&gt;
&lt;p&gt;in-memory fielddataの代わりにdoc valuesを利用するために必要なことは、次のように新しいフィールドをマッピングすることです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PUT /my_index
{
  &amp;quot;mappings&amp;quot;: {
    &amp;quot;my_type&amp;quot;: {
      &amp;quot;properties&amp;quot;: {
        &amp;quot;timestamp&amp;quot;: {
          &amp;quot;type&amp;quot;:       &amp;quot;date&amp;quot;,
          &amp;quot;doc_values&amp;quot;: true
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;このマッピングで、このフィールドに対するfielddataの利用は、メモリにフィールドをロードする代わりに、自動的にディスクからdoc valuesを利用します。
*注意：*現時点で、doc valuesはanalyzedな&lt;code&gt;string&lt;/code&gt;フィールドはサポートしていません。&lt;/p&gt;
&lt;h3 id=&#34;request-circuit-breaker&#34;&gt;request circuit breaker&lt;/h3&gt;
&lt;p&gt;fielddata circuit breakerはfielddataによって利用されるメモリの上限を制限するために追加され、OOMEの最も大きな原因の1つを防ぎました。
そして、&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/index-modules-fielddata.html#request-circuit-breaker&#34;&gt;リクエストレベルのcircuit-breaker&lt;/a&gt;を提供するために、コンセプトを拡張しました。
これは、単一のリクエストによって使用されるメモリの上限を制限します。&lt;/p&gt;
&lt;h3 id=&#34;bloom-filters&#34;&gt;bloom filters&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Bloom_filter&#34;&gt;Bloom filters&lt;/a&gt; はインデキシング(前のバージョンのドキュメントが存在するかどうかのチェックのため)や、
IDによるドキュメントの検索(ドキュメントを含むセグメントがどれかを決定するため)に関する重要な性能最適化を提供しました。
しかし、もちろんそれらはコスト（メモリ）を必要とします。
現在の改善は、bloom filterの必要性を取り除きました。
現在では、Elasticsearchはまだ、インデックス時にそれらを構築します(実世界の経験がテストシナリオにそぐわない場合に備えて)。
しかし、デフォルトではメモリにはロードされません。
すべてが予定通りに運べば、将来のバージョンで完全にこれらは除去します。&lt;/p&gt;
&lt;h2 id=&#34;a-namecluster-stabilityクラスタの安定性a&#34;&gt;&lt;a name=&#34;cluster-stability&#34;&gt;クラスタの安定性&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;クラスタの安定性向上のために私たちができる最も大きなことは、ノードの安定性の向上です。
もし、ノードが安定しておりタイミングよく反応すれば、クラスタが不安定になる可能性が大いに減少します。
私たちは不完全な世界に住んでいます。- 物事は予想外にうまく行きません。クラスタはデータを失うことなくこのような状況から回復できる必要があります。&lt;/p&gt;
&lt;p&gt;私たちは、&lt;code&gt;improve_zen&lt;/code&gt;ブランチ上で、Elasticsearchの障害からの復旧するための能力の向上に数ヶ月費やしてきました。
まず、複雑なネットワークレベルの障害を繰り返すためのテストを追加しました。
次に、各テストのための修正を追加しました。
そこには、より多くの行うことが存在します。しかし、私たちは、&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/issues/2488&#34;&gt;issue #2488&lt;/a&gt;(&amp;ldquo;分割が交差している場合、minimum_master_nodesはsplit-brainを防げない&amp;rdquo;)に含まれる、ユーザが経験してきた大部分の問題を私たちは解決しました。&lt;/p&gt;
&lt;p&gt;私たちはクラスタのresiliencyを非常に真剣に取り組んでいます。
私たちは、Elasticsearchが何ができるか、その上で何が弱点であるかを理解してほしいと思っています。
これを考慮して、私たちは&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/resiliency/current/index.html&#34;&gt;Resiliency Status Document&lt;/a&gt;を作成しました。
このドキュメントは、私たち(または私たちユーザ)が遭遇したresiliencyの問題の、何が修正済みで、何が修正されないまま残っているかを記録します。
このドキュメントを慎重に読み、あなたのデータを保護するために適切な方法を選択してください。&lt;/p&gt;
&lt;h2 id=&#34;a-namechecksumsデータ破損の検知a&#34;&gt;&lt;a name=&#34;checksums&#34;&gt;データ破損の検知&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ネットワークをまたいだシャードリカバリのチェックサムは、圧縮ライブラリのバグを発見する助けとなりました。
それは、バージョン1.3.2で修正済みです。
それ以来、私たちはElasticsearchのいたるところにチェックサムとチェックサムの確認を追加しました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;マージ中に、あるセグメント内すべてのチェックサムの確認(&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/issues/7360&#34;&gt;#7360&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;インデックス再オープン時に、あるセグメント内の最も小さなファイルの完全な確認と、より大きなファイルの軽量な打ち切りチェック(&lt;a href=&#34;https://issues.apache.org/jira/browse/LUCENE-5842&#34;&gt;LUCENE-5842&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;トランザクションログからイベントを再生するとき、各イベントはチェックサムを確認される(&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/issues/6554&#34;&gt;#6554&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;シャードのリカバリ中もしくは、スナップショットからのリストア中にElasticsearchはローカルファイルとリモートのコピーが同一であるか確認する必要がある。ファイルの長さとチェックサムのみを使うのは不十分であることが確認された。このため、現在はセグメントのすべてのファイルの同一性を確認(&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/issues/7159&#34;&gt;#7159&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;その他のハイライト&#34;&gt;その他のハイライト&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-4-0-Beta1&#34;&gt;Elasticsearch 1.4.0.Beta1のchangelog&lt;/a&gt;に本リリースの多くの機能、改善、バグフィックスについて読むことができます。
ここでは、特筆すべきいくつかの変更について述べます。&lt;/p&gt;
&lt;h3 id=&#34;groovyによるmvelの置き換え&#34;&gt;groovyによるmvelの置き換え&lt;/h3&gt;
&lt;p&gt;Groovyは現在、デフォルトのscripting languageです。
以前のデフォルトはMVELで、古くなってきており、サンドボックス内で実行できないという事実は、セキュリティ問題でした。
Groovyはサンドボックスであり(それは、ボックスの外へは許可が必要)、メンテナンスされており、速いです！
詳しくは&lt;a href=&#34;http://www.elasticsearch.org/blog/scripting/&#34;&gt;scriptingについてのブログ記事&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;h3 id=&#34;デフォルトでcorsはオフ&#34;&gt;デフォルトでcorsはオフ&lt;/h3&gt;
&lt;p&gt;Elasticsearchのデフォルト設定はクロスサイトスクリプティングに対して脆弱でした。
私たちはデフォルトで&lt;a href=&#34;http://en.wikipedia.org/wiki/Cross-origin_resource_sharing&#34;&gt;CORS&lt;/a&gt;をオフにすることで修正しました。
Elasticsearchにインストールされたサイトプラグインはこれまで同様に機能します。
しかし、CORSを再度オンにすることがない限り、外部のウェブサイトがリモートのクラスタにアクセスすることはできません。
ウェブサイトがあなたのクラスタにアクセス可能に制御できるように、さらに&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/modules-http.html#_settings_2&#34;&gt;CORS settings&lt;/a&gt;を追加しました。
詳しくは&lt;a href=&#34;http://www.elasticsearch.org/community/security&#34;&gt;security page&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;h3 id=&#34;クエリキャッシュ&#34;&gt;クエリキャッシュ&lt;/h3&gt;
&lt;p&gt;新しい試験的な&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/index-modules-shard-query-cache.html&#34;&gt;shardレベルのクエリキャッシュ&lt;/a&gt;は、静的なインデックスのアグリゲーションをほとんど即座に反応できます。
ウエブサイトのアクセスの日毎のページビュー数を見るダッシュボードを持っていると想像してみてください。
これらの数値は古いインデックスでは変更がありません。しかし、アグリゲーションはダッシュボードのリフレッシュのたびに再計算されます。
新しいクエリキャッシュを利用すると、シャードのデータが変更されない限り、アグリゲーションの結果はキャッシュから直接返却されます。
キャッシュから古い結果を決して取得することはありません。それは、常に、キャッシュされていないリクエストと同じ結果を返します。&lt;/p&gt;
&lt;h3 id=&#34;新しいaggregations&#34;&gt;新しいaggregations&lt;/h3&gt;
&lt;p&gt;3つの新しいaggregationsがあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/search-aggregations-bucket-filters-aggregation.html&#34;&gt;&lt;code&gt;filters&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;これは&lt;code&gt;filter&lt;/code&gt; aggregationの拡張です。複数のバケットを定義し、バケット毎に異なるフィルタを利用できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/search-aggregations-bucket-children-aggregation.html&#34;&gt;&lt;code&gt;children&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nested&lt;/code&gt;アグリゲーションの親子版。&lt;code&gt;children&lt;/code&gt; aggは親のドキュメントに属する子のドキュメントを集計できる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/search-aggregations-metrics-scripted-metric-aggregation.html&#34;&gt;&lt;code&gt;scripted_metric&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;このaggregationは、データによって計算されたメトリックを完全にコントロールできます。これは、初期化フェーズ、ドキュメント収集フェーズ、shardレベル結合フェーズ、global reduceフェーズを提供します。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;get-index-api&#34;&gt;get /index api&lt;/h3&gt;
&lt;p&gt;以前、ある1つのインデックスのaliases、mappings、settings、warmersを取得出来ました。しかし、それらを個別にです。
&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/indices-get-index.html&#34;&gt;&lt;code&gt;get-index&lt;/code&gt; API&lt;/a&gt; はこれらのすべてもしくは一部を、複数もしくはひとつのインデックスに対して一緒に取得できます。
これは、既存のインデックスと同一もしくはほぼ同一であるインデックスを作成したいときに非常に役に立ちます。&lt;/p&gt;
&lt;h3 id=&#34;登録と更新&#34;&gt;登録と更新&lt;/h3&gt;
&lt;p&gt;ドキュメントの登録と更新にいくつかの改善があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;現在、ドキュメントIDの自動生成のために&lt;a href=&#34;http://boundary.com/blog/2012/01/12/flake-a-decentralized-k-ordered-unique-id-generator-in-erlang&#34;&gt;Flake ID&lt;/a&gt;を使用しています。これは、プライマリキー探索時に素晴らしい性能向上を提供します。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;detect_noop&lt;/code&gt;に&lt;code&gt;true&lt;/code&gt;を設定すると、ドキュメントに変更を与えない更新が軽量になります。この設定を有効にすると、&lt;code&gt;_source&lt;/code&gt;フィールドのコンテンツを変更する更新リクエストだけ、ドキュメントの新しいバージョンを書き込みます。&lt;/li&gt;
&lt;li&gt;更新はスクリプトから完全に操作できます。以前は、スクリプトはドキュメントがすでに存在しているときだけ実行可能で、それ以外は、&lt;code&gt;upsert&lt;/code&gt;ドキュメントで登録しました。&lt;code&gt;script_upsert&lt;/code&gt;パラメータでスクリプトから直接ドキュメントの作成が操作できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;function-score&#34;&gt;function score&lt;/h3&gt;
&lt;p&gt;すでに非常に便利な&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/query-dsl-function-score-query.html&#34;&gt;&lt;code&gt;function_score&lt;/code&gt;クエリ&lt;/a&gt;が、新しく&lt;code&gt;weight&lt;/code&gt;パラメータをサポートします。
これは、それぞれの指定された関数の影響をチューニングするのに使われます。
これは、人気度よりも更新日時により重みをかけたり、地理情報よりも価格により重みをかけるといったことを可能にします。
また、&lt;code&gt;random_score&lt;/code&gt;機能はセグメントマージによる影響を受けません。これにより、より一貫した順序が提供されます。&lt;/p&gt;
&lt;h2 id=&#34;試してみてください&#34;&gt;試してみてください。&lt;/h2&gt;
&lt;p&gt;ぜひ、&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-4-0-Beta1&#34;&gt;Elasticsearch 1.4.0.Beta1&lt;/a&gt;をダウンロードして、試してみてください。
そして、感想をTwitter(&lt;a href=&#34;https://twitter.com/elasticsearch&#34;&gt;@elasticsearch&lt;/a&gt;)などで教えて下さい。
また、問題がありましたら、&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/issues&#34;&gt;GitHub issues page&lt;/a&gt;で報告をお願いします。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>第6回Elasticsearch勉強会を開催しました。#elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2014/09/17/hold-on-6th-elasticsearch-jp/</link>
      <pubDate>Wed, 17 Sep 2014 13:22:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/09/17/hold-on-6th-elasticsearch-jp/</guid>
      <description>第6回Elsticsearch勉強会を開催しました。 スタッフの皆さん、スピーカーの皆さん、開場提供していただいたリクルートテクノロジーズさん</description>
      <content:encoded>&lt;p&gt;&lt;a href=&#34;http://elasticsearch.doorkeeper.jp/events/13917&#34;&gt;第6回Elsticsearch勉強会&lt;/a&gt;を開催しました。
スタッフの皆さん、スピーカーの皆さん、開場提供していただいた&lt;a href=&#34;http://recruit-tech.co.jp&#34;&gt;リクルートテクノロジーズさん&lt;/a&gt;、ありがとうございました！
次回もよろしくお願いします！参加していただき盛り上げていただいた参加者の皆さんもありがとうございました。
今回は、スタッフが私を含めて3，4名ということで、ドタバタしてしまってスミマセンでした。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;今回はキャンセルが多く、最終的には90人弱の参加となりましたが、今回も多数の方にお集まりいただきありがとうございました。
同じ日に他の勉強会もあった影響でしょうか？&lt;/p&gt;
&lt;h2 id=&#34;aggregationあれこれelasticsearch-inc-jun-ohtani-johtani&#34;&gt;「Aggregationあれこれ」Elasticsearch Inc. Jun Ohtani @johtani&lt;/h2&gt;
&lt;p&gt;スライド：&lt;a href=&#34;https://speakerdeck.com/johtani/aggregationarekore&#34;&gt;Aggregationあれこれ&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ちょっと長かったですかね。。。&lt;/li&gt;
&lt;li&gt;Aggregationの概要、内部動作、種類などを簡単に紹介してみました。&lt;/li&gt;
&lt;li&gt;個々のAggregationもいろいろなオプションなどがあるので、色々と試してみていただければと思います。&lt;/li&gt;
&lt;li&gt;アニメーション入りのスライドになってましたが、UpしてあるスライドはPDF版になります。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;秒間3万の広告配信ログをelasticsearchでリアルタイム集計してきた戦いの記録-株式会社サイバーエージェント山田直行さんsatully&#34;&gt;「秒間3万の広告配信ログをElasticSearchでリアルタイム集計してきた戦いの記録」 株式会社サイバーエージェント　山田直行さん　@satully&lt;/h2&gt;
&lt;p&gt;スライド：&lt;a href=&#34;http://www.slideshare.net/Satully/elasticsearch-study6threaltime20140916&#34;&gt;秒間3万の広告配信ログをElasticSearchでリアルタイム集計してきた戦いの記録&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ディスプレイ広告配信DSPの話&lt;/li&gt;
&lt;li&gt;システム: Fluentd、S3、Elasticsearch、Redis、MySQL&lt;/li&gt;
&lt;li&gt;7月に秒間3万〜4万のリクエストをさばいている。&lt;/li&gt;
&lt;li&gt;なぜElasticsearchを選んだのか、今の構成など&lt;/li&gt;
&lt;li&gt;実際に苦労された点なども交えて話していただき面白かったです。&lt;/li&gt;
&lt;li&gt;7月時点のお話ということで、現時点ではまた違う構成っぽかったので、また話を聞きたいなぁ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;elasticsearch-日本語スキーマレス環境構築とついでに多言語対応ナレッジワークス株式会社木戸国彦さん-9215&#34;&gt;「Elasticsearch 日本語スキーマレス環境構築と、ついでに多言語対応」ナレッジワークス株式会社　木戸国彦さん @9215&lt;/h2&gt;
&lt;p&gt;スライド：&lt;a href=&#34;https://speakerdeck.com/kunihikokido/elasticsearch-ri-ben-yu-sukimaresuhuan-jing-gou-zhu-to-tuideniduo-yan-yu-dui-ying&#34;&gt;Elasticsearch 日本語スキーマレス環境構築と、ついでに多言語対応&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dynamic TemplateやIndex Templateの説明&lt;/li&gt;
&lt;li&gt;日本語や多言語化するときのMappingのサンプルになりそうなものがゴロゴロ紹介されてました。&lt;/li&gt;
&lt;li&gt;いくつかの例があって、後で見直したいなと。&lt;/li&gt;
&lt;li&gt;途中で出てきた、fielddata（インデックスに入っている単語区切りのデータ）を見るのに使ってたクエリは&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-request-fielddata-fields.html&#34;&gt;field data fields&lt;/a&gt;だったかな。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;elasticsearchソースコードを読みはじめてみたfurandon_pig-さん&#34;&gt;「elasticsearchソースコードを読みはじめてみた」@furandon_pig さん&lt;/h2&gt;
&lt;p&gt;スライド：&lt;a href=&#34;http://www.slideshare.net/furandon_pig/elasticsearch-39175134&#34;&gt;elasticsearchソースコードを読みはじめてみた&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;リクエストを受けて検索してる部分から読むといいって言われたらしいが、起動スクリプトから読み始めてみた。&lt;/li&gt;
&lt;li&gt;時間かかりそうｗ&lt;/li&gt;
&lt;li&gt;ただ、人がどんな感じでソースを読んだり理解してるかがわかりやすかったので面白かったです。&lt;/li&gt;
&lt;li&gt;定期的に続きを聞いてみたいです。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lt&#34;&gt;LT&lt;/h2&gt;
&lt;h3 id=&#34;reroute-apiを使用してシャード配置を制御する-株式会社富士通ソフトウェアテクノロジーズ-滝田聖己さん-pisatoshi&#34;&gt;「reroute APIを使用してシャード配置を制御する」 株式会社富士通ソフトウェアテクノロジーズ 滝田聖己さん @pisatoshi&lt;/h3&gt;
&lt;p&gt;スライド：&lt;a href=&#34;https://speakerdeck.com/pisatoshi/elasticsearch-rerouteapiwoshi-tutasiyadopei-zhi-falsezhi-yu&#34;&gt;reroute APIを使用してシャード配置を制御する&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;シャードの再配置が自動で行われるので、それをオフにしないと、せっかく移動しても無駄になることがというあるあるネタ&lt;/li&gt;
&lt;li&gt;Bonsaiロゴを作成するLT&lt;/li&gt;
&lt;li&gt;実際にいくら掛かったのかが知りたかった。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;検索のダウンタイム0でバックアップからindexをリストアする方法株式会社ドワンゴモバイル-西田和史さん&#34;&gt;「検索のダウンタイム0でバックアップからIndexをリストアする方法」株式会社ドワンゴモバイル 西田和史さん&lt;/h3&gt;
&lt;p&gt;スライド：&lt;a href=&#34;http://www.slideshare.net/kbigwheel/0index-39143333&#34;&gt;検索のダウンタイム0でバックアップからIndexをリストアする方法&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;擬似無停止のやりかた。&lt;/li&gt;
&lt;li&gt;aliasを活用して、かつ、Restoreで再構築するという方法。&lt;/li&gt;
&lt;li&gt;aliasまで一緒にリストアされるので注意が必要っていうのは、実際にやってみたからわかることという感じですね。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;その他感想などのブログ&#34;&gt;その他、感想などのブログ&lt;/h2&gt;
&lt;p&gt;適当に見つけたブログを列挙してあります。これもあるよ！などあれば、教えてください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://s-wool.blog.jp/archives/1009404632.html&#34;&gt;第6回elasticsearch勉強会に行ってきましたのでそのメモ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://arika.hateblo.jp/entry/2014/09/17/100921&#34;&gt;elasticsearch 勉強会 第6回&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;まとめ&#34;&gt;まとめ&lt;/h3&gt;
&lt;p&gt;今回も、ためになる話がいっぱい聞けたかなと。
個人的な印象としては、いつものメンバーよりも新しい方が多かった印象です。
また、ほとんどの方が、Elasticsearchをご存知でした。
そこそこ知名度は上がってきているようで嬉しい限りです。（東京以外での知名度なども知りたいかなと。）&lt;/p&gt;
&lt;p&gt;あと、懇親会の部屋の案内が遅くなってしまってスミマセンでした。
さすがにスタッフ3名はきつかったです。。。&lt;/p&gt;
&lt;p&gt;19時半開始にしてみましたが、懇親会の時間がやはり短めになってしまうなぁという印象でした。&lt;/p&gt;
&lt;p&gt;次回ももちろん2ヶ月後くらいに行います。
スピーカー募集中ですので、コメント、メール、ツイートなど、コンタクトしていただければと思います。
よろしくお願いいたします。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearchのインデキシングに関するパフォーマンス検討</title>
      <link>https://blog.johtani.info/blog/2014/09/09/performance-considerations-for-elasticsearch-indexing/</link>
      <pubDate>Tue, 09 Sep 2014 17:11:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/09/09/performance-considerations-for-elasticsearch-indexing/</guid>
      <description>Elasticsearchのインデキシングに関するパフォーマンス検討 原文：performance considerations for elasticsearch indexing Elasticsearchユーザは様</description>
      <content:encoded>&lt;p&gt;Elasticsearchのインデキシングに関するパフォーマンス検討&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;http://www.elasticsearch.org/blog/performance-considerations-elasticsearch-indexing/&#34;&gt;performance considerations for elasticsearch indexing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Elasticsearchユーザは様々な楽しいユースケースを持っています。小さなログを追加することから、Webスケールの大きなドキュメントの集合をインデキシングするようなことまでです。また、インデキシングのスループットを最大化することが重要で一般的な目標となります。
「典型的な」アプリケーションに対して良いデフォルト値を設定するようにしていますが、次のちょっとした簡単なベストプラクティスによってインデキシングのパフォーマンスをすぐに改善することができます。それらについて記述します。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;第一に、制御できないならば、巨大なJavaヒープを使用しない：必要なサイズ（マシンの持つRAMの半分以下）のheapだけを設定しましょう。Elasticsearchの利用方法のために必要な全体量を設定します。これは、OSにIOキャッシュを制御するためのRAMを残すことを意味します。OSが&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/setup-configuration.html&#34;&gt;javaプロセスをスワップアウト&lt;/a&gt;していないことも確認しましょう。&lt;/p&gt;
&lt;p&gt;最新バージョン（&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-3-2/&#34;&gt;現時点では1.3.2&lt;/a&gt;）のElasticsearchにアップグレードしましょう：多数のインデキシングに関連する問題点が最新リリースで修正されています。&lt;/p&gt;
&lt;p&gt;詳細に入る前に警告：ここで述べるすべての情報は現時点での最新（&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-3-2/&#34;&gt;1.3.2&lt;/a&gt;）の情報です。しかし、Elasticsearchの更新は日々行われています。この情報をあなたが見た時点では最新ではなく、正確ではなくなっているかもしれません。自信がない場合は&lt;a href=&#34;http://www.elasticsearch.org/community&#34;&gt;ユーザメーリングリスト&lt;/a&gt;で質問してください。&lt;/p&gt;
&lt;p&gt;クラスタのインデキシングスループットをチューニングする場合、&lt;a href=&#34;http://www.elasticsearch.org/overview/marvel&#34;&gt;Marvel&lt;/a&gt;は非常に有用なツールです：ここで述べている各設定を継続的に試し、変更の影響がクラスタの挙動をどのように変更されたかを簡単に可視化することが可能です。&lt;/p&gt;
&lt;h2 id=&#34;クライアントサイド&#34;&gt;クライアントサイド&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-bulk.html&#34;&gt;bulk API&lt;/a&gt;を常に使いましょう。1リクエストで複数のドキュメントをインデキシングでき、各バルクリクエストで送るのに良いドキュメント数を試しましょう。最適なサイズは多くの要因に依存しますが、最適サイズからずれるならば多すぎるよりも少なすぎる方が良いでしょう。クライアントサイドのスレッドで並列にbulkリクエストを使うか、個別の非同期リクエストを使ってください。&lt;/p&gt;
&lt;p&gt;インデキシングが遅いと結論付ける前に、クラスタのハードウェアの性能を引き出せているかを確認して下さい：すべてのノードでCPUやIOが溢れていないかを確認するために&lt;code&gt;iostat&lt;/code&gt;や&lt;code&gt;top&lt;/code&gt;、&lt;code&gt;ps&lt;/code&gt;といったツールを使いましょう。もし、溢れていなければ、より多くの並列なリクエストが必要です。しかし、javaクライアントからの&lt;code&gt;EsRejectedExecutionException&lt;/code&gt;や、RESTリクエストのHTTPレスポンスとして&lt;code&gt;TOO_MANY_REQUESTS (429)&lt;/code&gt;が返ってきた場合は並列リクエストを多く送りすぎています。もし&lt;a href=&#34;http://www.elasticsearch.org/overview/marvel&#34;&gt;Marvel&lt;/a&gt;を利用しているなら、&lt;a href=&#34;http://www.elasticsearch.org/guide/en/marvel/current/#_node_amp_index_statistics&#34;&gt;Node Statistics Dashboard&lt;/a&gt;の&lt;code&gt;THREAD POOLS - BULK&lt;/code&gt;にリジェクトされた数が表示されます。bulkスレッドプールサイズ（デフォルト値はコア数）を増やすのは得策ではありません。インデキシングスループットを減少させるでしょう。クライアントサイドの並列度を下げるか、ノードを増やすのが良い選択です。&lt;/p&gt;
&lt;p&gt;ここでは、1シャードに対してインデキシングスループットを最大化する設定に注目します。1つのLuceneインデックスのドキュメントの容量を測定するために、単一ノード（単一シャード、レプリカなし）で最初にテストをして最適化し、クラスタ全体にスケールする前にチューニングを繰り返します。これはまた、インデキシングスループットの要件を見つけるために、クラスタ全体にどのくらいのノードが必要かをラフに見積もるためのベースラインを与えてくれます。&lt;/p&gt;
&lt;p&gt;単一シャードが十分機能したら、Elasticsearchのスケーラビリティの最大の利点や、クラスタでの複数ノードによるレプリカ数やシャード数の増加の利点が得られます。&lt;/p&gt;
&lt;p&gt;結論を導き出す前に、ある程度の時間（60分）くらいクラスタ全体の性能を計測しましょう。このテストは、巨大なマージ、GCサイクル、シャードの移動、OSのIOキャッシュ、予期しないスワップの可能性などのイベントのライフサイクルをカバーできます。&lt;/p&gt;
&lt;h2 id=&#34;ストレージデバイス&#34;&gt;ストレージデバイス&lt;/h2&gt;
&lt;p&gt;当然ながらインデックスを保存するストレージデバイスはインデキシングの性能に多大な影響を及ぼします：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SSDを利用する：これらは最も速いHDDよりも速いです。ランダムアクセスのための消費電力が低いだけでなく、シーケンシャルIOアクセスも高いです。また、同時に発生するインデキシング、マージや検索のための並列的なIOも高速です。&lt;/li&gt;
&lt;li&gt;インデックスをリモートマウントされたファイルシステム（例：&lt;a href=&#34;http://en.wikipedia.org/wiki/Network_File_System&#34;&gt;NFS&lt;/a&gt;や&lt;a href=&#34;http://en.wikipedia.org/wiki/Server_Message_Block&#34;&gt;SMB/CIFS&lt;/a&gt;）上に配置しない：代わりにローカルストレージを使う&lt;/li&gt;
&lt;li&gt;仮想化されたストレージ（Amazonの&lt;a href=&#34;http://aws.amazon.com/ebs/&#34;&gt;Elastic Block Storage&lt;/a&gt;など）に注意：仮想化されたストレージはElasticsearchで十分に動作します。また、十分早く簡単に用意できることから魅力的です。しかし、残念なことに、ローカルストレージと比較すると本質的に遅いです。最近の非公式なテストでは、&lt;a href=&#34;http://aws.amazon.com/ebs/details/#PIOPS&#34;&gt;最高の性能を持つプロビジョニングされたIOPSのSSDオプションのEBS&lt;/a&gt;でさえ、ローカルインスタンスにあるSSDよりも遅いです。ローカルインスタンスにあるSSDは物理マシン上のすべての仮想マシンから共有されてアクセスされます。もし他の仮想マシンが急にIOが集中した場合に不可解なスローダウンとなることがあることを覚えておいてください。&lt;/li&gt;
&lt;li&gt;複数のSSDを&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/setup-dir-layout.html&#34;&gt;複数の&lt;code&gt;path.data&lt;/code&gt;ディレクトリ&lt;/a&gt;にインデックスをストライピング（&lt;a href=&#34;http://en.wikipedia.org/wiki/RAID_0#RAID_0&#34;&gt;RAID0&lt;/a&gt;のように）：2つは同様で、ファイルブロックレベルでストライピングする代わりに、個別にインデックスファイルレベルでElasticsearchの&amp;quot;stripes&amp;quot;となります。これらのアプローチは、いづれかのSSDの故障によりインデックスが壊れるという、1シャードが故障する(IO性能を高速化することとトレードオフ)というリスクを増加させることに注意してください。これは、一般的に行うのに良いトレードオフです：単一シャードで最大のパフォーマンスを最適化し、異なるノード間でレプリカを追加すると、ノードの故障への冗長化ができます。また、&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-snapshots.html&#34;&gt;snapshotやrestore&lt;/a&gt;を使って保険のためにインデックスのバックアップを取ることもできます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;セグメントとマージ&#34;&gt;セグメントとマージ&lt;/h2&gt;
&lt;p&gt;新しくインデキシングされたドキュメントは最初にLuceneの&lt;code&gt;IndexWriter&lt;/code&gt;によってRAMに保存されます。RAMバッファがいっぱいになった時もしくは、Elasticsearchがflushもしくはrefreshを実行した時など定期的にこれらのドキュメントはディスクに新しいセグメントとして書き込まれます。最後に、セグメントが多くなった時に、&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/index-modules-merge.html&#34;&gt;Merge PolicyとSucheduler&lt;/a&gt;によってそれらがマージされます。このプロセスは連続的に生じます：マージされたセグメントはより大きなセグメントとなり、小さなマージが幾つか実行され、また、大きなセグメントにマージされます。これらがどのように動作するかを&lt;a href=&#34;http://blog.mikemccandless.com/2011/02/visualizing-lucenes-segment-merges.html&#34;&gt;わかりやすく可視化したブログはこちら&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;マージ、特に大きなマージは非常に時間がかかります。これは、通常は問題ありません。そのようなマージはレアで全体のインデックスのコストと比べればささいなものです。しかし、マージすることがインデキシングについていけない場合、インデックスに非常に多くのセグメントがあるような深刻な問題を防ぐために、Elasticsearchはやってくるインデキシングリクエストを単一スレッド(1.2以降)に制限します。&lt;/p&gt;
&lt;p&gt;もし、INFOレベルのログメッセージに&lt;code&gt;now throttling indexing&lt;/code&gt;と表示されていたり、&lt;a href=&#34;http://www.elasticsearch.org/guide/en/marvel/current&#34;&gt;Marvel&lt;/a&gt;でのセグメント数が増加しているを見た場合、マージが遅れているとわかります。Marvelは&lt;a href=&#34;http://www.elasticsearch.org/guide/en/marvel/current/#_node_amp_index_statistics&#34;&gt;Index Statistics dashboard&lt;/a&gt;の&lt;code&gt;MANAGEMENT EXTENDED&lt;/code&gt;の部分にセグメント数をプロットしており、それは、非常にゆっくりと指数対数的に増加しており、大きなマージが終了したところがのこぎりの歯のような形で見て取れます。&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.johtani.info/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;http://www.elasticsearch.org/content/uploads/2014/09/segmentCounts.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;http://www.elasticsearch.org/content/uploads/2014/09/segmentCounts.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption align=&#34;center&#34;&gt;&lt;h4&gt;セグメント数&lt;/h4&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;なぜマージが遅れるのでしょう？デフォルトでElasticsearchはすべてのマージの書き込みのバイト数をわずか20MB/secに制限しています。スピニングディスク（HDD）に対して、これはマージによって典型的なドライブのIOキャパシティを飽和させず、並列に検索を十分に実行させることを保証します。しかし、もし、インデキシング中に検索をしない場合や、検索性能がインデキシングのスループットよりも重要でない場合、インデックスの保存にSSDを使用している場合などは、&lt;code&gt;index.store.throttle.type&lt;/code&gt;に&lt;code&gt;none&lt;/code&gt;を設定して、マージの速度制限を無効化するべきです（詳細は&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/index-modules-store.html&#34;&gt;こちら&lt;/a&gt;をご覧ください）。なおバージョン1.2以前には&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/issues/6018&#34;&gt;期待以上のマージIO制限の発生&lt;/a&gt;といったバグが存在します。アップグレードを！&lt;/p&gt;
&lt;p&gt;もし、不幸にもスピニングディスク（それはSSDと同等の並列なIOを扱えません）をまだ使っている場合、&lt;code&gt;index.merge.scheduler.max_thread_count&lt;/code&gt;に&lt;code&gt;1&lt;/code&gt;を設定しなければなりません。そうでない場合は、（SSDを支持する）デフォルト値が多くのマージを同時に実行させるでしょう。&lt;/p&gt;
&lt;p&gt;活発に更新が行われているインデックスで&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-optimize.html&#34;&gt;&lt;code&gt;optimize&lt;/code&gt;&lt;/a&gt;を実行しないでください。それは、非常にコストの高い操作(すべてのセグメントをマージ)です。しかし、もし、インデックスにドキュメントを追加が終わった直後はオプティマイズのタイミングとしては良いタイミングです。それは、検索時のリソースを減らすからです。例えば、時間ベースのインデックスを持っており、新しいインデックスに日々のログを追加している場合、過去の日付のインデックスをオプティマイズするのは良い考えです。特に、ノードが多くの日付のインデックスを持っている場合です。&lt;/p&gt;
&lt;p&gt;更にチューニングするための設定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;実際に必要のないフィールドをオフにする。例えば&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-all-field.html&#34;&gt;&lt;code&gt;_all&lt;/code&gt;フィールドをオフ&lt;/a&gt;。また、保持したいフィールドでは、&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-core-types.html&#34;&gt;&lt;code&gt;indexed&lt;/code&gt;か&lt;code&gt;stored&lt;/code&gt;かを検討する&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;もし、&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-source-field.html&#34;&gt;&lt;code&gt;_source&lt;/code&gt;フィールドをオフ&lt;/a&gt;にしたくなるかもしれないが、インデキシングコストは小さい(保存するだけで、インデキシングしない)、また、それは、将来の更新や、前のインデックスを再インデキシングするために非常に価値があり、それはディスク使用率の懸念事項がない限り、オフにする価値はあまりない。それは、ディスクが比較的安価であるので価値がない。&lt;/li&gt;
&lt;li&gt;もし、インデックスされたドキュメントの検索までの遅延を許容できるなら、&lt;code&gt;index.refresh_interval&lt;/code&gt;を&lt;code&gt;30s&lt;/code&gt;に増やすか、&lt;code&gt;-1&lt;/code&gt;を設定して、オフにする。これは、巨大なセグメントをフラッシュし、マージのプレッシャーを減らすことができる。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-3-2/&#34;&gt;Elasticsearch 1.3.2&lt;/a&gt;(稀に、フラッシュ時に過度のRAMを使用するという&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/issues/6443&#34;&gt;問題&lt;/a&gt;を&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/issues/6379&#34;&gt;修正した&lt;/a&gt;)にアップグレードすることで、&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/index-modules-translog.html&#34;&gt;&lt;code&gt;index.translog.flush_threshold_size&lt;/code&gt;&lt;/a&gt;をデフォルト(200mb)から1gbに増加し、インデックスファイルのfsyncの頻度を減らす。
Marvelに&lt;a href=&#34;http://www.elasticsearch.org/guide/en/marvel/current/#_node_amp_index_statistics&#34;&gt;&lt;code&gt;Index Statistics dashboard&lt;/code&gt;&lt;/a&gt;の&lt;code&gt;MANAGEMENT&lt;/code&gt;にフラッシュの頻度がプロットされている。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;インデックスバッファサイズ&#34;&gt;インデックスバッファサイズ&lt;/h2&gt;
&lt;p&gt;巨大なインデックスを構築中はレプリカ数を0にし、あとから、レプリカを有効にする。レプリカが0ということは、データを失った(ステータスがred)時に冗長性がないので、ノードの故障に注意すること。もし、&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-optimize.html&#34;&gt;&lt;code&gt;optimize&lt;/code&gt;&lt;/a&gt;(ドキュメントの追加をすることがないので)を計画するなら、インデキシングが終わったあとで、レプリカを作成する前に実行するのが良いでしょう。レプリカはオプティマイズされたセグメントをコピーするだけになります。詳細は&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-update-settings.html&#34;&gt;インデックス設定更新&lt;/a&gt;を参照。&lt;/p&gt;
&lt;p&gt;もし、ノードがヘビーなインデキシングを行っているだけなら、アクティブなシャードのインデキシングバッファに多くてい512MBを&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-indices.html&#34;&gt;indices.memory.index_buffer_size&lt;/a&gt;に与えてください。(超えてもインデキシングのパフォーマンスは一般的には改善されません。)Elasticsearchはその設定(Javaヒープのパーセンテージもしくはバイト数)を受けて、min_index_buffer_sizeとmax_index_buffer_sizeの値を前提にノードのアクティブシャードに均等に割り当てます；大きな値はLuceneが最初のセグメントをより大きくし、将来的なマージのプレッシャーを減らすことを意味します。&lt;/p&gt;
&lt;p&gt;デフォルトは10%で、それで十分です；例えば、もし、5つのアクティブなシャードがノードにあり、ヒープが25GBの場合、各シャードは25GBの10%の1/5=512MB（すでに最大値）を持っています。ヘビーなインデキシングのあと、この設定をデフォルトに下げましょう。検索時のデータ構造のために十分なRAMを確保するために。この設定はまだ動的な設定変更はできません。&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/issues/7045&#34;&gt;Issueがここに&lt;/a&gt;あります。&lt;/p&gt;
&lt;p&gt;インデックスバッファによって現在利用されているバイト数は1.3.0の&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-stats.html&#34;&gt;indices stats API&lt;/a&gt;に追加されています。&lt;code&gt;indices.segments.index_writer_memory&lt;/code&gt;の値を見ることができます。これはMarvelではまだプロットされていませんが、将来のバージョンで追加される予定です。しかし、自分でグラフに追加することもできます。(Marvelはデータは収集しています)&lt;/p&gt;
&lt;p&gt;1.4.0では、&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/issues/7440&#34;&gt;&lt;code&gt;indices.segments.index_writer_max_memory&lt;/code&gt;&lt;/a&gt;として、&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-stats.html&#34;&gt;indices stats API&lt;/a&gt;にアクティブシャードにどのくらいのRAMバッファが割り当てられているかも表示されます。これらの値はインデックスのシャード事の値として見ることができ、&lt;code&gt;http://host:9200/&amp;lt;indexName&amp;gt;/_stats?level=shards&lt;/code&gt;を使ってみることができます；これは、全シャードに対する合計と、各シャードごとのstatsを返すでしょう。&lt;/p&gt;
&lt;h2 id=&#34;オートidの利用もしくは良いidの利用&#34;&gt;オートIDの利用もしくは良いIDの利用&lt;/h2&gt;
&lt;p&gt;もし、ドキュメントの&lt;code&gt;ID&lt;/code&gt;がなんでも良い場合、&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-index_.html#_automatic_id_generation%22&#34;&gt;Elasticsearchで採番すること&lt;/a&gt;ができます：これは、(1.2以降)ドキュメントIDをバージョンを探さずに保存できるように&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/pull/5917&#34;&gt;最適化&lt;/a&gt;され、Elasticsearchの&lt;a href=&#34;http://benchmarks.elasticsearch.org/&#34;&gt;日毎のベンチマーク&lt;/a&gt;で異なるパフォーマンスを見ることができます。(&lt;code&gt;Fast&lt;/code&gt;と&lt;code&gt;FastUpdate&lt;/code&gt;のグラフを比較)&lt;/p&gt;
&lt;p&gt;もし、IDを自身が持っていて、自分の支配下で&lt;a href=&#34;http://blog.mikemccandless.com/2014/05/choosing-fast-unique-identifier-uuid.html&#34;&gt;Luceneに対して素早く選ぼうとしている&lt;/a&gt;なら、1.3.2にアップグレードしましょう、IDのルックアップが&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/issues/6212&#34;&gt;さらにオプティマイズ&lt;/a&gt;されています。Javaの&lt;a href=&#34;http://docs.oracle.com/javase/7/docs/api/java/util/UUID.html&#34;&gt;UUID.randomUUID()&lt;/a&gt;はやめましょう。それは、セグメントに対してどのようにIDを割り当てるかという予測やパターン性がないため、最悪のケースで&lt;a href=&#34;http://blog.mikemccandless.com/2014/05/choosing-fast-unique-identifier-uuid.html&#34;&gt;セグメントごとのシーク&lt;/a&gt;が発生します。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://boundary.com/blog/2012/01/12/flake-a-decentralized-k-ordered-unique-id-generator-in-erlang/&#34;&gt;Flake IDs&lt;/a&gt;を利用した時の&lt;a href=&#34;http://www.elasticsearch.org/overview/marvel&#34;&gt;Marvel&lt;/a&gt;によるインデックス性能の違い：&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;http://www.elasticsearch.org/content/uploads/2014/09/flakeIDsPerf.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;http://www.elasticsearch.org/content/uploads/2014/09/flakeIDsPerf.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption align=&#34;center&#34;&gt;&lt;h4&gt;flakeIDsPerf&lt;/h4&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;ランダムUUIDを利用した場合：&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;http://www.elasticsearch.org/content/uploads/2014/09/uuidsPerf.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;http://www.elasticsearch.org/content/uploads/2014/09/uuidsPerf.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption align=&#34;center&#34;&gt;&lt;h4&gt;uuidsPerf&lt;/h4&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;次の1.4.0では、ElasticsearchのID自動採番を&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/issues/5941&#34;&gt;UUIDからFlake IDに変更&lt;/a&gt;します。&lt;/p&gt;
&lt;p&gt;もし、Luceneのローレベル操作がインデックスに対してなにをやっているかについて興味があるなら、&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/issues/5891&#34;&gt;&lt;code&gt;lucene.iw&lt;/code&gt;をTRACEログレベルで出力できるように&lt;/a&gt;してみましょう(1.2から利用可能)。これは、多くの出力がありますが、Luceneの&lt;code&gt;IndexWriter&lt;/code&gt;レベルで何が起きているかを理解するのに非常に役に立ちます。出力は非常にローレベルです：&lt;a href=&#34;http://www.elasticsearch.org/guide/en/marvel/current&#34;&gt;Marvel&lt;/a&gt;がインデックスに何が起きているかをよりリアルタイムにグラフを描画してくれます。&lt;/p&gt;
&lt;h2 id=&#34;スケールアウト&#34;&gt;スケールアウト&lt;/h2&gt;
&lt;p&gt;我々は、単一シャード(Luceneインデックス)性能のチューニングに注目してきました。しかし、一旦それに満足できたならば、Elasticsearchはクラスタ全体にわたってインデキシングや検索を簡単にスケールアウトすることに長けています。シャード数(デフォルトでは5)を増やすのは可能です。それは、マシン全体に対して並列度、巨大なインデックスのサイズ、検索時のレイテンシの低下など得ることができます。また、レプリカを1位上にすることは、ハードウェア故障に対する冗長性を持つことを意味します。&lt;/p&gt;
&lt;p&gt;最後に、このドキュメントを見ても問題解決しない場合は&lt;a href=&#34;http://www.elasticsearch.org/community&#34;&gt;コミュニティに参加&lt;/a&gt;しましょう。例えば、&lt;a href=&#34;https://groups.google.com/forum/?fromgroups#!forum/elasticsearch&#34;&gt;ElasticsearchのユーザML&lt;/a&gt;に投稿するなど。おそらく、修正すべきエキサイティングなバグがあるでしょう。(パッチも常に歓迎です！)&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>サーバ/インフラエンジニア養成読本 ログ収集~可視化編 を手伝いました</title>
      <link>https://blog.johtani.info/blog/2014/08/04/release-magazine-book-of-log-aggs-and-viz/</link>
      <pubDate>Mon, 04 Aug 2014 21:54:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/08/04/release-magazine-book-of-log-aggs-and-viz/</guid>
      <description>懲りずにまた、執筆してみました。みなさん「買って」から感想をいただけるとうれしいです！ 本書について 共著者の方々のブログが詳しいので、そちらを</description>
      <content:encoded>&lt;p&gt;懲りずにまた、執筆してみました。みなさん「買って」から感想をいただけるとうれしいです！&lt;/p&gt;
&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;nou=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=johtani-22&amp;o=9&amp;p=8&amp;l=as1&amp;m=amazon&amp;f=ifr&amp;ref=tf_til&amp;asins=4774169838&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;本書について&#34;&gt;本書について&lt;/h2&gt;
&lt;p&gt;共著者の方々のブログが詳しいので、そちらを読んでもらいつつ。
実際にログを収集して解析されている方々と一緒に書かせていただくことで色々と勉強させていただいています。&lt;/p&gt;
&lt;h3 id=&#34;共著者の方々のブログ&#34;&gt;共著者の方々のブログ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/suzu_v&#34;&gt;@suzu_v&lt;/a&gt;さん：&lt;a href=&#34;http://suzuken.hatenablog.jp/entry/2014/07/18/084555&#34;&gt;サーバ/インフラエンジニア養成読本 ログ収集~可視化編 を書きました&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/yoshi_ken&#34;&gt;@yoshi_ken&lt;/a&gt;さん：&lt;a href=&#34;http://y-ken.hatenablog.com/entry/published-elasticsearch-fluentd-kibana-book&#34;&gt;ログ収集や可視化で話題のFluentd、Elasticsearch、Kibanaを徹底解説したムック本が発売となります&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/harukasan&#34;&gt;@harukasan&lt;/a&gt;さん：&lt;a href=&#34;http://blog.harukasan.jp/entry/2014/07/18/180351&#34;&gt;書きました: サーバ/インフラエンジニア養成読本 ログ収集~可視化編&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;どの辺を書いたの&#34;&gt;どの辺を書いたの？&lt;/h3&gt;
&lt;p&gt;「特集３：Elasticsearch入門」（なんか、入門ばっかりだなぁ）を書かせていただきました。
データストア入門ということで、ほんとうに簡単な他のデータストアを説明し、Elasticsearchってどんなものかを単語の説明をしつつ紹介してみました。&lt;/p&gt;
&lt;p&gt;Elasticsearch自体は多くの機能を持っており、それ単体で分厚い書籍がかけるので、ログ検索に関係ありそうな部分をピックアップしてみました。
あとは、運用時に気をつける点や便利なツール（Curatorなど）の紹介をしています。&lt;/p&gt;
&lt;p&gt;また、Hadoopと合わせて利用してみたい、すでにHadoopにあるデータも活用してみたいという話もありそうだということで、&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch-hadoop&#34;&gt;elasticsearch-hadoop&lt;/a&gt;についても簡単ですが紹介してあります。&lt;/p&gt;
&lt;h2 id=&#34;その他感想&#34;&gt;その他感想&lt;/h2&gt;
&lt;p&gt;個人的に、忙しい時期&lt;a href=&#34;http://blog.johtani.info/blog/2014/07/01/join-elasticsearch/&#34;&gt;（参考記事）&lt;/a&gt;だったので、あんまり力になれてないので大変申し訳なく思っています。。。
ただ、素晴らしい出来（カラーでKibanaの解説が日本語で読めたり、Fluentdの逆引きのリストがあったり、ログを貯めて可視化する意義を説明してあったり）です。&lt;/p&gt;
&lt;p&gt;ぜひ、読んだ感想をいただければと！&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>プロキシ環境でのpluginコマンドの実行</title>
      <link>https://blog.johtani.info/blog/2014/08/01/plugin-using-under-proxy-env/</link>
      <pubDate>Fri, 01 Aug 2014 15:24:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/08/01/plugin-using-under-proxy-env/</guid>
      <description>Proxy環境で働いている方も結構いると思います。 Twitter上で、Elasticsearchのpluginコマンドでプラグインがインスト</description>
      <content:encoded>&lt;p&gt;Proxy環境で働いている方も結構いると思います。
Twitter上で、Elasticsearchのpluginコマンドでプラグインがインストールできなくて困っている方がいたので、
調べてみたのでメモしておきます。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;プラグインコマンド&#34;&gt;プラグインコマンド&lt;/h2&gt;
&lt;p&gt;Elasticsearchでは、プラグインという形でいくつかの便利な機能が公開されています。
&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch-analysis-kuromoji&#34;&gt;形態素解析ライブラリのKuromoji&lt;/a&gt;を使うためのプラグインや、&lt;a href=&#34;https://github.com/lmenezes/elasticsearch-kopf&#34;&gt;クラスタの管理がGUIで可能なkopf&lt;/a&gt;プラグインなどがあります。
公式、サードパーティいろいろです。&lt;/p&gt;
&lt;p&gt;これらのプラグインをElasticsearchにインストールする場合、以下のコマンドを実行すれば
自動的にダウンロードして&lt;code&gt;plugins&lt;/code&gt;ディレクトリにインストールしてくれます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./bin/plugin -i elasticsearch/elasticsearch-analysis-kuromoji/2.3.0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ここで、&lt;code&gt;elasticsearch/elasticsearch-analysis-kuromoji/2.3.0&lt;/code&gt;がプラグインのパスになります（例では、&lt;code&gt;提供元/プラグイン名/プラグインバージョン&lt;/code&gt;となっています。）。&lt;/p&gt;
&lt;p&gt;この&lt;code&gt;plugin&lt;/code&gt;コマンドがダウンロード元にアクセスに行くのですが、プロキシ環境だとプロキシの設定が必要になります。&lt;/p&gt;
&lt;h2 id=&#34;プロキシの指定maclinuxとwindowsでの違い&#34;&gt;プロキシの指定（Mac/LinuxとWindowsでの違い）&lt;/h2&gt;
&lt;h3 id=&#34;maclinuxshコマンド&#34;&gt;Mac/Linux(shコマンド)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.johtani.info/blog/2013/09/03/ja-wikipedia-with-kuromoji/&#34;&gt;以前の記事&lt;/a&gt;でプロキシのポート番号などの指定方法を
以下のように説明していました。
（※昔の記事のため、kuromojiプラグインのバージョンが古いです）&lt;/p&gt;
&lt;p&gt;ElasticsearchのpluginコマンドはJavaで実装されています。（org.elasticsearch.common.http.client.HttpDownloadHelper）
プラグインのダウンロードには、java.net.URL.openConnection()から取得URLConnectionを使用しています。&lt;/p&gt;
&lt;p&gt;ですので、pluginのインストールを行う際に、Proxy環境にある場合は以下のようにコマンドを実行します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./bin/plugin -DproxyPort=ポート番号 -DproxyHost=ホスト名 -i elasticsearch/elasticsearch-analysis-kuromoji/1.5.0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;LinuxやMacの環境であれば、こちらのコマンドでプロキシの指定が可能です。
ただし、Windows環境ではうまくいきません。&lt;/p&gt;
&lt;p&gt;Elasticsearchは、環境の違いにより、ダウンロードするファイルが異なります。
Windows環境の方は、zipファイルをダウンロードしてもらうようになっています。
elasticsearchコマンドおよびpluginコマンドがbat形式で提供されているのがzipファイルとなるからです。&lt;/p&gt;
&lt;h3 id=&#34;windowsbatコマンド&#34;&gt;Windows(batコマンド)&lt;/h3&gt;
&lt;p&gt;Windows環境では次のように指定します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set JAVA_OPTS=&amp;quot;-DproxyHost=ホスト名 -DproxyPort=ポート番号&amp;quot;
bin\plugin -i elasticsearch/elasticsearch-analysis-kuromoji/2.3.0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;コマンドの実装方法が少し異なるために、このようになっています。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;プロキシ環境で利用される場合は、プラグインコマンドは上記のように実行していただければと。&lt;/p&gt;
&lt;p&gt;公式ガイドには、これらの情報を追記するPRを送る予定です。
また、WindowsのコマンドでもMac/Linuxと同様にできたほうがいい気がするので、Issueをあげようと思います。&lt;/p&gt;
&lt;p&gt;不明点などあれば、コメントいただければと。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 1.3.1 リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2014/07/29/elasticsearch-1-3-1-release/</link>
      <pubDate>Tue, 29 Jul 2014 12:22:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/07/29/elasticsearch-1-3-1-release/</guid>
      <description>原文：Elasticsearch 1.3.1 Releasedを日本語に翻訳したものです。 バグフィックス版のElasticsearch 1.3.1をリリー</description>
      <content:encoded>&lt;p&gt;&lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-1-3-1-released/&#34;&gt;原文：Elasticsearch 1.3.1 Released&lt;/a&gt;を日本語に翻訳したものです。&lt;/p&gt;
&lt;p&gt;バグフィックス版のElasticsearch 1.3.1をリリースしました。
ダウンロードおよび変更履歴は&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-3-1/&#34;&gt;Elasticsearch 1.3.1&lt;/a&gt;からお願いいたします。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;このリリースはインデックスリカバリ時の後方互換性バグ（&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/pull/7055&#34;&gt;#7055&lt;/a&gt;）への対応です。
このバグは&lt;strong&gt;データの欠損は起こりません。&lt;/strong&gt; Elasticsearch 1.3.1へアップグレードすることで問題を回避できます。
このバグは、以下のElasticsearchのバージョンで作成されたセグメントを含むインデックスを1.3.0へアップグレードしようとすると発生します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elasticsearch 0.90.7&lt;/li&gt;
&lt;li&gt;Elasticsearch 0.90.2&lt;/li&gt;
&lt;li&gt;Elasticsearch 0.90.0以前のバージョン&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このバグは、これらの古いインデックスをレプリカからリカバリできなくします。
これらのバージョンのセグメントを持つインデックスが、レプリカは可能ですが、
ステータスがYellowのままGreenに決してなりません。
ログには次のようなExceptionが発生します。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IllegalArgumentException[No enum constant org.apache.lucene.util.Version.x.x.x]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Luceneの特定のバージョンではLuceneのマイナーバージョンを含んでおらず、誤ったバージョン番号がセグメントに記録されました。
&lt;a href=&#34;https://issues.apache.org/jira/browse/LUCENE-5850&#34;&gt;LUCENE-5850&lt;/a&gt;のチケットがこの問題に対処するためにオープンされています。
この問題は我々の後方互換テストで見つかるべき問題ですが、Luceneで不足しているため発見されませんでした。
テストスイートは今後の可能性のために改良されます。&lt;/p&gt;
&lt;p&gt;このリリースはその他に、Aggregationのマイナーバグフィックスも含まれています。
詳細は&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-3-1/&#34;&gt;リリースノート&lt;/a&gt;をご覧ください&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.elasticsearch.org/downloads/1-3-1/&#34;&gt;Elasticsearch 1.3.1&lt;/a&gt;をダウンロードし、試してください。
もし問題を見つけた場合は&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/issues&#34;&gt;GitHubのIssues&lt;/a&gt;へご報告をお願いいたします。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Curator 1.2および1.1について</title>
      <link>https://blog.johtani.info/blog/2014/07/28/curator-2-0-and-1-1/</link>
      <pubDate>Mon, 28 Jul 2014 14:19:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/07/28/curator-2-0-and-1-1/</guid>
      <description>Curatorの1.2.0がリリースされました。 前回のCuratorの記事が古くなってしまった（1.1.0からコマンドのI/Fが変更された）</description>
      <content:encoded>&lt;p&gt;&lt;a href=&#34;http://www.elasticsearch.org/blog/curator-1-2-0-released/&#34;&gt;Curatorの1.2.0がリリース&lt;/a&gt;されました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.johtani.info/blog/2014/01/24/curator-tending-your-time-series-indices-in-japanese/&#34;&gt;前回のCuratorの記事&lt;/a&gt;が古くなってしまった（1.1.0からコマンドのI/Fが変更された）ので
1.1.0および1.2.0に関する記事を翻訳しておきます。&lt;/p&gt;
&lt;p&gt;ちなみに、&lt;a href=&#34;https://github.com/elasticsearch/curator/&#34;&gt;Curator&lt;/a&gt;とは、Elasticsearchに時系列のインデックス（例：LogstashやFluentdでログを保存）を保存している場合にそれらのインデックスを管理（削除したり、クローズしたり）するための便利なツールです。
Curatorの概要については、&lt;a href=&#34;https://github.com/elasticsearch/curator/&#34;&gt;GitHubリポジトリ&lt;/a&gt;か&lt;a href=&#34;http://blog.johtani.info/blog/2014/01/24/curator-tending-your-time-series-indices-in-japanese/&#34;&gt;前回の記事&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h1 id=&#34;curator-110リリース-20140613公開a-namecurator_v110&#34;&gt;Curator 1.1.0リリース (2014/06/13公開)&lt;a name=&#34;curator_v110&#34;/&gt;&lt;/h1&gt;
&lt;p&gt;元記事：&lt;a href=&#34;http://www.elasticsearch.org/blog/elasticsearch-curator-version-1-1-0-released/&#34;&gt;elasticsearch curator - version 1.1.0 released&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Elasticsearch 1.0.0がリリースされ、新しい機能、Snapshot &amp;amp; Restoreが利用できるようになりました。
Snapshotはある時点でのインデックスの写真を撮るように、バックアップを作成することができます。
1.0.0が発表されてすぐに、この機能に関するリクエストが寄せられるようになりました。
「Curatorにスナップショットを追加して！」もしくは「いつCuratorでスナップショットが使えるようになる？」といった感じです。
これがあなたの要望なら、それはついに叶えられました。しかも他の追加機能も一緒にです。&lt;/p&gt;
&lt;h2 id=&#34;新機能&#34;&gt;新機能&lt;/h2&gt;
&lt;p&gt;Curatorの新機能は以下のとおりです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新CLI構造&lt;/li&gt;
&lt;li&gt;スナップショット(Snapshot)&lt;/li&gt;
&lt;li&gt;エイリアス(Aliases)&lt;/li&gt;
&lt;li&gt;パターンによる除外インデックス指定&lt;/li&gt;
&lt;li&gt;配置ルーティング(Allocation Routing)&lt;/li&gt;
&lt;li&gt;インデックスとスナップショットの表示&lt;/li&gt;
&lt;li&gt;リポジトリ管理(個別のスクリプトによる)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/elasticsearch/curator/wiki&#34;&gt;ドキュメントWiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;新コマンドライン構造&#34;&gt;新コマンドライン構造&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：コマンドライン構造の変更とは、Curator 1.1.0以前のcron記述が動作しないことを意味します。Curator 1.1.0にアップグレードする場合はコマンドも修正が必要となるので注意してください。&lt;/p&gt;
&lt;p&gt;シンプルにするために、&lt;em&gt;commands&lt;/em&gt;という概念を追加しました。
また、ヘルプの出力もわかりやすくなっています。
前のバージョンと同じタスクをCuratorは実行できますが、異なるフォーマットを用いるようになりました。&lt;/p&gt;
&lt;p&gt;旧コマンド：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curator -d 30
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;新コマンド：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curator delete --older-than 30
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;コマンドは、フラグとは異なりハイフンを前に付けないことに注意してください。
また、似たような名前のフラグがあることに気をつけてください。
例えば、&lt;code&gt;--older-than&lt;/code&gt;フラグは多くのコマンドに利用できます。
指定される値は各ケースにおいて同一です。「指定された数よりも古いインデックス」となります。&lt;/p&gt;
&lt;p&gt;新しいコマンドのリストは次のとおりです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;alias&lt;/li&gt;
&lt;li&gt;allocation&lt;/li&gt;
&lt;li&gt;bloom&lt;/li&gt;
&lt;li&gt;close&lt;/li&gt;
&lt;li&gt;delete&lt;/li&gt;
&lt;li&gt;optimize&lt;/li&gt;
&lt;li&gt;show&lt;/li&gt;
&lt;li&gt;snapshot&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コマンドのヘルプは次のコマンドで表示されます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curator [COMMAND] --help
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;コマンドに関係あるフラグがすべて表示されます。&lt;/p&gt;
&lt;h3 id=&#34;スナップショットsnapshots&#34;&gt;スナップショット(snapshots)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;snapshot&lt;/code&gt;コマンドで、存在しているリポジトリにインデックスのスナップショットを保存することができます。&lt;/p&gt;
&lt;p&gt;Curatorはインデックス毎に1つのスナップショットを作成し、インデックスから名前をつけます。
例えば、インデックスの名前が&lt;code&gt;logstash-2014.06.10&lt;/code&gt;の場合、スナップショットの名前は&lt;code&gt;logstash-2014.06.10&lt;/code&gt;となります。
指定した条件を元に、シーケンシャルに、1つずつインデックスのスナップショットを作成していきます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curator snapshot --older-than 20 --repository REPOSITORY_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;このコマンドは、20日以上古いインデックスすべてのスナップショットを作成し、&lt;code&gt;REPOSITORY_NAME&lt;/code&gt;で指定されたリポジトリに保存します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;es_repo_mgr&lt;/code&gt;と呼ばれるリポジトリ作成を支援するスクリプトがCuratorには含まれています。
ファイルシステムおよびS3タイプのリポジトリ両方の作成を支援します。&lt;/p&gt;
&lt;p&gt;さらに、古いインデックスのスナップショットを取ることができることに加えて、Curatorは最新のインデックスをアップロードする方法も提供します。
これは、&lt;a href=&#34;http://www.elasticsearch.org/overview/marvel/&#34;&gt;Elasticsearch Marvel&lt;/a&gt;のインデックスをアップロードするときに便利です。
トラブルシューティングを目的として、パフォーマンスデータを他の人に見せる場合などです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curator snapshot --most-recent 3 --prefix .marvel- --repository REPOSITORY_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;このコマンドでは、最新の3つのMarvelインデックスのスナップショットを指定されたリポジトリに保存できます。&lt;/p&gt;
&lt;h3 id=&#34;エイリアスaliases&#34;&gt;エイリアス(aliases)&lt;/h3&gt;
&lt;p&gt;Curatorはすでに存在するエイリアスにインデックスを追加することも、削除することもできるようになりました。
ただし、エイリアスがすでに存在している必要があります。エイリアスの作成はできません。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;last_week&lt;/code&gt;という前の一週間のインデックスのエイリアスを保持していること想像してください。
この場合、次の2つのコマンドを利用することで、エイリアスを管理できます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curator alias --alias-older-than 7 --alias last_week
curator alias --unalias-older-than 14 --alias last_week
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;新しく作られたインデックスが&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-templates.html#indices-templates&#34;&gt;インデックステンプレート&lt;/a&gt;によって
自動的にエイリアスの一部となるようにElasticsearchに設定しておくと、さらに便利です。
この場合、新しいインデックスが自動的に&lt;code&gt;this_week&lt;/code&gt;というエイリアスの一部になるようにしてあれば、以下のコマンドのみとなります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curator alias --unalias-older-than 7 --alias this_week
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;this_week&lt;/code&gt;と&lt;code&gt;last_week&lt;/code&gt;のエイリアスのアップデートを保持できます。&lt;/p&gt;
&lt;h3 id=&#34;パターンによる除外exclude-pattern&#34;&gt;パターンによる除外(exclude pattern)&lt;/h3&gt;
&lt;p&gt;時には、指定したインデックスを操作から除外したくなる場合もあるでしょう。
ここまでは、プレフィックスや日付によって選択されたインデックスのみを対象にしてきました。
そこで、&lt;code&gt;--exclude-pattern&lt;/code&gt;オプションです。これは、指定したインデックスを除いて処理を行うことができます。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;logstash-2014.06.11&lt;/code&gt;というインデックスを決して削除したくないとします。
この場合、次のコマンドのようになります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curator delete --older-than 15 --exclude-pattern 2014.06.11
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Curatorはデフォルトで&lt;code&gt;logstash-&lt;/code&gt;というプレフィックスにマッチしますが、&lt;code&gt;2014.06.11&lt;/code&gt;というインデックスは対象外となります。&lt;/p&gt;
&lt;h3 id=&#34;配置ルーティングallocation-routing&#34;&gt;配置ルーティング(allocation routing)&lt;/h3&gt;
&lt;p&gt;Elasticsearchはノードにタグを付けることができます。
これらのタグはインデックスやシャードをクラスタのどこに配置するかをコントロールするために役立ちます。
一般的なユースケースだと、高性能なSSDドライブを持ったノードをインデキシングのために、ハードディスクを持った性能の低いマシンは検索頻度が低い古いインデックスを配置するといった場合です。
この場合、HDDノードには、&lt;code&gt;elasticsearch.yml&lt;/code&gt;に&lt;code&gt;node.tag: hdd&lt;/code&gt;、SSDノードには&lt;code&gt;node.tag: ssd&lt;/code&gt;と設定されているべきです。
Curatorはこの時、インデックスをタグに基づいてオフピークの時間帯に再配置させることができます。&lt;/p&gt;
&lt;p&gt;コマンド：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curator allocation --older-than 2 --rule tag=hdd
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;index.routing.allocation.require.tag=hdd&lt;/code&gt;という設定が２日よりも古いインデックスに適用されます。
これは、インデックスのシャードが&lt;code&gt;node.tag: hdd&lt;/code&gt;というノードに再配置される必要があると、Elasticsearchに伝えます。&lt;/p&gt;
&lt;h3 id=&#34;インデックスとスナップショットの表示show-indices-and-snapshots&#34;&gt;インデックスとスナップショットの表示(show indices and snapshots)&lt;/h3&gt;
&lt;p&gt;これは、単にあなたの持っているインデックスやスナップショットがどんなものかを表示します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curator show --show-indices
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これは、デフォルトプレフィックスの&lt;code&gt;logstash-&lt;/code&gt;にマッチするすべてのインデックスを表示します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curator show --show-snapshots --repository REPOSITORY_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これは、指定されたリポジトリにある、デフォルトプレフィックスの&lt;code&gt;logstash-&lt;/code&gt;にマッチするすべてのスナップショットを表示します。&lt;/p&gt;
&lt;h3 id=&#34;リポジトリ管理repository-management&#34;&gt;リポジトリ管理(repository management)&lt;/h3&gt;
&lt;p&gt;前に説明したとおり、&lt;code&gt;es_repo_mgr&lt;/code&gt;と呼ばれるヘルパースクリプトをCuratorは含んでいます。
現時点では、&lt;code&gt;fs&lt;/code&gt;と&lt;code&gt;s3&lt;/code&gt;タイプをサポートしています。
リポジトリを作る前に利用したいタイプのドキュメントを読むようにしてください。
例えば、&lt;code&gt;fs&lt;/code&gt;タイプのリポジトリを各ノードで使う場合は、同じ共有ファイルシステムに、同じパスでアクセスできなければなりません。
パスの指定は&lt;code&gt;--location&lt;/code&gt;です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fs&lt;/code&gt;タイプリポジトリの作成&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;es_repo_mgr create_fs --location &#39;/tmp/REPOSITORY_LOCATION&#39; --repository REPOSITORY_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;削除&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;es_repo_mgr delete --repository REPOSITORY_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;ドキュメントwiki&#34;&gt;ドキュメントWiki&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/elasticsearch/curator/wiki&#34;&gt;Curatorのドキュメント&lt;/a&gt;が更新され、オンラインにWiki形式でだれでも更新できるようになっています。
コマンドやフラグのより詳細の情報はこちらで見つけることができます。また、もし、興味があれば、ドキュメントを追加することもできます。&lt;/p&gt;
&lt;h2 id=&#34;インストールと更新&#34;&gt;インストールと更新&lt;/h2&gt;
&lt;p&gt;Curator 1.1.0は&lt;a href=&#34;https://pypi.python.org/pypi?%3Aaction=pkg_edit&amp;amp;name=elasticsearch-curator&#34;&gt;PyPi&lt;/a&gt;リポジトリにあります。
インストールは以下のとおりです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install elasticsearch-curator
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;バージョン1.0.0からアップグレードする場合は以下のとおりです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip uninstall elasticsearch-curator
pip install elasticsearch-curator
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;バージョン1.0.0よりも古いバージョンからのアップグレードは以下のとおりです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip uninstall elasticsearch-curator
pip uninstall elasticsearch
pip install elasticsearch-curator
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;pip uninstall elasticsearch&lt;/code&gt;で、古いパイションモジュールをを削除します。
適切なバージョンが依存関係により再インストールされます。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;Curatorの新機能は素晴らしいです！このリリースは大きな改善です。
もし、トラブルや足りないものを見つけた場合は&lt;a href=&#34;http://github.com/elasticsearch/curator/issues&#34;&gt;GitHub Issue&lt;/a&gt;に報告してください。
また、Curatorが便利だと思ったら、私たちに伝えてください。&lt;code&gt;#elasticsearch&lt;/code&gt;タグを付けてツイートしてください！&lt;/p&gt;
&lt;p&gt;Curatorはまだ、始まったばかりです。Curator 2.0のロードマップを作業中です。ここまで読んでいただきありがとうございます。
Happy Curating!&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;curator-120リリース20140724&#34;&gt;Curator 1.2.0リリース(2014/07/24)&lt;/h1&gt;
&lt;p&gt;元記事：&lt;a href=&#34;http://www.elasticsearch.org/blog/curator-1-2-0-released/&#34;&gt;curator 1.2.0 released&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#curator_v110&#34;&gt;Curator v1.1.0&lt;/a&gt;のリリースから、数週間が経ちました。
私たちは、Curator 1.2.0をリリースしました。&lt;/p&gt;
&lt;h2 id=&#34;新機能new-features&#34;&gt;新機能(new features)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ユーザ指定の日付パターン：長い間リクエストされていた機能&lt;/li&gt;
&lt;li&gt;ウィークリーインデックスのサポート：これも長い間リクエストされていた機能&lt;/li&gt;
&lt;li&gt;複数の&lt;a href=&#34;https://github.com/elasticsearch/curator/wiki/Logformat&#34;&gt;ログフォーマット&lt;/a&gt;オプション：Logstashフォーマットが利用可能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの変更は&lt;a href=&#34;https://github.com/elasticsearch/curator/wiki&#34;&gt;Curatorドキュメント&lt;/a&gt;にも記載されています。&lt;/p&gt;
&lt;h2 id=&#34;更新updates&#34;&gt;更新(updates)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ログ出力の整理：デフォルトのログ出力を整理しました。デバッグログはすべて表示されます。&lt;/li&gt;
&lt;li&gt;ドライランのログ出力の詳細化：テスト実行時に何が起きたかをわかりやすくしました。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;日付パターンと--timestringdate-patterns-and---timestring&#34;&gt;日付パターンと&lt;code&gt;--timestring&lt;/code&gt;(date patterns and &amp;ndash;timestring)&lt;/h2&gt;
&lt;p&gt;前のリリースで、セパレータ文字を利用して、インデックス名のエレメントを分離することで、日付を計算しました。
この設計の決定は、プログラムが管理するために設計されたLogstashのインデックスを使うのには簡単でした。
しかし、Curatorは時系列インデックス管理に成長しています。これは、異なる命名規則のインデックスを意味しています。&lt;/p&gt;
&lt;p&gt;また、インターバルによって、日付の計算が必要になる場合もあります。
&lt;code&gt;--time-unit&lt;/code&gt;オプションが残っており、&lt;code&gt;weeks&lt;/code&gt;という単位を指定することもできます。
デフォルトの&lt;code&gt;--timestring&lt;/code&gt;オプションは、以前のコマンドと同様の動作をしなければなりません。次のようになります。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Time Unit&lt;/th&gt;
&lt;th&gt;Timestring&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;days&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%Y.%m.%d&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hours&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%Y.%m.%d.%H&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;weeks&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%Y.%W&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;これが意味するものは、もし、単位に&lt;code&gt;hours&lt;/code&gt;をした場合、&lt;code&gt;--timestring&lt;/code&gt;を指定しなかった場合は&lt;code&gt;%Y.%m.%d.%H&lt;/code&gt;となります。
これは、&lt;a href=&#34;https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior&#34;&gt;Pythonのstrftimeフォーマット&lt;/a&gt;で&amp;quot;年.月.日.時&amp;quot;を意味します。
同様に、&lt;code&gt;weeks&lt;/code&gt;を単位に指定した場合、Curatorはデフォルトの&lt;code&gt;--timestring&lt;/code&gt;は&lt;code&gt;%Y.%W&lt;/code&gt;となります。&lt;/p&gt;
&lt;p&gt;この機能は、日付の間にセパレーター文字のないインデックスでも機能します。
例えば、&lt;code&gt;production-20140724&lt;/code&gt;のような日時インデックスがある場合、2日よりも古いインデックスに対する&lt;a href=&#34;https://github.com/elasticsearch/curator/wiki/Disable-Bloom-Filter-Cache&#34;&gt;ブルームフィルタっキャッシュのオフ&lt;/a&gt;のコマンドは次のようになります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curator bloom --prefix production- --older-than 2 --timestring %Y%m%d
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;この例で、デフォルトの単位は&lt;code&gt;days&lt;/code&gt;であることに注意してください。&lt;code&gt;hourly-2014072414&lt;/code&gt;のような時間インデックスの場合は次のようになります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curator bloom --prefix hourly- --older-than 2 --time-unit hours --timestring %Y%m%d%H
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;--separatorの置き換え&#34;&gt;&lt;code&gt;--separator&lt;/code&gt;の置き換え&lt;/h2&gt;
&lt;p&gt;もし、Curatorの前のバージョンでカスタムセパレータ文字を利用していた場合、次のように変更すべきです。
前のコマンドで&lt;code&gt;cerberus-2014-07-24&lt;/code&gt;のようなインデックスがある場合、コマンドを&lt;code&gt;--separator -&lt;/code&gt;の用に置き換える必要があります。
新しいコマンドは次のとおりです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curator delete --prefix cerberus- --older-than 30 --timestring %Y-%m-%d
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;年(&lt;code&gt;％Y&lt;/code&gt;)と月(&lt;code&gt;%m&lt;/code&gt;)と日(&#39;%d&#39;)の間にセパレータ文字を置くだけです。&lt;/p&gt;
&lt;p&gt;これは、また、Curatorで以前は不可能であったことをできるようにもします。
異なるセパレータ文字の混在です。
&lt;code&gt;logs-2014.07.24-14&lt;/code&gt;というようなインデックスを処理するときに&lt;code&gt;--timestring&lt;/code&gt;は&lt;code&gt;%Y.%m.%d-%H&lt;/code&gt;のようになります.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--timestring&lt;/code&gt;の詳細は&lt;a href=&#34;https://github.com/elasticsearch/curator/wiki/Timestring&#34;&gt;Curatorのドキュメント&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;h2 id=&#34;フィードバック&#34;&gt;フィードバック&lt;/h2&gt;
&lt;p&gt;これらの新しい機能はユーザのコメントやリクエストから来ています。もし、機能のリクエストやバグを発見したら、&lt;a href=&#34;https://github.com/elasticsearch/curator/issues&#34;&gt;こちら&lt;/a&gt;まで連絡してください。&lt;/p&gt;
&lt;p&gt;また、Twitterでもお待ちしています。私たちのTwitter IDは&lt;code&gt;@elasticsearch&lt;/code&gt;です。&lt;/p&gt;
&lt;p&gt;Happy Curating!&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>第5回Elasticsearch勉強会を開催しました。#elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2014/07/19/hold-on-5th-elasticsearch-jp/</link>
      <pubDate>Sat, 19 Jul 2014 21:52:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/07/19/hold-on-5th-elasticsearch-jp/</guid>
      <description>第5回Elasticsearch勉強会を開催しました。 遅くなってしまいましたが、まとめてみました。 今回は、Elasticsearchに入って</description>
      <content:encoded>&lt;p&gt;&lt;a href=&#34;http://elasticsearch.doorkeeper.jp/events/12028&#34;&gt;第5回Elasticsearch勉強会&lt;/a&gt;を開催しました。
遅くなってしまいましたが、まとめてみました。&lt;/p&gt;
&lt;p&gt;今回は、Elasticsearchに入って初の勉強会でした。タイミングが良いことに、Honza、Igor、Shayの3名がトレーニングのために
来日していたため、特別回ということにして、話をしてもらいました。&lt;/p&gt;
&lt;p&gt;そして、&lt;a href=&#34;http://samuraism.com/&#34;&gt;サムライズム&lt;/a&gt;の&lt;a href=&#34;https://twitter.com/yusuke&#34;&gt;@yusuke&lt;/a&gt;さんにテキスト翻訳してもらいました。
早くて正確なタイピング＋翻訳、本当にありがとうございました。&lt;/p&gt;
&lt;p&gt;開場提供していただいた&lt;a href=&#34;http://recruit-tech.co.jp&#34;&gt;リクルートテクノロジーズさん&lt;/a&gt;、ありがとうございました！
次回もよろしくお願いします！
参加していただき盛り上げていただいた参加者の皆さんもありがとうございました。&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p&gt;amazing turnout to the elasticsearch at Tokyo &lt;a href=&#34;https://twitter.com/hashtag/elasticsearchjp?src=hash&#34;&gt;#elasticsearchjp&lt;/a&gt; &lt;a href=&#34;http://t.co/Aa88eVf5dF&#34;&gt;pic.twitter.com/Aa88eVf5dF&lt;/a&gt;&lt;/p&gt;&amp;mdash; Shay Banon (@kimchy) &lt;a href=&#34;https://twitter.com/kimchy/statuses/488686274375843841&#34;&gt;2014, 7月 14&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;!-- more --&gt;
&lt;p&gt;動画があとで、アップされる予定です。お楽しみに。&lt;/p&gt;
&lt;h2 id=&#34;honzas-talk&#34;&gt;Honza&amp;rsquo;s talk&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;djangoの開発者！であり、ElasticsearchのPythonクライアント、Curatorの開発者&lt;/li&gt;
&lt;li&gt;Python Clientを利用しながら、ライブコーディングのような形で説明する方法が新鮮&lt;/li&gt;
&lt;li&gt;Aggregationの便利さについての説明&lt;/li&gt;
&lt;li&gt;Python Clientがクエリを組み立てるのにすごく便利そうだった&lt;/li&gt;
&lt;li&gt;Pythonユーザが結構いたので助かりましたｗ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;igors-talk&#34;&gt;Igor&amp;rsquo;s talk&lt;/h2&gt;
&lt;p&gt;スライド：&lt;a href=&#34;https://speakerdeck.com/imotov/elasticsearch-data&#34;&gt;elasticsearch data/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Snapshot/Restoreの開発などを行っている開発者&lt;/li&gt;
&lt;li&gt;Elasticsearchのデータ、ディレクトリ構造に関するお話&lt;/li&gt;
&lt;li&gt;シャードの話から、ディレクトリ構造、メタデータに関する説明&lt;/li&gt;
&lt;li&gt;transaction logの挙動の説明&lt;/li&gt;
&lt;li&gt;検索のフェーズの説明&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Igorは、実は私がElasticsearch社の人とコンタクトがとれた最初の人だと思います。
第1回Elasticsearch勉強会が開催する当日に帰国されるという不運だったのですが、1年越しでトークしてもらえました！&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://twitter.com/johtani&#34;&gt;@johtani&lt;/a&gt; I am so bummed! I am leaving Tokyo Thursday morning.&lt;/p&gt;&amp;mdash; Igor Motov (@imotov) &lt;a href=&#34;https://twitter.com/imotov/statuses/372340973121986560&#34;&gt;2013, 8月 27&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;h2 id=&#34;qa&#34;&gt;QA&lt;/h2&gt;
&lt;p&gt;ShayをメインにいくつかのQAをしてもらいました。
NetflixなどのMeetupの動画で見てたのですが、こんな形で日本でも実現できるとは。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Q: なんで、ファイルデスクリプタの設定を大きくするの？
&lt;ul&gt;
&lt;li&gt;A: Luceneのインデックスは複数のセグメントから構成されている。メモリに作られたあと、ファイルにfsyncされる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q: KibanaでAggregation使いたいんだけど？
&lt;ul&gt;
&lt;li&gt;A: Kibana 4で対応するよ！異なるフィールドの値を1つのグラフにすることも出来るよ！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q: なんでElasticsearch作ったの？
&lt;ul&gt;
&lt;li&gt;A: 暇だったからｗ奥さんのレシピ検索を作ってみようと思って作り始めて、Luceneを触って感動して。。。検索すげー、Compassってのを触ってこれもすごいと思いつつ、もっとLucene活用できるんじゃないかということでElasticsearch作ったんだ。奥さんのレシピ検索？まだ完成してないよｗ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q: 2000くらいスナップショット撮ったらパフォーマンスが悪くなっててなんで？
&lt;ul&gt;
&lt;li&gt;A: 差分でスナップショットを作るんだけど、差分の計算に昔のスナップショットを見るので、定期的に新しくしたほうがいい。もし、気になることがあったらIssue上げたりMLに投げてくれるとうれしい。&lt;br&gt;
（あとでちょっと聞いたけど、古いスナップショットを消すのも有効っぽい。差分でスナップショットを作るけど、昔のを消した場合は、新しいスナップショットが利用しているファイルは残る仕組みになっているから。）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q: Relevancyのチューニングってどうすればいい？ドキュメントが少なくない？
&lt;ul&gt;
&lt;li&gt;A: ドキュメンテーションは頑張ってるので、応援してねｗあとは、&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/guide/current/index.html&#34;&gt;definitive guide&lt;/a&gt;も参考になるよ。スコアはfunction_scoreクエリがすごいのでいろいろ使ってね。MVELをGroovyに帰る予定。性能もだけど、サンドボックス的な意味もあります。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q: 次のVisionは？現時点は検索だけど。（最後の質問がとてもナイスで、助かりましたｗ私がしたほうがいい気がするｗｗ）
&lt;ul&gt;
&lt;li&gt;A: 今後はアナリティクスのプラットフォームに向かってる。Aggregationとかね。メモリ効率よくしたりしてるよ。あとは、Field-collapsionも実装中だよ。あと、マシンラーニングとかもね。データを探索するための機能を色々作ってくよ。障害性にも。チェックサム機能をLuceneに入れて、ESにも入れていく予定。Zenの機能も改善している。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;今週は、トレーニングがあったり、いろいろな打ち合わせがあったりと、テンパってたので至らない点が多かったかもしれないですが。。。
楽しんでいただけと思います。
数日、Shay、Honza、Igorと行動を共にして、本当に情熱のあるチームでユーザのことを気にかけているなと感じることができました。
少しでもその片鱗を勉強会で感じてもらえたんじゃないかと。特に、QAでのShayによる情熱が伝わったんじゃないかと。&lt;/p&gt;
&lt;p&gt;懇親会でも数人の方から、日本語のサポートを望んでいるという声も頂きました。
興味のある方は私までコンタクトいただければと。&lt;/p&gt;
&lt;p&gt;あと、@yusukeさんのテキスト翻訳が素晴らしくて、参加してもらった方たちも絶賛してました。
次回も英語スピーカーの場合に助けてもらえると嬉しいです（私もそこまで出来るように頑張ります）&lt;/p&gt;
&lt;h2 id=&#34;その他のブログ&#34;&gt;その他のブログ&lt;/h2&gt;
&lt;p&gt;ブログ記事ありがとうございます！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://arika.hateblo.jp/entry/2014/07/15/011241&#34;&gt;第5回elasticsearch勉強会にいってきました - はやさがたりない。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.yoslab.com/entry/2014/07/15/073000&#34;&gt;感想戦：aggrigation から見える検索エンジンの次 - 第5回 Elasticsearch勉強会 - よしだのブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://uchimanajet7.hatenablog.com/entry/2014/07/15/114632&#34;&gt;「第5回elasticsearch勉強会 #elasticsearch #elasticsearchjp」（2014年07月14日）の参加メモ - uchimanajet7のメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch server 2nd editionのファーストインプレッション</title>
      <link>https://blog.johtani.info/blog/2014/06/16/first-impression-elasticsearch-server-2nd-edition/</link>
      <pubDate>Mon, 16 Jun 2014 17:47:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/06/16/first-impression-elasticsearch-server-2nd-edition/</guid>
      <description>Elasticsearch server 2nd editionが発売されています。 私が翻訳したのは前のバージョンですが。。。 まずは、目次を元にどのくらい変わってるかを見てみました。 （</description>
      <content:encoded>&lt;p&gt;&lt;a href=&#34;http://bit.ly/1kbu5Xd&#34;&gt;Elasticsearch server 2nd edition&lt;/a&gt;が発売されています。&lt;/p&gt;
&lt;p&gt;私が翻訳したのは前のバージョンですが。。。
まずは、目次を元にどのくらい変わってるかを見てみました。
（全部まだ読んでなくて。。。）&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;1章-getting-started-with-the-elasticsearch-cluster&#34;&gt;1章 Getting Started with the Elasticsearch Cluster&lt;/h2&gt;
&lt;p&gt;冒頭に、全文検索とは、転置インデックスとはどんなものか、
Luceneの簡単なアーキテクチャの仕組みについて説明が追加されています。
検索の仕組みを知らない人が読んでもわかりやすくなっています。&lt;/p&gt;
&lt;p&gt;インストール方法なども少し追記されています。
バージョニングと簡単なデータ登録と検索方法についてもここで触れられています。
検索結果の構造の説明もちょっとあります。
まず簡単に触ってみるというところまでが1章でまとめられた感じです。&lt;/p&gt;
&lt;h2 id=&#34;2章-indexing-your-data&#34;&gt;2章 Indexing Your Data&lt;/h2&gt;
&lt;p&gt;新しく、切りだされた形です。
前のバージョンでは1章で説明されていた、Mapping周りが切りだされています。
シャードやレプリカの説明もこちらです。&lt;/p&gt;
&lt;p&gt;IPアドレスタイプ（IPv4のみ）と&lt;code&gt;token_count&lt;/code&gt;タイプの説明も追加されてます。
similarityやpostingsフォーマットなどは新しく追記されています。
また、メタフィールドと呼ばれる&lt;code&gt;_type&lt;/code&gt;などはこちらに移動しているようです。
マージ処理などの説明も追記されています。このあたりは、&lt;a href=&#34;http://www.packtpub.com/mastering-elasticsearch-querying-and-data-handling/book&#34;&gt;Mastering ElasticSearch&lt;/a&gt;に
記載されているものが移植された感じでしょうか。&lt;/p&gt;
&lt;h2 id=&#34;3章-searching-your-data&#34;&gt;3章 Searching Your Data&lt;/h2&gt;
&lt;p&gt;前のバージョンでは2章だった章です。
クエリについては1.0で追加された&lt;code&gt;simple_query_string&lt;/code&gt;などが追記されています。
&lt;code&gt;constant_score&lt;/code&gt;や&lt;code&gt;dismax&lt;/code&gt;などもです。&lt;/p&gt;
&lt;p&gt;また、前のバージョンの3章で説明されていたハイライトや8章で触れられていた&lt;code&gt;validate API&lt;/code&gt;についても
移動しています。&lt;/p&gt;
&lt;h2 id=&#34;4章-extending-your-index-structure&#34;&gt;4章 Extending Your Index Structure&lt;/h2&gt;
&lt;p&gt;前のバージョンの3章で触れられていた、データの構造に関する部分がこの章になります。
親子や配列、ネスト等のデータのインデックスや検索の方法です。&lt;/p&gt;
&lt;h2 id=&#34;5章-make-your-search-better&#34;&gt;5章 Make Your Search Better&lt;/h2&gt;
&lt;p&gt;スクリプティングや言語判定などの仕組みが記載されています。
また、ブーストについても同様です。Synonymについてもここです。
スパンクエリについては省略されたのかな？&lt;/p&gt;
&lt;h2 id=&#34;6章-beyond-full-text-searching&#34;&gt;6章 Beyond Full-text Searching&lt;/h2&gt;
&lt;p&gt;1.0の目玉機能の一つであるAggregationの説明から始まります。
その後、ファセットやPercolatorについてです。メモリに関する注意点もありそうです。
また、Geoについての説明がこちらに移動されていました。
&lt;code&gt;scroll API&lt;/code&gt;についてもこちらで説明されています。&lt;/p&gt;
&lt;h2 id=&#34;7章-elasticsearch-cluster-in-detail&#34;&gt;7章 Elasticsearch Cluster in Detail&lt;/h2&gt;
&lt;p&gt;前の7章で記載されていたElasticsearchの分散の仕組み（Node Discovery）についての記載があります。
また、1.0で追加された&lt;code&gt;circuit breaker&lt;/code&gt;やスレッドプール、インデックスのリフレッシュレートなど、&lt;a href=&#34;http://www.packtpub.com/elasticsearch-server-second-edition/book&#34;&gt;Mastering ElasticSearch&lt;/a&gt;の
内容も追記されている気がします。&lt;/p&gt;
&lt;p&gt;インデックスやマッピングのテンプレート機能についてもここで説明があるみたいです。&lt;/p&gt;
&lt;h2 id=&#34;8章-administrating-your-cluster&#34;&gt;8章 Administrating Your Cluster&lt;/h2&gt;
&lt;p&gt;1.0で追加された&lt;code&gt;snapshot/restore&lt;/code&gt;の説明から始まります。
あとは、前のバージョンの7章で説明されていたクラスタ管理用のAPIについての説明です。
いくつか（例えば&lt;code&gt;cat API&lt;/code&gt;）、1.0で追加されています。&lt;/p&gt;
&lt;p&gt;また、シャードのリバランスの話も追加されているようです。
エイリアスやプラグインの話はこちらに移動してるみたいです。&lt;/p&gt;
&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;
&lt;p&gt;ということで、とりあえず、駆け足で目次ベースで違いを見てみました。
&lt;a href=&#34;http://www.packtpub.com/elasticsearch-server-second-edition/book&#34;&gt;Mastering ElasticSearch&lt;/a&gt;での
知見がフィードバックされ、しかも1.0（すでに1.3が出そうな勢いですが。。。）にバージョンアップされた内容になっています。
冒頭がわかりやすくなっているので、検索をやったことのない方にもおすすめな書籍になった気がします。
英語が苦にならなければ、おすすめの一冊だと思います。&lt;/p&gt;
&lt;p&gt;来月から読み進めるつもりなので、また、面白い内容があったら感想を書いていこうと思います。
（また翻訳できるといいかもなー）&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>最新インフラエンジニア技術勉強に参加しました。</title>
      <link>https://blog.johtani.info/blog/2014/05/23/attending-drecom-infra-study/</link>
      <pubDate>Fri, 23 May 2014 19:18:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/05/23/attending-drecom-infra-study/</guid>
      <description>今月2回目の目黒で、初のドリコムさんです。 「最新インフラエンジニア技術勉強～Fluentd, Elasticsearch,Chefの実践実例～</description>
      <content:encoded>&lt;p&gt;今月2回目の目黒で、初のドリコムさんです。
「&lt;a href=&#34;http://drecom-study.doorkeeper.jp/events/11137&#34;&gt;最新インフラエンジニア技術勉強～Fluentd, Elasticsearch,Chefの実践実例～&lt;/a&gt;」に参加してきました。
もちろん、Elasticsearchってキーワードがあったからです。&lt;/p&gt;
&lt;p&gt;ざっくりメモです。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;ドリコムのinfrastructure-as-codeひらしーさん&#34;&gt;ドリコムのInfrastructure as Code/ひらしーさん&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CM：jojoss、トレクル、など&lt;/li&gt;
&lt;li&gt;サーバ300台、クラウド○○台。月30〜50台の割合で増加中。&lt;/li&gt;
&lt;li&gt;少人数でいかに回すか。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;chef&#34;&gt;Chef&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Rubyが書ける人が多いから。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;serverspec&#34;&gt;serverspec&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;テストだよと。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;すみません、色々と聞き逃しました。。。&lt;/p&gt;
&lt;h2 id=&#34;winning-the-metrics-battlemickeyさん&#34;&gt;Winning the metrics battle/mickeyさん&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Graphiteとかを触っている。&lt;/li&gt;
&lt;li&gt;1300台超えたら、色々大変だった。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;失敗談&#34;&gt;失敗談&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Cactiを利用して、色々と運用が大変だった。DCが別なのでProxyとか。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;成功例現行システム&#34;&gt;成功例？現行システム？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;最大値、平均値、最小値などをプロット&lt;/li&gt;
&lt;li&gt;collectdを収集、送信に採用して、独自で開発？&lt;/li&gt;
&lt;li&gt;受信して保存するのに、Graphite（carbon-relay、carbon-cache、DRBD、graphite-web）ってなってる。&lt;/li&gt;
&lt;li&gt;1300台程度のサーバから、5分間隔で、問題ない。&lt;/li&gt;
&lt;li&gt;Graphite良いツールだよ。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q：過去データはどのくらい？
A：5分間隔で1年分。&lt;/p&gt;
&lt;p&gt;Q：移動平均とかを使ったグラフとか時間かかりませんか？100台だと
A：100台でもほとんど時間はかからない。&lt;/p&gt;
&lt;h2 id=&#34;fluentd-プラグイン開発講座外山-寛さん&#34;&gt;Fluentd プラグイン開発講座/外山 寛さん&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fluentdプラグインを作ることができると威力倍増&lt;/li&gt;
&lt;li&gt;Elasticsearchの勉強会の話までしてくれました！&lt;/li&gt;
&lt;li&gt;勉強会スペース貸出しています。&lt;/li&gt;
&lt;li&gt;未公開だけど、sedueのプラグインもあるらしい。&lt;/li&gt;
&lt;li&gt;CHUNKとBUFFERとか覚えときましょう&lt;/li&gt;
&lt;li&gt;プラグインの作り方的なのがなかった気がしたので、今回の発表です。&lt;/li&gt;
&lt;li&gt;gem作らなくてもディレクトリにおけば使えるよと。&lt;/li&gt;
&lt;li&gt;td-agent使ってる人が大多数だよね。（fluentdを素で使ってる人は会場にはいなかった）&lt;/li&gt;
&lt;li&gt;エンジニア募集中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q：エラー処理どうしてますか？
A：今は、スルーしています&lt;/p&gt;
&lt;p&gt;Q：単体テストの書き方は？
A：人によってバラバラみたいですね。&lt;/p&gt;
&lt;h2 id=&#34;mysqlと組み合わせて始める全文検索エンジンelasticsearchyoshi_ken&#34;&gt;MySQLと組み合わせて始める全文検索エンジン「elasticsearch」/yoshi_ken&lt;/h2&gt;
&lt;p&gt;スライド：http://www.slideshare.net/y-ken/introduce-elasticsearch-mysql-importer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Elasticsearch歴は1年位です。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MySQLを使っていて、モダンな検索がほしいですよね？ね？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;サジェスト、ファセット、位置情報、ネスト検索などなど。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GoogleトレンドだとSolrに迫る勢いと。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;実データを用いて、手軽にElasticsearchと連携。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BinaryLogではなく、SQLの結果を同意する方式。yamabiko&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;今日は、新しいものを公開します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/y-ken/elasticsearch_mysql_importer&#34;&gt;bulk import file generator as well as nested document from MySQL for elasticsearch bulk api&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://purchases.elasticsearch.com/class/elasticsearch/core-elasticsearch/tokyo/2014-05-20&#34;&gt;東京トレーニング&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Elasticsearch本については、右にあるリンクをクリックしてくれるとうれしいなぁ。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Aggregations - ファセットよりも柔軟な集計</title>
      <link>https://blog.johtani.info/blog/2014/05/07/aggregation-example/</link>
      <pubDate>Wed, 07 May 2014 18:57:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/05/07/aggregation-example/</guid>
      <description>こんなツイートを見つけたので、Aggregationのサンプルでも書こうかなと。（前から書こうと思ってたんですが。。。） @elasticsearch Hi, Would you please tell me the way to</description>
      <content:encoded>&lt;p&gt;こんなツイートを見つけたので、Aggregationのサンプルでも書こうかなと。（前から書こうと思ってたんですが。。。）&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://twitter.com/elasticsearch&#34;&gt;@elasticsearch&lt;/a&gt; Hi, Would you please tell me the way to do &amp;quot;Pivot Faceting&amp;quot; like Solr-4.0 in elasticsearch-1.1.1 or prior version? Thank you.&lt;/p&gt;&amp;mdash; Y.Kentaro (@yoshi_ken) &lt;a href=&#34;https://twitter.com/yoshi_ken/statuses/462073860062322688&#34;&gt;2014, 5月 2&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;ちなみに、Aggregationは1.0.0から導入された機能なので、ElasticSearch Server日本語版には掲載されていない機能になります。（ごめんなさい）&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-aggregations.html&#34;&gt;公式ガイドのAggregationsのページ&lt;/a&gt;はこちらになりますが、実例があったほうがいいかなと。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://twitter.com/yoshi_ken&#34;&gt;@yoshi_ken&lt;/a&gt; さんから実例のサンプルの指定もいただいたので、ブログを書くのが非常に楽です。ありがとうございます。&lt;/p&gt;
&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://gist.github.com/y-ken/40d99c3a137247ba8eac&#34;&gt;元ネタ（gist）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;次のような不動産系のデータがあるとします。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;物件名&lt;/li&gt;
&lt;li&gt;都道府県（東京、神奈川、&amp;hellip;..）&lt;/li&gt;
&lt;li&gt;物件種別（賃貸、売買、&amp;hellip;..）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この時、都道府県別に、物件種別ごとの件数を取得したいという趣旨です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;東京
&lt;ul&gt;
&lt;li&gt;賃貸: xxx件&lt;/li&gt;
&lt;li&gt;売買: yyy件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;神奈川
&lt;ul&gt;
&lt;li&gt;賃貸: xxx件&lt;/li&gt;
&lt;li&gt;売買: yyy件 &amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これを、Elasticsearchでどうやって取得するかという問題です。&lt;/p&gt;
&lt;h2 id=&#34;インデックスとデータの登録&#34;&gt;インデックスとデータの登録&lt;/h2&gt;
&lt;p&gt;まずは、インデックスを作ります。
あくまでもサンプルなので、全部not_analyzedにしてますが、そのへんは適宜変更してください。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;index&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;PUT&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/pref_aggs&lt;/span&gt;
{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;settings&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;number_of_shards&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mappings&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;japan&amp;#34;&lt;/span&gt; : {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_id&amp;#34;&lt;/span&gt; : {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;
      },
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;not_analyzed&amp;#34;&lt;/span&gt;},
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;not_analyzed&amp;#34;&lt;/span&gt;},
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pref&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;not_analyzed&amp;#34;&lt;/span&gt;},
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;not_analyzed&amp;#34;&lt;/span&gt;}
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;_id&lt;/code&gt;を使用して、データ登録時に&lt;code&gt;id&lt;/code&gt;フィールドにある文字列をそのままIDとして登録できるように指定してあります。&lt;/p&gt;
&lt;p&gt;登録するデータは次のようなものを適当に100件程度作ってりました。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id0&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name0&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pref&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;01_北海道&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;売買&amp;#34;&lt;/span&gt;}
{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pref&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;09_栃木県&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;売買&amp;#34;&lt;/span&gt;}
{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pref&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;38_愛媛県&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;賃貸&amp;#34;&lt;/span&gt;}
{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id3&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name3&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pref&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;40_福岡県&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;賃貸&amp;#34;&lt;/span&gt;}
{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id4&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name4&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pref&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;35_山口県&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;売買&amp;#34;&lt;/span&gt;}
{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id5&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name5&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pref&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;12_千葉県&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;賃貸&amp;#34;&lt;/span&gt;}
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;データの登録には、前に紹介した方法「&lt;a href=&#34;http://blog.johtani.info/blog/2014/04/24/usage-stream2es/&#34;&gt;stream2esと複数データの登録&lt;/a&gt;」を用いました。&lt;/p&gt;
&lt;h2 id=&#34;ファセット&#34;&gt;ファセット&lt;/h2&gt;
&lt;p&gt;このようなデータがある場合に、まず思いつくのはファセットによる取得です。
いささか強引ですが。。。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/pref_aggs/japan/_search&lt;/span&gt;
{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;match_all&amp;#34;&lt;/span&gt;: {}
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;facets&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type_賃貸&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;terms&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;order&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;term&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;field&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pref&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;
      }, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;facet_filter&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;term&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;賃貸&amp;#34;&lt;/span&gt; }}
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type_売買&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;terms&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;order&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;term&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;field&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pref&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;
      }, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;facet_filter&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;term&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;売買&amp;#34;&lt;/span&gt; }}
    }

  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;facet_filter&lt;/code&gt;を使用して、&lt;code&gt;type&lt;/code&gt;フィールドによる個別の絞込を行っています。
あとは、&lt;code&gt;pref&lt;/code&gt;フィールドのファセットを取得すれば、出力は次のようになります。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;took&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;timed_out&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_shards&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;total&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;successful&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;failed&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
   },
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;hits&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;total&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;max_score&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;hits&amp;#34;&lt;/span&gt;: []
   },
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;facets&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type_賃貸&amp;#34;&lt;/span&gt;: {
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;terms&amp;#34;&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;missing&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;total&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;other&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;terms&amp;#34;&lt;/span&gt;: [
            {
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;term&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;00_北海道&amp;#34;&lt;/span&gt;,
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            },
            {
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;term&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;01_青森県&amp;#34;&lt;/span&gt;,
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
            },
            {
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;term&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;03_宮城県&amp;#34;&lt;/span&gt;,
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
            },
            &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;
      &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type_売買&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;terms&amp;#34;&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;missing&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;total&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;other&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;terms&amp;#34;&lt;/span&gt;: [
            {
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;term&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;00_北海道&amp;#34;&lt;/span&gt;,
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
            },
            {
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;term&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;02_岩手県&amp;#34;&lt;/span&gt;,
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            },
            {
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;term&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;04_秋田県&amp;#34;&lt;/span&gt;,
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            },
            &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;望んでいた形式とは少し異なりますが、&lt;code&gt;facet_filter&lt;/code&gt;する回数を少なくするため、
ファセットは都道府県のフィールドを指定したためです。
アプリで頑張って入れ替えてください。。。&lt;/p&gt;
&lt;p&gt;この場合、&amp;lsquo;type&amp;rsquo;の個数がわかっているので、頑張ってこのような記述ができました。
ただ、&lt;code&gt;type&lt;/code&gt;が増えた時にアプリの修正とかが必要になりますよね。&lt;/p&gt;
&lt;h2 id=&#34;aggregations&#34;&gt;Aggregations&lt;/h2&gt;
&lt;p&gt;ということで、Aggregationsの出番です。
ファセットよりも柔軟に、検索結果に対していろいろな集計が行える機能になります。
一見に如かずということで、クエリを紹介します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/pref_aggs/japan/_search&lt;/span&gt;
{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;match_all&amp;#34;&lt;/span&gt;: {}
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;aggs&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pref&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;terms&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;order&amp;#34;&lt;/span&gt;: {
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_term&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;asc&amp;#34;&lt;/span&gt;
        },
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;field&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pref&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;
      },
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;aggs&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: {
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;terms&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;field&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
          }
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ファセットよりもシンプルですし、&lt;code&gt;賃貸&lt;/code&gt;といったような値を指定していません。
&lt;code&gt;aggs&lt;/code&gt;というのが&lt;code&gt;aggregations&lt;/code&gt;機能を指定している部分になります。
検索結果は次のように出力されます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;took&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;timed_out&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_shards&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;total&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;successful&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;failed&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
   },
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;hits&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;total&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;max_score&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;hits&amp;#34;&lt;/span&gt;: []
   },
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;aggregations&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pref&amp;#34;&lt;/span&gt;: {
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;buckets&amp;#34;&lt;/span&gt;: [
            {
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;00_北海道&amp;#34;&lt;/span&gt;,
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;doc_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;buckets&amp;#34;&lt;/span&gt;: [
                     {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;売買&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;doc_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
                     },
                     {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;賃貸&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;doc_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                     }
                  ]
               }
            },
            {
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;01_青森県&amp;#34;&lt;/span&gt;,
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;doc_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;buckets&amp;#34;&lt;/span&gt;: [
                     {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;賃貸&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;doc_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
                     }
                  ]
               }
            },
            &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Aggregationsの結果は、望んでいた通りの出力になっています。&lt;/p&gt;
&lt;p&gt;クエリの構成を見てみましょう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aggs&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pref&amp;#34;&lt;/span&gt;: { &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#1&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;terms&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;order&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_term&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;asc&amp;#34;&lt;/span&gt;
      },
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;field&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pref&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;aggs&amp;#34;&lt;/span&gt;: {  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#2&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;terms&amp;#34;&lt;/span&gt;: {
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;field&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最初の#1の&lt;code&gt;pref&lt;/code&gt;は出力を扱いやすくするためにつけているラベルになります。好きな名前をつけることが可能です。
次の&lt;code&gt;terms&lt;/code&gt;がAggregationのタイプ（どのような集計をして欲しいか）になります。
今回は、&lt;code&gt;pref&lt;/code&gt;フィールドにある単語(term)毎に、集計をしたいので、&lt;code&gt;terms&lt;/code&gt;を指定します。
その他にどんなタイプがあるかは、&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-aggregations.html&#34;&gt;公式ガイド&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;p&gt;次に、さらに&lt;code&gt;type&lt;/code&gt;フィールドで集計したいので、#2の部分で後続のAggregationを指定しています。
都道府県同様、&lt;code&gt;type&lt;/code&gt;フィールドにある単語毎に集計するために、&lt;code&gt;terms&lt;/code&gt;を指定します。&lt;/p&gt;
&lt;p&gt;これで、先ほどのような結果が出力できます。
ちなみに、さらに&lt;code&gt;type&lt;/code&gt;の中に他の種別で集計したいという場合は、さらに&lt;code&gt;aggs&lt;/code&gt;を追加していけばOKです。&lt;/p&gt;
&lt;p&gt;Aggregationは非常に柔軟な集計を可能にする機能です。ただし、検索結果に対して集計処理を行っているため、
メモリやCPUなどのリソースを消費するので注意が必要です。&lt;/p&gt;
&lt;p&gt;Aggregationの説明については、&lt;a href=&#34;https://www.found.no/foundation/elasticsearch-aggregations/&#34;&gt;こちらのFound.noのブログ（英語）&lt;/a&gt;がわかりやすかったので参考にしてみてください。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;非常に簡単ですが、Aggregationsについて紹介しました。
その他にもAggregationsでできることがあるので、後日別のサンプルを用意して説明しようかと思います。&lt;/p&gt;
&lt;p&gt;100件のデータやここまでの操作については、&lt;a href=&#34;https://gist.github.com/johtani/08dee5fb4da62037ef9e&#34;&gt;gist&lt;/a&gt;にあるので、興味がある方はご覧いただければと。
stream2esの操作以外は、&lt;a href=&#34;http://blog.johtani.info/blog/2014/01/29/simple-introduction-and-first-impression-es-marvel/&#34;&gt;Marvelに付属のsense&lt;/a&gt;を利用しています。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>elasticsearch-kopfの紹介（aliases画面）</title>
      <link>https://blog.johtani.info/blog/2014/05/04/intro-elasticsearch-kopf-alias-percolator/</link>
      <pubDate>Sun, 04 May 2014 01:01:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/05/04/intro-elasticsearch-kopf-alias-percolator/</guid>
      <description>今日はelasticsearch-kopfのAnalysis画面の紹介です。 （簡単なところから。。。その３） ちょっとあいだが開いてしまいまし</description>
      <content:encoded>&lt;p&gt;今日はelasticsearch-kopfのAnalysis画面の紹介です。&lt;/p&gt;
&lt;p&gt;（簡単なところから。。。その３）&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;ちょっとあいだが開いてしまいましたが、再開です。
メニューの&lt;code&gt;aliases&lt;/code&gt;を選択すると、次のような画面が表示されます。&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.johtani.info/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140504/kopf-aliases.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140504/kopf-aliases.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption align=&#34;center&#34;&gt;&lt;h4&gt;Aliases画面&lt;/h4&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Elasticsearchの&lt;code&gt;alias&lt;/code&gt;を画面で確認できます。&lt;/p&gt;
&lt;p&gt;エイリアスは、インデックスに別名をつけることができるElasticsearchの機能です。
１エイリアス＝１インデックスでも良いですが、１エイリアスに対して複数のエイリアスを付与することもできます。
この機能を利用することで、次のようなことが可能となります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;インデックスの切り替えをアプリ側に意識させずに実施（アプリはエイリアス名に対して検索すればOKなので）&lt;/li&gt;
&lt;li&gt;直近１週間のログを検索するためのエイリアスの作成（複数のインデックスを１つのエイリアスに割り当て可能）&lt;/li&gt;
&lt;li&gt;特定のルーティングによる検索（特定のデータに対する検索だけに絞るためにfilterを指定する）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;エイリアスについて詳しく知りたい方は&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-aliases.html&#34;&gt;公式ガイド&lt;/a&gt;をご覧いただくのが良いかと。&lt;/p&gt;
&lt;p&gt;画面は非常にわかりやすい作りになっているので、特に説明必要ないんですよね。。。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>stream2esと複数データの登録</title>
      <link>https://blog.johtani.info/blog/2014/04/24/usage-stream2es/</link>
      <pubDate>Thu, 24 Apr 2014 21:11:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/04/24/usage-stream2es/</guid>
      <description>kopfの記事の続きも書く必要があるんだけど、こんなツイートを見つけてしまったので。。。 ElasticsearchのBulk APIの仕様、J</description>
      <content:encoded>&lt;p&gt;kopfの記事の続きも書く必要があるんだけど、こんなツイートを見つけてしまったので。。。&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p&gt;ElasticsearchのBulk APIの仕様、JSONファイルをいい感じに加工して置かなければならないしハマりどころ多い。 &lt;a href=&#34;http://t.co/hmfycqZlqk&#34;&gt;http://t.co/hmfycqZlqk&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kenta Suzuki (@suzu_v) &lt;a href=&#34;https://twitter.com/suzu_v/statuses/459216999592124416&#34;&gt;2014, 4月 24&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;前に思いついたけど、放ったらかしにしてた疑問が再浮上してきたので、せっかくだから調べてみようかなと。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;複数JSONデータがある場合にもっと楽にデータを入れる方法ないかなぁと思って、これかな？というのがあったのですが、
そのまま手を動かさずに放置してたので、一念発起してブログ書いてます。&lt;/p&gt;
&lt;h2 id=&#34;bulk-apiって&#34;&gt;Bulk APIって？&lt;/h2&gt;
&lt;p&gt;ElasticsearchはURLにアクセスしてデータを登録できます。
基本的には次のように1件毎の登録になります。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;curl&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;-XPUT&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;http://localhost:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9200&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/bookshop/books/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;-d&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;
{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;book_id&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ElasticSearch Server Japanese Edition&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;price&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;3024&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;publisher&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;KADOKAWA&amp;#34;&lt;/span&gt;
}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これでもいいのですが、大量のデータを登録するときは、Elasticsearch側での効率が悪いです。
そこで、Elasticsearchは大量データを登録するために&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-bulk.html#docs-bulk&#34;&gt;Bulk API&lt;/a&gt;というものを用意しています。&lt;/p&gt;
&lt;p&gt;これは、次のような形式のJSONを作ってデータを登録します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{ &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt; : { &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_index&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bookshop&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_type&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;books&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_id&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; } }
{ &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;book_id&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ElasticSearch Server Japanese Edition&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;price&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;3024&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;publisher&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;KADOKAWA&amp;#34;&lt;/span&gt;}
{ &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt; : { &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_index&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bookshop&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_type&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;books&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_id&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt; } }
{ &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;book_id&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Introduction of Apache Solr&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;price&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;3888&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;publisher&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gihyo&amp;#34;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これは、次のような構成になっています。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;コマンド
データ
コマンド
データ
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これで効率よくデータが登録できるのですが、このようなJSONデータを別途作って上げる必要が出てきます。
結局、複数のJSONがあるのに、特殊なJSONを生成しないといけないということでプログラム書いて実行することになります。
これだと、Elasticsearchへのアクセスをプログラムで書くのとあまり大差がないかもしれません。&lt;/p&gt;
&lt;h2 id=&#34;stream2es&#34;&gt;stream2es&lt;/h2&gt;
&lt;p&gt;もっとお手軽に複数のJSONを登録できないかな？と目をつけていたのが、&lt;a href=&#34;https://github.com/elasticsearch/stream2es&#34;&gt;stream2es&lt;/a&gt;です。&lt;/p&gt;
&lt;h3 id=&#34;どんなもの&#34;&gt;どんなもの？&lt;/h3&gt;
&lt;p&gt;Clojureで作られた、Elasticsearchにデータを流し込むためのツールです。
Java 7がインストールされていれば、ダウンロードしてくれば動作せることができます。&lt;/p&gt;
&lt;h3 id=&#34;インストール&#34;&gt;インストール&lt;/h3&gt;
&lt;p&gt;公式ページに載っている方法そのままです。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -O download.elasticsearch.org/stream2es/stream2es; chmod +x stream2es
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;実行したディレクトリにコマンドがコピーされます。
あとは、コマンドを実行すればOKです。&lt;/p&gt;
&lt;h3 id=&#34;実行&#34;&gt;実行&lt;/h3&gt;
&lt;p&gt;データは次のような形式で&lt;code&gt;sample.json&lt;/code&gt;に保存してあるとします。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{ &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;book_id&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ElasticSearch Server Japanese Edition&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;price&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;3024&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;publisher&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;KADOKAWA&amp;#34;&lt;/span&gt;}
{ &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;book_id&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Introduction of Apache Solr&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;price&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;3888&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;publisher&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gihyo&amp;#34;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;先ほどの&lt;code&gt;Bulk API&lt;/code&gt;で利用したJSONよりも、スッキリしていますね。
1行1ドキュメント1JSONです。&lt;/p&gt;
&lt;p&gt;あとは、次のコマンドを実行するだけです。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ./stream2es stdin --target http://localhost:9200/bookshop/books &amp;lt; sample.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ファイルをstream2esに流し込んで、stream2esが1行ずつパースして、Elasticsearchに投げ込んでくれます。&lt;/p&gt;
&lt;p&gt;登録されたデータは次のようになります。
IDは自動で付与されています。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_index&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bookstore&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;books&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0Hvy4IJCRkKrvGb4Dgam_w&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;found&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_source&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;book_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ElasticSearch Server Japanese Edition&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;price&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3024&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;publisher&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;KADOKAWA&amp;#34;&lt;/span&gt;
   }
}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;
{
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_index&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bookstore&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;books&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b9M6TooFQzGYyJeix_t_WA&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;found&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_source&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;book_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Introduction of Apache Solr&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;price&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3888&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;publisher&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gihyo&amp;#34;&lt;/span&gt;
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;せっかく、&lt;code&gt;book_id&lt;/code&gt;があるんだし、&lt;code&gt;_id&lt;/code&gt;をインデックスの設定に指定します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -XDELETE http://localhost:9200/bookshop
$ curl -XPUT http://localhost:9200/bookshop -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#34;mappings&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;books&amp;#34; : {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;#34;_id&amp;#34; : {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;path&amp;#34;: &amp;#34;book_id&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;あとは、登録すれば&lt;code&gt;book_id&lt;/code&gt;が&lt;code&gt;_id&lt;/code&gt;に採用されます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_index&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bookshop&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;books&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;found&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_source&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;book_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ElasticSearch Server Japanese Edition&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;price&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3024&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;publisher&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;KADOKAWA&amp;#34;&lt;/span&gt;
   }
}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;
{
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_index&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bookshop&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;books&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;found&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_source&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;book_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Introduction of Apache Solr&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;price&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3888&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;publisher&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gihyo&amp;#34;&lt;/span&gt;
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;複数ファイル&#34;&gt;複数ファイル&lt;/h3&gt;
&lt;p&gt;ディレクトリに複数のJSONファイルが有った場合は、次のようなコマンドでOK&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cat sample_data/*.json |./stream2es stdin --target http://localhost:9200/bookshop/books
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;まぁ、&lt;code&gt;cat&lt;/code&gt;して流してるだけですが。。。&lt;/p&gt;
&lt;h3 id=&#34;ダメだったケース&#34;&gt;ダメだったケース&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;JSONが複数行になっているようなデータだとエラーが出てしまいました。&lt;br&gt;
（&lt;code&gt;jq&lt;/code&gt;コマンドで1行に整形したりできるかなぁ？）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;また、1行に2つのJSONが書いてある場合は、1つ目のJSONをパースしたら、そこでおしまいみたいで、その後に記述されたデータは登録されませんでした。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;インデックスがない場合&#34;&gt;インデックスがない場合&lt;/h3&gt;
&lt;p&gt;stream2esで登録するインデックスがElasticsearchに存在しない場合、stream2esがインデックスを作成してくれるのですが、
この時、シャード数などはstream2es内部に記述があるので注意が必要です。
以下がその設定です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;index.number_of_shards : 2&lt;/li&gt;
&lt;li&gt;index.number_of_replicas : 0&lt;/li&gt;
&lt;li&gt;index.refresh_interval : 5s&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;課題&#34;&gt;課題？&lt;/h2&gt;
&lt;p&gt;内部的にはおそらく、&lt;code&gt;Bulk&lt;/code&gt;でデータを登録していると思うのですが、まだよくわかっていません。
Clojureが読めないので、せっかくだから、Clojureの勉強も兼ねてちょっとソースを読んでみようかなと思います。
それほど量があるわけでもないので。&lt;/p&gt;
&lt;p&gt;あとは、その他にWikipediaのデータやTwitterのデータ登録、
ElasticsearchからデータをScrollで読み出しつつ、別のElasticsearchに流しこむといったこともできそうなので、そちらも試してみようかと。
他にもオプションがいくつかありそうです。&lt;/p&gt;
&lt;p&gt;今回は2件ほどでしたが、大量データを流し込んだ時にどうなるか（stream2esが悲鳴を上げるのか、Elasticsearchで詰まることがあったらどうなるか）なども
気になるので、なんか適当なデータで試してみるのもいいかなぁと。
（ということで、だれか、いろいろ試してみてもらえると楽できるなぁ。）&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>第4回Elasticsearch勉強会を開催しました。#elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2014/04/21/hold-on-4th-elasticsearch-jp/</link>
      <pubDate>Mon, 21 Apr 2014 19:44:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/04/21/hold-on-4th-elasticsearch-jp/</guid>
      <description>第4回Elsticsearch勉強会を開催しました。 今回から、遅刻厳禁にしてみました。 それほど困った人もいないと思うので、次回からも遅刻厳禁</description>
      <content:encoded>&lt;p&gt;&lt;a href=&#34;http://elasticsearch.doorkeeper.jp/events/8865&#34;&gt;第4回Elsticsearch勉強会&lt;/a&gt;を開催しました。
今回から、遅刻厳禁にしてみました。
それほど困った人もいないと思うので、次回からも遅刻厳禁で。&lt;/p&gt;
&lt;p&gt;ということで、今回も多数の方にお集まりいただきありがとうございました。&lt;/p&gt;
&lt;p&gt;スタッフの皆さん、スピーカーの皆さん、プレゼント用に書籍を用意してくれたKADOKAWAさん、開場提供していただいた&lt;a href=&#34;http://recruit-tech.co.jp&#34;&gt;リクルートテクノロジーズさん&lt;/a&gt;、ありがとうございました！
次回もよろしくお願いします！
参加していただき盛り上げていただいた参加者の皆さんもありがとうございました。&lt;/p&gt;
&lt;p&gt;さて、ブログですが司会業とかやってたので、あんまり書けてないけど。。。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;134番までチケットがはけていたので＋スタッフで140〜150名くらいの参加者だったのではないかと思います。
懇親会まで残っていただいた方々も片付けなどありがとうございました。&lt;/p&gt;
&lt;p&gt;さて、感想とか補足です。&lt;/p&gt;
&lt;h2 id=&#34;アナライズ処理の仕組みとクエリdsl株式会社シーマーク大谷純johtani&#34;&gt;「アナライズ処理の仕組みとクエリDSL」株式会社シーマーク　大谷　純　@johtani&lt;/h2&gt;
&lt;p&gt;スライド：&lt;a href=&#34;https://blog.johtani.info/images/entries/20140421/Introduction_analysis_and_query_dsl_for_print.pdf&#34;&gt;アナライズ処理の仕組みとクエリDSL&lt;/a&gt;※スライドはPDFです。&lt;/p&gt;
&lt;p&gt;プラグイン：&lt;a href=&#34;https://github.com/johtani/elasticsearch-extended-analyze&#34;&gt;elasticsearch-extended-analyze&lt;/a&gt;&lt;br&gt;
プラグインの紹介記事：&lt;a href=&#34;http://blog.johtani.info/blog/2013/10/25/developing-es-extended-analyze-plugin/&#34;&gt;http://blog.johtani.info/blog/2013/10/25/developing-es-extended-analyze-plugin/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Marvel：&lt;a href=&#34;http://www.elasticsearch.com/marvel/&#34;&gt;http://www.elasticsearch.com/marvel/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;日本語版メーリングリスト：&lt;a href=&#34;https://groups.google.com/forum/#!forum/elasticsearch-jp&#34;&gt;https://groups.google.com/forum/#!forum/elasticsearch-jp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;なんか、宣伝（本＋プラグイン）ばっかりですみません。
「プラグインの紹介記事」に簡単な使い方が書いてあります。が、情報が古いので、Elasticsearchのバージョンに合わせたバージョンを使ってください。&lt;/p&gt;
&lt;p&gt;まだまだ発表に慣れてないので、頑張ろ。&lt;/p&gt;
&lt;p&gt;アンケート取ってみましたが、ログ検索と全文検索と半々くらいで興味がある人がいるみたいでした。
あと、有料トレーニングは人気ないっすね。。。&lt;/p&gt;
&lt;h2 id=&#34;elasticsearch-hadoopを使ってごにょごにょしてみる-株式会社マーズフラッグ-rd部やまかつ-さんyamakatu&#34;&gt;「elasticsearch-hadoopを使ってごにょごにょしてみる」 株式会社マーズフラッグ R&amp;amp;D部　やまかつ さん　@yamakatu&lt;/h2&gt;
&lt;p&gt;スライド：&lt;a href=&#34;http://www.slideshare.net/yamakatu/elasticsearchhadoop&#34;&gt;elasticsearch-hadoopを使ってごにょごにょしてみる&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;elasticsearch-hadoop：&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch-hadoop&#34;&gt;https://github.com/elasticsearch/elasticsearch-hadoop&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;QAとして、Elasticsearchにプライマリデータを保存するのは的な話が出てました。
ESにのみデータを入れるのは個人的には考えたことないかなぁ。
どうしても、ElasticsearchのWriteが遅いんじゃないかという懸念事項を持ってる人がいるなぁと。（実際ツラいという話もちらほら）&lt;/p&gt;
&lt;p&gt;お腹痛い中の発表ありがとうございました。。。
次回はMapRの方に紹介してもらえそう（交渉中）なので楽しみです。やまかつさんの続きも聞きたいなぁ。&lt;/p&gt;
&lt;h2 id=&#34;couchbaseとelasticsearchが手を結んだら株式会社アットウェア-佐竹雅央さん-madgaoh-河村康爾さん-ijokarumawak&#34;&gt;「CouchbaseとElasticsearchが手を結んだら」株式会社アットウェア 佐竹雅央さん @madgaoh 河村康爾さん @ijokarumawak&lt;/h2&gt;
&lt;p&gt;スライド：&lt;a href=&#34;http://www.slideshare.net/masahirosatake/elasticsearch-couchbaseelasticsearch&#34;&gt;CouchbaseとElasticsearchが手を結んだら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CouchbaseのElasticsearchに関するページ：&lt;a href=&#34;http://docs.couchbase.com/couchbase-elastic-search/&#34;&gt;http://docs.couchbase.com/couchbase-elastic-search/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Couchbaseに入れたら、自動的にElasticsearchにもデータを入れてくれる。
デモがあるの、いいっすね。&lt;/p&gt;
&lt;p&gt;最新版はmasterを落としてきてビルドしないとダメらしい。確かに、上のページには0.90.5って書かれてる。
ここでも、やはり、Elasticsearchが詰まった時にどうするの？みたいな話が出てました。
CouchbaseのXDCRだと、後ろが詰まってる時によしなに？データを流すのを制御してくれるってのがあるみたいですが、
Elasticsearchだと悲鳴を上げているのがわかりにくいと。&lt;/p&gt;
&lt;p&gt;あと、Elasticsearchがインデキシングでキューを取りこぼしているのがログからわかりにくいってのも出てました。
（なにか、分かる方法があるかとかも調べてみようかなぁ。）&lt;/p&gt;
&lt;p&gt;&lt;em&gt;自分の宿題：Transportプラグインって何かについて調べてブログに書くこと。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;elasticsearch-at-wantedlyタイトルあってるか不安wantedly-inc-内田誠悟さん-spesnova&#34;&gt;「Elasticsearch at Wantedly」（タイトルあってるか不安）　Wantedly, Inc 内田誠悟さん @spesnova&lt;/h2&gt;
&lt;p&gt;スライド：&lt;a href=&#34;http://speakerdeck.com/spesnova/elasticsearch-at-wantedly-inc&#34;&gt;Elasticsearch at Wantedly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考文献：&lt;a href=&#34;http://code46.hatenablog.com/entry/2014/01/21/115620&#34;&gt;Elasticsearchチュートリアル&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考文献：&lt;a href=&#34;https://speakerdeck.com/dadoonet/elasticsearch-workshop&#34;&gt;Elasticsearch Workshop&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考文献：&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch-rails&#34;&gt;elasticsearch-rails&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wantedlyでどうやって使ってるのか。
あと、オートコンプリートでも使ってます。（この話は次回聞けるといいなぁｗ）&lt;/p&gt;
&lt;p&gt;データ数は少ないので、参考にまだならないかも。&lt;/p&gt;
&lt;p&gt;公式のサイト見難いですよねと。
ペンギン先生のブログが素晴らしかった！
マッピングすごいｗ&lt;/p&gt;
&lt;p&gt;最後は、苦労して作ってもらったautocompleteの資料は放ったらかしにして、質疑応答してもらいました。
辞書とか、検索漏れとかの話は今後の課題っぽかったですね。&lt;/p&gt;
&lt;p&gt;「Elasticsearchのみに決めてました！」ってセリフがカッコ良かったｗ&lt;/p&gt;
&lt;p&gt;アクセスコントロール周りのノウハウもブログで共有してくれそうなので楽しみにしています！&lt;/p&gt;
&lt;p&gt;あと、「tireがretire」の話が出てましたが（この発表だっけ？）参考文献にあげてある、elasticsearch-railsが今は本流なんじゃないかなぁ？&lt;/p&gt;
&lt;h2 id=&#34;lt&#34;&gt;LT&lt;/h2&gt;
&lt;p&gt;###「ElasticsearchのScripting」株式会社富士通ソフトウェアテクノロジーズ 滝田聖己さん @pisatoshi&lt;/p&gt;
&lt;p&gt;スライド：&lt;a href=&#34;https://speakerdeck.com/pisatoshi/elasticsearchdescripting&#34;&gt;ElasticsearchのScripting&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考文献：&lt;a href=&#34;https://github.com/imotov/elasticsearch-native-script-example&#34;&gt;elasticsearch-native-script-example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;色々とScriptがあるという話を説明してもらい感謝です。
もちろん、ElasticSearchServerにも書いてあるので、そちらも参考にしてください！&lt;/p&gt;
&lt;h3 id=&#34;elasticsearch-向け多言語解析プラグインベイシステクノロジー株式会社-江口天さん&#34;&gt;「Elasticsearch 向け多言語解析プラグイン」ベイシス・テクノロジー株式会社 江口天さん&lt;/h3&gt;
&lt;p&gt;スライド：&lt;a href=&#34;http://www.slideshare.net/basistech/4-21-elasticsearch-meetup&#34;&gt;Elasticsearch 向け多言語解析プラグイン&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考文献：&lt;a href=&#34;http://www.basistech.jp/elasticsearch/&#34;&gt;Elasticsearchで使えるRosette基本言語解析モジュール&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考文献：&lt;a href=&#34;http://blog.johtani.info/blog/2013/09/23/intro-elasticsearch-inquisitor/&#34;&gt;Elasticsearch-inquisitorプラグインの紹介&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ベイシステクノロジさんが提供しているRosetteをElasticsearchで活用できるモジュールみたいです。
いまなら、無料で体験できるみたいなので、どんなものか触ってみると面白いかもしれません。&lt;/p&gt;
&lt;p&gt;あと、デモで使用されていたプラグインについて、私が昔に書いた記事があるので、興味のある方は参考にしていただければと。
このプラグインはクエリがどのように内部でLuceneのクエリになっているか、どのフィールドでどうトークンが生成されるか？
といったものが見ることができるプラグインになっています。&lt;/p&gt;
&lt;h2 id=&#34;関連ブログ&#34;&gt;関連ブログ&lt;/h2&gt;
&lt;p&gt;適当に見つけたブログを列挙してあります。これもあるよ！などあれば、教えてください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.yoslab.com/entry/2014/04/21/200601&#34;&gt;勉強会メモ - 第4回elasticsearch勉強会 2014/04/21&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://togetter.com/li/657879&#34;&gt;togetter 第4回elasticsearch勉強会 #elasticsearchjp&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://dev.classmethod.jp/server-side/4th-elasticsearchjp/&#34;&gt;参加レポート:第4回elasticsearch勉強会 #elasticsearchjp&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://qiita.com/maaru/items/0f82600dbc305715b23d&#34;&gt;第4回elasticsearch勉強会に参加しました&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;しつこいくらい宣伝してしまいましたが、「ElasticSearch Server日本語版」よろしくお願いします！&lt;/p&gt;
&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?t=johtani-22&amp;o=9&amp;p=8&amp;l=as1&amp;asins=4048662023&amp;nou=1&amp;ref=qf_sp_asin_til&amp;fc1=000000&amp;IS2=1&amp;lt1=_blank&amp;m=amazon&amp;lc1=0000FF&amp;bc1=000000&amp;bg1=FFFFFF&amp;f=ifr&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;今回も楽しい話が聞けました。メモがちょっと少ないんですが。。。&lt;/p&gt;
&lt;p&gt;次回は6末を目処に、MapRの方などと調整して開催しようと思います。
聞きたい話とか、発表したい方とかあれば、連絡くださいー！&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>elasticsearch-kopfの紹介（analysis画面）</title>
      <link>https://blog.johtani.info/blog/2014/04/09/intro-elasticsearch-kopf-analysis/</link>
      <pubDate>Wed, 09 Apr 2014 11:41:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/04/09/intro-elasticsearch-kopf-analysis/</guid>
      <description>今日はelasticsearch-kopfのAnalysis画面の紹介です。 （簡単なところから。。。その２） メニューのanalysisを選択</description>
      <content:encoded>&lt;p&gt;今日はelasticsearch-kopfのAnalysis画面の紹介です。&lt;/p&gt;
&lt;p&gt;（簡単なところから。。。その２）&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;メニューの&lt;code&gt;analysis&lt;/code&gt;を選択すると、次のような画面が表示されます。&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.johtani.info/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140409/kopf-analysis.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140409/kopf-analysis.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption align=&#34;center&#34;&gt;&lt;h4&gt;Analysis画面&lt;/h4&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Elasticsearchの&lt;code&gt;_analyze&lt;/code&gt; APIを画面で確認できます。
画面で動作の確認ができるのは嬉しいですよね。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;入力文字列：入力となるドキュメントに含まれる文字列や検索キーワードを入力&lt;/li&gt;
&lt;li&gt;フィールドの指定：対象とするインデックス名、タイプ名、フィールド名を選択&lt;/li&gt;
&lt;li&gt;analyze：ボタンを押す&lt;/li&gt;
&lt;li&gt;トークナイズされた結果：入力文字列がどのようなトークンに分割されるか
&lt;ul&gt;
&lt;li&gt;start、end：入力文字列中の文字列の位置&lt;/li&gt;
&lt;li&gt;pos：トークンの位置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という形でElasticsearchが指定されたフィールドで入力文字をどのようにトークナイズしたかを確認することができます。&lt;/p&gt;
&lt;p&gt;Elasticsearchは内部でこのトークナイズされた単語を元に転置インデックスを作成し、検索に利用します。
ですので、特定のデータが検索に上手くヒットしないときに、この画面でデータの文字列をトークナイズしてみるといった用途に使えます。&lt;/p&gt;
&lt;p&gt;フィールドの設定がどのようにして入力文字列をトークンにしているかといった点については、今度のElasticsearch勉強会で話す予定です。&lt;/p&gt;
&lt;p&gt;フィールドの設定を利用する以外に、アナライザを指定してどのようにトークナイズされるかを見ることもできます。
「ANALYZE BYANALYZER」をクリックすると利用できます。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140409/kopf-analysis-analyzer.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140409/kopf-analysis-analyzer.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption align=&#34;center&#34;&gt;&lt;h4&gt;ANALYZE BY ANALYZER&lt;/h4&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;トークナイズしたい文字列を入力し、インデックス名と、インデックスに設定されているアナライザ名を選択してanalyzeボタンを押すと
結果が表示されます。
（例では、kuromojiアナライザを利用して出力になっています。また、出力結果のposの表示位置がFIELD TYPEの時と違うのが少し気になりました。）&lt;/p&gt;
&lt;p&gt;ただ、残念ながら、インデックスのマッピングで指定したアナライザしか利用できないみたいなので、
どのアナライザがどんな挙動かを調べたい場合は、以前紹介した&lt;a href=&#34;http://blog.johtani.info/blog/2013/09/23/intro-elasticsearch-inquisitor/&#34;&gt;elasticsearch-inquisitor&lt;/a&gt;を
利用したほうが良さそうです。&lt;/p&gt;
&lt;p&gt;ということで、今日はanalysis画面の説明でした。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>elasticsearch-kopfの紹介（rest画面）</title>
      <link>https://blog.johtani.info/blog/2014/04/07/intro-elasticsearch-kopf-rest/</link>
      <pubDate>Mon, 07 Apr 2014 11:24:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/04/07/intro-elasticsearch-kopf-rest/</guid>
      <description>今日はelasticsearch-kopfのREST画面の紹介です。 （簡単なところから。。。） メニューのrestを選択すると、次のような画面</description>
      <content:encoded>&lt;p&gt;今日はelasticsearch-kopfのREST画面の紹介です。&lt;/p&gt;
&lt;p&gt;（簡単なところから。。。）&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;メニューの&lt;code&gt;rest&lt;/code&gt;を選択すると、次のような画面が表示されます。&lt;/p&gt;
&lt;p&gt;Elasticsearch自体が、さまざまな操作をRESTでできる仕組みになっています。
検索にも利用しますが、それ以外の設定などにつてもリクエストを送ればOKです。&lt;/p&gt;
&lt;p&gt;ですので、リクエストや設定を自分で組み立てて送ることができる画面が用意されているととても便利です。
（もちろん、curlコマンドでもいいのですが、画面があると便利ですよね）&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.johtani.info/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140407/kopf-rest.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140407/kopf-rest.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption align=&#34;center&#34;&gt;&lt;h4&gt;REST画面&lt;/h4&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&#34;history&#34;&gt;History&lt;/h2&gt;
&lt;p&gt;履歴表示画面です。
これまで、kopfのrest画面を利用して送信したリクエストが一覧で表示されます。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;History&lt;/code&gt;という文字をクリックすることで、表示/非表示の切り替えが可能です。（最初は非表示）
マウスオーバーすると、リクエストボディがポップアップで表示されます。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140407/kopf-history.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140407/kopf-history.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption align=&#34;center&#34;&gt;&lt;h4&gt;History&lt;/h4&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;履歴にあるURLはクリック可能で、クリックすると実行されます。
履歴は&lt;code&gt;localStorage&lt;/code&gt;に保存されるみたいです。（ブラウザの仕様？あんまり詳しくないので。。。）
たぶん、30件が上限かと（ソースで確認しただけ）&lt;/p&gt;
&lt;h2 id=&#34;url&#34;&gt;URL&lt;/h2&gt;
&lt;p&gt;rest画面でリクエストを送信する先のURLを指定します。
メソッドは右側のSELECTで選択可能です。&lt;/p&gt;
&lt;p&gt;リクエストパラメータも指定が可能です。&lt;/p&gt;
&lt;h2 id=&#34;リクエストボディ&#34;&gt;リクエストボディ&lt;/h2&gt;
&lt;p&gt;検索や設定のJSONを記述するところです。
一応、JSON的にエラーがある場合は行数の左側にバツ印が出てきておかしなところもわかるようになっています。&lt;/p&gt;
&lt;p&gt;インデントなどは行ってくれますが、senseみたいな補完などはないので、少し辛いところです。&lt;/p&gt;
&lt;h2 id=&#34;レスポンス&#34;&gt;レスポンス&lt;/h2&gt;
&lt;p&gt;送信したリクエストに対するレスポンスが返ってきます。
インデントされた状態で表示されるので読みやすいかと。
また、入れ子になっているJSONについては、閉じたり開いたりすることも可能です。
（開始のカッコの右側に&lt;code&gt;-&lt;/code&gt;が表示されていて、クリックすると閉じることができます。閉じると&lt;code&gt;+&lt;/code&gt;に変わります）&lt;/p&gt;
&lt;p&gt;簡単ですが、rest画面の説明でした。
KOPFを使っていて、ちょっとしたクエリを送ったりするのには便利だと思います。&lt;/p&gt;
&lt;p&gt;複雑な検索クエリなどについては、やはりsenseを使うのが良いかと思いますが。。。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>elasticsearch-kopfの紹介（概要）</title>
      <link>https://blog.johtani.info/blog/2014/04/05/intro-elasticsearch-kopf-1/</link>
      <pubDate>Sat, 05 Apr 2014 23:18:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/04/05/intro-elasticsearch-kopf-1/</guid>
      <description>なんだか、ドタバタしてて久しぶりの更新です。 ベルリンの旅行記みたいなのも書きたいのですが、まずはこちらかと。 elasticsearch-ko</description>
      <content:encoded>&lt;p&gt;なんだか、ドタバタしてて久しぶりの更新です。
ベルリンの旅行記みたいなのも書きたいのですが、まずはこちらかと。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/lmenezes/elasticsearch-kopf&#34;&gt;elasticsearch-kopf&lt;/a&gt;プラグインの紹介です。&lt;/p&gt;
&lt;p&gt;今回は概要の説明だけになります。機能が結構多いので。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;elasticsearch-kopfとは&#34;&gt;elasticsearch-kopfとは？&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;_site&lt;/code&gt;プラグインの一つで、クラスタ管理用のプラグインになります。
&lt;code&gt;head&lt;/code&gt;プラグインや&lt;code&gt;HQ&lt;/code&gt;プラグインと同様です。&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.johtani.info/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140405/kopf.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140405/kopf.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption align=&#34;center&#34;&gt;&lt;h4&gt;プラグインの画面&lt;/h4&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;このようにシンプルな画面で、スッキリとしています。
緑を基調にした画面構成はElasticsearchの緑色を意識してるんでしょうか？&lt;/p&gt;
&lt;p&gt;上記の画像に簡単なコメントを入れてあります。&lt;/p&gt;
&lt;h3 id=&#34;メニュー&#34;&gt;メニュー&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;KOPF：KOPF自体の設定（接続先とリフレッシュインターバルの変更）&lt;/li&gt;
&lt;li&gt;cluster：クラスタ管理、情報（デフォルト表示画面）&lt;/li&gt;
&lt;li&gt;rest：RESTリクエスト送信、結果表示画面&lt;/li&gt;
&lt;li&gt;aliases：エイリアス管理&lt;/li&gt;
&lt;li&gt;analysis：&lt;code&gt;analysis API&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;percolator：パーコレータ管理&lt;/li&gt;
&lt;li&gt;warmup：ウォームアップクエリ管理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記のようなメニューです。各メニューについては、今後のブログで少しずつ紹介しようかと。
このメニューの色が、クラスタの状態も表しています。ステータスがYELLOWなら黄色、REDなら赤色に変わります。&lt;/p&gt;
&lt;h3 id=&#34;インデックス&#34;&gt;インデックス&lt;/h3&gt;
&lt;p&gt;インデックスは列として表示されます。先ほどの画像では、2つのインデックスが表示されている状態です。
インデックス毎に、シャードも表示されます。これは、各ノードがどのシャードを保持しているかという情報です。
色の濃いシャードがプライマリでしょう。
インデックス名やシャードの箱はクリックできるようになっていて、それぞれの情報がJSONで表示されます。
その他にもドキュメント数、サイズなども表示されます。
インデックスの各種操作（closeやdeleteなど）もここからメニューが表示されます。（これも次回詳しく）&lt;/p&gt;
&lt;h3 id=&#34;ノード&#34;&gt;ノード&lt;/h3&gt;
&lt;p&gt;ノードの情報が行として表示されます。ノードが増えると下に追加されていきます。
&lt;code&gt;node1&lt;/code&gt;というのが、ノード名です。（ヒーローの名前とかが出てくるやつです。）&lt;/p&gt;
&lt;p&gt;その他に、IPアドレス、ポート番号、負荷、ヒープサイズなども表示されています。
電源ボタンはノードのシャットダウンを行うためのボタンです。（確認用のダイアログが表示される）&lt;/p&gt;
&lt;h3 id=&#34;その他&#34;&gt;その他&lt;/h3&gt;
&lt;p&gt;その他に、クラスタの概要として、ノード数、インデックス数、シャード数、ドキュメント数なども表示されます。
インデックスの作成などは、アイコンから操作が可能です。
大規模なクラスタを管理している場合、検索ボックスを利用することで、インデックス名やノード名による絞込もできるようになっています。&lt;/p&gt;
&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;
&lt;p&gt;シンプルな構成の画面で、個人的には&lt;code&gt;head&lt;/code&gt;よりも好きな画面です。
&lt;code&gt;HQ&lt;/code&gt;よりもシャードの分散具合がわかりやすいので、今後はこのプラグインを利用していこうと考えています。&lt;/p&gt;
&lt;p&gt;まずは、簡単な紹介です。今後、各画面についてもう少し説明をブログに書いていこうかと考えています。
待てない方は、触ってみてもらうのが良いかと。
もちろん、続きを書いてもらってもいいですよ！！&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>ElasticSearch Server日本語版（電子版も）が発売されました</title>
      <link>https://blog.johtani.info/blog/2014/03/25/release-elasticsearch-server-ja-ebook/</link>
      <pubDate>Tue, 25 Mar 2014 13:43:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/03/25/release-elasticsearch-server-ja-ebook/</guid>
      <description>先日、「ElasticSearch Serverを翻訳しました」という記事を書きました。 この中で電子版も出ますよと書いていましたが、電子版も発</description>
      <content:encoded>&lt;p&gt;先日、「&lt;a href=&#34;http://blog.johtani.info/blog/2014/03/03/release-elasticsearch-server-japanese-edition/&#34;&gt;ElasticSearch Serverを翻訳しました&lt;/a&gt;」という記事を書きました。&lt;/p&gt;
&lt;p&gt;この中で電子版も出ますよと書いていましたが、電子版も発売されたので、再告知も兼ねてブログを書いています。&lt;/p&gt;
&lt;p&gt;なお、最近よく「ElasticsearchのSは小文字」とツイートしていますが、本書は原著のタイトルが「ElasticSearch Server」となっているため、Sは大文字になっています。原著が出版された時期にはまだSが小文字に統一されていなかったためです。&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.johtani.info/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:300&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140325/ess.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140325/ess.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- more --&gt;
&lt;p&gt;紙の書籍はすでに書店に並んでいたり、Amazonでも発送されているようです。&lt;/p&gt;
&lt;p&gt;私自身が電子書籍が場所を取らなくて好きというのもあり、電子版も出版していただけるようにお願いしていました。&lt;/p&gt;
&lt;p&gt;電子版についてはAmazonでKindle版、達人出版会からEPUBとPDFが購入可能です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tatsu-zine.com/books/elasticsearch-server&#34;&gt;達人出版会のElasitcSearch Serverのページ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/gp/product/B00J4KDYZU/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00J4KDYZU&amp;linkCode=as2&amp;tag=johtani-22&#34;&gt;AmazonのKindle版ページ&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=johtani-22&amp;l=as2&amp;o=9&amp;a=B00J4KDYZU&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;こちらのリンク（Amazonはアフィリンク）を参考にしていただければと。&lt;/p&gt;
&lt;p&gt;書籍の写真入りツイートしたら、原著者の方からレスを頂きました。&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://twitter.com/johtani&#34;&gt;@johtani&lt;/a&gt; Thanks for the great work out there :)&lt;/p&gt;&amp;mdash; Rafał Kuć (@kucrafal) &lt;a href=&#34;https://twitter.com/kucrafal/statuses/447668482587779072&#34;&gt;2014, 3月 23&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;また、原著者のサイトでも紹介してもらいました（結構うれしい）。
私が窓口をやっていた関係で、私の名前しか入っていませんが。。。
編集者と翻訳者の方々のお陰で良い本が出版できたと思っています。&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p&gt;Thanks for sharing! / ElasticSearch Server book in Japanese | ElasticSearch Server Book Blog &lt;a href=&#34;http://t.co/fhCP1vVBd3&#34;&gt;http://t.co/fhCP1vVBd3&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jun Ohtani (@johtani) &lt;a href=&#34;https://twitter.com/johtani/statuses/448098766457815040&#34;&gt;2014, 3月 24&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;ということで、Elasticsearchの導入の手助けになればと。
感想（賛否問わず）など、あればコメント、ツイート、ブログなど書いていただければうれしいです。
（その際に、連絡してもらえるとさらにうれしいです）&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>GOTO Night elasticsearchに参加しました</title>
      <link>https://blog.johtani.info/blog/2014/03/18/attend-goto-night-elasticsearch/</link>
      <pubDate>Tue, 18 Mar 2014 23:11:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/03/18/attend-goto-night-elasticsearch/</guid>
      <description>GOTO Night elasticsearchに参加しました。 初の海外の勉強会です（海外自体が初だし）。 ベルリンにあるWoogaという会社で開催された勉強会</description>
      <content:encoded>&lt;p&gt;&lt;a href=&#34;https://secure.trifork.com/berlin-2014/freeevent/index.jsp?eventOID=6151&#34;&gt;GOTO Night elasticsearch&lt;/a&gt;に参加しました。
初の海外の勉強会です（海外自体が初だし）。&lt;/p&gt;
&lt;p&gt;ベルリンにあるWoogaという会社で開催された勉強会です。&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.johtani.info/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:300&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140318/goto_night_elasticsearch.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140318/goto_night_elasticsearch.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- more  --&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p&gt;Full house at the &lt;a href=&#34;https://twitter.com/search?q=%23gotonight&amp;amp;src=hash&#34;&gt;#gotonight&lt;/a&gt; about &lt;a href=&#34;https://twitter.com/elasticsearch&#34;&gt;@elasticsearch&lt;/a&gt; in the auditorium of &lt;a href=&#34;https://twitter.com/wooga&#34;&gt;@wooga&lt;/a&gt; &lt;a href=&#34;http://t.co/r2Vx2aMcEn&#34;&gt;pic.twitter.com/r2Vx2aMcEn&lt;/a&gt;&lt;/p&gt;&amp;mdash; GOTO Berlin (@GOTOber) &lt;a href=&#34;https://twitter.com/GOTOber/statuses/445987339924684801&#34;&gt;2014, 3月 18&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;会場はこんな感じで、とってもおしゃれです。（なんか、写ってますね、最前列にｗ）
ベルリンの古い建物をリノベーションしたオフィスみたいで、そこにこういったひな壇を用意して発表するスペースにしているみたいです。&lt;/p&gt;
&lt;p&gt;内容としては、Elasticsearch1.0の新機能の話として、&lt;code&gt;snapshot/restore&lt;/code&gt;、&lt;code&gt;cat&lt;/code&gt;、&lt;code&gt;aggregation&lt;/code&gt;などの話題でした。簡単にどういったものかの説明です。&lt;/p&gt;
&lt;p&gt;一人目の発表が終わったら、ブレイクタイムとして上のフロアに用意されている軽食＋ドリンクで軽く交流の時間が用意されていました。
ベーグルなどのサンドイッチとハイネケンやクラブマテ？と呼ばれるチープなレッドブルとかが飲めました。&lt;/p&gt;
&lt;p&gt;ちょっと食べて談笑したあとに、次はLogstashとKibanaのお話でした。Logstashってどんなもの？という話がメインで、Kibanaは簡単な紹介という感じでしょうか。最後に、ライブデモがありました。
Kibanaを使ったライブデモはインパクトがあるなというのが感想です。
フィールド名の補完をしてくれたりと便利な機能が操作をしているところでわかるので。&lt;/p&gt;
&lt;p&gt;Youtubeなどでも見てても思っていた感想ですが、こちらの勉強会は質問が結構出てきます。
今日参加した勉強会も質疑応答が結構されてました。&lt;/p&gt;
&lt;p&gt;elasticsearchの方たちと少しだけ話しをできたので、かなり興奮気味でブログを書いています（ミーハー）。&lt;/p&gt;
&lt;p&gt;ただ、やっぱり英語のヒアリングがまだまだだなぁとも実感出来ました。
場数踏むしかないと思うので少しずつ耳にしてなれるしかないかなぁと。
はぁ、ちゃんと高校とか大学の頃に単語を覚えとくんだったと軽く後悔。&lt;/p&gt;
&lt;p&gt;こんなツイートもしてもらって、興奮気味です。明日早起きしないといけないので寝ないといけないのにｗ&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p&gt;Meeting &lt;a href=&#34;https://twitter.com/johtani&#34;&gt;@johtani&lt;/a&gt; finally in &lt;a href=&#34;https://twitter.com/search?q=%23berlin&amp;amp;src=hash&#34;&gt;#berlin&lt;/a&gt; watching &lt;a href=&#34;https://twitter.com/spinscale&#34;&gt;@spinscale&lt;/a&gt; talking about &lt;a href=&#34;https://twitter.com/search?q=%23elasticsearch&amp;amp;src=hash&#34;&gt;#elasticsearch&lt;/a&gt;&lt;/p&gt;&amp;mdash; Simon Willnauer (@s1m0nw) &lt;a href=&#34;https://twitter.com/s1m0nw/statuses/446001849750269952&#34;&gt;2014, 3月 18&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
</content:encoded>
    </item>
    
    <item>
      <title>いつも入れているElasticsearchのプラグイン</title>
      <link>https://blog.johtani.info/blog/2014/03/11/es-plugin-installed-to-my-env/</link>
      <pubDate>Tue, 11 Mar 2014 14:23:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/03/11/es-plugin-installed-to-my-env/</guid>
      <description>elasticsearchに、このへん入れるときっと幸せになれるはず・たぶん。&amp;#10;elasticsearch/elasticsearc</description>
      <content:encoded>&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p&gt;elasticsearchに、このへん入れるときっと幸せになれるはず・たぶん。&amp;#10;elasticsearch/elasticsearch-analysis-kuromoji/1.6.0&amp;#10;oyrusso/elasticsearch-HQ&amp;#10;mobz/elasticsearch-head&lt;/p&gt;&amp;mdash; toshi_miura (@toshi_miura) &lt;a href=&#34;https://twitter.com/toshi_miura/statuses/441230280041304066&#34;&gt;2014, 3月 5&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;こんなツイートを見かけたので、普段入れてるプラグインを簡単に紹介してみようかと。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;ローカルの環境に普段入れているプラグインの紹介です。
ちゃんとクラスタを管理しているというよりは、最新版の動作などを確認するための環境になります。なので、ちょっと視点が異なるかもしれませんが参考になればと。&lt;/p&gt;
&lt;h2 id=&#34;elasticsearch-analysis-kuromoji&#34;&gt;elasticsearch-analysis-kuromoji&lt;/h2&gt;
&lt;p&gt;URL : &lt;a href=&#34;https://github.com/elasticsearch/elasticsearch-analysis-kuromoji&#34;&gt;elasticsearch-analysis-kuromoji&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kuromojiという日本語形態素解析のTokenizerなどを使えるようにするためのプラグインです。
今度、発売される&lt;a href=&#34;http://www.amazon.co.jp/dp/4048662023?tag=johtani-22&amp;amp;camp=243&amp;amp;creative=1615&amp;amp;linkCode=as1&amp;amp;creativeASIN=4048662023&amp;amp;adid=072DC31D3GTPZCBQ6TYW&amp;amp;&amp;amp;ref-refURL=http%3A%2F%2Fblog.johtani.info%2Fblog%2F2014%2F03%2F03%2Frelease-elasticsearch-server-japanese-edition%2F&#34;&gt;「ElasticSearch Server」日本語版&lt;/a&gt;には付録として、利用方法を執筆しました。参考にしていただければと。
READMEにもサンプルは掲載されてるので、こちらを参考にするのもありですが。&lt;/p&gt;
&lt;h2 id=&#34;elasticsearch-extended-analyze&#34;&gt;elasticsearch-extended-analyze&lt;/h2&gt;
&lt;p&gt;URL : &lt;a href=&#34;https://github.com/johtani/elasticsearch-extended-analyze&#34;&gt;elasticsearch-extended-analyze&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;私が開発しているプラグインです。
Elasticsearchには&lt;code&gt;analyze&lt;/code&gt;というAPIが用意されています。
文章を渡すと指定した&lt;code&gt;analyzer&lt;/code&gt;などでどのような単語に区切られるかがわかるAPIです。&lt;/p&gt;
&lt;p&gt;ただ、&lt;code&gt;analyzer&lt;/code&gt;の内部では&lt;code&gt;char filter&lt;/code&gt;、&lt;code&gt;tokenizer&lt;/code&gt;、&lt;code&gt;token filter&lt;/code&gt;という個別のパーツがそれぞれ入力された文字列に対して処理を実施します。
この過程が&lt;code&gt;analyze&lt;/code&gt; APIではわかりません。
それをわかるようにしてみたのが&lt;code&gt;elasticsearch-extended-analyze&lt;/code&gt;プラグインになります。&lt;/p&gt;
&lt;p&gt;詳細については&lt;a href=&#34;http://blog.johtani.info/blog/2013/10/25/developing-es-extended-analyze-plugin/&#34;&gt;過去の記事&lt;/a&gt;を見ていただければと。
画面があると便利だよなぁと思いつつ、作ってない。。。&lt;/p&gt;
&lt;h2 id=&#34;polyfractalelasticsearch-inquisitor&#34;&gt;polyfractal/elasticsearch-inquisitor&lt;/h2&gt;
&lt;p&gt;URL : &lt;a href=&#34;https://github.com/polyfractal/elasticsearch-inquisitor&#34;&gt;elasticsearch-inquisitor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;クエリのデバッグとかに便利なプラグイン。&lt;/p&gt;
&lt;p&gt;こちらも詳細は&lt;a href=&#34;http://blog.johtani.info/blog/2013/09/23/intro-elasticsearch-inquisitor/&#34;&gt;過去の記事&lt;/a&gt;を見ていただければと。&lt;/p&gt;
&lt;h2 id=&#34;mobzelasticsearch-head&#34;&gt;mobz/elasticsearch-head&lt;/h2&gt;
&lt;p&gt;URL : &lt;a href=&#34;http://mobz.github.io/elasticsearch-head/&#34;&gt;elasticsearch-head&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;クラスタ管理に便利なプラグインです。クラスタに存在するノードに対してインデックスのデータ（シャード）がどこに配置されているかなどが一目瞭然になる便利なプラグインです。
プライマリシャードやレプリカなどもわかります。
インデックスの削除もできるし、クエリを投げることもできるし、全部入りな感じのプラグインです。&lt;/p&gt;
&lt;p&gt;私個人は、シャードの配置を見るのに主に利用しています。クエリを投げたりインデックスを消したりするのには殆ど使っていません。&lt;/p&gt;
&lt;h2 id=&#34;royrussoelasticsearch-hq&#34;&gt;royrusso/elasticsearch-HQ&lt;/h2&gt;
&lt;p&gt;URL : &lt;a href=&#34;https://github.com/royrusso/elasticsearch-HQ&#34;&gt;elasticsearch-HQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;これも管理系のプラグインです。こっちのほうが個人的にスッキリしていて好きなプラグインです。
インデックスの管理やノードの停止などはこちらを主に使用しています。
あくまでもローカルの簡易クラスタを管理する目的というのもあります。&lt;/p&gt;
&lt;h2 id=&#34;polyfractalelasticsearch-segmentspy&#34;&gt;polyfractal/elasticsearch-segmentspy&lt;/h2&gt;
&lt;p&gt;URL : &lt;a href=&#34;https://github.com/polyfractal/elasticsearch-segmentspy&#34;&gt;elasticsearch-segmentspy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;こちらはモニタリングでしょうか。
ElasticSearch Serverで紹介されていたのが主な理由で、入れてますがあんまり見てないかも。
インデックスのSegment単位の情報が見ることが可能です。
あと、ちょっと更新されてない感じがしますね。&lt;/p&gt;
&lt;h2 id=&#34;elasticsearchmarvel&#34;&gt;elasticsearch/marvel&lt;/h2&gt;
&lt;p&gt;Elasticsearch社から提供されている、モニタリングなどに使えるプラグインです。
開発環境では無償提供という感じです。
渡しの場合、モニタリング目的ではなく、senseと呼ばれるクエリの補完をしてくれるツールの目的のために使用しています。
モニタリング部分を停止する方法とかないかなぁ。&lt;/p&gt;
&lt;p&gt;詳細については&lt;a href=&#34;http://blog.johtani.info/blog/2014/01/29/simple-introduction-and-first-impression-es-marvel/&#34;&gt;過去の記事&lt;/a&gt;を参考にしていただければと。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ？&lt;/h2&gt;
&lt;p&gt;ということで、簡単にローカルに入っているプラグインの紹介でした。
他にもいっぱいあるので、おすすめがあれば、教えてもらえると助かります。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>ElasticSearch Serverを翻訳しました</title>
      <link>https://blog.johtani.info/blog/2014/03/03/release-elasticsearch-server-japanese-edition/</link>
      <pubDate>Mon, 03 Mar 2014 17:55:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/03/03/release-elasticsearch-server-japanese-edition/</guid>
      <description>第3回Elasticsearch勉強会で、軽く触れていましたが、ElasticSearch Server日本語版が発売されます。 ツイートなども</description>
      <content:encoded>&lt;p&gt;第3回Elasticsearch勉強会で、軽く触れていましたが、&lt;a href=&#34;http://www.amazon.co.jp/dp/4048662023?tag=johtani-22&amp;amp;camp=243&amp;amp;creative=1615&amp;amp;linkCode=as1&amp;amp;creativeASIN=4048662023&amp;amp;adid=1X58V7098G3T1N2ZTW61&amp;amp;&amp;amp;ref-refURL=http%3A%2F%2Fblog.johtani.info%2F&#34;&gt;ElasticSearch Server日本語版&lt;/a&gt;が発売されます。
ツイートなどもちらほらとして頂いているみたいで嬉しい限りです。&lt;/p&gt;
&lt;p&gt;本書は、私自身、初の翻訳本となります。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;なお、ElasticSearchはAWSのサービスではなく、全文検索・解析サーバのOSSです&lt;/strong&gt;&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;内容概要&#34;&gt;内容、概要&lt;/h2&gt;
&lt;p&gt;PacktPublishingから発売されている&lt;a href=&#34;http://www.packtpub.com/elasticsearch-server-for-fast-scalable-flexible-search-solution/book&#34;&gt;ElasticSearch Server&lt;/a&gt;の日本語版となります。
以下の点が、原著とは異なる点になっています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0.90.xに対応（原著は0.20）&lt;/li&gt;
&lt;li&gt;Kibana、Kuromojiに関して追記&lt;/li&gt;
&lt;li&gt;もちろん日本語&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;残念ながら、つい最近、Elasticsearchについては1.0がリリースされました。
1.0で追加された機能（SnapshotやRestore、Aggregatorなど）については触れていませんが、Elasticsearchの機能を網羅的にカバーした良書となっています。
どんな機能があるのか、どんなプラグインがあるのか、どういったことに使えるのかなど、幅広くまとめられた本になっていますので、
Elasticsearchに興味がある方はぜひ読んでいただければと思います。&lt;/p&gt;
&lt;p&gt;また、現段階では予定ですが電子版の出版も予定されています。電子版が気になる方は、少しお待ちいただければと。&lt;/p&gt;
&lt;h4 id=&#34;elasticsearchelasticsearch&#34;&gt;ElasticSearch？Elasticsearch？&lt;/h4&gt;
&lt;p&gt;1.0.0がリリースされた現在は、Elasticsearch（SearchのSは小文字）が正式な名称となっています。
ただ、原著が発売された当初（2013年2月時点）では、まだSは小文字と大文字が混在した状況でした（コミットログなどを見るとわかります。）
このため、日本語版でもElasticSearchという表記に統一してあります。&lt;/p&gt;
&lt;h2 id=&#34;翻訳に関して&#34;&gt;翻訳に関して&lt;/h2&gt;
&lt;p&gt;初の翻訳書ということもあり、大変でした。英語に精通しているわけではないので（むしろ苦手）。。。
他の翻訳者の方々には大変助けていただきましたし、勉強になりました。
また、監修社である&lt;a href=&#34;http://recruit-tech.co.jp&#34;&gt;リクルートテクノロジーズ&lt;/a&gt;にも色々とサポートしていただき、感謝の限りです。
（Elasticsearch勉強会の開場提供にも協力して頂いています。）&lt;/p&gt;
&lt;p&gt;わかりにくい日本語となっている部分などありましたら、ご指摘いただければ今後の参考にさせていただきます。
英語やElasticsearchについて、学ぶという目的もあって、本書の翻訳を買って出たのが本音です。&lt;/p&gt;
&lt;h3 id=&#34;翻訳作業について&#34;&gt;翻訳作業について&lt;/h3&gt;
&lt;p&gt;Githubのリポジトリを編集の方に用意してもらい、翻訳原稿を管理、校正していきました。
Github自体をあまり触っていなかったので、作業をしながらGithubも覚えられ一石二鳥でした。
Issueやプルリクエストによる校正、チェックも便利ですね。
他の原稿を書くようなことがあれば、またこの経験を活かしていきたいなと。
（翻訳の進め方や原稿のチェックなどについてはまた後日何か書こうかと。）&lt;/p&gt;
&lt;h3 id=&#34;原著について&#34;&gt;原著について&lt;/h3&gt;
&lt;p&gt;原著のサイトが用意されています。
&lt;a href=&#34;http://elasticsearchserverbook.com/elasticsearch-server-errata/&#34;&gt;http://elasticsearchserverbook.com/elasticsearch-server-errata/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原著を翻訳するにあたって見つけた、誤植などを報告し、掲載して頂いています。
原著をお持ちの場合はこちらも参考にしていただければと思います。&lt;/p&gt;
&lt;h3 id=&#34;ご購入はこちらから&#34;&gt;ご購入はこちらから&lt;/h3&gt;
&lt;p&gt;ということで、簡単ですが書籍の紹介（というより宣伝！？）でした。
Elasticsearchに関する何かしらの助けになる書籍であれば嬉しい限りです。&lt;/p&gt;
&lt;p&gt;「ElasticSearch Server日本語版」をよろしくお願いします。
（もちろん、購入は下のリンクからですよね！）&lt;/p&gt;
&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?t=johtani-22&amp;o=9&amp;p=8&amp;l=as1&amp;asins=4048662023&amp;nou=1&amp;ref=qf_sp_asin_til&amp;fc1=000000&amp;IS2=1&amp;lt1=_blank&amp;m=amazon&amp;lc1=0000FF&amp;bc1=000000&amp;bg1=FFFFFF&amp;f=ifr&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Nested Objectのフィールドの奇妙な動作</title>
      <link>https://blog.johtani.info/blog/2014/02/24/strange-behavior-of-field-in-nested-obj/</link>
      <pubDate>Mon, 24 Feb 2014 17:52:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/02/24/strange-behavior-of-field-in-nested-obj/</guid>
      <description>今年初の「突撃！隣のElasticsearch」ということで、Wantedlyさんにおじゃましました。 ※写真を自分でも撮ったのですが、画像が</description>
      <content:encoded>&lt;p&gt;今年初の「突撃！隣のElasticsearch」ということで、Wantedlyさんにおじゃましました。&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.johtani.info/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:300&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140224/wantedly.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140224/wantedly.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;※写真を自分でも撮ったのですが、画像が壊れてたので、一緒に行ったペンギン先生の写真を拝借しました。&lt;/p&gt;
&lt;p&gt;第3回のElasticsearch勉強会を開催中にES使ってるってツイートを見つけたので、アタックかけて遊びに行きました。
交渉に快諾いただきありがとうございました！&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;WantedlyさんがどのようにElasticsearchを使用されているかは&lt;strike&gt;&lt;strong&gt;きっと、ブログを書いてくれる&lt;/strong&gt;と思うので期待しておくとして、&lt;/strike&gt;書いてくれました！！ &lt;a href=&#34;http://engineer.wantedly.com/2014/02/25/elasticsearch-at-wantedly-1.html&#34;&gt;「実践！Elasticsearch」&lt;/a&gt;
そこで、&lt;code&gt;nested&lt;/code&gt;でハイライトがなんかうまくいかないって話があったので、ちょっと調べてみました。
&lt;em&gt;（※まだ、調査中です）&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;前提条件&#34;&gt;前提条件&lt;/h2&gt;
&lt;p&gt;再現する手順はgistにあります。（Senseに貼り付ければ動作します。ただし、elasticsearch-analysis-kuromojiが必要です。）https://gist.github.com/johtani/9184287&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;なお、このマッピングやデータはWantedlyさんとは全く関係ありません。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nested&lt;/code&gt;フィールド内部のデータに対して、検索しハイライトしようとするとうまく動作しないという状況です。
マッピングは以下のとおり。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;quot;books&amp;quot; : {
    &amp;quot;properties&amp;quot;: {
      &amp;quot;book&amp;quot; : {
        &amp;quot;type&amp;quot;: &amp;quot;nested&amp;quot;,
        &amp;quot;properties&amp;quot;: {
          &amp;quot;title&amp;quot; : { &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;, &amp;quot;analyzer&amp;quot;: &amp;quot;kuromoji&amp;quot;, &amp;quot;store&amp;quot;: &amp;quot;no&amp;quot;},
          &amp;quot;contents&amp;quot; : {&amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;, &amp;quot;analyzer&amp;quot;: &amp;quot;kuromoji&amp;quot;, &amp;quot;store&amp;quot;: &amp;quot;yes&amp;quot;}
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;このマッピングの特徴は以下のとおり。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_source&lt;/code&gt;は保存される（デフォルト値）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;book&lt;/code&gt;が&lt;code&gt;nested&lt;/code&gt;なオブジェクト&lt;/li&gt;
&lt;li&gt;&lt;code&gt;title&lt;/code&gt;は&lt;code&gt;store : no&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;contents&lt;/code&gt;は&lt;code&gt;store : yes&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;動作の挙動をわかりやすくするため、&lt;code&gt;title&lt;/code&gt;と&lt;code&gt;contents&lt;/code&gt;の&lt;code&gt;store&lt;/code&gt;属性に違いを持たせてあります。&lt;/p&gt;
&lt;h2 id=&#34;問題点&#34;&gt;問題点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;nested&lt;/code&gt;クエリを使って、検索した時にハイライトが返ってきません。
次のクエリを実行するとわかります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
GET /bookstore/books/_search
{
  &amp;quot;_source&amp;quot; : [&amp;quot;book.title&amp;quot;,&amp;quot;book.contents&amp;quot;],
  &amp;quot;fields&amp;quot;: [
    &amp;quot;book.title&amp;quot;,
    &amp;quot;book.contents&amp;quot;
  ], 
  &amp;quot;query&amp;quot;: {
    &amp;quot;nested&amp;quot;: {
      &amp;quot;path&amp;quot;: &amp;quot;book&amp;quot;,
      &amp;quot;query&amp;quot;: {
        &amp;quot;query_string&amp;quot; : {
          &amp;quot;query&amp;quot; : &amp;quot;Solr&amp;quot;,
          &amp;quot;fields&amp;quot; : [&amp;quot;book.title&amp;quot;, &amp;quot;book.contents&amp;quot;]
        }
      }
    }
  },
  &amp;quot;highlight&amp;quot;: {
    &amp;quot;pre_tags&amp;quot;: [&amp;quot;&amp;lt;b&amp;gt;&amp;quot;], 
    &amp;quot;post_tags&amp;quot;: [&amp;quot;&amp;lt;/b&amp;gt;&amp;quot;],
    &amp;quot;fields&amp;quot;: {
      &amp;quot;*&amp;quot;: {}
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;結果はこちら。
ハイライトがありません。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
   &amp;quot;took&amp;quot;: 3,
   &amp;quot;timed_out&amp;quot;: false,
   &amp;quot;_shards&amp;quot;: {
      &amp;quot;total&amp;quot;: 5,
      &amp;quot;successful&amp;quot;: 5,
      &amp;quot;failed&amp;quot;: 0
   },
   &amp;quot;hits&amp;quot;: {
      &amp;quot;total&amp;quot;: 1,
      &amp;quot;max_score&amp;quot;: 0.5,
      &amp;quot;hits&amp;quot;: [
         {
            &amp;quot;_index&amp;quot;: &amp;quot;bookstore&amp;quot;,
            &amp;quot;_type&amp;quot;: &amp;quot;books&amp;quot;,
            &amp;quot;_id&amp;quot;: &amp;quot;1&amp;quot;,
            &amp;quot;_score&amp;quot;: 0.5,
            &amp;quot;_source&amp;quot;: {
               &amp;quot;book&amp;quot;: {
                  &amp;quot;title&amp;quot;: &amp;quot;Apache Solr入門&amp;quot;,
                  &amp;quot;contents&amp;quot;: &amp;quot;Apache Solrについて日本語で書かれた唯一の書籍です。SolrはLuceneをコアにした検索サーバです。&amp;quot;
               }
            }
         }
      ]
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;次に、ハイライトが帰ってくるパターン。
&lt;code&gt;nested&lt;/code&gt;クエリではなく、&lt;code&gt;_all&lt;/code&gt;を対象としたクエリを投げます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;_source&amp;quot; : [&amp;quot;book.title&amp;quot;,&amp;quot;book.contents&amp;quot;],
  &amp;quot;fields&amp;quot;: [
    &amp;quot;book.title&amp;quot;,
    &amp;quot;book.contents&amp;quot;
  ], 
  &amp;quot;query&amp;quot;: {
    &amp;quot;query_string&amp;quot; : {
      &amp;quot;query&amp;quot; : &amp;quot;Solr&amp;quot;,
      &amp;quot;fields&amp;quot;: [
        &amp;quot;_all&amp;quot;
      ]
    }
  },
  &amp;quot;highlight&amp;quot;: {
    &amp;quot;pre_tags&amp;quot;: [&amp;quot;&amp;lt;b&amp;gt;&amp;quot;], 
    &amp;quot;post_tags&amp;quot;: [&amp;quot;&amp;lt;/b&amp;gt;&amp;quot;], 
    &amp;quot;fields&amp;quot;: {
      &amp;quot;book.title&amp;quot; : {},
      &amp;quot;book.contents&amp;quot;: {}
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;この場合の結果は次の通り。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
   &amp;quot;took&amp;quot;: 2,
   &amp;quot;timed_out&amp;quot;: false,
   &amp;quot;_shards&amp;quot;: {
      &amp;quot;total&amp;quot;: 5,
      &amp;quot;successful&amp;quot;: 5,
      &amp;quot;failed&amp;quot;: 0
   },
   &amp;quot;hits&amp;quot;: {
      &amp;quot;total&amp;quot;: 1,
      &amp;quot;max_score&amp;quot;: 0.27063292,
      &amp;quot;hits&amp;quot;: [
         {
            &amp;quot;_index&amp;quot;: &amp;quot;bookstore&amp;quot;,
            &amp;quot;_type&amp;quot;: &amp;quot;books&amp;quot;,
            &amp;quot;_id&amp;quot;: &amp;quot;1&amp;quot;,
            &amp;quot;_score&amp;quot;: 0.27063292,
            &amp;quot;_source&amp;quot;: {
               &amp;quot;book&amp;quot;: {
                  &amp;quot;title&amp;quot;: &amp;quot;Apache Solr入門&amp;quot;,
                  &amp;quot;contents&amp;quot;: &amp;quot;Apache Solrについて日本語で書かれた唯一の書籍です。SolrはLuceneをコアにした検索サーバです。&amp;quot;
               }
            },
            &amp;quot;highlight&amp;quot;: {
               &amp;quot;book.title&amp;quot;: [
                  &amp;quot;Apache &amp;lt;b&amp;gt;Solr&amp;lt;/b&amp;gt;入門&amp;quot;
               ]
            }
         }
      ]
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ハイライトが返ってきています。&lt;/p&gt;
&lt;h2 id=&#34;考察原因は未特定&#34;&gt;考察（原因は未特定）&lt;/h2&gt;
&lt;p&gt;残念ながら、まだ調査してません。
まずは、現象が理解できたというだけです。
問題点が実は２つありそうです。&lt;/p&gt;
&lt;h3 id=&#34;問題点１nestedクエリの場合にハイライトされない&#34;&gt;問題点１：&lt;code&gt;nested&lt;/code&gt;クエリの場合に、ハイライトされない。&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;nested&lt;/code&gt;クエリではハイライトが動作していないようです。
想像ですが、検索に利用されたクエリで指定されているフィールドをハイライタ（ハイライトを実行するモジュール）が認識できてないのではないかと。
なぜ認識できていないのかという点を調査する必要がありそうです。&lt;/p&gt;
&lt;h4 id=&#34;考察試してみたパターン&#34;&gt;考察（試してみたパターン）&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;nested&lt;/code&gt;ではないクエリで、ハイライトが動作しているのですが、&lt;code&gt;      &amp;quot;book.title&amp;quot; : {&amp;quot;require_field_match&amp;quot; : true},&lt;/code&gt;にした場合は、ハイライトが返ってこないです。
このオプションは、検索対象のフィールドでマッチした文字列だけがハイライトされるオプションになります。
したがって、&lt;code&gt;book.title&lt;/code&gt;フィールドに対する検索で&lt;code&gt;Solr&lt;/code&gt;という文字を検索していないことになります。
&lt;code&gt;_all&lt;/code&gt;に対するクエリであるためです。
このため、例えば、&lt;code&gt;title&lt;/code&gt;だけを検索対象にしたのに、&lt;code&gt;contents&lt;/code&gt;に&lt;code&gt;Solr&lt;/code&gt;という文字が入っていてもハイライトされてしまうという状況が発生します。&lt;/p&gt;
&lt;h3 id=&#34;問題点２-store--yesのデータがハイライトできない&#34;&gt;問題点２ &lt;code&gt;store : yes&lt;/code&gt;のデータがハイライトできない。&lt;/h3&gt;
&lt;p&gt;GithubにIssueをあげました。https://github.com/elasticsearch/elasticsearch/issues/5245 （2014/02/25追記）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nested&lt;/code&gt;オブジェクトにあるデータのうち、&lt;code&gt;store : no&lt;/code&gt;のものだけがハイライト結果として返ってきました。&lt;/p&gt;
&lt;h4 id=&#34;考察&#34;&gt;考察&lt;/h4&gt;
&lt;p&gt;なぜ、&lt;code&gt;store : yes&lt;/code&gt;のデータがハイライトされないかを調べるために、&lt;code&gt;fields&lt;/code&gt;パラメータをリクエストに追加してみました。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;_source&amp;quot; : [&amp;quot;book.title&amp;quot;,&amp;quot;book.contents&amp;quot;],
  &amp;quot;fields&amp;quot;: [
    &amp;quot;book.title&amp;quot;,
    &amp;quot;book.contents&amp;quot;
  ], 
...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;すると、&lt;code&gt;fields&lt;/code&gt;の戻り値は次のとおりです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
            &amp;quot;fields&amp;quot;: {
               &amp;quot;book.title&amp;quot;: [
                  &amp;quot;Apache Solr入門&amp;quot;
               ]
            },
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;このことから、&lt;code&gt;store : no&lt;/code&gt;のデータの場合、&lt;code&gt;_source&lt;/code&gt;から値を取得して返却しているというのがわかります。
ハイライトがされない原因も、&lt;code&gt;fields&lt;/code&gt;で値が取れていないのも同じ原因であると思われます。
なぜなら、ハイライトは、保存された文字列を内部で取り出し利用して、ハイライトタグを埋め込むという動作をするためです。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考？&lt;/h2&gt;
&lt;p&gt;これらの問題点についてですが、次のIssueが関係あるかもしれません。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/issues/3022&#34;&gt;Return matching nested inner objects per hit #3022&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;今後&#34;&gt;今後？&lt;/h2&gt;
&lt;p&gt;残念ながら、現時点では、問題点がどんなものかというのを理解しただけとなります。
デバッグしたりソースを追っかけたりして何が問題なのかを調べて行ってみようかなぁと。&lt;/p&gt;
&lt;p&gt;なにか、気づいたことなどあればコメントしてもらえると助かります。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>第3回elasticsearch勉強会を開催しました！ #elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2014/02/08/hold-3rd-elasticsaerch-meetup-in-tokyo/</link>
      <pubDate>Sat, 08 Feb 2014 00:42:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/02/08/hold-3rd-elasticsaerch-meetup-in-tokyo/</guid>
      <description>今回はたまたま日本にいたElasticsearchの人をスペシャルゲストに呼べたので、大満足ですｗ 英語の通訳とかちゃんと勉強しないとなぁ。。</description>
      <content:encoded>&lt;p&gt;今回はたまたま日本にいたElasticsearchの人をスペシャルゲストに呼べたので、大満足ですｗ
英語の通訳とかちゃんと勉強しないとなぁ。。。&lt;/p&gt;
&lt;p&gt;とりあえず、てきとーなメモですが、残しておきます。
参加者数は130人＋スタッフ＋リクルートテクノロジーズ社内の人。という感じでした。アンケート集計はもう少々おまちを。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;スライドがそろったら、また、更新すると思いますが、第一報という感じで公開しておきます。
懇親会にも50名も参加していただけて、非常に楽しかったです。
話ができてない方が多数いるかもしれませんが、次回以降、声をかけていただければと。
（物覚え悪いんで、あれですが。。。）
盛り上がってきてて楽しいなぁ。
スタッフの人達の練度も上がってきてるので、すごく楽ができてます。&lt;/p&gt;
&lt;p&gt;至らない点とかあれば、こちらにコメントしてもらったりしていただければと。&lt;/p&gt;
&lt;h2 id=&#34;geohashing-with-elasticsearch&#34;&gt;Geohashing with Elasticsearch&lt;/h2&gt;
&lt;h3 id=&#34;florian-schilling-elasticsearch-inc&#34;&gt;Florian Schilling, Elasticsearch Inc,&lt;/h3&gt;
&lt;p&gt;スライド：https://speakerdeck.com/chilling/tokyo-es-study-session-iii-geohashes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自己紹介
&lt;ul&gt;
&lt;li&gt;Geoのスタッフ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Elsticsearchの概要
&lt;ul&gt;
&lt;li&gt;転置イデックスやREST APIなどの説明
マイクの調子が良くなくて申し訳なかったっす。。。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;平賀さん、通訳ありがとう！
Solr本もよろしくお願いします！！&lt;/p&gt;
&lt;h2 id=&#34;awsで構築するsharding&#34;&gt;AWSで構築するsharding&lt;/h2&gt;
&lt;h3 id=&#34;株式会社イプロス外山寛さんtoyama0919&#34;&gt;株式会社イプロス　外山　寛さん　@toyama0919&lt;/h3&gt;
&lt;p&gt;スライド：http://toyama0919.bitbucket.org/elasticsearch.html&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AWS対応の話&lt;/li&gt;
&lt;li&gt;ルーティングが重要だよ。（宣伝ありがとうございますｗ）&lt;/li&gt;
&lt;li&gt;type指定しないとルーティングできない。（内部でtypeも使ってハッシュ値取ってたかなぁ？）&lt;/li&gt;
&lt;li&gt;苦労話とかいくつか。&lt;/li&gt;
&lt;li&gt;tireはre-tire&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;実サービスでのelasticsearch設定使用例仮&#34;&gt;実サービスでのElasticsearch設定・使用例（仮）&lt;/h2&gt;
&lt;h3 id=&#34;株式会社じげん多田-雅斗さんtady_jp&#34;&gt;株式会社じげん　多田 雅斗さん　@tady_jp&lt;/h3&gt;
&lt;p&gt;スライド：https://speakerdeck.com/tadyjp/tesutoqu-dong-jian-suo-falsesusume-at-tady-jp&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;検索とは的な話がわかりやすい。&lt;/li&gt;
&lt;li&gt;全文検索のお話。ログ検索じゃないよと。&lt;/li&gt;
&lt;li&gt;書籍ないですよねー（ふふふ）&lt;/li&gt;
&lt;li&gt;specで検索条件記述しといて、ってのいいですよね。絶対必要だと思う&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mapping変更した時にテストやり直す方法とかどうしてますか？
特にフレームワークは使ってないです。&lt;/p&gt;
&lt;h2 id=&#34;mysqlユーザ視点での小さく始めるelasticsearch&#34;&gt;MySQLユーザ視点での、小さく始めるElasticsearch&lt;/h2&gt;
&lt;h3 id=&#34;株式会社リブセンス-吉田-健太郎さん-yoshi_ken&#34;&gt;株式会社リブセンス 吉田 健太郎さん @yoshi_ken&lt;/h3&gt;
&lt;p&gt;スライド：http://www.slideshare.net/y-ken/introducing-elasticsearch-for-mysql-users&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;やっぱりkuromoji便利だよね&lt;/li&gt;
&lt;li&gt;MySQLとかと連携したい。&lt;/li&gt;
&lt;li&gt;river-pluginもいまいち安定しない&lt;/li&gt;
&lt;li&gt;なので、&lt;a href=&#34;https://github.com/y-ken/yamabiko&#34;&gt;Yamabiko&lt;/a&gt;作ってみました。&lt;/li&gt;
&lt;li&gt;Geo検索とKuromojiの話をしてくれました。（作者とか開発者がいるってのを狙ってたのかすごいなぁ。）&lt;/li&gt;
&lt;li&gt;Mappingとかはちゃんと指定したほうがいろいろいいですよ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nodejsdynamodbelasticsearchで全社基盤を作った話&#34;&gt;nodeJS+DynamoDB＋Elasticsearchで全社基盤を作った話&lt;/h2&gt;
&lt;h3 id=&#34;株式会社リクルートテクノロジーズ-相野谷-直樹さん-naokiainoya&#34;&gt;株式会社リクルートテクノロジーズ 相野谷 直樹さん @naokiainoya&lt;/h3&gt;
&lt;p&gt;スライド：http://www.slideshare.net/recruitcojp/elasticsearchnodejsdynamodb-7&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ちょっと変わった使い方のElasticsearchで面白いです。&lt;/li&gt;
&lt;li&gt;Scroll/Scanについては、Solrでもない機能なので、そういう意味でもElasticsearchなのかもしれないですね。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参加していただいた方々のブログ&#34;&gt;参加していただいた方々のブログ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第3回elasticsearch勉強会 [2014/02/07(Fri.)]に参加してきました - ほわいとぼーど&lt;br&gt;
&lt;a href=&#34;http://a3no.hatenablog.com/entry/2014/02/09/022405&#34;&gt;http://a3no.hatenablog.com/entry/2014/02/09/022405&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第 3 回 elasticsearch 勉強会に行ってきた - ようへいの日々精進&lt;br&gt;
&lt;a href=&#34;http://inokara.hateblo.jp/entry/2014/02/07/233057&#34;&gt;http://inokara.hateblo.jp/entry/2014/02/07/233057&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.smokeymonkey.net/2014/02/3elasticsearch.html&#34;&gt;http://www.smokeymonkey.net/2014/02/3elasticsearch.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第3回elasticsearch勉強会でトークしました #elasticsearchjp&lt;br&gt;
&lt;a href=&#34;http://y-ken.hatenablog.com/entry/elasticsearch-meetup-vol3&#34;&gt;http://y-ken.hatenablog.com/entry/elasticsearch-meetup-vol3&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第3回elasticsearch勉強会にいってきました #elasticsearchjp&lt;br&gt;
&lt;a href=&#34;http://blog.livedoor.jp/ashibuya0128/archives/52058766.html&#34;&gt;http://blog.livedoor.jp/ashibuya0128/archives/52058766.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
    </item>
    
    <item>
      <title>すずけんさんのメモを元にVagrantでElasticsearchクラスタを起動してみた</title>
      <link>https://blog.johtani.info/blog/2014/02/06/es-cluster-start-using-vagrant-and-puppet/</link>
      <pubDate>Thu, 06 Feb 2014 23:09:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/02/06/es-cluster-start-using-vagrant-and-puppet/</guid>
      <description>すずけんさんがVagrant+puppet使って、VM起動してElasticsearchのクラスタを組んでる記事を書いているのを見て、試して</description>
      <content:encoded>&lt;p&gt;すずけんさんがVagrant+puppet使って、VM起動してElasticsearchのクラスタを組んでる記事を書いているのを見て、試してみたくなりました。
ということで、VagrantとかPuppetなに？くらいの私ですが、クラスタを起動するところまで行ったので、その時のメモを残しておきます。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;元記事とか参考&#34;&gt;元記事とか参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://suzuken.hatenablog.jp/entry/2014/02/04/215959&#34;&gt;Vagrant環境にpuppet moduleを利用してさくっとelasticsearchをインストールする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://suzuken.hatenablog.jp/entry/2014/02/05/232543&#34;&gt;Vagrant環境にpuppetを利用してさくっとelasticsearchのclusterを作成する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/elasticsearch/puppet-elasticsearch&#34;&gt;puppet-elasticsearch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;なんとなくの理解&#34;&gt;なんとなくの理解&lt;/h2&gt;
&lt;p&gt;VagrantやPuppetについては、何度か勉強会で話を聞いてはいたのですが、
想像していたレベルだったので良い機会でした。
今のところの認識はこんな感じです。&lt;/p&gt;
&lt;h3 id=&#34;vagrant&#34;&gt;Vagrant&lt;/h3&gt;
&lt;p&gt;VMを起動したり、VM周りの設定をあれこれできるツール。
VMのネットワーク設定や、インスタンス名？などを指定できる。&lt;/p&gt;
&lt;h3 id=&#34;puppet&#34;&gt;Puppet&lt;/h3&gt;
&lt;p&gt;起動後のVM（VMとは限らないか。）のゲストOS側の設定周りやアプリのインストールなどを
実行できるツール。&lt;/p&gt;
&lt;h2 id=&#34;詰まった箇所&#34;&gt;詰まった箇所&lt;/h2&gt;
&lt;p&gt;すずけんさんのブログを元に作業をしましたが、自分がVagrantやPuppetに疎いため、以下の部分で躓いたので、備忘録のために残しておきました。&lt;/p&gt;
&lt;h3 id=&#34;その１puppetのファイルの場所&#34;&gt;その１：Puppetのファイルの場所&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;search01.vm.local&lt;/code&gt;のVMを設定（というか、elasticsearchのインストール？）するときに、&lt;code&gt;manifests/search.app&lt;/code&gt;と&lt;code&gt;roles/search/manifests/init.pp&lt;/code&gt;ファイルが必要で作成します。&lt;/p&gt;
&lt;p&gt;このファイルの配置場所は&lt;code&gt;/vagrant&lt;/code&gt;配下に作成する必要がありました。
&lt;code&gt;ssh search01.vm.local&lt;/code&gt;でVMにログインした場合は&lt;code&gt;/home/vagrant&lt;/code&gt;にログインしており、この場所でファイルを作ってもPuppetがエラーを吐いたためです。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;と思ったのですが&lt;/strong&gt;、あれ？これひょっとしてVagrantfileがあるところにディレクトリとファイル作ると勝手にVMにコピーしてくれるんですか？destroyして、upしたら、ファイルが勝手にコピーされてる。ひょっとして、&lt;code&gt;/vagrant&lt;/code&gt;ってディレクトリはVagrantfileがあるディレクトリを共有してたりするのかな？そのうち、Vagrantについても調べてみようかな。&lt;/p&gt;
&lt;h3 id=&#34;その２ネットワーク周り&#34;&gt;その２：ネットワーク周り&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;curl http://192.168.10.114:9200/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;をホストOSから実行してみましたがうまく行きませんでした。。。
ネットワーク周りの設定だと思うんですが。
少なくとも「sshによるログイン」「ping」コマンドの応答は返ってきてます。&lt;/p&gt;
&lt;p&gt;また、VM内でcurlコマンドを実行したらレスポンスが返ってきました。&lt;/p&gt;
&lt;p&gt;なんで？ってツイートしたら各所から「iptables」という単語が飛んできて、
service止めたら大正解でした。まぁ、そうですよね。基本ですよね。。。&lt;/p&gt;
&lt;p&gt;ということで、Puppetがよくわかっていませんが、ググって変更してみました。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;manifests/search.app&lt;/code&gt;に以下を追加&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;include iptables
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;roles/iptables/manifests/init.pp&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class iptables {
  service { &#39;iptables&#39;:
    enable =&amp;gt; false,
    ensure =&amp;gt; stopped,
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;iptablesを停止するmanifests？です（良くないことなんですが、よくわかってない）。&lt;/p&gt;
&lt;p&gt;ということで、ローカルで1個のVM起動して、elasticsearchにアクセスできることは確認できました。&lt;/p&gt;
&lt;p&gt;と、書いてるそばから、元記事が修正されてしまいましたｗ&lt;/p&gt;
&lt;h2 id=&#34;クラスタ編変更点&#34;&gt;クラスタ編（変更点）&lt;/h2&gt;
&lt;p&gt;クラスタを組むときに、追加でプラグインを入れたので&lt;code&gt;roles/search/manifests/init.pp&lt;/code&gt;は次のようにしました。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class search {
  class { &#39;elasticsearch&#39;:
    package_url =&amp;gt; &#39;https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-1.0.0.RC2.noarch.rpm&#39;,
    java_install =&amp;gt; true,
    config =&amp;gt; {
      &#39;cluster&#39; =&amp;gt; {
        &#39;name&#39; =&amp;gt; &#39;test-es-cluster&#39;
      },
      &#39;network.host&#39; =&amp;gt; &#39;_eth1:ipv4_&#39;,,
      &#39;marvel.agent.exporter.es.hosts&#39; =&amp;gt; [&#39;192.168.10.114:9200&#39;,&#39;192.168.10.115:9200&#39;]
    }
  }

  elasticsearch::plugin{&#39;elasticsearch/marvel/latest&#39;:
    module_dir =&amp;gt; &#39;marvel&#39;
  }

  elasticsearch::plugin{&#39;mobz/elasticsearch-head&#39;:
    module_dir =&amp;gt; &#39;head&#39;
  }

  elasticsearch::plugin{&#39;royrusso/elasticsearch-HQ&#39;:
    module_dir =&amp;gt; &#39;HQ&#39;
  }

  elasticsearch::plugin{&#39;elasticsearch/elasticsearch-analysis-kuromoji/2.0.0.RC1&#39;:
    module_dir =&amp;gt; &#39;analysis-kuromoji&#39;
  }

  elasticsearch::plugin{&#39;info.johtani/elasticsearch-extended-analyze/1.0.0.RC1&#39;:
    module_dir =&amp;gt; &#39;extended-analyze&#39;
  }

  elasticsearch::plugin{&#39;polyfractal/elasticsearch-inquisitor&#39;:
    module_dir =&amp;gt; &#39;inquisitor&#39;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;とりあえず、今日はクラスタ組んでMarvelやプラグインの動作確認でおしまいです。&lt;/p&gt;
&lt;h2 id=&#34;疑問点&#34;&gt;疑問点&lt;/h2&gt;
&lt;p&gt;いくつか疑問点が。試してみてもないんでなんとも言えませんが。気が向いたら、調べて追記するかも。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:private_network&lt;/code&gt;はVirtualBox内で完結する（Macから外には影響しない）ネットワークが構築される？たぶん、VagrantというよりはVM、仮想化周りの知識なんだろうけど&lt;/li&gt;
&lt;li&gt;どこから再開可能？elasticsearch.ymlの設定を書き換えた場合に、最後のコマンドだけ実行するとちゃんとやりなしてくれたりするのかな？&lt;/li&gt;
&lt;li&gt;VMのディスク増やすのもVagrantでできるんかな？まぁ、できると思うけど。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:forwarded_port&lt;/code&gt;のauto_correctとかわかってない。&lt;/li&gt;
&lt;li&gt;JVMをSunのJVMでかつ、7u25に変更したいのだがどうしたものか？(現時点での推奨バージョン)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;
&lt;p&gt;Vagrantって便利ですね。あれ？って思ったら、destroyして、やり直すのがすごく簡単です。
元記事があるので、なんとなくですが、構成とかどうすればいいかがわかるのは本当に助かりました。
これで、あれこれと検証する環境が簡単に構築できることがわかったので、色々と楽できるかも。ありがとうございます、すずけんさん！&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch Marvelの紹介と第一印象</title>
      <link>https://blog.johtani.info/blog/2014/01/29/simple-introduction-and-first-impression-es-marvel/</link>
      <pubDate>Wed, 29 Jan 2014 17:14:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/01/29/simple-introduction-and-first-impression-es-marvel/</guid>
      <description>昨晩、Elasticsearchから初のプロダクトとなるMarvelがリリースされました。ということで、さっそく触ってみて、簡単な紹介と感想</description>
      <content:encoded>&lt;p&gt;昨晩、Elasticsearchから初のプロダクトとなるMarvelがリリースされました。ということで、さっそく触ってみて、簡単な紹介と感想を書いてみました。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;marvelって&#34;&gt;Marvelって？&lt;/h2&gt;
&lt;p&gt;Elasticsearch社が初のプロダクトとしてリリースした、Elasticsearchクラスタモニタリングツールです。
次のような特徴があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;plugin形式で提供&lt;/li&gt;
&lt;li&gt;GUIがKibana
&lt;ul&gt;
&lt;li&gt;メトリックスはElasticsearchに保存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SenseがChrome以外でも使える&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;プロダクション環境で利用する場合は有料ですが、開発用途では無料で利用できます。
現時点(2014/01/29)では、&lt;code&gt;0.90.9&lt;/code&gt;以上のバージョン(1.0.0.RC1含む)で利用が可能です。&lt;/p&gt;
&lt;h2 id=&#34;なにができるの&#34;&gt;なにができるの？&lt;/h2&gt;
&lt;p&gt;Elasticsearchクラスタに関するメトリックスを保存、可視化できるプロダクトです。
ドキュメント数やJVMの状況、クラスタの状態など、いろいろなメトリックスが保存されます。&lt;/p&gt;
&lt;p&gt;保存先は、別のElasticsearchクラスタにすることも可能です。
お試しでインストールして見る場合は、同一クラスタにサービスに利用するインデックスとMarvel用のメトリックス保存先インデックスを入れても良いです。&lt;/p&gt;
&lt;p&gt;ただ、プロダクション環境では、Marvel用インデックスはあくまでもモニタリングに使用するため、サービスのクラスタへの影響を最小にしたくなります。&lt;/p&gt;
&lt;p&gt;このような場合、Marvelのプラグインの設定を変更することで、メトリックス送信用のエージェントとして動作させることができます。&lt;/p&gt;
&lt;p&gt;詳しくは、Marvelのドキュメントにある&lt;a href=&#34;http://www.elasticsearch.org/guide/en/marvel/current/#_installing_a_secondary_monitoring_cluster&#34;&gt;installing a secondary monitoring cluster&lt;/a&gt;を御覧ください。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;del&gt;1/29 16時時点で、上記ドキュメントのエージェントの送信先の設定に関する部分に誤記がありました。&lt;/del&gt;
&lt;del&gt;おそらく、&lt;a href=&#34;http://www.elasticsearch.org/guide/en/marvel/current/#_statistics_exporting&#34;&gt;configuration options&lt;/a&gt;の記述が正だと思います。&lt;/del&gt;
もう、なおってました。(1/30朝時点)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;キャプチャいろいろ&#34;&gt;キャプチャいろいろ&lt;/h2&gt;
&lt;p&gt;日本語WikipediaのデータをRiverで登録しながら各画面の動作などを見てみました。&lt;/p&gt;
&lt;h4 id=&#34;marvel-overview&#34;&gt;Marvel Overview&lt;/h4&gt;
&lt;p&gt;日本語WikipediaをRiverで登録してる途中。Loadが高くなってることなどがわかります。&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.johtani.info/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140129/Marvel_Overview_indexing_wikipedia_river.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140129/Marvel_Overview_indexing_wikipedia_river.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h4 id=&#34;overview-クラスタの状態が変化&#34;&gt;Overview (クラスタの状態が変化)&lt;/h4&gt;
&lt;p&gt;クラスタの状態が変化したところに、タグが付くみたいです。
ここでは、ノードの一つを停止、起動しました。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140129/tgged_event.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140129/tgged_event.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;インデックス終了後に、クラスタを再起動してしまい、クラスタ内のシャードの再配置が実行されてしまったため、クラスタの状態がYellowになってしまうとこんな感じ。ちょっとわかりにくいです。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140129/cluster_yellow.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140129/cluster_yellow.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h4 id=&#34;sense&#34;&gt;Sense&lt;/h4&gt;
&lt;p&gt;Chromeプラグインとしてリリースされていたクエリ実行コンソールがMarvelのサイトプラグインとして提供されています。これがあるだけで、Elasticsearchへのクエリの実行が格段に効率良くなります。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140129/Marvel_sense.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140129/Marvel_sense.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h4 id=&#34;index-statistics&#34;&gt;Index Statistics&lt;/h4&gt;
&lt;p&gt;インデックスに関する情報のグラフが見れるページです。ドキュメント数の他に、容量やリクエスト数なども見れます。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140129/Marvel_Index_Statistics.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140129/Marvel_Index_Statistics.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;インデックス終了後のグラフはこんな感じ。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140129/after_twice_indexing_ja_wikipedia.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140129/after_twice_indexing_ja_wikipedia.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;インデックス終了後のOverviewはこんなかんじです。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140129/after_indexing_ja_wikipedia.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140129/after_indexing_ja_wikipedia.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h4 id=&#34;cluster-pulse&#34;&gt;Cluster Pulse&lt;/h4&gt;
&lt;p&gt;クラスタで発生したイベントとイベントの詳細を見ることができるページです。各種インデックスがYELLOWからGREENに変わっていっているのがmessageで分かります。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140129/after_reboot_cluster_pulse.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140129/after_reboot_cluster_pulse.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;すべて再配置が終わったらGREENになりました。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140129/finish_recovering_all_indices.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140129/finish_recovering_all_indices.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h4 id=&#34;node-statistics&#34;&gt;Node Statistics&lt;/h4&gt;
&lt;p&gt;各ノードに関する情報を見ることができる画面です。
ノードごとにグラフの色を分けることもできます。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140129/two_node_in_nodes_stats.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140129/two_node_in_nodes_stats.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h4 id=&#34;その他&#34;&gt;その他&lt;/h4&gt;
&lt;p&gt;Marvelプラグインにブラウザから接続できなくなるとこんなメッセージが出ました。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140129/connect_error.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140129/connect_error.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;参考までに、&lt;a href=&#34;https://github.com/mobz/elasticsearch-head&#34;&gt;elasticsearch-head&lt;/a&gt;の画面も。こちらのほうが、シャードの再配置中であるのがひと目で分かります。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20140129/elasticsearch-head.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20140129/elasticsearch-head.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;
&lt;p&gt;綺麗です。まぁ、Kibanaが綺麗ですから。
クラスタ内で発生したイベントが時系列で保存されるため、あとからどんなことが発生したのかといった原因の追求などには非常に役に立ちそうです。&lt;/p&gt;
&lt;p&gt;ただ、インデックスの状態や状況（クラスタ再起動やノード追加時にshard再配置などが実行されている状況とか）はelasticsearch-headのほうがわかりやすかったです。
インデックス単位でのStatusがMarvelの画面ではわからないため、shard再配置が完了したかどうかなどのタイミングがわかりにくかったです。&lt;/p&gt;
&lt;p&gt;ある程度、多くのノードを利用したクラスタを利用する場合に、モニタリングツールとして利用するのは便利なのではないでしょうか？
時系列でログやイベントが保存されるので、ノードが追加されたり外れたりといった状況があとからでも追跡可能なのが便利です。&lt;/p&gt;
&lt;h2 id=&#34;疑問点&#34;&gt;疑問点&lt;/h2&gt;
&lt;p&gt;インデックスの情報などは、5s毎にMarvelのインデックスに保存されているようです。ただ、GUI上では5分毎のデータしか表示されません。
どうやって変更するんだろう？&lt;/p&gt;
&lt;p&gt;また、Marvelのクラスタへの接続が切れた時のデータはどうなるのか？という部分も気になります。Marvelのクラスタを更新している時や、ネットワークが遮断されてしまった場合のデータがどうなるのかという点です。&lt;/p&gt;
&lt;h2 id=&#34;疑問点への回答20140130追記&#34;&gt;疑問点への回答(2014/01/30追記)&lt;/h2&gt;
&lt;p&gt;疑問点に対して中の人から回答を頂いたので、追記です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Q：GUI上で5分毎のデータしか表示されないんですが？
&lt;ul&gt;
&lt;li&gt;A：ブラウザの負荷を高くしないようにするために、1つのグラフに20のプロットしてるだけです。ズームしたりすると、もっと細かなデータが見れますよ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q：Marvelのクラスタへの接続が切れた時のデータはどうなるんだろう？
&lt;ul&gt;
&lt;li&gt;A：接続が切れた場合は、ローカルに保存されるけどデータは無視されます。接続が戻ると、戻った後のデータは記録されていきます。将来的には改善するかも。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ちなみに、昨日試してた環境が、足元Linux環境（監視対象のクラスタ）＋手元Mac環境（Marvelモニタリングデータ格納クラスタ）という環境でした。
確かに、出社してから、手元Mac環境を起動すると、データが流れてくるようになりました。
ただ、監視対象のクラスタでは、socket timeoutのログがずっと出てましたが。&lt;/p&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.elasticsearch.com/blog/introducing-elasticsearch-marvel-native-monitoring-deployments/&#34;&gt;リリースブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.elasticsearch.com/marvel&#34;&gt;プロダクトページ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.elasticsearch.org/guide/en/marvel/current/&#34;&gt;ドキュメント&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Curator: 時系列インデックスの管理(日本語訳)</title>
      <link>https://blog.johtani.info/blog/2014/01/24/curator-tending-your-time-series-indices-in-japanese/</link>
      <pubDate>Fri, 24 Jan 2014 14:48:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/01/24/curator-tending-your-time-series-indices-in-japanese/</guid>
      <description>Elasticsearchのcuratorのブログ記事を読んで、日本語でツイートしたところ、Aaron Mildensteinさんから日本語（</description>
      <content:encoded>&lt;p&gt;Elasticsearchのcuratorの&lt;a href=&#34;http://www.elasticsearch.org/blog/curator-tending-your-time-series-indices/&#34;&gt;ブログ記事&lt;/a&gt;を読んで、日本語でツイートしたところ、Aaron Mildensteinさんから日本語（ローマ字）で返信を頂きました。
せっかくなので、ブログ記事を翻訳してもいいかを尋ねたところ、快くOKを頂いたので、翻訳してみました。参考になればと。（誤訳など見つけたらコメントください。）&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://twitter.com/johtani&#34;&gt;@johtani&lt;/a&gt; Kore no hou ga ii. Nihongo de no Curator RT, arigatou gozaimasu! &lt;a href=&#34;https://twitter.com/search?q=%23elasticsearch&amp;amp;src=hash&#34;&gt;#elasticsearch&lt;/a&gt; &lt;a href=&#34;https://twitter.com/search?q=%23curator&amp;amp;src=hash&#34;&gt;#curator&lt;/a&gt; &lt;a href=&#34;https://twitter.com/search?q=%23logstash&amp;amp;src=hash&#34;&gt;#logstash&lt;/a&gt;&lt;/p&gt;&amp;mdash; Aaron Mildenstein (@theuntergeek) &lt;a href=&#34;https://twitter.com/theuntergeek/statuses/426009968513277952&#34;&gt;2014, 1月 22&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;curator-時系列インデックスの管理&#34;&gt;curator: 時系列インデックスの管理&lt;/h2&gt;
&lt;p&gt;原文：&lt;a href=&#34;http://www.elasticsearch.org/blog/curator-tending-your-time-series-indices/&#34;&gt;curator: tending your time-series indices&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;数年前、Elasticsearch、Logstash、Kibana(ELK)を管理し、ここ30日よりも古いインデックスを自動的に削除する方法を必要としていました。
APIドキュメントを読み、#logstashや#elasticsearchのIRCチャネルのコミュニティの助けを借りて、簡単なスクリプトとcronを用意するのが簡単であることを知りました。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -XDELETE &#39;localhost:9200/logstash-2014.01.01?pretty&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;もちろん、これも動作しますが、日付を生成するのがめんどくさいのでもっとエレガントな方法が欲しかったです。&lt;/p&gt;
&lt;h2 id=&#34;最初に&#34;&gt;最初に&lt;/h2&gt;
&lt;p&gt;pythonでスクリプトを書き始めました。特定の日数のインデックスを管理するだけのコマンドラインクリーナーを書いてコミュニティにシェアしました。他の人が、新しい機能を追加してくれました。私は、古いインデックスをoptimizeすることができる他のスクリプトも書きました。これは、シャードごとにnセグメント以上存在しないように各シャードのセグメントをマージすることです。これらのスクリプトで1つになるようにマージしたりエンハンスし、古いインデックスを管理する助けになるツールです。&lt;/p&gt;
&lt;h2 id=&#34;curatorの紹介&#34;&gt;curatorの紹介&lt;/h2&gt;
&lt;p&gt;Curatorで可能なインデックスオペレーション&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;削除（日付もしくは、トータル容量による制限）&lt;/li&gt;
&lt;li&gt;インデックスのクローズ(Close)&lt;/li&gt;
&lt;li&gt;bloom filter cacheの無効化&lt;/li&gt;
&lt;li&gt;Optimize(LuceneのforceMerge)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;curatorのインストール&#34;&gt;curatorのインストール&lt;/h2&gt;
&lt;p&gt;この記事を書いている時点で、Curator は0.5.1がリリースされ、0.90.10に対応しています。Curatorはまた、Elasticsearchの1.0(現在はRC1)へも対応しています。各リリースへの互換性の保証のためのテストも行っています。&lt;/p&gt;
&lt;p&gt;現時点では、gitリポジトリで配布しています。近い将来、pipによるインストール可能なパッケージにする予定です。利用することを恐れないでください。もし、pythonとpipがあなたのマシンにインストールされていれば、次のようにインストールは簡単です。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/elasticsearch/curator.git
pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;インストール後の確認は次のコマンドです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./curator.py -v
curator.py 0.5.1
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;利用方法とサンプル&#34;&gt;利用方法とサンプル&lt;/h3&gt;
&lt;p&gt;サンプルを示す前に、&lt;a href=&#34;#arguments&#34;&gt;オプションを見ておくとよいでしょう&lt;/a&gt;。このリストは長いですが（この記事の最後に含まれています）、どのようなことがコントロールできるかを説明しています。デフォルトがどうなっているかに注意してください。もし、デフォルト値で良い場合は、フラグを指定する必要はありません。&lt;/p&gt;
&lt;p&gt;では、簡単なサンプルを見ながら、CuratorがELKスタックをどうやって管理するかを見て行きましょう。&lt;/p&gt;
&lt;h3 id=&#34;削除delete&#34;&gt;削除(delete)&lt;/h3&gt;
&lt;p&gt;90日以上のインデックスを保存したくないとしましょう。コマンドは次のようになります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curator.py --host my-elasticsearch -d 90
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;-d&lt;/code&gt;で日数を指定しているだけです。簡単でしょ？&lt;/p&gt;
&lt;h4 id=&#34;容量による削除delete-by-space&#34;&gt;容量による削除(delete by space)&lt;/h4&gt;
&lt;p&gt;これは、指定したギガバイト数を超えたインデックスを場合に(最も古いものから)削除を行う特殊なケースです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curator.py --host my-elasticsearch -C space -g 10024
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;-C&lt;/code&gt;でspaceによるcurationであること、&lt;code&gt;-g&lt;/code&gt;でギガバイト数(10024、10TB)であることを指定しているのがわかります。&lt;code&gt;-g&lt;/code&gt;は1.5や0.5という数値を指定できます。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;その他のCuratorオプションは&lt;code&gt;space&lt;/code&gt;による削除と組み合わせて使用できないことに注意してください。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;クローズclose&#34;&gt;クローズ(close)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-open-close.html&#34;&gt;Open/Close Index API&lt;/a&gt;により、インデックスをクローズすることができます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;open/close index APIを利用すると、インデックスをクローズしたり、あとでオープンしたりすることができます。クローズされたインデックスはクラスタのオーバヘッドにほとんどならず(メタデータの管理を除く)、読み書き操作の妨げにもなりません。クローズされたインデックスは、リカバリプロセス時に、オープンされます。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;インデックスをクローズすることは、存在はするが検索できないという意味です。何が便利なのでしょう？&lt;/p&gt;
&lt;p&gt;90日のインデックスを保存する義務があるが、検索は過去30日のインデックスを対象にする以外は稀であるような場合を想像してください。このような状況で、価値のあるリソース(ヒープスペースなど)を節約するためにインデックスをクローズすることができます。これは、クラスタに検索やインデキシングのためのメモリを与えることができることを意味します。そして、もし、クローズしたインデックスのデータが必要になったら、APIを呼び出してインデックスをオープンすれば検索できます。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;このような場合、今オープンしているインデックスが再び、クローズされないように、一時的にCuratorのスケジュール実行をオフにしておくのが懸命です。&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curator.py --host my-elasticsearch -c 30 -d 90
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;先ほど説明した例の実行方法です。これは、30日よりも古いインデックスはクローズし、90日より古いインデックスを削除します。本当に簡単でしょ？&lt;/p&gt;
&lt;h3 id=&#34;bloom-filterの無効化&#34;&gt;bloom filterの無効化&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/issues/4525&#34;&gt;これは、0.90.9以降のバージョンで利用可能な機能です。(リンク先はIssue #4525)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;心配しないでください。このスクリプトは操作を行う前に、elasticsearchが利用可能なバージョンであるかをチェックします。&lt;/p&gt;
&lt;p&gt;bloom filterとは何でしょう？なぜ、無効化したくなるのでしょう？&lt;/p&gt;
&lt;p&gt;bloom filterはインデキシング操作を高速化するためにリソースを割り当てられます。時系列データで、インデキシングしている間もこれは有用です。インデックスは2日後には、日付が変わると新しいデータはおそらくインデックスされません。そのインデックスにはもはや必要のないリソースをbloom filterはまだ持っています。Curatorはこれらのリソースを開放することができます！&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curator.py --host my-elasticsearch -b 2 -c 30 -d 90
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これで、bloom filterのリソースは少なくとも2日(1にもできます)よりも古いインデックスについては利用せず、30日より古いインデックスはクローズし、90より古いインデックスは削除します。&lt;/p&gt;
&lt;h3 id=&#34;optimizeというよりもforcemerge&#34;&gt;optimizeというよりもforcemerge&lt;/h3&gt;
&lt;p&gt;コマンドの説明をする前に、&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-optimize.html&#34;&gt;Elasticsearch APIのoptimize&lt;/a&gt;を見ることは、生きているインデックスや&amp;quot;cold&amp;quot;インデックス(インデキシングがアクティブではないという意味)に実行する必要があるということを理解するために重要です。実際、&lt;a href=&#34;http://blog.trifork.com/2011/11/21/simon-says-optimize-is-bad-for-you/&#34;&gt;optimizeはLuceneではforceMergeと名前が変えられ&lt;/a&gt;、インデックスを改善するためにoptimizeを呼び出す必要はなくなりました。Elasticsearchのセグメントをマージすることは利点がありますが、coldインデックス全てに対してoptimizeを開始する前に、コストを理解する必要があります。&lt;/p&gt;
&lt;p&gt;forceMerge操作はインデックスにある各シャードのセグメントの数を少なくします。各セグメントはオーバヘッドがあるため、セグメントが多いということは、より多くのリソースを使うという意味です。良さそうですね？リソースが少ない？&lt;/p&gt;
&lt;p&gt;それは、可能ですが、merge操作を実行するには多くのディスクやネットワークI/Oが必要で、ディスクやクラスタの通常の書き込み操作に悪影響を及ぼします。もし、これが必要なら私のアドバイスを良く考えてください。(数％ほど)検索を速くし、リソースの使用量も減らすことができます。また、管理しているセグメント数が小さくなるということは、クラスタのリカバリを速くすることにもなります。1つのインデックスをoptimizeするためにはおそらく1時間以上の時間がかかります。「使用する前に目立たない場所で試してください」というクリーニングボトル(訳注：洗剤とか漂白剤かな？)の注意書きと同様に、ディスクI/Oが低い時にテストし、もし操作とリソースがあなたのクラスタのユースケースにあっているかを見てください。デフォルトでは、シャードごとに2つのセグメントにマージしますが、&lt;code&gt;--max_num_segments&lt;/code&gt;フラグで変更可能です。&lt;/p&gt;
&lt;p&gt;ここまでのサンプルは次のようなコマンドになります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curator.py --host my-elasticsearch -b 2 -o 2 -c 30 -d 90
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これで、bloom filterは2日より古いインデックスでは向こうにし、2日より古いインデックスは&amp;quot;optimize&amp;quot;し、30日より古いインデックスはクローズし、90日より古いインデックスは削除されます。&lt;/p&gt;
&lt;h3 id=&#34;操作の順序&#34;&gt;操作の順序&lt;/h3&gt;
&lt;p&gt;スクリプトは操作が衝突するのを防ぐために次の順序で実行されます。なぜ、クローズされたインデックスはoptimizeしないのでしょう？なぜ、削除予定のインデックスはクローズされないのでしょう？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Delete (by space or time)&lt;/li&gt;
&lt;li&gt;Close&lt;/li&gt;
&lt;li&gt;Disable bloom filters&lt;/li&gt;
&lt;li&gt;Optimize&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;使用の検討&#34;&gt;使用の検討&lt;/h3&gt;
&lt;p&gt;最後の例で、3つの操作を1つのコマンドで実行していますが、それらが連続ですべて実行されるのを望んでいないかもしれません。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curator.py --host my-elasticsearch -b 2 -o 2 -c 30 -d 90
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これは、次の操作と同様です。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curator.py --host my-elasticsearch -d 90
$ curator.py --host my-elasticsearch -c 30
$ curator.py --host my-elasticsearch -b 2
$ curator.py --host my-elasticsearch -o 2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これらのコマンドを異なる時間に実行したり、異なるその他のオプション(特に、optimize実行で&lt;code&gt;--timeout 3600&lt;/code&gt;を追加したり)を指定して実行するのは簡単です。&lt;/p&gt;
&lt;p&gt;また、デフォルトの&lt;code&gt;logstash-&lt;/code&gt;とは異なるプレフィックスのインデックスを持っているかもしれません。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curator.py --host my-elasticsearch --prefix logstash- -d 30
$ curator.py --host my-elasticsearch --prefix othername- -d 30
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;最後に&#34;&gt;最後に&lt;/h2&gt;
&lt;p&gt;Curatorは時系列インデックスの保存ポリシーを管理するのに役立ちます。豊富な設定オプションがインデックスを管理することを簡単にします。クラスタに存在するノードの数に関係なく。&lt;a href=&#34;https://github.com/elasticsearch/curator&#34;&gt;https://github.com/elasticsearch/curator&lt;/a&gt;へのフィードバックやコントリビューションをお待ちしています！&lt;/p&gt;
&lt;h4 id=&#34;a-namearguments参考全引数とオプション&#34;&gt;&lt;a name=&#34;arguments&#34;&gt;参考(全引数とオプション)&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ curator.py -h
usage: curator.py [-h] [-v] [--host HOST] [--port PORT] [-t TIMEOUT]
                  [-p PREFIX] [-s SEPARATOR] [-C CURATION_STYLE]
                  [-T TIME_UNIT] [-d DELETE_OLDER] [-c CLOSE_OLDER]
                  [-b BLOOM_OLDER] [-g DISK_SPACE]
                  [--max_num_segments MAX_NUM_SEGMENTS] [-o OPTIMIZE] [-n]
                  [-D] [-l LOG_FILE]

Curator for Elasticsearch indices. Can delete (by space or time), close,
disable bloom filters and optimize (forceMerge) your indices.

optional arguments:
  -h, --help            show this help message and exit
  -v, --version         show program version number and exit
  --host HOST           Elasticsearch host. Default: localhost
  --port PORT           Elasticsearch port. Default: 9200
  -t TIMEOUT, --timeout TIMEOUT
                        Elasticsearch timeout. Default: 30
  -p PREFIX, --prefix PREFIX
                        Prefix for the indices. Indices that do not have this
                        prefix are skipped. Default: logstash-
  -s SEPARATOR, --separator SEPARATOR
                        Time unit separator. Default: .
  -C CURATION_STYLE, --curation-style CURATION_STYLE
                        Curate indices by [time, space] Default: time
  -T TIME_UNIT, --time-unit TIME_UNIT
                        Unit of time to reckon by: [days, hours] Default: days
  -d DELETE_OLDER, --delete DELETE_OLDER
                        Delete indices older than n TIME_UNITs.
  -c CLOSE_OLDER, --close CLOSE_OLDER
                        Close indices older than n TIME_UNITs.
  -b BLOOM_OLDER, --bloom BLOOM_OLDER
                        Disable bloom filter for indices older than n
                        TIME_UNITs.
  -g DISK_SPACE, --disk-space DISK_SPACE
                        Delete indices beyond n GIGABYTES.
  --max_num_segments MAX_NUM_SEGMENTS
                        Maximum number of segments, post-optimize. Default: 2
  -o OPTIMIZE, --optimize OPTIMIZE
                        Optimize (Lucene forceMerge) indices older than n
                        TIME_UNITs. Must increase timeout to stay connected
                        throughout optimize operation, recommend no less than
                        3600.
  -n, --dry-run         If true, does not perform any changes to the
                        Elasticsearch indices.
  -D, --debug           Debug mode
  -l LOG_FILE, --logfile LOG_FILE
                        log file
&lt;/code&gt;&lt;/pre&gt;</content:encoded>
    </item>
    
    <item>
      <title>Extended-Analyze 1.0.0RC1をリリースしました</title>
      <link>https://blog.johtani.info/blog/2014/01/22/release-extended-plugin-for-1-0-0rc1/</link>
      <pubDate>Wed, 22 Jan 2014 00:16:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/01/22/release-extended-plugin-for-1-0-0rc1/</guid>
      <description>あけましておめでとうございます。今年もSolrやElasticsearchについて色々と頑張っていく所存です。 とまぁ、お決まりの挨拶はおいて</description>
      <content:encoded>&lt;p&gt;あけましておめでとうございます。今年もSolrやElasticsearchについて色々と頑張っていく所存です。
とまぁ、お決まりの挨拶はおいておいてと。(もう、新年も22日ですが。。。)&lt;/p&gt;
&lt;p&gt;Elasticsearchの1.0.0RC1がリリースされました。
ということで、私が作っている&lt;a href=&#34;https://github.com/johtani/elasticsearch-extended-analyze&#34;&gt;Extended-Analyzeプラグイン&lt;/a&gt;も1.0.0RC1向けに修正してリリースしました。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;100rc1向けに修正したこと&#34;&gt;1.0.0RC1向けに修正したこと&lt;/h2&gt;
&lt;p&gt;コミットログを見てもらえば、いいのですが、ロジック自体は変更しなくても良かったです。&lt;/p&gt;
&lt;p&gt;ただ、正式に、Elasticsearchのつづりが決定したようで、クラス名が「ElasticSearchほげほげ」から、「Elasticsearchほげほげ」と、SearchのSが小文字になりっています。
この影響で、例外クラスなどの名称を幾つか変更しました。
また、バージョン番号を1.0.0RC1とし、0.x系をElasticsearchの0.90系向けのバージョンにしていく予定です。&lt;/p&gt;
&lt;p&gt;今後は、UIを追加したいと思っているので、Elasticsearchのバージョン番号とはずれてくるとは思いますが。。。&lt;/p&gt;
&lt;h2 id=&#34;elasticsearch-100rc1を利用してみて&#34;&gt;Elasticsearch 1.0.0RC1を利用してみて&lt;/h2&gt;
&lt;p&gt;1点だけですが。
これまでは、&lt;code&gt;-f&lt;/code&gt;オプションを指定すると、デーモンではない動作で起動できていました。（デフォルトがデーモン起動）&lt;/p&gt;
&lt;p&gt;これが、1.0.0から（0.90の最新もかな？詳しく見ていない）デフォルトの挙動が変更され、デーモン起動ではなくなりました。
代わりに、&lt;code&gt;-d&lt;/code&gt;オプションを指定することで、デーモン起動ができるようになりました。&lt;/p&gt;
&lt;p&gt;これで、手元でうっかりデーモン起動することがなくなって、ひと安心です。（他の人は困るかもしれないけど）&lt;/p&gt;
&lt;h2 id=&#34;ということで&#34;&gt;ということで&lt;/h2&gt;
&lt;p&gt;1.0.0RC1が出たので、少しずつ1.0系で追加されたAPIや機能について、ブログで紹介していけたらと思います。&lt;/p&gt;
&lt;p&gt;こんなこと調べてよ？、これわかんないんだけど？などありましたら、コメントいただければと。
気が向いたら記事を書くので。&lt;/p&gt;
&lt;p&gt;あと、&lt;a href=&#34;https://github.com/johtani/elasticsearch-extended-analyze&#34;&gt;Extended-Analyzeプラグイン&lt;/a&gt;の感想などもお待ちしています！&lt;/p&gt;
&lt;p&gt;今年もよろしくお願いします！&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 0.90.8がリリースされました＆注意点（2013/12/20追記）</title>
      <link>https://blog.johtani.info/blog/2013/12/20/release-elasticsearch-0-90-8/</link>
      <pubDate>Fri, 20 Dec 2013 16:24:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/12/20/release-elasticsearch-0-90-8/</guid>
      <description>昨夜、Elasticsearchの0.90.8がリリースされました。 リリースされた内容などについては、本家のブログ「0.90.8 releas</description>
      <content:encoded>&lt;p&gt;昨夜、Elasticsearchの0.90.8がリリースされました。&lt;/p&gt;
&lt;p&gt;リリースされた内容などについては、本家のブログ「&lt;a href=&#34;http://www.elasticsearch.org/blog/0-90-8-released/&#34;&gt;0.90.8 released&lt;/a&gt;」をご覧いただくこととして。
1点注意したほうが良い点があります。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch-analysis-kuromoji&#34;&gt;elasticsearch-analysis-kuromoji&lt;/a&gt;を利用している場合は、0.90.8に対応したバージョンがリリースされるのを待つ必要があります。&lt;/p&gt;
&lt;p&gt;elasticsearch 0.90.8はLuceneのバージョンが4.6.0に変更されています。
Lucene 4.6.0では、TokenStreamというTokenizerのI/Fに変更があり、Tokenizerの実装を変更する必要があります。&lt;/p&gt;
&lt;p&gt;現時点（2013年12月19日現在）のelasticsearch-analysis-kuromojiの1.6.0にはlucene-analyzers-kuromoji-4.5.1.jarが含まれており、この部分でI/Fが異なるためエラーが発生してしまいます。
プラグインをインストールする時点ではエラーは発生せず、実際にKuromojiのTokenizerやAnalyzerを利用するタイミングでエラーが出ます。
以下、0.90.8にanalysis-kuromojiの1.6.0をインストールした状態で&lt;code&gt;_analyze&lt;/code&gt;を実行した時のエラー。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -XPOST &#39;localhost:9200/_analyze?tokenizer=kuromoji_tokenizer&amp;amp;filters=kuromoji_baseform&amp;amp;pretty&#39; -d &#39;寿司が美味しかった&#39;
{
  &amp;quot;error&amp;quot; : &amp;quot;IllegalStateException[TokenStream contract violation: reset()/close() call missing, reset() called multiple times, or subclass does not call super.reset(). Please see Javadocs of TokenStream class for more information about the correct consuming workflow.]&amp;quot;,
  &amp;quot;status&amp;quot; : 500
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ということで、1.7.0がリリースされるのを待つか、自分で&lt;code&gt;mvn package&lt;/code&gt;してビルドする必要があります。
他にも独自でTokenizerなどを造られている方は注意が必要かと。&lt;/p&gt;
&lt;p&gt;たぶん、すぐにリリースされるんじゃないかなぁと。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2013/12/20追記&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;とりあえず、masterブランチが0.90.8に変更されたみたいです。(と書いてるそばから、1.7.0がリリースされました)
ということで、0.90.8では1.7.0を使うとエラーが出ないです。
（あと、踊り字対応のcharfilterも追加されたみたいです）&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>elasticsearch-extended-analyzeプラグインをMavenとSonatypeにリリース</title>
      <link>https://blog.johtani.info/blog/2013/12/17/release-es-extended-analyze-plugin-to-maven-and-sonatype/</link>
      <pubDate>Tue, 17 Dec 2013 12:11:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/12/17/release-es-extended-analyze-plugin-to-maven-and-sonatype/</guid>
      <description>ども。 プラグインのインストールに長いURL入れるの辛いですよね？ね？ ということで、MavenでリリースしてMaven Repositoryから</description>
      <content:encoded>&lt;p&gt;ども。
プラグインのインストールに長いURL入れるの辛いですよね？ね？&lt;/p&gt;
&lt;p&gt;ということで、MavenでリリースしてMaven Repositoryからダウンロードできるようにしてみました。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;流れとしては&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sonatypeにリリースできるように申請する&lt;/li&gt;
&lt;li&gt;Sonatypeにリリースする&lt;/li&gt;
&lt;li&gt;SonatypeからMavenにSyncしてもらう&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という流れです。&lt;/p&gt;
&lt;p&gt;Sonatypeにリリースするための方法はイケメンの人(@yusuke)がブログに簡単ですが残してくれてました。
あと、こちらの@vvakameさんのブログも参考にしながら作業しました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://samuraism.jp/diary/2012/05/03/1336047480000.html&#34;&gt;【最新版】Maven Central Repository へのライブラリ登録方法 #maven&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/vvakame/20120507#1336411831&#34;&gt;JsonPullParser が Maven Central Repository に入るようです&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pom.xmlについては、プラグインのpom.xmlを参考にしてもらえればと。
1.の作業が終わったら、リリースを実行します。&lt;/p&gt;
&lt;p&gt;この時、&lt;code&gt;&amp;lt;scm&amp;gt;&lt;/code&gt;タグにgithubの情報が記載されているため（？）、githubにタグを打つ作業もmavenコマンドがやってくれるみたいです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mvn release:prepare
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;を実行すると、リリースするバージョンやタグ名などを聞いてくれます。
それらに答えると、pom.xmlにバージョンを指定してcommit&amp;amp;pushしてくれ、タグも打ってくれます。（なんて便利）&lt;/p&gt;
&lt;p&gt;その後、&lt;code&gt;release:perform&lt;/code&gt;にてSonatypeへのリリースが完了します。
あとは、Sonatypeの画面で作業したら、Mavenのリポジトリにそのうち同期してくれます。&lt;/p&gt;
&lt;p&gt;ということで、次のコマンドを実行すればプラグインがインストールできるようになりました。0.6.0と0.7.0の違いは実装には差異はありません。リリース方法が変更されただけということになります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bin/plugin -i info.johtani/elasticsearch-extended-analyze/0.7.0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これで少しは活用してもらえるようになるかなぁ？
（どのくらいの人が使ってくれてるのかは不明。。。）&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>elasticsearch-extended-analyzeを公開？</title>
      <link>https://blog.johtani.info/blog/2013/11/14/release-elasticsearch-extended-analyze-0-dot-5/</link>
      <pubDate>Thu, 14 Nov 2013 17:55:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/11/14/release-elasticsearch-extended-analyze-0-dot-5/</guid>
      <description>どーも。以前の記事で開発中としていたプラグインですが、とりあえず、pluginコマンドでインストール出来る形にしてみました。 インストールなど</description>
      <content:encoded>&lt;p&gt;どーも。以前の記事で開発中としていたプラグインですが、とりあえず、pluginコマンドでインストール出来る形にしてみました。&lt;/p&gt;
&lt;p&gt;インストールなどについては、&lt;a href=&#34;https://github.com/johtani/elasticsearch-extended-analyze&#34;&gt;READMEに記載した&lt;/a&gt;のでそちらを参照してもらうことにして、試行錯誤した話をメモとして残しておきます。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;プラグインの開発はしいてたのですが、やっぱりpluginコマンドでインストール出来ないと使ってもらえないよなということで、勉強会も終わったのでちょっと調べてました。&lt;/p&gt;
&lt;h2 id=&#34;プラグインコマンド&#34;&gt;プラグインコマンド&lt;/h2&gt;
&lt;p&gt;コマンドが用意されてますが、実態はJavaで実装されてて、通常はこんなかんじでプラグインをインストールします。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./bin/plugin -i elasticsearch/elasticsearch-analysis-kuromoji/1.6.0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;この「&lt;code&gt;elasticsearch/elasticsearch-analysis-kuromoji/1.6.0&lt;/code&gt;」という文字列ですが、「&lt;code&gt;ユーザ名/リポジトリ名/バージョン&lt;/code&gt;」という意味になります。&lt;/p&gt;
&lt;p&gt;で、ダウンロードするURLは以下のものの中から選ばれます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;elasticsearch.orgのダウンロード用サイト&lt;/li&gt;
&lt;li&gt;search.maven.org&lt;/li&gt;
&lt;li&gt;oss.sonatype.org&lt;/li&gt;
&lt;li&gt;Githubのarchive&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらのサイトに先ほどのユーザ名、リポジトリ名、バージョンを利用したURLを組み立てて、ダウンロードしてくれるという仕組みになっています。&lt;/p&gt;
&lt;p&gt;elasticsearch.orgについては、本家の人しかアップロードできないと思うので、なし。&lt;br&gt;
maven、sonatypeについては、Mavenのリポジトリにリリースする必要があるんじゃないかなと。
で、昔&lt;strike&gt;調べて&lt;/strike&gt;ググって途中で挫折したんですが、挫折してます。手順が結構手間で。。。
（参考記事：&lt;a href=&#34;http://samuraism.jp/diary/2012/05/03/1336047480000.html&#34;&gt;【最新版】Maven Central Repository へのライブラリ登録方法 #maven&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;ということで、Githubにアップしたらなんとかなるんじゃん？ということで色々と調査して試してみました。（結果はイマイチなんですが。。。）&lt;/p&gt;
&lt;h2 id=&#34;その１mvn-releaseprepare&#34;&gt;その１：mvn release:prepare&lt;/h2&gt;
&lt;p&gt;せっかくGithubだし、せっかくMavenなんだしなんか、pom.xmlに便利な設定したらコマンド一発でリリースできるんじゃない？という甘い気持ちで&lt;strike&gt;調査した&lt;/strike&gt;ググったらそれっぽい記事が見つかりました。
「&lt;a href=&#34;http://www.kanasansoft.com/weblab/2009/11/integration_between_maven_and_github.html&#34;&gt;MavenとGitHubの連携&lt;/a&gt;」って記事です。&lt;br&gt;
で、pom.xmlの設定にも他のプラグインを真似してコピペしたものに&lt;code&gt;&amp;lt;scm&amp;gt;&lt;/code&gt;ってタグがあったなぁと。このコマンドでついでにGithubにアップロードできるんじゃないの？ということで、試してみました。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mvn release:prepare
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;このコマンドを叩くと、記事にあるとおりにいくつか質問をされます。
タグについては、&lt;code&gt;プロジェクト名-バージョン番号&lt;/code&gt;という文字列がデフォルトだと指定されているので、&lt;code&gt;v0.5&lt;/code&gt;と変更して実施してみると、Githubのreleaseにv0.5ってのができてるじゃないですか。&lt;br&gt;
※&lt;code&gt;plugin&lt;/code&gt;コマンドはGithubを見に行く時に次のファイルをダウンロードしに行きます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://github.com/ユーザ名/リポジトリ名/archive/vバージョン名.zip
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;やった！と思い、早速pluginコマンドを実行してみましたが、エラーが出ました。。。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Trying https://github.com/johtani/elasticsearch-extended-analyze/archive/v0.5.zip...
Downloading ...DONE
Installed johtani/elasticsearch-extended-analyze/0.5 into /Users/johtani/projects/tmp/ess_env/second_node/elasticsearch-0.90.7/plugins/extended-analyze
Usage:
    -u, --url     [plugin location]   : Set exact URL to download the plugin from
...省略...

Message:
   Error while installing plugin, reason: IllegalArgumentException: Plugin installation assumed to be site plugin, but contains source code, aborting installation.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;あらら、なんで？と。&lt;br&gt;
で、実際にgithubにアップされてたzipファイルをダウンロードしてみたら、githubのリポジトリにあるディレクトリ構成がそのまま入ってるじゃないですか。。。
そうですか、そうですよね。prepareだし、タグ打ってzipにかためてくれるだけなんですねと。。。&lt;/p&gt;
&lt;p&gt;おそらく、siteプラグイン&lt;em&gt;だけ&lt;/em&gt;の場合はこの方法でpluginコマンド叩けばOKなんでしょうが、私がダウンロードしてもらいたいのは.jarファイルが入ったzipファイルなんです。&lt;/p&gt;
&lt;p&gt;ということで、断念しました。（タグ消したりをgitコマンドで叩いて綺麗にし直すとか虚しい作業をしてました）&lt;/p&gt;
&lt;h2 id=&#34;その２githubcomのwebでリリース&#34;&gt;その２：github.comのWebでリリース&lt;/h2&gt;
&lt;p&gt;おとなしく、Sonatypeのサイトにアップロードする方向でがんばればいいんですが、とりあえず使えるようにするのが先だと思い、
github.comのページでアップロードしてしまおうと。&lt;/p&gt;
&lt;p&gt;「release」というタブをクリックすると、画面からアップロードできるようになります。&lt;br&gt;
zipファイルを作ってアップロードしました。（zipファイル自体は&lt;code&gt;mvn package&lt;/code&gt;コマンドを実行したら&lt;code&gt;target/release&lt;/code&gt;というディレクトリに作成されてる）&lt;/p&gt;
&lt;p&gt;これで行けるだろということで、またpluginコマンドを実行すると&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Trying https://github.com/johtani/elasticsearch-extended-analyze/archive/v0.5.zip...
Downloading ...DONE
Installed johtani/elasticsearch-extended-analyze/0.5 into /Users/johtani/projects/tmp/ess_env/second_node/elasticsearch-0.90.7/plugins/extended-analyze
Usage:
    -u, --url     [plugin location]   : Set exact URL to download the plugin from
...省略...

Message:
   Error while installing plugin, reason: IllegalArgumentException: Plugin installation assumed to be site plugin, but contains source code, aborting installation.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;あれ？同じエラー？なんで？jar入りのzipファイルアップロードしたのに？？？&lt;/p&gt;
&lt;p&gt;と。で、&lt;code&gt;https://github.com/johtani/elasticsearch-extended-analyze/releases&lt;/code&gt;にreleaseのページができてたので見てみると、あら。
アップロードしたファイルについては次のようなURLになってるじゃないですか。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://github.com/johtani/elasticsearch-extended-analyze/releases/download/v0.5/v0.5.zip
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;で、よく見ると「Source code(zip)」というボタンもあるぞ？このリンクは？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://github.com/johtani/elasticsearch-extended-analyze/archive/v0.5.zip
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;。。。あぁ。そうですか。そういうことですか。理解してない私が悪いんですねと。&lt;/p&gt;
&lt;h2 id=&#34;結論&#34;&gt;結論？&lt;/h2&gt;
&lt;p&gt;ということで、とりあえず、releaseにjar入りファイルはアップロードできた（手動で）ので
&lt;code&gt;-u&lt;/code&gt;オプションで直接URL指定すればインストールできるだろ！と諦めました。
いい勉強になりました。。。&lt;/p&gt;
&lt;p&gt;README見ていただくとインストール方法が分かりますが、長いです。。。&lt;/p&gt;
&lt;p&gt;時間をとって本腰入れてSonatypeにMavenコマンドでアップロードできるようにしようかな。。。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>第2回elasticsearch勉強会を開催しました！ #elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2013/11/12/elasticsearch-japan-user-meetup-no2/</link>
      <pubDate>Tue, 12 Nov 2013 18:16:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/11/12/elasticsearch-japan-user-meetup-no2/</guid>
      <description>第2回を開催しました！ すごい、140人くらいくらいの参加登録者（参加者は１００人ちょっと！）がいて、びっくりです。 ステキな会場を提供していた</description>
      <content:encoded>&lt;p&gt;第2回を開催しました！
すごい、140人くらいくらいの参加登録者（参加者は１００人ちょっと！）がいて、びっくりです。
ステキな会場を提供していただいた、&lt;a href=&#34;http://recruit-tech.co.jp/recruitment/&#34;&gt;リクルートテクノロジーズ&lt;/a&gt;さん、運営していただいた方々、スピーカーの皆さん、参加者の皆さん本当にありがとうございました。
今回も素敵な看板ありがとうございます。&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.johtani.info/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:300&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20131112/es_signboard.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20131112/es_signboard.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;今回もしっかり楽しめたので、次回も頑張ります！&lt;/p&gt;
&lt;p&gt;今回は、&lt;a href=&#34;https://groups.google.com/forum/#!forum/elasticsearch-jp&#34;&gt;elasticsearch-jp&lt;/a&gt;MLの紹介とかをできたのでよかったかなぁと。
ぜひ、活用してください！どんな質問でもいいので。&lt;/p&gt;
&lt;p&gt;あと、スライドに入ってた例の本もよろしくです。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;ということで、懇親会も盛り上がったし楽しかったです。
今後も場の提供＋自分の勉強のトリガーとして、開催していくので、ご協力お願いします！
聞きたい話など、MLや@ツイートしていただければと。&lt;/p&gt;
&lt;h2 id=&#34;elasticsearchのrouting機能株式会社シーマーク大谷純johtani&#34;&gt;elasticsearchのRouting機能：株式会社シーマーク　大谷　純　（@johtani）&lt;/h2&gt;
&lt;p&gt;スライド：&lt;a href=&#34;https://blog.johtani.info/images/entries/20131112/About_es_routing.pdf&#34;&gt;Routing機能&lt;/a&gt;※スライドはPDFです。&lt;/p&gt;
&lt;p&gt;ド緊張で、大した発表ではなかったですが。。。
どちらかと言うとSolr本の紹介だったかもなぁ。スミマセン。&lt;/p&gt;
&lt;p&gt;※スライドが一部文字が消えてるので、作りなおすかも。&lt;/p&gt;
&lt;h2 id=&#34;elasticsearchを使ったbaas基盤の開発仮株式会社富士通ソフトウェアテクノロジーズ-滝田聖己さんpisatoshi&#34;&gt;ElasticSearchを使ったBaaS基盤の開発(仮)：株式会社富士通ソフトウェアテクノロジーズ 滝田聖己さん（@pisatoshi）&lt;/h2&gt;
&lt;p&gt;スライド：&lt;a href=&#34;https://speakerdeck.com/pisatoshi/elasticsearch-trial-and-error&#34;&gt;https://speakerdeck.com/pisatoshi/elasticsearch-trial-and-error&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本日はお越しいただきありがとうございました！しかも静岡から！今後もよろしくお願い致します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;EnchantMoonでシステム構成ｗ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;0.17.0から利用されていると。（スゴイ）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;プライマリのデータストア！ただし、登録元データはMySQLにもある。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;階層も深く、大きめのドキュメント。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;レプリカ１、インデックスのバックアップも取ってないと。。。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ルーティングの機能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DynamicMappingの問題点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;マッピング定義が肥大、型がコンフリクト。。。苦労しっぱなし&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;データ登録は１台にして、１台で一気に登録してから再配置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;実際に運用とかされてるので、いろんなノウハウがまだまだありそう！&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kibana入門水戸祐介さんy_310&#34;&gt;Kibana入門：水戸祐介さん（@y_310）&lt;/h2&gt;
&lt;p&gt;スライド：&lt;a href=&#34;https://speakerdeck.com/y310/kibanaru-men&#34;&gt;https://speakerdeck.com/y310/kibanaru-men&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;（やっぱりru-menになってるｗ）&lt;/p&gt;
&lt;p&gt;実は、押しかけて話してもらうように説得したのでした。今後もよろしくです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;COOKPADの方によるKibanaのお話。&lt;/li&gt;
&lt;li&gt;Kibanaの利点とかなんで？とか。&lt;/li&gt;
&lt;li&gt;画面構成の説明から&lt;/li&gt;
&lt;li&gt;ダッシュボードは必ず保存して！リロードしたら悲しい思いをしてしまうので。&lt;/li&gt;
&lt;li&gt;sparkline便利そうだなぁ。ほんとに、データサイエンティスト系のツールを目指してるのかな&lt;/li&gt;
&lt;li&gt;一通り、ダッシュボードに配置できるパネルの説明してもらえたのですごく参考になりました！&lt;/li&gt;
&lt;li&gt;Tips周りが役に立ちそう。not_analyzedは重要ですよね。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lt&#34;&gt;LT&lt;/h2&gt;
&lt;h3 id=&#34;データ集計用ダッシュボードブラウザとしても使えるelasticsearchkibana-v3を利用する際の運用ノウハウ紹介株式会社リブセンス-ykentaro-さん-yoshi_ken-さん&#34;&gt;「データ集計用ダッシュボードブラウザとしても使えるElasticSearch＋Kibana v3を利用する際の運用ノウハウ紹介」：株式会社リブセンス Y.Kentaro さん (@yoshi_ken) さん&lt;/h3&gt;
&lt;p&gt;スライド：&lt;a href=&#34;http://www.slideshare.net/y-ken/elasticsearch-kibnana-fluentd-management-tips&#34;&gt;http://www.slideshare.net/y-ken/elasticsearch-kibnana-fluentd-management-tips&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kibanaの紹介とかFluentdの紹介。&lt;/li&gt;
&lt;li&gt;Tips満載すばらしい。&lt;/li&gt;
&lt;li&gt;JDBC riverは0.90.6ではうまく動かないので、気をつけてと。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fluentd-as-a-kibanarepeatedly-さん&#34;&gt;「Fluentd as a Kibana」：@repeatedly さん&lt;/h3&gt;
&lt;p&gt;スライド(gist)？：&lt;a href=&#34;https://gist.github.com/repeatedly/7427856&#34;&gt;https://gist.github.com/repeatedly/7427856&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kibanaがfluentdの中で動くと！？&lt;/p&gt;
&lt;h3 id=&#34;authプラグインでアクセスコントロール株式会社エヌツーエスエム-菅谷信介さん-shinsuke_sugaya&#34;&gt;「Authプラグインでアクセスコントロール」：株式会社エヌツーエスエム 菅谷信介さん (@shinsuke_sugaya)&lt;/h3&gt;
&lt;p&gt;スライド：&lt;a href=&#34;http://www.slideshare.net/shinsuke/es-auth-plugin&#34;&gt;http://www.slideshare.net/shinsuke/es-auth-plugin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;API毎？インデックスごと？にアクセス制御ができるプラグイン&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>elasticsearch-extended-analyzeの改良</title>
      <link>https://blog.johtani.info/blog/2013/11/04/improve-output-extended-analyze/</link>
      <pubDate>Mon, 04 Nov 2013 22:12:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/11/04/improve-output-extended-analyze/</guid>
      <description>開発中ですと書きました、elasticsearch-extended-analyzeですが、改良しました。 改良と変更は以下のとおりです。 ソー</description>
      <content:encoded>&lt;p&gt;&lt;a href=&#34;https://blog.johtani.info/blog/2013/10/25/developing-es-extended-analyze-plugin/&#34;&gt;開発中です&lt;/a&gt;と書きました、&lt;a href=&#34;https://github.com/johtani/elasticsearch-extended-analyze&#34;&gt;elasticsearch-extended-analyze&lt;/a&gt;ですが、改良しました。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;改良と変更は以下のとおりです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ソースのパッケージを&lt;code&gt;org.elasticsearch&lt;/code&gt;から&lt;code&gt;info.johtani&lt;/code&gt;に。MLで気になったので質問したら、変えたほうがいいよとのこと。ダウンロード化については、もう少々お待ちを。&lt;/li&gt;
&lt;li&gt;出力形式を変更。可能な限りCharFilter、Tokenizer、TokenFilterそれぞれが出力する内容を返すようにしました。
&lt;ul&gt;
&lt;li&gt;ただし、既存のAnalyzer（JapaneseAnalyzerクラスとか）に関しては、現時点では出力しません。CharFilterなどを取得するI/Fが見えないためです。（改良できるかの調査は未着手）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;現時点でできてないのは以下の項目&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pluginコマンドでインストール&lt;/li&gt;
&lt;li&gt;出力したいAttributeの指定&lt;/li&gt;
&lt;li&gt;TokenizeChainで変更されたTokenの追跡（現状はどのTokenがStopFilterで消されたかなどが不明）&lt;/li&gt;
&lt;li&gt;画面の用意（簡単に確認できる画面）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ということで、README.mdに出力サンプルは貼り付けてるので、興味のある方は試してみてください。
不明点などあれば、コメントかIssueかツイートでも。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>elasticsearch-extended-analyzeプラグインを開発中</title>
      <link>https://blog.johtani.info/blog/2013/10/25/developing-es-extended-analyze-plugin/</link>
      <pubDate>Fri, 25 Oct 2013 19:06:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/10/25/developing-es-extended-analyze-plugin/</guid>
      <description>お久しぶりです。 気づいたらまた、結構ブログを書いてなかったです。。。 今回は、今開発しているElasticsearchのプラグインに関するお話</description>
      <content:encoded>&lt;p&gt;お久しぶりです。
気づいたらまた、結構ブログを書いてなかったです。。。&lt;/p&gt;
&lt;p&gt;今回は、今開発しているElasticsearchのプラグインに関するお話です。&lt;/p&gt;
&lt;p&gt;いやぁ、名前決めるの難しいですね。これで英語的に合ってるか不安ですが、&lt;a href=&#34;https://github.com/johtani/elasticsearch-extended-analyze&#34;&gt;elasticsearch-extended-analyze&lt;/a&gt;というプラグインを作っています。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;どんなもの&#34;&gt;どんなもの？&lt;/h2&gt;
&lt;p&gt;Solrの管理画面のanalysisに相当する機能が欲しくて作り始めました。&lt;/p&gt;
&lt;p&gt;Elasticsearchには&lt;a href=&#34;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-analyze.html&#34;&gt;analyze API&lt;/a&gt;というAPI（名前あってるのかなぁ?）が存在します。&lt;br&gt;
これは、文字列を投げると、指定したアナライザやトークナイザでどのようなトークンに分割されるかを調べることができるAPIです。&lt;/p&gt;
&lt;p&gt;例えば、&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch-analysis-kuromoji&#34;&gt;elasticsearch-analysis-kuromoji&lt;/a&gt;をインストールしたElasticsearchに対して、以下のcurlコマンドを実行します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -XPOST &#39;localhost:9200/_analyze?tokenizer=kuromoji_tokenizer&amp;amp;filters=kuromoji_baseform&amp;amp;pretty&#39; -d &#39;寿司が美味しい&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;すると、トークナイズされた結果が次のようなJSONで返ってきます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;tokens&amp;#34;&lt;/span&gt; : [ {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;寿司&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;start_offset&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;end_offset&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;word&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;position&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  }, {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;が&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;start_offset&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;end_offset&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;word&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;position&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
  }, {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;美味しい&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;start_offset&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;end_offset&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;word&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;position&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
  } ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;トークナイズの結果がわかるのは嬉しいのですが、どんな品詞なのかといったKuromoji固有のTokenの属性情報がなくなってしまいます。&lt;/p&gt;
&lt;p&gt;Solrでは、こんな画面が用意されていて、品詞情報とかが出力されます。あとは、各TokenFilterでどのトークンがなくなっているかなどもわかるようになっています。&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.johtani.info/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20131025/solr_admin_analysis.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20131025/solr_admin_analysis.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;これって結構役立つと思うんですよ。
ということで、Pluginも作ってみたかったので、いい機会だから作ってみようかと。&lt;/p&gt;
&lt;h2 id=&#34;出力サンプル&#34;&gt;出力サンプル&lt;/h2&gt;
&lt;p&gt;まずは、その他のAttribute（品詞とか）を表示するところを実装してみました。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -XPOST &#39;localhost:9200/_extended_analyze?tokenizer=kuromoji_tokenizer&amp;amp;filters=kuromoji_baseform&amp;amp;pretty&#39; -d &#39;寿司が美味しい&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;先ほどとほぼ一緒のcurlコマンドを実行します。違う点は**「_analyze」**が**「_extended_analyze」**となっている点です。&lt;br&gt;
で、実行結果はこんな感じです。（長いですがそのまま載せてます。続きの文章がしたにあります。）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;tokens&amp;quot; : [ {
    &amp;quot;token&amp;quot; : &amp;quot;寿司&amp;quot;,
    &amp;quot;start_offset&amp;quot; : 0,
    &amp;quot;end_offset&amp;quot; : 2,
    &amp;quot;type&amp;quot; : &amp;quot;word&amp;quot;,
    &amp;quot;position&amp;quot; : 1,
    &amp;quot;extended_attributes&amp;quot; : [ {
      &amp;quot;org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute#bytes&amp;quot; : &amp;quot;[e5 af bf e5 8f b8]&amp;quot;
    }, {
      &amp;quot;org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute#positionLength&amp;quot; : 1
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.BaseFormAttribute#baseForm&amp;quot; : null
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.PartOfSpeechAttribute#partOfSpeech&amp;quot; : &amp;quot;名詞-一般&amp;quot;
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.PartOfSpeechAttribute#partOfSpeech (en)&amp;quot; : &amp;quot;noun-common&amp;quot;
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.ReadingAttribute#reading&amp;quot; : &amp;quot;スシ&amp;quot;
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.ReadingAttribute#reading (en)&amp;quot; : &amp;quot;sushi&amp;quot;
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.ReadingAttribute#pronunciation&amp;quot; : &amp;quot;スシ&amp;quot;
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.ReadingAttribute#pronunciation (en)&amp;quot; : &amp;quot;sushi&amp;quot;
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.InflectionAttribute#inflectionType&amp;quot; : null
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.InflectionAttribute#inflectionType (en)&amp;quot; : null
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.InflectionAttribute#inflectionForm&amp;quot; : null
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.InflectionAttribute#inflectionForm (en)&amp;quot; : null
    }, {
      &amp;quot;org.apache.lucene.analysis.tokenattributes.KeywordAttribute#keyword&amp;quot; : false
    } ]
  }, {
    &amp;quot;token&amp;quot; : &amp;quot;が&amp;quot;,
    &amp;quot;start_offset&amp;quot; : 2,
    &amp;quot;end_offset&amp;quot; : 3,
    &amp;quot;type&amp;quot; : &amp;quot;word&amp;quot;,
    &amp;quot;position&amp;quot; : 2,
    &amp;quot;extended_attributes&amp;quot; : [ {
      &amp;quot;org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute#bytes&amp;quot; : &amp;quot;[e3 81 8c]&amp;quot;
    }, {
      &amp;quot;org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute#positionLength&amp;quot; : 1
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.BaseFormAttribute#baseForm&amp;quot; : null
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.PartOfSpeechAttribute#partOfSpeech&amp;quot; : &amp;quot;助詞-格助詞-一般&amp;quot;
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.PartOfSpeechAttribute#partOfSpeech (en)&amp;quot; : &amp;quot;particle-case-misc&amp;quot;
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.ReadingAttribute#reading&amp;quot; : &amp;quot;ガ&amp;quot;
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.ReadingAttribute#reading (en)&amp;quot; : &amp;quot;ga&amp;quot;
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.ReadingAttribute#pronunciation&amp;quot; : &amp;quot;ガ&amp;quot;
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.ReadingAttribute#pronunciation (en)&amp;quot; : &amp;quot;ga&amp;quot;
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.InflectionAttribute#inflectionType&amp;quot; : null
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.InflectionAttribute#inflectionType (en)&amp;quot; : null
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.InflectionAttribute#inflectionForm&amp;quot; : null
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.InflectionAttribute#inflectionForm (en)&amp;quot; : null
    }, {
      &amp;quot;org.apache.lucene.analysis.tokenattributes.KeywordAttribute#keyword&amp;quot; : false
    } ]
  }, {
    &amp;quot;token&amp;quot; : &amp;quot;美味しい&amp;quot;,
    &amp;quot;start_offset&amp;quot; : 3,
    &amp;quot;end_offset&amp;quot; : 7,
    &amp;quot;type&amp;quot; : &amp;quot;word&amp;quot;,
    &amp;quot;position&amp;quot; : 3,
    &amp;quot;extended_attributes&amp;quot; : [ {
      &amp;quot;org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute#bytes&amp;quot; : &amp;quot;[e7 be 8e e5 91 b3 e3 81 97 e3 81 84]&amp;quot;
    }, {
      &amp;quot;org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute#positionLength&amp;quot; : 1
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.BaseFormAttribute#baseForm&amp;quot; : null
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.PartOfSpeechAttribute#partOfSpeech&amp;quot; : &amp;quot;形容詞-自立&amp;quot;
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.PartOfSpeechAttribute#partOfSpeech (en)&amp;quot; : &amp;quot;adjective-main&amp;quot;
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.ReadingAttribute#reading&amp;quot; : &amp;quot;オイシイ&amp;quot;
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.ReadingAttribute#reading (en)&amp;quot; : &amp;quot;oishii&amp;quot;
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.ReadingAttribute#pronunciation&amp;quot; : &amp;quot;オイシイ&amp;quot;
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.ReadingAttribute#pronunciation (en)&amp;quot; : &amp;quot;oishii&amp;quot;
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.InflectionAttribute#inflectionType&amp;quot; : &amp;quot;形容詞・イ段&amp;quot;
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.InflectionAttribute#inflectionType (en)&amp;quot; : &amp;quot;adj-group-i&amp;quot;
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.InflectionAttribute#inflectionForm&amp;quot; : &amp;quot;基本形&amp;quot;
    }, {
      &amp;quot;org.apache.lucene.analysis.ja.tokenattributes.InflectionAttribute#inflectionForm (en)&amp;quot; : &amp;quot;base&amp;quot;
    }, {
      &amp;quot;org.apache.lucene.analysis.tokenattributes.KeywordAttribute#keyword&amp;quot; : false
    } ]
  } ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;先ほどの結果に**「extended_attributes」**という配列のオブジェクトが追加された形になっています。
ちょっと長くなってしまいましたが。。。&lt;/p&gt;
&lt;p&gt;Solrの処理を真似して作ったので大したことはやってないんですが、少しは便利になるかもなぁと。&lt;/p&gt;
&lt;p&gt;現時点では、最終的な結果しか取得できないですが、今後は次のような機能を作っていこうかと思っています。
できるかどうかは、やってみてって感じですが。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pluginコマンドでインストール
&lt;ul&gt;
&lt;li&gt;pom.xmlはありますが、まだMavenとかに登録はされていません。ですので、&lt;code&gt;mvn package&lt;/code&gt;してからjarファイルをpluginsフォルダに配置しないといけません。pluginコマンドでインストールできるともっと使ってもらえるはず？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;出力したいAttributeの指定
&lt;ul&gt;
&lt;li&gt;リクエストパラメータで、出力したいAttribute名を指定するとか。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;出力形式の変更
&lt;ul&gt;
&lt;li&gt;今は、Solrの真似をしていますが、せっかくJSONだったりするので、もう少し検討しようかと（同じAttributeの異なる値も1オブジェクトとして出力されてる）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TokenizeChainの出力
&lt;ul&gt;
&lt;li&gt;Solr同様、CharFilter、Tokenizer、TokenFilterが動作して、最終的なTokenがインデックスに登録されます。ですので、各処理の直後のTokenがどうなっているかもわかったほうが嬉しいと思うので、それらも取得できるようにしたいなぁと&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;画面の用意
&lt;ul&gt;
&lt;li&gt;せっかくプラグインなんだし、画面で見れると嬉しいかなと。これは当分先になっちゃうと思いますが、Webページで確認できるような画面を作ると確認しやすくなるかなぁと。上記対応が終わってから取替かかると思いますが。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;とりあえず、思いつくのはこんなかんじです。&lt;/p&gt;
&lt;p&gt;Elasticsearchの_analyze APIを真似しただけのコードだし、テストも実装もまだまだですが、とりあえず公開してみました。&lt;/p&gt;
&lt;p&gt;要望などあれば、コメント、Issue、ツイート（もちろん、テストコードなども！）なんでも受け付けてますので、お気軽に。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>elasticsearch-inquisitorプラグインの紹介</title>
      <link>https://blog.johtani.info/blog/2013/09/23/intro-elasticsearch-inquisitor/</link>
      <pubDate>Mon, 23 Sep 2013 12:27:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/09/23/intro-elasticsearch-inquisitor/</guid>
      <description>今日は、ElasticSearchのMLで見つけたelasticsearch-inquisitorプラグインの紹介です。 ElasticSea</description>
      <content:encoded>&lt;p&gt;今日は、ElasticSearchのMLで見つけた&lt;a href=&#34;https://github.com/polyfractal/elasticsearch-inquisitor&#34;&gt;elasticsearch-inquisitor&lt;/a&gt;プラグインの紹介です。&lt;/p&gt;
&lt;p&gt;ElasticSearchはREST API形式で簡単にコマンドラインからいろいろな処理を実行できて便利ですが、
GUIがあったほうが楽なこともまた事実です。
今回紹介する、inquisitorプラグインもSiteプラグイン（Webブラウザでアクセスできるプラグイン）の1つです。
（ただし、ローカルにインストールしてローカルのElasticSearchにしか接続できませんが。。。）&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;インストール&#34;&gt;インストール&lt;/h2&gt;
&lt;p&gt;プラグインですので、以下のコマンドでインストールが出来ます。インストール後はElasticSearchの再起動が必要です。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bin/plugin -install polyfractal/elasticsearch-inquisitor
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ElasticSearch再起動後に、以下のURLにアクセスすればOKです。
※ローカルでのみ動作可能なプラグインです。（内部で呼び出しているJSにlocalhostと記載があるため）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost:9200/_plugin/inquisitor/#/
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;何ができるの&#34;&gt;何ができるの？&lt;/h2&gt;
&lt;p&gt;自分の書いたQueryが正しく動作するかや、Analyzerによって文章がどのように、Term（Token）に分割されるかといった挙動をWebブラウザ上で確認することができます。用意されている画面は「Queries」「Analyzers」「Tokenizers」の3種類です。&lt;/p&gt;
&lt;h3 id=&#34;queries&#34;&gt;Queries&lt;/h3&gt;
&lt;p&gt;クエリの確認、実行が可能な画面です。&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.johtani.info/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20130923/queries_sample.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20130923/queries_sample.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;「Index」「Type」はプルダウンになっており、現在ElasticSearchに存在しているものが選択可能です。
その下のテキストエリアがクエリを入力する画面です。&lt;/p&gt;
&lt;p&gt;クエリを入力していると、入力しているクエリがValidかどうかをクエリのコンソール部分（右側上部）に表示してくれます。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20130923/query_error.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20130923/query_error.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;少し残念なことに、Tabを押すと、フォームのフォーカスが切り替わってしまうので、クエリを入力するのがちょっと面倒です。。。（私は通常の検索には、&lt;a href=&#34;https://chrome.google.com/webstore/detail/sense/doinijnbnggojdlcjifpdckfokbbfpbo&#34;&gt;ChromeプラグインのSense&lt;/a&gt;というものを利用してます。）&lt;/p&gt;
&lt;p&gt;クエリに問題がない場合は、「Query」ボタンを押すことで実際の検索が実行されます。
この時、画面真ん中のブルーのテーブル（内部で実行されるクエリ）の部分に、QueryがElasticSearch内部で解釈されたあとの、Luceneで実行されるレベルのクエリに変換されたクエリが表示されます。&lt;/p&gt;
&lt;p&gt;これが便利です。JSONで記述したり、色々なタイプのクエリがElasticSearchでは実行できますが、望んだ形に単語が区切られているかなどを確認することができるため、非常に便利です。&lt;/p&gt;
&lt;p&gt;ElasticSearchのQuery DSLでは&lt;a href=&#34;http://www.elasticsearch.org/guide/reference/api/search/explain/&#34;&gt;explain&lt;/a&gt;をtrueにすることで、ヒットしたドキュメントのスコア計算に用いられた単語などがわかるのですが、そもそもヒットしないクエリの場合は、explainでは単語の区切られ方などがわかりません。&lt;/p&gt;
&lt;p&gt;その場合に、このプラグインで確認すると、想定と違う単語の区切られ方やクエリの造られ方がわかるかと思います。&lt;/p&gt;
&lt;h3 id=&#34;analyzers&#34;&gt;Analyzers&lt;/h3&gt;
&lt;p&gt;Analyzerによる文章のアナライズ結果の確認が出来る画面です。
ElasticSearchやSolrにあまり詳しくない場合、どんなAnalyzerが文章をどのように単語に区切って、転置インデックスのキーワードとして利用しているかがわからないと思います。&lt;/p&gt;
&lt;p&gt;このAnalyzerが文章をどのように単語に区切っているかを確認することができるのがAnalyzers画面です。
こんなかんじの画面になります。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20130923/analyzers_sample.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20130923/analyzers_sample.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;一番上のテキストエリアが文章を入力する場所です。
文章を入力していくと、その下のテーブルの「Analyzed Text」の部分が変化していくのが分かります。
このグレーの単語が転置インデックスのキーワードとなります。&lt;/p&gt;
&lt;p&gt;予め用意されているAnalyzer以外に、用意されているTokenzier＋Filterの組み合わせも簡単ですが確認可能です。（Tokenizer、Filtersとあるテーブル）
ただし、ここまでのどちらも細かな設定は画面上ではできません（Filterの細かな引数の指定など）&lt;/p&gt;
&lt;p&gt;一番下の部分が、ElasticSearchに存在しているインデックスごとに定義されたAnalyzerやフィールドを元にした解析結果を表示することができる領域です。&lt;/p&gt;
&lt;p&gt;自分でマッピングを記述してフィールド定義したものの動作確認や、インデックスを適当に作ったけど、うまくヒットしない場合など、ここで、単語の区切れ方を確認することで、検索になぜヒットしないのかといった問題のヒントを得ることができると思います。&lt;/p&gt;
&lt;p&gt;Analyzerによっては、インデックス対象の文字として扱わない文字があったりしますので。
先ほどのQueries画面のLuceneに投げられる直前のクエリと、Analyzersでの単語の区切られ方を確認することで、検索がうまくヒットしていないことが判明すると思います。&lt;/p&gt;
&lt;h3 id=&#34;tokenizers&#34;&gt;Tokenizers&lt;/h3&gt;
&lt;p&gt;最後はTokenizers画面です。Analyzersとほぼ同様ですが、ちがいは、デフォルトで用意されているTokenizerの挙動の確認ができるというだけになります。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20130923/tokenizers_sample.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20130923/tokenizers_sample.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;簡単な確認ならここで可能かと。&lt;/p&gt;
&lt;h2 id=&#34;注意点は&#34;&gt;注意点は？&lt;/h2&gt;
&lt;p&gt;まだ開発途中のようで、つぎの部分が課題かと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ローカルでのみ実行可能&lt;/li&gt;
&lt;li&gt;Queries画面の結果の「Explain Result」リンクが未実装&lt;/li&gt;
&lt;li&gt;Queries画面のクエリ入力が使いにくい（タブが打てないので）&lt;/li&gt;
&lt;li&gt;カスタム登録のAnalyzersはインデックスを用意しないと確認できない。（Kuromojiのプラグインを登録しただけでは確認できなかった）&lt;/li&gt;
&lt;li&gt;細かな設定のフィールドも用意しないと、Analyzers画面では利用できない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;ということで、Inquisitor（読みがわからない）プラグインの簡単な説明でした。
検索にうまくヒットしないという理由は大体の場合、
クエリに入力した文字列が単語に区切られたものと、登録したデータが単語に区切られたものが異なるために検索にヒットしないというものです。&lt;/p&gt;
&lt;p&gt;そのクエリ、データの単語の区切られ方を確認するのに役に立つプラグインじゃないでしょうか。&lt;/p&gt;
&lt;p&gt;ちなみに、このプラグイン自体はHTML＋JSで作成されており、実際にはElasticSearchが持っているREST APIをキックしているだけになります。
ですので、Web画面なんか要らないという方は、このプラグインが実際に送信しているリクエストを参考にするとcurlコマンドでどういったリクエストを投げればいいかというのがわかると思います。&lt;/p&gt;
&lt;p&gt;私は軟弱者なので画面があったほうがいいですが。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>elasticsearch-river-wikipediaの疑問点</title>
      <link>https://blog.johtani.info/blog/2013/09/12/question-river-wikipedia/</link>
      <pubDate>Thu, 12 Sep 2013 02:38:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/09/12/question-river-wikipedia/</guid>
      <description>river-wikipediaの前々回の記事で書きましたが、bulk_sizeに関連して登録件数がやけにきりが良いのが気になると書いていまし</description>
      <content:encoded>&lt;p&gt;&lt;a href=&#34;https://blog.johtani.info/blog/2013/08/23/index-wikipedia-ja-to-elasticsearch/&#34;&gt;river-wikipediaの前々回の記事&lt;/a&gt;で書きましたが、bulk_sizeに関連して登録件数がやけにきりが良いのが気になると書いていました。&lt;/p&gt;
&lt;p&gt;で、Riverの仕組みを勉强がてら、&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch-river-wikipedia&#34;&gt;elasticsearch-river-wikipedia&lt;/a&gt;のソース（1.2.0）を読んでみました。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;riverの作り&#34;&gt;Riverの作り&lt;/h2&gt;
&lt;p&gt;Riverはorg.elasticsearch.river.Riverというinterfaceを実装することで作らています。
ただ、Riverがinterfaceとなっていますが、o.e.river.AbstractRiverComponentというクラスを継承して作られています。&lt;/p&gt;
&lt;p&gt;AbstractRiverComponentにはRiverの名前や設定などが用意されています。
ま、ここはそれほど重要じゃないので、軽く流してと。&lt;/p&gt;
&lt;p&gt;Riverの設定関連は実装したRiverクラス（ここでは、WikipediaRiverクラス）のコンストラクタで、設定値の読み取りなどの記述を記載します。
このコンストラクタが、&lt;code&gt;_river/hogehoge/_meta&lt;/code&gt;をPUTした時のJSONを元にElasticSearchから呼ばれて、Riverのインスタンスが作成されます。（たぶん、&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/blob/master/src/main/java/org/elasticsearch/river/RiversService.java&#34;&gt;このへんがその処理&lt;/a&gt;だと思う。。。このあたりはまた今度）&lt;/p&gt;
&lt;p&gt;実際のRiverの処理はWikipediaRiverクラスのstart()メソッド内部に記述されています。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        logger&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;starting wikipedia stream&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;①&lt;/span&gt;            client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;admin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;indices&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;prepareCreate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;indexName&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;actionGet&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Exception e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ExceptionsHelper&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;unwrapCause&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;instanceof&lt;/span&gt; IndexAlreadyExistsException&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;// that&amp;#39;s fine
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ExceptionsHelper&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;unwrapCause&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;instanceof&lt;/span&gt; ClusterBlockException&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;// ok, not recovered yet..., lets start indexing and hope we recover by the first bulk
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;// TODO: a smarter logic can be to register for cluster event listener here, and only start sampling when the block is removed...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                logger&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;warn&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;failed to create index [{}], disabling river...&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; indexName&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;②&lt;/span&gt;        currentRequest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;prepareBulk&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;③&lt;/span&gt;        WikiXMLParser parser &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; WikiXMLParserFactory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getSAXParser&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;url&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;④&lt;/span&gt;            parser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setPageCallback&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PageCallback&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Exception e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            logger&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;failed to create parser&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;⑤&lt;/span&gt;        thread &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EsExecutors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;daemonThreadFactory&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;settings&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;globalSettings&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wikipedia_slurper&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;newThread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Parser&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;parser&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
        thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;内部では&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;インデックスの作成&lt;/li&gt;
&lt;li&gt;バルクアップデート用クライアントの設定&lt;/li&gt;
&lt;li&gt;WikiXMLのパーサの初期化&lt;/li&gt;
&lt;li&gt;ページごとにキックされるコールバック処理の登録&lt;/li&gt;
&lt;li&gt;デーモンスレッドの起動と起動&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;といった処理の流れになっています。&lt;/p&gt;
&lt;p&gt;で、このスレッドの起動後は、4.で用意したparser.parse()処理がグルグル回ります。&lt;/p&gt;
&lt;p&gt;1ページがパースされるたびに、&lt;code&gt;WikipediaRiver.PageCallback&lt;/code&gt;クラスの&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch-river-wikipedia/blob/master/src/main/java/org/elasticsearch/river/wikipedia/WikipediaRiver.java#L166&#34;&gt;&lt;code&gt;proess()&lt;/code&gt;メソッド&lt;/a&gt;が呼ばれます。
このメソッドの最後で、&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch-river-wikipedia/blob/master/src/main/java/org/elasticsearch/river/wikipedia/WikipediaRiver.java#L198&#34;&gt;&lt;code&gt;processBulkIfNeeded()&lt;/code&gt;メソッド&lt;/a&gt;が呼ばれています。ここで、実際にパースしたページをインデックスに登録する処理が実行されます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch-river-wikipedia/blob/master/src/main/java/org/elasticsearch/river/wikipedia/WikipediaRiver.java#L205&#34;&gt;このメソッドの1行目&lt;/a&gt;が鍵でした。
bulkSize以上の件数がバルクのリクエストに貯まった時だけ、実際にインデックスに登録する処理が実行されます。
このため、スレッドが回っている間は、bulkSize以上のデータが貯まらないと、インデックスへの登録は行われないわけです。&lt;/p&gt;
&lt;p&gt;次に、このスレッドを止めるには、前々回書いたように、_riverにPUTした、Riverの設定をDELETEするしかありません。（あとは、ElasticSearchを停止するとかでしょうか。）&lt;/p&gt;
&lt;p&gt;で、DELETEが実行される呼ばれるのが、&lt;code&gt;WikipediaRiver&lt;/code&gt;クラスの&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch-river-wikipedia/blob/master/src/main/java/org/elasticsearch/river/wikipedia/WikipediaRiver.java#L135&#34;&gt;&lt;code&gt;close()&lt;/code&gt;メソッド&lt;/a&gt;です。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        logger&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;closing wikipedia river&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        closed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;thread &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;interrupt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;見ていただくと分かりますが、スレッド止めて終了です。&lt;/p&gt;
&lt;h3 id=&#34;問題点は&#34;&gt;問題点は？&lt;/h3&gt;
&lt;p&gt;ということで、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WikipediaのXMLを読み込んでもRiverは停止しない&lt;/li&gt;
&lt;li&gt;Riverの停止を行ってもスレッドが止められるだけ。&lt;/li&gt;
&lt;li&gt;bulkSize以下の件数が&lt;code&gt;currentRequest&lt;/code&gt;に残っているけど、破棄される&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;とまぁ、こんな流れになっているので、最後の端数のドキュメントがインデックスに登録されないようです。
（まだ、ちゃんと確認してないんですが、備忘録のため先に書いちゃいました。。。）&lt;/p&gt;
&lt;p&gt;じゃあ、全部うまく登録するにはどうしたもんかなぁと。
いまのところ思いついたのはこんな感じです。
他にいい案があったら教えて下さい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;案１：close()処理の中で、スレッド停止後に、&lt;code&gt;currentRequest&lt;/code&gt;に貯まっているデータをインデックスに登録しちゃう&lt;/li&gt;
&lt;li&gt;案２：bulkSize以外に、定期的（指定された時間）で登録処理を実行してしまう。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;簡単なのでとりあえず、案１を実装してみるかなぁと。
（さっさとコード書けよって話ですね。。。スミマセン）
その前にMLで質問ですかねぇ、英語で。&lt;/p&gt;
&lt;p&gt;WikipediaのRiverをざっと眺めてみた感じですが、わかりやすい作りだなぁと。
他のRiverがどうなってるかをちゃんと見てませんが、他にもbulkSize指定をするRiverの場合は、このように件数がbulkSizeに満たない状態ではデータが登録されないといったことがあるかもしれません。&lt;/p&gt;
&lt;p&gt;ElasticSearchのソースを読み始める取っ掛かりとしては面白いかと思いますので、興味ある方は読んで作ってみるといいかもしれません。（私は読んだだけですがｗ）&lt;/p&gt;
&lt;h2 id=&#34;追記20130913-2100&#34;&gt;追記（2013/09/13 21:00）&lt;/h2&gt;
&lt;p&gt;MLで質問してみました。とりあえず、案1を。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/elasticsearch/hqU-LF5aTy4&#34;&gt;river-wikipedia does not index all pages&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;他のRiverでは対応してるしバグだね、Issue上げてとのことで、あげときました。
ついでにプルリクも出せばいいんでしょうが、プルリクまだやったことないヘタレです。。。&lt;/p&gt;
&lt;p&gt;あと、案2についても同じトピックで質問してます。
どうやら、BulkProcessorにその機能があるよと。
&lt;code&gt;flushinterval&lt;/code&gt;というプロパティがありそうです。どうやって設定して、どうやって動くのかとか見てないので、
調査してブログorLTかな。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.elasticsearch.org/guide/reference/api/bulk-udp/&#34;&gt;bulk udp&lt;/a&gt;にはその値を設定できそうなのがあるんだよなぁ。&lt;/p&gt;
&lt;h2 id=&#34;追記その２20130916-2350&#34;&gt;追記その２（2013/09/16 23:50）&lt;/h2&gt;
&lt;p&gt;さっそく&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch-river-wikipedia/commit/3719ac5cd3cd5f0e4e57edaa72f5d4ca0b45ca5d&#34;&gt;修正版がコミット(コミットログ)&lt;/a&gt;されてました。
結構変わってます。BulkProcessorに&lt;code&gt;flush_interval&lt;/code&gt;の設定をすれば、よしなにやってくれる仕組みがすでに実装されているようです。
&lt;code&gt;bulkSize&lt;/code&gt;についても同様に、BulkProcessorに設定すれば良いようです。
Riverの仕組みが結構スッキリしています。
もともと実装されていた、bulkSizeごとの処理も消されています。
確かに、BulkProcessorの仕組みとして実装されている方がしっくりきますね。&lt;/p&gt;
&lt;p&gt;ということで、考える暇もなくコミットされてしまいました。
こうやって質問しつつ、少しずつソースを読んでいこうかなと思ってるとこです。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>日本語Wikipediaをインデクシング（Kuromojiバージョン）</title>
      <link>https://blog.johtani.info/blog/2013/09/03/ja-wikipedia-with-kuromoji/</link>
      <pubDate>Tue, 03 Sep 2013 01:15:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/09/03/ja-wikipedia-with-kuromoji/</guid>
      <description>前々回紹介した、日本語Wikipediaのデータをインデックス登録する記事の続きです。 今回は、Kuromojiのアナライザを利用してインデッ</description>
      <content:encoded>&lt;p&gt;&lt;a href=&#34;https://blog.johtani.info/blog/2013/08/23/index-wikipedia-ja-to-elasticsearch&#34;&gt;前々回紹介した、日本語Wikipediaのデータをインデックス登録する記事&lt;/a&gt;の続きです。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;今回は、Kuromojiのアナライザを利用してインデックス登録してみます。&lt;/p&gt;
&lt;h2 id=&#34;余談proxy環境でのプラグインインストール&#34;&gt;余談（Proxy環境でのプラグインインストール）&lt;/h2&gt;
&lt;p&gt;ElasticSearchのpluginコマンドはJavaで実装されています。（&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch/blob/master/src/main/java/org/elasticsearch/plugins/PluginManager.java#L315&#34;&gt;org.elasticsearch.plugins.PluginManager&lt;/a&gt;）
プラグインのダウンロードには、java.net.URL.openConnection()から取得URLConnectionを使用しています。&lt;/p&gt;
&lt;p&gt;ですので、pluginのインストールを行う際に、Proxy環境にある場合は以下のようにコマンドを実行します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./bin/plugin -DproxyPort=ポート番号 -DproxyHost=ホスト名 -i elasticsearch/elasticsearch-analysis-kuromoji/1.5.0
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;elasticsearch-analysis-kuromojiのインストール&#34;&gt;elasticsearch-analysis-kuromojiのインストール&lt;/h2&gt;
&lt;p&gt;WikipediaのデータをKuromojiを使って、形態素解析ベースの転置インデックスを作成していきます。
まずは、Kuromojiを利用するために、&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch-analysis-kuromoji&#34;&gt;Analysisプラグイン&lt;/a&gt;のインストールです。
ElasticSearchのバージョンに対応したプラグインのバージョンがあります。（プラグインのページに対応したバージョンの記載あり）
今回はElasticSearchの0.90.3を利用しているため、1.5.0をインストールします。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./bin/plugin -i elasticsearch/elasticsearch-analysis-kuromoji/1.5.0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;インストール後は再起動しておきます。
なお、Kuromojiを利用して、Wikipediaのデータを登録するばあい、デフォルトの設定では、ヒープが足りなくなるおそれがあります。
ElasticSearchの起動時に以下のオプションを指定して、最大ヒープサイズを2Gとしておきます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export ES_HEAP_SIZE=2g;./bin/elasticsearch
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;indexの作成デフォルトでkuromojiのanalyzerを利用する&#34;&gt;Indexの作成（デフォルトでKuromojiのAnalyzerを利用する）&lt;/h2&gt;
&lt;p&gt;Wikipediaのデータを登録する際に、Kuromojiのアナライザを利用したいのが今回の趣旨でした。
一番ラクな方法として、Wikipediaデータのインデックスの設定として、デフォルトのアナライザをKuromojiにしてしまいます。
（きちんと設計する場合は、必要に応じてフィールドごとに指定しましょう）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -XPUT &#39;localhost:9200/ja-wikipedia-kuromoji&#39; -d &#39;{
    &amp;quot;settings&amp;quot;: {
        &amp;quot;analysis&amp;quot;: {
            &amp;quot;analyzer&amp;quot;: {
                &amp;quot;default&amp;quot; : {
                    &amp;quot;type&amp;quot; : &amp;quot;kuromoji&amp;quot;
                }
            }
        }
    }
}&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これでkuromojiのアナライザがデフォルトで利用される形となります。
あとは、Riverを起動して登録するだけです。&lt;/p&gt;
&lt;h2 id=&#34;riverの実行&#34;&gt;Riverの実行&lt;/h2&gt;
&lt;p&gt;前回と一緒です。
インデックス名（&lt;strong&gt;_river/&amp;lt;インデックス名&amp;gt;/_meta&lt;/strong&gt;）だけは、先ほど作成した「&lt;code&gt;ja-wikipedia-kuromoji&lt;/code&gt;」に変更してください。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -XPUT localhost:9200/_river/ja-wikipedia-kuromoji/_meta -d &#39;
{
    &amp;quot;type&amp;quot; : &amp;quot;wikipedia&amp;quot;,
    &amp;quot;wikipedia&amp;quot; : {
        &amp;quot;url&amp;quot; : &amp;quot;file:/home/johtani/src/jawiki-latest-pages-articles.xml&amp;quot;
    },
    &amp;quot;index&amp;quot; : {
        &amp;quot;bulk_size&amp;quot; : 10000
    }
}&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;あとは、インデックスされるのを待つだけです。&lt;/p&gt;
&lt;h2 id=&#34;データ量とか&#34;&gt;データ量とか&lt;/h2&gt;
&lt;p&gt;5.8gbになりました。Kuromojiを利用したため、形態素解析により単語にきちんとトークないずされた結果でしょう。
Uni-gramだと、転置インデックスのボキャブラリも単語に対してヒットするドキュメント数も大きくなるため、
インデックスサイズも大きくなっているのかと。&lt;/p&gt;
&lt;p&gt;検索クエリのサンプルなどはまた後日。（夜遅いので。。。）&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>第1回ElasticSearch勉強会を開催しました！ #elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2013/08/30/hold-first-elasticsearch-meetup-in-japan/</link>
      <pubDate>Fri, 30 Aug 2013 02:42:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/08/30/hold-first-elasticsearch-meetup-in-japan/</guid>
      <description>ElasticSearch勉強会 第1回を主催しました。 昨年のpyfesでなんちゃって資料で喋って、1年たちました。 ElasticSearch</description>
      <content:encoded>&lt;p&gt;ElasticSearch勉強会 第1回を主催しました。
昨年のpyfesでなんちゃって資料で喋って、1年たちました。&lt;/p&gt;
&lt;p&gt;ElasticSearchの書籍（英語）も出てきて、今年はElasticSearchが面白くなりそうだし、使ってる人たちから話も聞きたいなぁということで、主催しました。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;思った以上に興味のある方がいらっしゃったようで、100人応募のところ、チケットがすぐ完売してしまうほど。。。
しかも、当日もほぼ満員ということで、大変な盛況ぶりでした。&lt;/p&gt;
&lt;p&gt;スピーカーの皆様、参加された皆様、会場を提供していただいた&lt;a href=&#34;http://recruit-tech.co.jp&#34;&gt;リクルートテクノロジーズ&lt;/a&gt;さん、ありがとうございました！（たぶん、90人くらいいらっしゃってたかと。）&lt;/p&gt;
&lt;p&gt;こんなステキな案内板も用意してもらいました。スタッフのみなさんありがとうございます！

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.johtani.info/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:300&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20130830/es_signboard.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20130830/es_signboard.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://togetter.com/li/556140&#34;&gt;トゥギャっても頂きました&lt;/a&gt;。まとめていただいてありがとうございます！&lt;/p&gt;
&lt;p&gt;自分の発表や個々の発表に関する感想は以下のメモに。&lt;/p&gt;
&lt;h2 id=&#34;elasticsearch入門-johtani&#34;&gt;ElasticSearch入門 @johtani&lt;/h2&gt;
&lt;p&gt;スライド：&lt;a href=&#34;https://blog.johtani.info/images/entries/20130830/IntroductionES20130829.pdf&#34;&gt;ElasticSearch入門&lt;/a&gt;※スライドはPDFです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;緊張しまくりでわかりにくかったですかね。。。&lt;/li&gt;
&lt;li&gt;とりあえず、AWSのサービスじゃないってのだけでも覚えて帰っていただければ満足です。&lt;/li&gt;
&lt;li&gt;途中で見せた&lt;a href=&#34;https://chrome.google.com/webstore/detail/sense/doinijnbnggojdlcjifpdckfokbbfpbo&#34;&gt;ChromeプラグインのSense&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;わからなかった点や質問、ご意見などは、当ブログのコメント、私宛の＠ツイート、なんでもいいので、反応ください。なんでもいいので反応があると、今後の励みになりますので！&lt;/li&gt;
&lt;li&gt;ということで、発表でも言いましたが、わからないことがアレば、&lt;a href=&#34;http://twitter.com/johtani&#34;&gt;@johtani&lt;/a&gt;まで投げてもらえれば、「知らない」「ブログのネタにします」「ソレはこんなかんじですかねぇ？（テキトー）」みたいに答えると思います。&lt;/li&gt;
&lt;li&gt;Elasticsearch in Actionは帰宅中に、4章追加されたよというメールが届きました。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;宿題&#34;&gt;宿題&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;クラスタへのノードの追加の処理方法とか、シャーディングの実装とか。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;elasticsearchプラグイン入門--mocksolrpluginでsolrと入れ替えてみよう-菅谷さん&#34;&gt;elasticsearchプラグイン入門 ～ mocksolrpluginでSolrと入れ替えてみよう 菅谷さん&lt;/h2&gt;
&lt;p&gt;スライド：&lt;a href=&#34;http://www.slideshare.net/shinsuke/es-study1&#34;&gt;elasticsearchプラグイン入門&lt;/a&gt;　slideshare&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プラグイン構成とか（公式でまとまってるの見つけられないので助かります。）&lt;/li&gt;
&lt;li&gt;作る上でのポイントうれしいです。
&lt;ul&gt;
&lt;li&gt;パッケージ名変えられるとか、つらい。。。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Solr APIプラグインについて（Solrの振りしてくれる便利なヤツ）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;感想&#34;&gt;感想&lt;/h3&gt;
&lt;p&gt;まだ、プラグインを書いたことがないのですが、ちゃんとプラグインはどういう構成で書くんですよというまとまった資料って本家のサイトにもない気がしています。
なので、スライドが公開されたらすごく役に立つかと。
そのまえに、何かプラグイン書いてみます。。。&lt;/p&gt;
&lt;h2 id=&#34;debugging-and-testing-es-systems-chris-birchallさん&#34;&gt;Debugging and testing ES systems Chris Birchallさん&lt;/h2&gt;
&lt;p&gt;スライド：&lt;a href=&#34;http://www.slideshare.net/cb372/debugging-and-testing-es-systems&#34;&gt;Debugging and testing ES systems&lt;/a&gt;　slideshare&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;テストの方法とか便利なお話（最後のほうしか聞いてなかったですが。。。。）&lt;/li&gt;
&lt;li&gt;クエリのデバッグは色々とやらないと、なんでヒットしないのってよくあるので。とくに形態素解析を利用した検索の場合、短い文章（クエリ）と長い文章（ドキュメント）で切れ目が変わってうまくヒットしないとかありますよね。&lt;/li&gt;
&lt;li&gt;最後に少しだけ話しましたが、n-gramとKuromojiを組み合わせてOR検索とかすると良い場合があります。
&lt;ul&gt;
&lt;li&gt;インデックスが大きくなったり、OR検索なので遅くなったりというデメリットもありますが。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;感想-1&#34;&gt;感想&lt;/h3&gt;
&lt;p&gt;実際に使われているノウハウを元に話をしていただいたので助かりました。
最初に席を外してたのですが、戻ってきて日本語で普通に発表されててほんとにびっくりしましたｗ
テスト用プラグインがあるのとかは知らなかったです。
あと、使われてたIDEが&lt;a href=&#34;http://samuraism.com/products/jetbrains/intellij-idea&#34;&gt;IntelliJ IDEA&lt;/a&gt;でしたね！私も使ってます！&lt;/p&gt;
&lt;h2 id=&#34;ニコニコ動画データセット-25億件を検索可能にしてみよう-penguinana_&#34;&gt;ニコニコ動画データセット 25億件を検索可能にしてみよう @PENGUINANA_&lt;/h2&gt;
&lt;p&gt;スライド：&lt;a href=&#34;http://www.slideshare.net/penguinana/ss-25714442&#34;&gt;ニコニコ動画を検索可能にしてみよう&lt;/a&gt;　slideshare&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kibana@cookpadのお話&lt;/li&gt;
&lt;li&gt;どういう挙動するかをやってみればいいじゃんってことで、やってみるのカッコイイ！&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://goo.gl/FYtO5T&#34;&gt;http://goo.gl/FYtO5T&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;bigdeskとか。プラグインいろいろ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;感想-2&#34;&gt;感想&lt;/h3&gt;
&lt;p&gt;さすがです、ペンギン先生。大きなデータセットつかって、構築した環境に関する数値も書かれてる資料ができて素晴らしすぎです。
思った以上にサクサク動いてて、4hでインデクシングできるのもすごいなぁと。
私も見習ってこのくらいがサクッとできるようになりたい。。。
あと、発表後にムチャぶりしましたが、次回はぜひ検索側の性能とかも話してもらえたらと。&lt;/p&gt;
&lt;h2 id=&#34;反省点&#34;&gt;反省点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;イベントアテンドだと、キャンセル待ちができない＋どのくらいの方が興味をもっているのかわからない。&lt;/li&gt;
&lt;li&gt;イベントページの主催者は複数指定できる方がいい。（土壇場の登録の人が管理できない。私が司会やってたから）&lt;/li&gt;
&lt;li&gt;マイクが聞こえにくかった（音量調節とかちゃんと調べないと）&lt;/li&gt;
&lt;li&gt;懇親会は立食のほうがやはり動きやすい。&lt;/li&gt;
&lt;li&gt;懇親会が1時間ちょっとしかできなかった&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;雑感&#34;&gt;雑感&lt;/h2&gt;
&lt;p&gt;ということで、ES勉強会、主催の私が一番楽しめました。ありがとうございます。
（あと、気前よく調べて答えますと言ってしまいました。。。まぁ、いいトリガーになるので、ウェルカムですが）&lt;/p&gt;
&lt;p&gt;やっぱりKibanaについて興味を持ってる人も多いのかなぁという感触がしたので、次回はぜひKibana3の話をしてもらえるように頑張ります。
あと、&lt;a href=&#34;http://mobz.github.io/elasticsearch-head/&#34;&gt;elasticsearch-head&lt;/a&gt;を使われてるんだなぁと。私は&lt;a href=&#34;http://www.elastichq.org/gettingstarted.html&#34;&gt;elasticsearch-HQ&lt;/a&gt;を入れて使ってみてます。大きなクラスタ管理まではまだやってないので。&lt;/p&gt;
&lt;p&gt;あとは、やはりいろんな人に助けられてるなぁと実感しつつ、今後も開催するので助けてください！ということで。
（もちろん、Solr勉強会もがんばりますよー）&lt;/p&gt;
&lt;h2 id=&#34;関連ブログ&#34;&gt;関連ブログ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://repeatedly.github.io/ja/2013/08/elasticsearch-meetup-1st/&#34;&gt;ElasticSearch勉強会 第1回 - Go ahead!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mt.orz.at/archives/2013/09/elasticsearch-e.html&#34;&gt;タムタムの日記 - ElasticSearch勉強会 の参加メモ #elasticsearchjp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://samuraism.jp/diary/2013/09/03/1378216200000.html&#34;&gt;第1回ElasticSearch勉強会に行ってきた！ #elasticsearchjp - #侍ズム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://seratch.hatenablog.jp/entry/2013/09/03/234712&#34;&gt;第1回 ElasticSearch 勉強会に参加 #elasticsearchjp - seratch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;他にもブログを書かれた方がいらっしゃいましたたら、リンクしたいので連絡いただければ。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>ElasticSearchにプラグインで日本語Wikipediaデータを入れてみました</title>
      <link>https://blog.johtani.info/blog/2013/08/23/index-wikipedia-ja-to-elasticsearch/</link>
      <pubDate>Fri, 23 Aug 2013 12:02:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/08/23/index-wikipedia-ja-to-elasticsearch/</guid>
      <description>久々のブログはElasticSearchネタです。勉強会開催する予定だったりすので、もう少し触っておきたいなと。 お手軽に検索するデータとして</description>
      <content:encoded>&lt;p&gt;久々のブログはElasticSearchネタです。勉強会開催する予定だったりすので、もう少し触っておきたいなと。
お手軽に検索するデータとして、よくWikipediaのデータを使っています。
ElasticSearchには&lt;a href=&#34;https://github.com/elasticsearch/elasticsearch-river-wikipedia&#34;&gt;elasticsearch-river-wikipedia&lt;/a&gt;という便利なプラグインがあり、Wikipediaのデータを簡単に検索可能な状態にできます。このRiverを利用して日本語のWikipediaのデータを入れたので、メモを取っておきます。
まずは、river-wikipediaで日本語のデータをインデクシングしてみるまでの説明です。
日本語特有の設定（Kuromojiを利用したインデクシング）などはまた後日。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;プラグインのインストール&#34;&gt;プラグインのインストール&lt;/h2&gt;
&lt;p&gt;対象とするElasticSearchは現時点で最新版の0.90.3とします。
最新版でRiver動かないなぁとつぶやいた影響かどうかはわかりませんが、2013/08/19に最新版のElasticSearchで動作するプラグインが公開されました。&lt;/p&gt;
&lt;p&gt;まずはインストールです。
HPにも書いてありますが、以下のコマンドを実行すればインストールされます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ ./bin/plugin -install elasticsearch/elasticsearch-river-wikipedia/1.2.0
-&amp;gt; Installing elasticsearch/elasticsearch-river-wikipedia/1.2.0...
Trying http://download.elasticsearch.org/elasticsearch/elasticsearch-river-wikipedia/elasticsearch-river-wikipedia-1.2.0.zip...
Downloading ..........DONE
Installed river-wikipedia into /opt/elasticsearch/plugins/river-wikipedia
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ElasticSearchが起動している場合はプラグインをインストール後、認識させるためにElasticSearchを再起動します。&lt;/p&gt;
&lt;h2 id=&#34;日本語wikipediaのインデクシング&#34;&gt;日本語Wikipediaのインデクシング&lt;/h2&gt;
&lt;p&gt;通常は英語のWikipediaがインデクシングされますが、対象となるファイルを変更することで日本語のWikipediaもインデクシング可能です。
手元に日本語Wikipediaのダンプファイルがあるものとします。（&lt;a href=&#34;http://ja.wikipedia.org/wiki/Wikipedia:%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89&#34;&gt;ダウンロードはWikipediaデータベースダウンロード&lt;/a&gt;のページにあるpages-articles.xml.bz2のファイルです）&lt;/p&gt;
&lt;p&gt;ファイルを指定してインデクシングするには、つぎのcurlコマンドを実行します。
コマンドを実行するとすぐにインデクシングが始まりますので注意が必要です。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -XPUT localhost:9200/_river/ja-wikipedia/_meta -d &#39;
{
    &amp;quot;type&amp;quot; : &amp;quot;wikipedia&amp;quot;,
    &amp;quot;wikipedia&amp;quot; : {
        &amp;quot;url&amp;quot; : &amp;quot;file:/home/johtani/src/jawiki-latest-pages-articles.xml&amp;quot;
    },
    &amp;quot;index&amp;quot; : {
        &amp;quot;bulk_size&amp;quot; : 1000
    }
}&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ここでURLに含まれる「ja-wikipedia」がインデックス名になります。
また、JSONの&amp;quot;url&amp;quot;にはファイルの場所を指定するため、&lt;code&gt;file:&lt;/code&gt;で開始するパスを指定します。
例では、bz2を解凍したファイルを指定していますが、bz2のままのファイルでもOKです。&lt;/p&gt;
&lt;p&gt;上記コマンドを実行すると、&lt;code&gt;_river&lt;/code&gt;というインデックスにつぎのようなエントリが増えています。
(&lt;code&gt;curl -XGET &#39;localhost:9200/_river/ja-wikipedia/_search?pretty&lt;/code&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;took&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;timed_out&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_shards&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;total&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;successful&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;failed&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
   },
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;hits&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;total&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;max_score&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;hits&amp;#34;&lt;/span&gt;: [
         {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_index&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_river&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ja-wikipedia&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_status&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_score&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_source&amp;#34;&lt;/span&gt;: {
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ok&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;node&amp;#34;&lt;/span&gt;: {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gdyvwpiAR52lqUCcRhVwsg&amp;#34;&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blitzschlag, Baron Von&amp;#34;&lt;/span&gt;,
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;transport_address&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inet[/192.168.100.7:9300]&amp;#34;&lt;/span&gt;
               }
            }
         },
         {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_index&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_river&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ja-wikipedia&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_meta&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_score&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_source&amp;#34;&lt;/span&gt;: {
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wikipedia&amp;#34;&lt;/span&gt;,
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;wikipedia&amp;#34;&lt;/span&gt;: {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file:/home/johtani/src/jawiki-latest-pages-articles.xml&amp;#34;&lt;/span&gt;
               },
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;: {
                  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;bulk_size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
               }
            }
         }
      ]
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;&amp;quot;_id&amp;quot;: &amp;quot;_meta&amp;quot;&lt;/code&gt;というエントリがさきほど登録したWikipediaのRiverに関する設定です。
&lt;code&gt;&amp;quot;_id&amp;quot;: &amp;quot;_status&amp;quot;&lt;/code&gt;というエントリが起動したRiverの状態になります。&lt;/p&gt;
&lt;h2 id=&#34;riverの停止&#34;&gt;Riverの停止&lt;/h2&gt;
&lt;p&gt;日本語Wikipediaは結構サイズが大きく、手元のAirでインデクシングするのに30分程度かかりました。（bz2圧縮されていないファイルで、何もしていない状態）&lt;/p&gt;
&lt;p&gt;途中でRiverを停止したくなった場合は、以下のcurlコマンドを実行します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -XDELETE &#39;localhost:9200/_river/ja-wikipedia&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;先ほど設定した&lt;code&gt;_river/ja-wikipedia&lt;/code&gt;の情報を削除すると、エントリが削除されたのを検知してRiverが停止します。ログにはつぎのようなメッセージが表示されます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[2013-08-26 18:26:50,130][INFO ][cluster.metadata         ] [Blitzschlag, Baron Von] [[_river]] remove_mapping [ja-wikipedia]
[2013-08-26 18:26:50,130][INFO ][river.wikipedia          ] [Blitzschlag, Baron Von] [wikipedia][ja-wikipedia] closing wikipedia river
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Riverを停止してもそれまでインデクシングされたデータは検索できます。
データはちょっとだけで良いという場合は、先ほどの&lt;code&gt;_river&lt;/code&gt;のデータを削除してください。
（◯件だけ登録したいとかできるかは調べてないです。）&lt;/p&gt;
&lt;h2 id=&#34;サイズとかマッピングとか&#34;&gt;サイズとかマッピングとか&lt;/h2&gt;
&lt;h3 id=&#34;サイズ&#34;&gt;サイズ&lt;/h3&gt;
&lt;p&gt;インデックス前のXMLのサイズが5.7Gのとき、ElasticSearchのインデックスサイズ（Optimize後）は7.2Gとなりました。すこし古いファイルを利用しているため、最新版とはサイズが異なるかもしれません。&lt;/p&gt;
&lt;p&gt;あと、データ数が、1540000件とやけにきりがいいのがちょっと気になっています。。。
bulkのサイズを10000で指定してインデックスしたので、切れてるのかなぁと。&lt;/p&gt;
&lt;p&gt;ということは、データが欠落しているような気がするのでRiverの作りの問題なのか、ElasticSearchの問題なのかはちょっと調べてみないとわからないなと。&lt;/p&gt;
&lt;h3 id=&#34;マッピング&#34;&gt;マッピング&lt;/h3&gt;
&lt;p&gt;出来上がったインデックスのマッピング（Solrでいうスキーマみたいなもの）は次のようになっています。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ja-wikipedia&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;page&amp;#34;&lt;/span&gt;: {
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;category&amp;#34;&lt;/span&gt;: {
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
            },
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;disambiguation&amp;#34;&lt;/span&gt;: {
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;boolean&amp;#34;&lt;/span&gt;
            },
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;link&amp;#34;&lt;/span&gt;: {
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
            },
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;redirect&amp;#34;&lt;/span&gt;: {
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;boolean&amp;#34;&lt;/span&gt;
            },
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;special&amp;#34;&lt;/span&gt;: {
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;boolean&amp;#34;&lt;/span&gt;
            },
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;stub&amp;#34;&lt;/span&gt;: {
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;boolean&amp;#34;&lt;/span&gt;
            },
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;: {
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
            },
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: {
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
            }
         }
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wikipediaの各種データが上記のフィールドに入っています。
また、マッピングタイプはデフォルトで「page」というタイプになっています。&lt;/p&gt;
&lt;h2 id=&#34;検索&#34;&gt;検索&lt;/h2&gt;
&lt;p&gt;先ほどのマッピングを元に検索すればOKです。例えばつぎのような感じです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -XPOST &#39;localhost:9200/ja-wikipedia/_search?pretty&#39; -d &#39;
{
    &amp;quot;size&amp;quot; : 3,
    &amp;quot;script_fields&amp;quot;: {
       &amp;quot;title_only&amp;quot;: {
          &amp;quot;script&amp;quot;: &amp;quot;_source.title&amp;quot;
       }
    }, 
    &amp;quot;query&amp;quot; : {
        &amp;quot;query_string&amp;quot;: {
            &amp;quot;default_field&amp;quot;: &amp;quot;title&amp;quot;,
            &amp;quot;query&amp;quot; : &amp;quot;千葉&amp;quot;
        }
    }
}&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;結果はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;took&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;timed_out&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_shards&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;total&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;successful&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;failed&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
   },
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;hits&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;total&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8616&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;max_score&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5.8075247&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;hits&amp;#34;&lt;/span&gt;: [
         {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_index&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ja-wikipedia&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;page&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3582&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_score&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5.8075247&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;fields&amp;#34;&lt;/span&gt;: {
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;title_only&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;千葉&amp;#34;&lt;/span&gt;
            }
         },
         {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_index&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ja-wikipedia&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;page&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2352241&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_score&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;4.94406&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;fields&amp;#34;&lt;/span&gt;: {
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;title_only&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;千葉千枝子&amp;#34;&lt;/span&gt;
            }
         },
         {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_index&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ja-wikipedia&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;page&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;14020&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;_score&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;4.8754807&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;fields&amp;#34;&lt;/span&gt;: {
               &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;title_only&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;千葉千恵巳&amp;#34;&lt;/span&gt;
            }
         }
      ]
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;結果を見やすくするため、タイトルだけを「title_only」という表示にしています。
ただ、この検索だと、一見「千葉」できちんとヒットしているように見えますが、ElasticSearchのフィールドの定義はstring型になっています。なので、実は「千」や「葉」だけのデータもヒットしています。
マルチバイト文字は1文字ずつインデックスされてしまい、query_stringというクエリでは、フレーズ検索などができていないためです。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;プラグインいれて、XMLファイルがあれば、検索できるデータが出来上がるので、
暇があったら、お試しで触ってみるデータを簡単に入れてみてはどうでしょうか。&lt;/p&gt;
&lt;p&gt;ただ、いくつか気になる点も。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日本語が検索しにくい（string型のフィールドなのでuni-gramっぽくなっている）&lt;/li&gt;
&lt;li&gt;bulk_sizeの影響で端数が登録できてない（バグ？どうなの？）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ということで、ちょっと使いにくいかもなぁということで、つぎはKuromojiを利用してインデックスしてみてみようかなと。次回のエントリで書く予定です。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>Kibana3というのもありまして</title>
      <link>https://blog.johtani.info/blog/2013/06/19/introduction-kibana3/</link>
      <pubDate>Wed, 19 Jun 2013 23:43:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/06/19/introduction-kibana3/</guid>
      <description>前回は3番煎じぐらいでしたが、今回は初記事かな？（だといいな） Kibanaには、前回の記事で書いたものとは別に開発中のKibana3というの</description>
      <content:encoded>&lt;p&gt;前回は3番煎じぐらいでしたが、今回は初記事かな？（だといいな）&lt;/p&gt;
&lt;p&gt;Kibanaには、&lt;a href=&#34;http://blog.johtani.info/blog/2013/06/10/fluent-es-kibana/&#34;&gt;前回の記事&lt;/a&gt;で書いたものとは別に開発中の&lt;a href=&#34;http://three.kibana.org/&#34;&gt;Kibana3&lt;/a&gt;というのが存在します。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;kibana3って&#34;&gt;Kibana3って？&lt;/h2&gt;
&lt;p&gt;Kibana2はRubyで書かれていましたが、Kibana3はHTML＋JavaScriptで構成されています。
ですので、ApacheなどのWebサーバに配置することで、利用が可能となります。
ただ、HTML＋JavaScriptのため、ブラウザ上で動作するためブラウザが動作するマシンからElasticSearch（通常だと&lt;code&gt;http://マシン名orIPアドレス:9200/&lt;/code&gt;とか）にアクセスできなければいけないという制限があります。&lt;/p&gt;
&lt;p&gt;この条件さえクリア出来れば、Kibana3ではKibana2よりも様々なパネルが用意されていて、色々できそうなのでお勧めです。&lt;/p&gt;
&lt;h2 id=&#34;インストール&#34;&gt;インストール&lt;/h2&gt;
&lt;p&gt;ElasticSearchやログについては、前回の記事の環境を利用しました。
ですので、Kibana3のインストールのみです。（ApacheもCentOSのサーバに入っていたので。）&lt;/p&gt;
&lt;p&gt;ダウンロードして、Apacheの公開ディレクトリに置いただけです。（お試し環境のため、権限とかは大目に見てください。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git clone https://github.com/elasticsearch/kibana.git kibana-javascript
$ cp -R kibana-javascript /var/www/html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;今回はApacheとElasticSearchが同一マシン（＝同一IPアドレスでアクセス可能）で動作している＋ElasticSearchへのアクセスのポートがデフォルト（9200）のため特に設定が必要ありませんでした。&lt;/p&gt;
&lt;p&gt;ElasticSeachサーバとKibana3のApacheのサーバが別のサーバの場合やElasticSearchサーバのポートが異なる場合はkibana-javascript/config.jsファイルの編集が必要になります。
cloneしてすぐのconfig.jsは、以下のとおりです。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;elasticsearch:  URL to your elasticsearch server. You almost certainly don&amp;#39;t
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;                want &amp;#39;http://localhost:9200&amp;#39; here. Even if Kibana and ES are on
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;                the same host
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;kibana_index:   The default ES index to use for storing Kibana specific object
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;                such as stored dashboards
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;modules:        Panel modules to load. In the future these will be inferred
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;                from your initial dashboard, though if you share dashboards you
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;                will probably need to list them all here
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;If you need to configure the default dashboard, please see dashboards/default
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Settings&lt;/span&gt;(
{
  &lt;span style=&#34;color:#75715e&#34;&gt;// By default this will attempt to reach ES at the same host you have
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// elasticsearch installed on. You probably want to set it to the FQDN of your
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// elasticsearch host
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;elasticsearch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;window.&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;hostname&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:9200&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#75715e&#34;&gt;// elasticsearch: &amp;#39;http://localhost:9200&amp;#39;,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;kibana_index&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kibana-int&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;modules&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;          [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;histogram&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;map&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pie&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;table&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;stringquery&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sort&amp;#39;&lt;/span&gt;,
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;timepicker&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fields&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hits&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dashcontrol&amp;#39;&lt;/span&gt;,
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;column&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;derivequeries&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;trends&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bettermap&amp;#39;&lt;/span&gt;],
  }
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ポート番号が異なる場合は、1つ目の「elasticsearch:」で指定されている「9200」を環境に合わせて編集するだけになります。
Kibana3とElasticSearchのホストが異なる場合は、1つ目の「elasticsearch:」の行をコメントアウトし、2つ目を有効にしてから環境に合わせたURLに修正して保存すればOKです。&lt;/p&gt;
&lt;p&gt;以上で、インストールは完了します。あとは、以下のURLにアクセスするだけです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://hogehoge/kibana-javascript/
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;画面構成&#34;&gt;画面構成&lt;/h2&gt;
&lt;p&gt;アクセスすると次のような画面が表示されます。&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.johtani.info/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20130619/kibana3&amp;#43;kibana2-es-index.jpeg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20130619/kibana3&amp;#43;kibana2-es-index.jpeg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption align=&#34;center&#34;&gt;&lt;h4&gt;初期画面&lt;/h4&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;左上に赤い帯で、「 Oops! Could not match index pattern to any ElasticSearch indices」とエラーが表示されました。&lt;/p&gt;
&lt;p&gt;KibanaはElasticSearchに「logstatsh-年.月.日」という日付ごとのインデックスが存在することが前提となっています。
Kibanaに初めてアクセスした場合、「logstash-当日日付」で始まるインデックスを描画しようとします。
これは、私が前回利用したElasticSearchの環境に古いデータ（試したのが19日、データは10日のみ）しか入っていないために出たエラーです。&lt;/p&gt;
&lt;p&gt;日付は「Options」というエラーが出ている付近の「Absolute」というリンクをクリックすると、特定の日付をカレンダーで指定することができるようになります。データは6/10にしか入っていないので、6/10（12時くらいから20時くらいまで）のを指定します。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20130619/kibana3-selected-calendar.jpeg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20130619/kibana3-selected-calendar.jpeg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption align=&#34;center&#34;&gt;&lt;h4&gt;日付指定&lt;/h4&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;選択すると無事データが見えるようになりました。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20130619/Kibana3-sample-include-description.jpeg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20130619/Kibana3-sample-include-description.jpeg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption align=&#34;center&#34;&gt;&lt;h4&gt;データ描画&lt;/h4&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&#34;ダッシュボードの構成初期&#34;&gt;ダッシュボードの構成（初期）&lt;/h3&gt;
&lt;p&gt;Kibana3では、この画面をダッシュボードというようです。
このダッシュボードは初期状態では、以下のパーツが表示されています。（子要素があとで説明するパネル名です）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Options：描画対象の日付の指定やダッシュボードの保存などを行うRow
&lt;ul&gt;
&lt;li&gt;timepickerパネル：日付の指定&lt;/li&gt;
&lt;li&gt;dashcontrolパネル：ダッシュボードの制御（保存とか）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Query：ログ検索式を入れるところ
&lt;ul&gt;
&lt;li&gt;stringqueryパネル&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Graph：ヒストグラムの描画（X軸：時間、Y軸：ログ件数）
&lt;ul&gt;
&lt;li&gt;histogramパネル&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Events：検索にヒットしたログデータの描画領域
&lt;ul&gt;
&lt;li&gt;fieldsパネル：表示するフィールドの選択（左側。チェックを入れると右側のログ表示領域のカラムが増える）&lt;/li&gt;
&lt;li&gt;tableパネル：ログデータ（右側。左側でチェックが入ったカラムだけが表示される。）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あくまで初期表示です。各パーツの設定アイコン（歯車のマーク）をクリックすると色々と設定が可能です。
また、「Events」など名称はクリック可能となっていて、クリックすると、そのパーツが折りたたまれた状態にすることも可能です。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20130619/kibana3-collaped.jpeg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20130619/kibana3-collaped.jpeg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption align=&#34;center&#34;&gt;&lt;h4&gt;折りたたんだ状態&lt;/h4&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h3 id=&#34;ダッシュボードの設定&#34;&gt;ダッシュボードの設定&lt;/h3&gt;
&lt;p&gt;ダッシュボードには独自のパネルを簡単に追加することができます。
ダッシュボードの構成はページの一番上にある「Logstash Search」の設定アイコンをクリックすると設定画面が開きます。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20130619/kibana3-dashboad-setting.jpeg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20130619/kibana3-dashboad-setting.jpeg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption align=&#34;center&#34;&gt;&lt;h4&gt;ダッシュボード設定&lt;/h4&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;「New row」にタイトル名を適当にいれて「Create Row」するとあたらしくパネルを追加することができるRowが追加されます。「Rows」の「Move」にある矢印でRow自体の表示場所を上下に移動することも可能です。&lt;/p&gt;
&lt;h3 id=&#34;rowの設定&#34;&gt;Rowの設定&lt;/h3&gt;
&lt;p&gt;追加した「Hoge」にパネルを追加する場合はHogeの上にある設定アイコンをクリックすると設定画面が開きます。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20130619/kibana3-row-setting.jpeg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20130619/kibana3-row-setting.jpeg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption align=&#34;center&#34;&gt;&lt;h4&gt;Rowの設定&lt;/h4&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;ここでKibana3で用意されているパネルの追加ができます。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20130619/kibana3-panel-add.jpeg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20130619/kibana3-panel-add.jpeg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption align=&#34;center&#34;&gt;&lt;h4&gt;Panel追加ボタン&lt;/h4&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;パネルを選んでボタンを押せばすぐに表示されます。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20130619/kibana3-sample-panels.jpeg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20130619/kibana3-sample-panels.jpeg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption align=&#34;center&#34;&gt;&lt;h4&gt;パネルの羅列&lt;/h4&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;こんな感じです。とりあえず、ポコポコと追加してみました。&lt;/p&gt;
&lt;p&gt;利用できるパネルの種類は以下の様なパターンです。
適当ですが、表にしてみました。&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;&lt;th&gt;パネル名&lt;/th&gt;&lt;th&gt;概要&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;column&lt;/td&gt;&lt;td&gt;Rowの中にパネルを配置するコンテナを用意するためのパネル&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;dashcontrol&lt;/td&gt;&lt;td&gt;ダッシュボードの保存、保存したダッシュボードの表示などの操作ボタン&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;text&lt;/td&gt;&lt;td&gt;markdown形式などで記述が可能な文章を表示できるパネル&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;stringquery&lt;/td&gt;&lt;td&gt;検索クエリ入力用パネル&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;derivequeries&lt;/td&gt;&lt;td&gt;フィールドと検索式がわかれた形式の検索入力用パネル&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;timepicker&lt;/td&gt;&lt;td&gt;ログ表示の期間を指定するパネル&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;histogram&lt;/td&gt;&lt;td&gt;ログの件数のヒストグラム表示用パネル&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;hits&lt;/td&gt;&lt;td&gt;ヒット件数表示用パネル&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;pie&lt;/td&gt;&lt;td&gt;パイチャート表示用パネル&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;trends&lt;/td&gt;&lt;td&gt;指定された時間でデータの増減を%表示するパネル&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;sort&lt;/td&gt;&lt;td&gt;ソート条件指定用のプルダウン表示用パネル（変更したらtableの内容がソートされる）&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;table&lt;/td&gt;&lt;td&gt;ログデータ表示用パネル&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;fields&lt;/td&gt;&lt;td&gt;tableパネルに表示するフィールドを選択するための補助パネル&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;bettermap&lt;/td&gt;&lt;td&gt;なんか地図が出てきたパネル&lt;br/&gt;GeoJSONデータをゴニョゴニョ（表示かな？）できるみたい&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;map&lt;/td&gt;&lt;td&gt;なんか世界地図が出てきたパネル&lt;br/&gt;２文字の国コード（jaとかか？）かU.S.の州コードのデータを元に地図に色をつけるのかな？&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;これらのパネルは個々に色々と設定が可能です。他にもdebug、map2など有りそうでしたがまだ使えないみたいです。&lt;/p&gt;
&lt;p&gt;適当に触ってて気づいた注意点です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tableは１ダッシュボードで１つだけが良さそう。
&lt;ul&gt;
&lt;li&gt;２つあると、どちらかにしか描画されない。columnに入れるとグルーピングできたりするのかなぁ？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;stringquery、timepickerも１ダッシュボードで１つが良さそう。
&lt;ul&gt;
&lt;li&gt;これもtableと似たような理由です。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ダッシュボード保存し忘れて泣きそうになる
&lt;ul&gt;
&lt;li&gt;JSで実装されてて、自分で色々とカスタマイズできるのですが、保存するのを忘れて泣きそうになりましたｗ&lt;/li&gt;
&lt;li&gt;カスタマイズしたダッシュボードについては、ローカルに保存する以外にElasticSearchにも保存ができるみたいです。チームで共有することもできそうです。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;derivequeriesを表示するとグラフがカラフルに
&lt;ul&gt;
&lt;li&gt;derivequeriesを追加したらグラフが急にカラフルになりました。&lt;/li&gt;
&lt;li&gt;どうもderivequeriesのFieldの部分を変更すると、そのフィールドの値を元にグラフを細分化してくれるようです。色の数の上限はderivequeriesのLength属性の数値で制御出来ます。（5だと5個まで色が出る）&lt;/li&gt;
&lt;li&gt;histogramのパネルで自分でクエリを記載することも可能です。ただ、derivequeriesのフィールド変更すると書き換わっちゃいます。。。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20130619/kibana3-multi-color-histogram-type.jpeg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20130619/kibana3-multi-color-histogram-type.jpeg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption align=&#34;center&#34;&gt;&lt;h4&gt;derivequeriesを追加したらカラフルに&lt;/h4&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;ヒストグラムは色々なパターンのグラフを描画できました。ラインによる描画（histo1）、総数を100%としたパーセンテージでの表示（histo2）、ライン＋点による描画（histo3）などです。&lt;/p&gt;


&lt;div class=&#34;box&#34; &gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.johtani.info/images/entries/20130619/kibana3-several-histogram.jpeg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://blog.johtani.info/images/entries/20130619/kibana3-several-histogram.jpeg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption align=&#34;center&#34;&gt;&lt;h4&gt;ヒストグラムのいくつかのパターン&lt;/h4&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;
&lt;p&gt;ということで、適当にですが触ってみました。
Kibana2はApacheのアクセスログとかの表示しかできない感じがしましたが、Kibana3だといろいろなデータを描画できそうだなと。
logstash形式のインデックスを用意するのが前提になってるので、時系列データをグラフ描画するのに向いてるんでしょうか。
お手軽にグラフ化できるし、自分でダッシュボードをカスタマイズできるのは素敵です。
ただ、クエリとグラフの関係などはちょっと癖があるかもしれないので、色々と試してみないといけないかもしれないです。
（たとえば、特定のフィールドの値について「A、B、その他」みたいなグラフの描画とかをどうするかとか）&lt;/p&gt;
&lt;p&gt;地図の描画は試してみたいかなぁ。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>apache-loggen &#43; fluentd &#43; elasticsearch &#43; kibana = ログ検索デモ</title>
      <link>https://blog.johtani.info/blog/2013/06/10/fluent-es-kibana/</link>
      <pubDate>Mon, 10 Jun 2013 23:34:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/06/10/fluent-es-kibana/</guid>
      <description>もう何番煎じだ？ってくらい書かれてますが、コリもせず書いてみました。 Elasticsearch＋Kibanaの環境を作って、タムタムさんのロ</description>
      <content:encoded>&lt;p&gt;もう何番煎じだ？ってくらい書かれてますが、コリもせず書いてみました。
Elasticsearch＋Kibanaの環境を作って、タムタムさんのログ生成ツールからApacheのダミーログを流しこんで入れてみました。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;参考url&#34;&gt;参考URL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://memocra.blogspot.jp/2013/04/kibanakibanaelasticsearchfluentd.html&#34;&gt;memorycraftさんのブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kibana.org/&#34;&gt;Kibana&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wwwelasticsearch.org&#34;&gt;Elasticsearch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fluentd.org&#34;&gt;fluentd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mt.orz.at/archives/2012/11/apacherubygems.html&#34;&gt;apache-loggen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;インストールと起動&#34;&gt;インストールと起動&lt;/h2&gt;
&lt;p&gt;今回はCentOSへのインストールです。
基本的にはmemorycraftさんのブログの流れのままです。&lt;/p&gt;
&lt;h3 id=&#34;elasticserchのインストールと起動&#34;&gt;elasticserchのインストールと起動&lt;/h3&gt;
&lt;p&gt;ダウンロードして、起動するだけ。
お試しということで、-fオプションにてコンソールにログ出力。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -OL https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-0.90.1.tar.gz
tar zxvf elasticsearch-0.90.1.tar.gz
cd elasticsearch-0.90.1
./bin/elasticsearch -f
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;kibanaのインストールと起動&#34;&gt;Kibanaのインストールと起動&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git clone&lt;/code&gt;してbundleインストール&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone --branch=kibana-ruby https://github.com/rashidkpc/Kibana.git
cd Kibana
bundle install
ruby kibana.rb
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これで、Kibana＋ESのインストール＋起動が完了。
下地が完了。&lt;/p&gt;
&lt;h3 id=&#34;td-agentのインストールと起動&#34;&gt;td-agentのインストールと起動&lt;/h3&gt;
&lt;p&gt;ログの流し込みはlogstashなのですが、fluentdのelasticsearchプラグインにて流しこむこともできます。
td.repoとしてtd-agentのリポジトリを登録してから以下を実行します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum install td-agent -y
/usr/lib64/fluent/ruby/bin/fluent-gem install fluent-plugin-elasticsearch
vim　/etc/td-agent/td-agent.conf
/etc/init.d/td-agent start
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これで、td-agentがインストール出来ました。
次は設定です。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;source&amp;gt;
  type tail
  format apache
  path /var/log/httpd/dummy_access_log
  tag dummy.apache.access
&amp;lt;/source&amp;gt;

&amp;lt;match *.apache.*&amp;gt;
  index_name adminpack
  type_name apache
  type elasticsearch
  include_tag_key true
  tag_key @log_name
  host localhost
  port 9200
  logstash_format true
  flush_interval 10s
&amp;lt;/match&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上が設定です。td-agentはtd-agentというユーザで起動されるので、/var/log/httpdディレクトリにアクセスできるかだけ確認が必要です。&lt;br&gt;
いくつかの設定値について気になったので調べました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;index_name：adminpackとなってるが、elasticsearchではlogstash-xxxとなってる。
&lt;ul&gt;
&lt;li&gt;これは、logstash_formatがtrueの場合は、利用されないので、指定しなくてもいい。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;type_name：Elasticsearchのタイプ名
*　これはlogstash_formatを指定しても有効。ただし、Kibana側で画面からのtype指定は不可能。KibanaConfig.rbにて指定することは可能。&lt;/li&gt;
&lt;li&gt;logstash_format：Kibana用にlogstashフォーマットで出力するオプション
&lt;ul&gt;
&lt;li&gt;この指定があるときは、index名が「logstash-YYYY.mm.dd」となる&lt;/li&gt;
&lt;li&gt;record（ログ）に@timestampとして時刻が追加される。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tag_key：include_tag_keyがtrueと指定されているため、record（ログ）にtag_keyで指定した文字列をキー、値としてtagの値（上記例だとdummy.apache.access）が付与されて登録される。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;apache-loggenのインストールと起動&#34;&gt;apache-loggenのインストールと起動&lt;/h2&gt;
&lt;p&gt;タムタムさんが作成されたApacheのログのダミーを生成するツールです。&lt;br&gt;
gem化されてるので、インストールは非常に簡単です。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gem install apache-loggen
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;で、ログを出力します。出力先は先程設定したdummy_access_logです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apache-loggen --rate=10 --progress /var/log/httpd/dummy_access_log
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;秒間10アクセスログを出力してくれます。
これで、Kibanaでログが見れるようになりました。
なんて簡単なんでしょう。。。
簡単なログの検索ができてしまいました。
他の形式のログがどうなるのかとかは、また時間があれば。。。&lt;/p&gt;
&lt;h2 id=&#34;感想とか&#34;&gt;感想とか&lt;/h2&gt;
&lt;p&gt;非常に簡単でした。素敵です。いくつかこうなるのかな？というのを試してみたのでメモを。&lt;/p&gt;
&lt;p&gt;いくつか疑問点です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;溜まったログの削除は手動？
&lt;ul&gt;
&lt;li&gt;おそらく。日付ごとにindexが出来上がっているので、削除は楽そう。「logstash-年月日」なので。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;認証とかかけれるの？
&lt;ul&gt;
&lt;li&gt;ログ検索は内部でするだろうから、まぁ、なくていいのかな。ログインすらないし。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;複数行のログとかってどーすんだろう？（JavaのExceptionとかが混ざるやつ）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本格的に触るようになれば調べるかなぁ。。。&lt;/p&gt;
&lt;p&gt;あと、ログが増えてきた時にどういった分割構成ができるだろう？って思って考えてみたのが以下になります。&lt;/p&gt;
&lt;h3 id=&#34;構成パターン&#34;&gt;構成パターン&lt;/h3&gt;
&lt;p&gt;ログを複数扱う場合は次のようなパターンがありそうかと。&lt;/p&gt;
&lt;h4 id=&#34;タグfluentdのタグで識別&#34;&gt;タグ（fluentdのタグ）で識別&lt;/h4&gt;
&lt;p&gt;「@log_name」という名前＝fluentdのタグにてログを識別することで、異なるログを検索することができそうです。
タグであれば、プラグインによってはログ出力時に制御も可能だと思うので、td-agentの設定を変更したりすることもなく対応が可能かと。
ただ、ログの種別ごとにKibanaのプロセスを別にして起動したいといった用途には向いてなさそうです。&lt;/p&gt;
&lt;h4 id=&#34;type_nameによる識別&#34;&gt;type_nameによる識別&lt;/h4&gt;
&lt;p&gt;ElasticSearchの機能であるtypeを利用したログの識別パターンです。&lt;br&gt;
fluent-plugin-elasticsearchの設定で&lt;code&gt;type_name&lt;/code&gt;を指定しました。
ここを別の名前にすることで、識別することも可能です。&lt;/p&gt;
&lt;p&gt;&lt;strike&gt;ただし、この場合はKibanaの画面から指定して検索することができません。&lt;/strike&gt;
&lt;strong&gt;&lt;em&gt;→コメント頂きました。検索条件に「_type:タイプ名」と検索することでtypeを利用した検索が可能です。&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
タグ（@log_name）でも識別できるようにするなどの工夫が必要です。
その代わり、タグ識別ではできなかったKibanaのプロセスを別にして起動することは可能になります。&lt;br&gt;
KibanaConfig.rbのTypeに値を設定することで、起動したKibanaが対象とするログを絞り込むことが可能です。
こうすることで例えば、apache用のKibanaとtomcat用のKibanaは別プロセスにして、ElasticSearchのクラスタは1つという構成も可能になります。&lt;/p&gt;
&lt;h4 id=&#34;elasticsearchサーバを別立て&#34;&gt;ElasticSearchサーバを別立て&lt;/h4&gt;
&lt;p&gt;ElasticSearchサーバをそもそも別のプロセスor別のサーバで起動し、Kibanaも別々にすればログの識別も可能です。
可能ですが、色々と管理するものが増えてめんどくさそうですね。。。&lt;/p&gt;
&lt;h4 id=&#34;インデックス名変更&#34;&gt;インデックス名変更&lt;/h4&gt;
&lt;p&gt;最後は、fluent-plugin-elasticsearchの設定で「logstash_format」をfalseにすれば、好きなindex_nameを付与できるので、
ログ種別ごとに名前を変更することで識別できます。&lt;br&gt;
ただ、logstash形式でないインデックス名の場合、日付ローテーションができなかったり、Kibana内部で検索時に日付で検索対象を絞り込んで検索することで高速化するといった処理など、使えない機能が多々出てきてしまうのであまりおすすめじゃないかと。。。&lt;/p&gt;
&lt;p&gt;ということで、流行りものは触っておこうということで、さわってブログ書いてみました。&lt;br&gt;
開発中に立てておいて、各サーバのログを流しこんでおくなどにも利用できるかもしれないです。
アラート通知などの機能が出てくるともっと便利かもしれないです。&lt;/p&gt;
</content:encoded>
    </item>
    
    <item>
      <title>elasticsearch-analysis-kuromojiでユーザ辞書の利用方法(Jugemより移植)</title>
      <link>https://blog.johtani.info/blog/2013/03/20/elasticsearch-analysis-kuromoji%E3%81%A7%E3%83%A6%E3%83%BC%E3%82%B6%E8%BE%9E%E6%9B%B8%E3%81%AE%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 20 Mar 2013 16:43:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/03/20/elasticsearch-analysis-kuromoji%E3%81%A7%E3%83%A6%E3%83%BC%E3%82%B6%E8%BE%9E%E6%9B%B8%E3%81%AE%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95/</guid>
      <description>なんか、とても久しぶりにイベント参加メモ以外の投稿です。 elastic searchのMLを見てたら、KuromojiのAnalyzerを使うときにユーザ</description>
      <content:encoded>&lt;p&gt;なんか、とても久しぶりにイベント参加メモ以外の投稿です。
elastic searchのMLを見てたら、KuromojiのAnalyzerを使うときにユーザ辞書使うのどうするの？という&lt;a href=&#34;https://groups.google.com/forum/?fromgroups=#!topic/elasticsearch/7oGNCM7QH4s&#34;&gt;投稿&lt;/a&gt;を見かけました。&lt;/p&gt;
&lt;p&gt;Kuromojiのユーザ辞書にもちょうど興味があったり、elasticsearchもちょっとずつ触りたかったのでちょっと試してみました。（返信もしてみましたが、テキトーな英語です。。。）&lt;/p&gt;
&lt;p&gt;elasticsearch-kuromoji-pluginのインストールなどは&lt;a href=&#34;http://qiita.com/items/134b049a59fe396c9475&#34;&gt;ElasticSearch で kuromoji を使う (ES 0.90.Beta1 + kuromoji 1.2.0篇)&lt;/a&gt;を参考にしてください。
私もこちらに記述のある組み合わせ（elasticsearch-0.90.0Beta1 + elasticsearch-analysis-kuromoji/1.2.0）を利用しました。
KuromojiのAnalyzerはデフォルトで「kuromoji」として登録済みですが、こちらはユーザ辞書の指定がありません。
ということで、「kuromoji_user_dict」というユーザ辞書指定をしたtokenizerと、それと使う「my_analyzer」というanalyzerを登録したIndexを作成します。
定義する前に、「userdict_ja.txt」を用意して、elasticsearch-0.90.0Beta1/config/ディレクトリに配置しておきます。
（以下のサンプルでは、SOLE_HOME/example/solr/collection1/conf/lang/userdict_ja.txtをコピーして使いました）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
$ curl -XPUT &#39;http://localhost:9200/kuromoji_sample/&#39; -d&#39;
{
    &amp;quot;index&amp;quot;:{
        &amp;quot;analysis&amp;quot;:{
            &amp;quot;tokenizer&amp;quot; : {
                &amp;quot;kuromoji_user_dict&amp;quot; : {
                   &amp;quot;type&amp;quot;:&amp;quot;kuromoji_tokenizer&amp;quot;,
                   &amp;quot;user_dictionary&amp;quot;:&amp;quot;userdict_ja.txt&amp;quot;
                }
            },
            &amp;quot;analyzer&amp;quot; : {
                &amp;quot;my_analyzer&amp;quot; : {
                    &amp;quot;type&amp;quot; : &amp;quot;custom&amp;quot;,
                    &amp;quot;tokenizer&amp;quot; : &amp;quot;kuromoji_user_dict&amp;quot;
                }
            }
            
        }
    }
}
&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;「user_dictionary」というのがユーザ辞書の定義ファイルになります。
注意点としては、6行目で指定した名前「kuromoji_user_dict」を14行目の「tokenizer」に指定しないとちゃんと動かないという点でしょうか。&lt;/p&gt;
&lt;p&gt;上記で指定したAnalyzerを利用して「朝青龍」という単語をを解析してみます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
$ curl -XGET &#39;http://localhost:9200/kuromoji_sample/_analyze?analyzer=my_analyzer&amp;amp;pretty&#39; -d &#39;朝青龍&#39;
{
 &amp;quot;tokens&amp;quot; : [ {
   &amp;quot;token&amp;quot; : &amp;quot;朝青龍&amp;quot;,
   &amp;quot;start_offset&amp;quot; : 0,
   &amp;quot;end_offset&amp;quot; : 3,
   &amp;quot;type&amp;quot; : &amp;quot;word&amp;quot;,
   &amp;quot;position&amp;quot; : 1
 } ]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;「朝青龍」という単語がユーザ辞書に登録されているので、1単語として出力されます。
ちなみに、デフォルトの「kuromoji」のanalyzerを指定すると以下の様な出力です。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
$ curl -XGET &#39;http://localhost:9200/kuromoji_sample/_analyze?analyzer=kuromoji&amp;amp;pretty&#39; -d &#39;朝青龍&#39;
{
 &amp;quot;tokens&amp;quot; : [ {
   &amp;quot;token&amp;quot; : &amp;quot;朝&amp;quot;,
   &amp;quot;start_offset&amp;quot; : 0,
   &amp;quot;end_offset&amp;quot; : 1,
   &amp;quot;type&amp;quot; : &amp;quot;word&amp;quot;,
   &amp;quot;position&amp;quot; : 1
 }, {
   &amp;quot;token&amp;quot; : &amp;quot;青龍&amp;quot;,
   &amp;quot;start_offset&amp;quot; : 1,
   &amp;quot;end_offset&amp;quot; : 3,
   &amp;quot;type&amp;quot; : &amp;quot;word&amp;quot;,
   &amp;quot;position&amp;quot; : 2
 } ]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;とまぁ、こんなかんじです。
ユーザ辞書を書き換えたあとは「close/open」しないと読み込めないのかなぁ？そのへんはまたあとで調べようかな。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ちなみ、以下のページを参考にさせてもらいました。
&lt;a href=&#34;http://www.hirotakaster.com/archives/2012/11/elasticsearch-kuromoji-plugin.php&#34;&gt;elasticsearch kuromoji plugin - natural days&lt;/a&gt;
&lt;a href=&#34;http://qiita.com/items/134b049a59fe396c9475&#34;&gt;ElasticSearch で kuromoji を使う (ES 0.90.Beta1 + kuromoji 1.2.0篇)&lt;/a&gt;&lt;/p&gt;
</content:encoded>
    </item>
    
  </channel>
</rss>
