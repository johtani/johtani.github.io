<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>elasticsearch on @johtaniの日記 3rd</title>
    <link>https://blog.johtani.info/tags/elasticsearch/</link>
    <description>Recent content in elasticsearch on @johtaniの日記 3rd</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 17 Dec 2020 23:55:55 +0900</lastBuildDate><atom:link href="https://blog.johtani.info/tags/elasticsearch/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Index Template V2</title>
      <link>https://blog.johtani.info/blog/2020/12/17/index_template_v2/</link>
      <pubDate>Thu, 17 Dec 2020 23:55:55 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2020/12/17/index_template_v2/</guid>
      <description>Elastic stack (Elasticsearch) Advent Calendar 2020の18日目の記事になります。 本日の勉強会でLTをしましたが、しゃべり足りなかったんで。 Elasticsearch 7.8でこっそりとリリースされたI</description>
      <content:encoded><p><a href="https://qiita.com/advent-calendar/2020/elasticsearch">Elastic stack (Elasticsearch) Advent Calendar 2020</a>の18日目の記事になります。</p>
<p><a href="https://noti.st/johtani/aa1gAo/index-template-v2">本日の勉強会でLT</a>をしましたが、しゃべり足りなかったんで。
Elasticsearch 7.8でこっそりとリリースされたIndex Template V2について調べたのでどんなものかをまとめてみます。
リリースブログには出てきてない（<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.8/release-highlights.html#add-composable-index-templates">7.8のEsのページのWhat&rsquo;s newには出てた</a>）ので気づいてない人も多いのではないでしょうか？</p>
<h2 id="index-templateとは">Index Templateとは？</h2>
<p>まずはIndex Templateがどんなものかを説明しましょう。</p>
<p>Indexの設定やマッピングはデフォルト値以外を設定したい場合に、毎回&quot;mappings&quot;や&quot;settings&quot;の設定を指定してIndexを作成するのは手間がかかります。
そこで便利な機能として提供されているのがIndex Templateです。このIndex TemplateはCluster Stateに保管されます。</p>
<p>Index Templateを利用するときの流れは以下の通りです。</p>
<ol>
<li>Index Templateの作成</li>
<li>Indexの作成</li>
</ol>
<p>例えば、3ノード構成のクラスターでインデックスを作成するときに常に&quot;number_of_shards: 3&quot;を設定したいとします。
Index Templateは次のような感じになります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">PUT</span> <span style="color:#a6e22e">_template</span><span style="color:#f92672">/</span><span style="color:#a6e22e">blog_num_shards</span>
{
  <span style="color:#e6db74">&#34;index_patterns&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;blog_*&#34;</span>,
  <span style="color:#e6db74">&#34;settings&#34;</span><span style="color:#f92672">:</span> {
    <span style="color:#e6db74">&#34;index&#34;</span><span style="color:#f92672">:</span> {
      <span style="color:#e6db74">&#34;number_of_shards&#34;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">3</span>
    }
  }
}
</code></pre></div><p>または日本語のシンプルな形態素解析のアナライザーの設定を&quot;jp_&ldquo;という名前でるようできるようにしたい場合には次のような感じになります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">PUT</span> <span style="color:#a6e22e">_template</span><span style="color:#f92672">/</span><span style="color:#a6e22e">jp_simple_kuromoji</span>
{
  <span style="color:#e6db74">&#34;index_patterns&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;jp_&#34;</span>,
  <span style="color:#e6db74">&#34;settings&#34;</span><span style="color:#f92672">:</span> {
    <span style="color:#e6db74">&#34;index&#34;</span><span style="color:#f92672">:</span> {
      <span style="color:#e6db74">&#34;analysis&#34;</span><span style="color:#f92672">:</span> {
        <span style="color:#e6db74">&#34;simple_jp&#34;</span><span style="color:#f92672">:</span> {
          <span style="color:#e6db74">&#34;type&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;custom&#34;</span>,
          <span style="color:#e6db74">&#34;tokenizer&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;kuromoji&#34;</span>
        }
      }
    }
  }
}
</code></pre></div><p>インデックステンプレートの登録が終われば、インデックスを作成するタイミングでIndex Templateが適用されます。
例えば、<code>blog_2020</code>というインデックスを作成すると、<code>number_of_shards: 3</code>のインデックスが作成されます（デフォルトは<code>1</code>）。
<code>jp_blog_2020</code>というインデックスを作成すると、<code>simple_jp</code>というAnalyzerが設定されています。
このように、インデックス名を意識するだけで設定が適用されていくのが利点です。</p>
<p>ちなみに、Index TemplateはIndex作成時に適用されるだけなので、Index Templateを変更してもこれまでのインデックスへは影響はありません。</p>
<h2 id="これまでのindex-templateの問題点">これまでのIndex Templateの問題点</h2>
<p>と、Index Templateが便利なのはわかりましたが、ではなぜ今回V2がリリースされたのでしょうか？
先ほどの例を見るとわかりますが、これまでのIndex Templateは部品化が難しいのが問題でした。
Index Templateはそれぞれがインデックスの作成時に適用されます。
が、Index TemplateにIndex Templateを組み込むことはできません。
例えば、先ほどサンプルとして作成した<code>jp_simple_kuromoji</code>のIndex Templateは<code>jp_</code>で始まるインデックスにしか適用できません。</p>
<p>では、<code>blog_</code>で始まるインデックスにもkuromojiのシンプルなアナライザーを使いたくなった場合はどうなるでしょう？
残念ながら、<code>jp_simple_kuromoji</code>と同じ設定を<code>blog_num_shards</code>のテンプレートに追加するか、<code>jp_simple_kuromoji</code>の<code>index_patterns</code>の部分だけを書き換えた新しいテンプレートを用意するか、<code>jp_simple_kuromoji</code>の<code>index_patterns</code>に<code>jp_</code>を追加する方法です。
いずれにしてもIndex Templateの継承（複数のテンプレートを1つのインデックスに紐づける）が必要となります。
この時、複数のIndex Templateが適用されるため、適用する順番が出てきます。
この順番をIndex Templateの<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.10/indices-templates-v1.html#put-index-template-v1-api-query-param"><code>order</code>パラメータ</a>で指定できます。</p>
<p>ただ、これも問題のもととなっていました。
複数あるIndex Templateのどれがどの順番で適用されるのか？それはインデックスを作成時にようやくわかります。
使いたい側（インデックス）が、使いたいもの（テンプレート）を指定するのではなく、その逆（使いたいものに使いたい側の情報を設定しなくてはならない（<code>index_patterns</code>や<code>order</code>））になっているのでわかりにくくなっていました。</p>
<p>ということで解決策としてリリースされたのがIndex Template V2です（ちなみに名前にV2とは言ってるわけではなく、現在のIndex Templateの機能がlegacy index templateという名前になり、Deprecatedになっています（まだログには出ない））。</p>
<h2 id="index-template-v2">Index Template V2</h2>
<p>7.8のWhat&rsquo;s newドキュメントではComposable Index Templateと紹介されています。
大きく3つのエンドポイントが提供されます。</p>
<ul>
<li>Component Template 用API
<ul>
<li>テンプレートのコンポーネントという単位で管理するためのAPI。</li>
<li>登録更新、削除、取得が可能</li>
</ul>
</li>
<li>Index Template 用API
<ul>
<li>Index Templateを管理するためのAPI</li>
<li>登録更新、削除、取得が可能</li>
</ul>
</li>
<li>Simulate index template API(Experimental)
<ul>
<li>Index Template</li>
</ul>
</li>
</ul>
<p>Legacy Index Templateとの大きな違いは、</p>
<ul>
<li>テンプレートをコンポーネントにできる</li>
<li>1つのインデックスに適用されれるテンプレートは<strong>1つ</strong>だけ</li>
</ul>
<p>という点です。これまでとは挙動が異なるので注意が必要です。</p>
<p>新しいIndex Templateを利用する際の流れは次のようになります。</p>
<ol>
<li>Component Templateの作成</li>
<li>Index Templateの作成</li>
<li>作成したIndex Templateの挙動を確認</li>
<li>実際にIndex名を指定してIndex Templateの挙動を確認</li>
</ol>
<p>という形です。では、それぞれの機能を見ていきましょう。</p>
<h3 id="coponent-template-api">Coponent Template API</h3>
<p>テンプレートコンポーネントを管理するためのAPIです。
具体的なAPIごとに説明していきます。</p>
<h4 id="put-_component_template">PUT _component_template</h4>
<p>コンポーネントを登録、変更するためのAPIです。<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.10/indices-component-template.html">公式ドキュメントはこちらです。</a>
先ほどのkuromojiのAnalzyerをコンポーネントとして登録してみましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">PUT</span> <span style="color:#a6e22e">_component_template</span><span style="color:#f92672">/</span><span style="color:#a6e22e">jp_simple_kuromoji</span>
{
  <span style="color:#e6db74">&#34;template&#34;</span><span style="color:#f92672">:</span> {
    <span style="color:#e6db74">&#34;settings&#34;</span><span style="color:#f92672">:</span> {
        <span style="color:#e6db74">&#34;index&#34;</span><span style="color:#f92672">:</span> {
        <span style="color:#e6db74">&#34;analysis&#34;</span><span style="color:#f92672">:</span> {
          <span style="color:#e6db74">&#34;analyzer&#34;</span><span style="color:#f92672">:</span> {
            <span style="color:#e6db74">&#34;simple_jp&#34;</span><span style="color:#f92672">:</span> {
            <span style="color:#e6db74">&#34;type&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;custom&#34;</span>,
            <span style="color:#e6db74">&#34;tokenizer&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;kuromoji_tokenizer&#34;</span>
            }
          }
        }
      }
    }
  },
  <span style="color:#e6db74">&#34;version&#34;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>,
  <span style="color:#e6db74">&#34;_meta&#34;</span><span style="color:#f92672">:</span> {
    <span style="color:#e6db74">&#34;description&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;simpleなKuromoji analyzer&#34;</span>
  }
}
</code></pre></div><p>先ほどと特に違いはありません。<code>template</code>という階層が1段増え、<code>index_patterns</code>がなくなりました。
<code>template</code>部分はIndexに設定する<code>settings</code>、<code>mappings</code>、<code>aliases</code>が指定可能です。
ちなみに、&ldquo;template&quot;の中身をそのままIndex作成時に使用した場合にエラーにならない設定である必要があります。
ここは注意が必要です。例えば、component Aでkuromojiのアナライザーの設定をし、component Bでそのアナライザーを使用するフィールドのmappingだけを記述した場合、component Bでエラーが発生します。上記のようなシチュエーションでは、Index Templateで利用するフィールドを定義し、component Aを利用する宣言をすれば問題ありません。</p>
<p>そのほかに使えるパラメータで便利なものを紹介しておきます。</p>
<ul>
<li>
<p>クエリパラメータ</p>
<ul>
<li><code>create</code>: URLに指定するパラメータ。<code>true</code>を指定することで、既に存在する場合にエラーを返してくれる。更新も同じAPIなので間違わないようにするために利用すると便利。デフォルトは<code>false</code></li>
</ul>
</li>
<li>
<p>リクエストボディ</p>
<ul>
<li><code>_meta</code>: テンプレートにメタ情報を付与できる。<code>_meta</code>の中は自由に記述可能。コメントなどを書いておくとあとでわかりやすい</li>
</ul>
</li>
</ul>
<h4 id="get-_component_template">GET _component_template</h4>
<p>コンポーネントを取得するためのAPIです。<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.10/getting-component-templates.html">公式ドキュメントはこちらです。</a>
一覧での取得とリストでの取得が可能です。</p>
<p>一覧取得サンプル</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">GET</span> <span style="color:#f92672">/</span><span style="color:#a6e22e">_component_template</span>
<span style="color:#a6e22e">GET</span> <span style="color:#f92672">/</span><span style="color:#a6e22e">_component_template</span><span style="color:#f92672">/*</span>
</code></pre></div><p>これ以外に、IDを指定して取得することも可能です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">GET</span> <span style="color:#a6e22e">_component_template</span><span style="color:#f92672">/</span><span style="color:#a6e22e">jp_simple_kuromoji</span>
</code></pre></div><p><code>*</code>を利用して複数取得も可能です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">GET</span> <span style="color:#a6e22e">_component_template</span><span style="color:#f92672">/</span><span style="color:#a6e22e">jp</span><span style="color:#f92672">*</span>
<span style="color:#a6e22e">GET</span> <span style="color:#a6e22e">_component_template</span><span style="color:#f92672">/</span><span style="color:#a6e22e">j</span><span style="color:#f92672">*</span><span style="color:#a6e22e">_</span><span style="color:#f92672">*</span>
</code></pre></div><h4 id="delete-_component_template">DELETE _component_template</h4>
<p>コンポーネントを削除するためのAPIです。<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.10/indices-delete-component-template.html">公式ドキュメントはこちらです。</a>
IDを指定してコンポーネントを削除できます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">DELETE</span> <span style="color:#f92672">/</span><span style="color:#a6e22e">_component_template</span><span style="color:#f92672">/</span><span style="color:#a6e22e">jp_simple_kuromoji</span>
</code></pre></div><p>ID指定以外に<code>*</code>を利用することも可能ですが気を付けて使用しましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">DELETE</span> <span style="color:#f92672">/</span><span style="color:#a6e22e">_component_template</span><span style="color:#f92672">/</span><span style="color:#a6e22e">jp_</span><span style="color:#f92672">*</span>
<span style="color:#a6e22e">DELETE</span> <span style="color:#f92672">/</span><span style="color:#a6e22e">_component_template</span><span style="color:#f92672">/*</span>
</code></pre></div><p>ちなみにIndex Templateで利用されているコンポーネントを削除しようとした場合はエラー（ステータスコード400）が返ってきます。
<code>*</code>などを使用して削除しようとした場合は、ひとつでも利用されているものが含まれている場合は削除は実行されずにエラーだけが返ってくるようになっています。</p>
<h3 id="index-template-api">Index Template API</h3>
<p>Index Templateを管理するためのAPIです。
Component Template APIで定義したコンポーネントを利用してテンプレートを作成できます。コンポーネントを利用しないで単体で完結したテンプレートも作成可能です。
具体的なAPIごとに説明していきます。</p>
<h4 id="put-_index_template">PUT _index_template</h4>
<p>Index Templateを登録・更新するためのAPIです。<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.10/indices-put-template.html">公式ドキュメントはこちらです。</a></p>
<p>これまでのLegacy Index TemplateのAPIのエンドポイント(<code>_template</code>)ではなく、(<code>_index_template</code>)というエンドポイントになっていることにまず注意してください。
先ほど作成した<code>jp_simple_kuromoji</code>コンポーネントと、追加で作成した<code>3_shards</code>というコンポーネントを利用して
<code>blog_</code>で始まるインデックスに適用できるIndex Templateを作成してみましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">PUT</span> <span style="color:#a6e22e">_index_template</span><span style="color:#f92672">/</span><span style="color:#a6e22e">blog_template</span>
{
  <span style="color:#e6db74">&#34;index_patterns&#34;</span><span style="color:#f92672">:</span> [<span style="color:#e6db74">&#34;blog_*&#34;</span>],
  <span style="color:#e6db74">&#34;template&#34;</span><span style="color:#f92672">:</span> {  
    <span style="color:#e6db74">&#34;mappings&#34;</span><span style="color:#f92672">:</span> {
      <span style="color:#e6db74">&#34;properties&#34;</span><span style="color:#f92672">:</span> {
        <span style="color:#e6db74">&#34;hoge&#34;</span><span style="color:#f92672">:</span> {
          <span style="color:#e6db74">&#34;type&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;text&#34;</span>,
          <span style="color:#e6db74">&#34;analyzer&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;simple_jp&#34;</span>
        }
      }
    }
  },
  <span style="color:#e6db74">&#34;priority&#34;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">100</span>,
  <span style="color:#e6db74">&#34;composed_of&#34;</span><span style="color:#f92672">:</span> [<span style="color:#e6db74">&#34;jp_simple_kuromoji&#34;</span>, <span style="color:#e6db74">&#34;3_shards&#34;</span>]
}
</code></pre></div><p><code>composed_of</code>というパラメータに利用したいコンポーネントを配列で記述していきます。
Index Templateが適用される時に、ここに記述されている順番でコンポーネントが適用されていきます。
ですので、最後に書いてあるテンプレートが一番強いことになります。
これは例えば、同じ設定値<code>number_of_shards</code>を2つのコンポーネントが設定している場合に、最後に設定した値がインデックスに採用されるという意味です
(<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.10/indices-put-template.html#multiple-component-templates">公式ドキュメントにサンプルが掲載されています</a>)。
なお、存在しないコンポーネントを<code>composed_of</code>に指定した場合は400エラーが返ってきます。同じコンポーネントを複数重複して指定した場合は特にエラーにはなりませんでした。
<code>composed_of</code>を指定しなければ、単体で完結したテンプレートを定義可能です。</p>
<p>次に重要な設定は<code>priority</code>です。これまでのテンプレート機能と異なる点で説明しましたが、</p>
<blockquote>
<p>1つのインデックスに適用されれるテンプレートは<strong>1つ</strong>だけ
となっています。
この1つを決めるための値が<code>priority</code>になります。
インデックス名によっては<code>index_pattern</code>の定義によって、複数のIndex Templateにマッチします。例えば<code>blog_*</code>と<code>*_2020</code>のIndex Templateがあった場合に<code>blog_2020</code>というインデックスを作った場合です。
この時、Elasticsearchは<code>priority</code>の大きい値を持ったIndex Template<strong>だけ</strong>を適用します。
<code>blog_*</code>のIndex Templateの<code>property</code>が<code>10</code>、<code>*_2020</code>のIndex Templateの<code>property</code>が<code>100</code>だった場合、<code>*_2020</code>のテンプレートが適用されます。Legacy Index Templateでは<code>order</code>という似たパラメータがありましたが、こちらは適用する<strong>順序</strong>を決定するためのものでした。挙動が違うので注意しましょう。</p>
</blockquote>
<p>ちなみに、<code>blog_*</code>と<code>*_2020</code>の<code>property</code>がどちらも<code>10</code>というIndex TemplateをPUTしようとした場合、2番目にIndex TemplateをPUTするタイミングでエラーが返ってきます。</p>
<p>そのほかに使えるパラメータで便利なものはPUT _component_templateと同様に<code>create</code>と<code>_meta</code>です。</p>
<h4 id="get-_index_template">GET _index_template</h4>
<p>Index Templateを取得するためのAPIです。<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.10/indices-get-template.html">公式ドキュメントはこちらです。</a>
一覧での取得とリストでの取得が可能です。</p>
<p>一覧取得サンプル</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">GET</span> <span style="color:#f92672">/</span><span style="color:#a6e22e">_index_template</span>
<span style="color:#a6e22e">GET</span> <span style="color:#f92672">/</span><span style="color:#a6e22e">_index_template</span><span style="color:#f92672">/*</span>
</code></pre></div><p>これ以外に、IDを指定して取得することも可能です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">GET</span> <span style="color:#a6e22e">_index_template</span><span style="color:#f92672">/</span><span style="color:#a6e22e">blog_template</span>
</code></pre></div><p><code>*</code>を利用して複数取得も可能です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">GET</span> <span style="color:#a6e22e">_index_template</span><span style="color:#f92672">/</span><span style="color:#a6e22e">blog_</span><span style="color:#f92672">*</span>
<span style="color:#a6e22e">GET</span> <span style="color:#a6e22e">_index_template</span><span style="color:#f92672">/</span><span style="color:#a6e22e">b</span><span style="color:#f92672">*</span><span style="color:#a6e22e">_</span><span style="color:#f92672">*</span>
</code></pre></div><h4 id="delete-_index_template">DELETE _index_template</h4>
<p>Index Templateを削除するためのAPIです。<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.10/indices-delete-template.html">公式ドキュメントはこちらです。</a></p>
<p>IDを指定してコンポーネントを削除できます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">DELETE</span> <span style="color:#f92672">/</span><span style="color:#a6e22e">_component_template</span><span style="color:#f92672">/</span><span style="color:#a6e22e">jp_simple_kuromoji</span>
</code></pre></div><p>ID指定以外に<code>*</code>を利用することも可能ですが気を付けて使用しましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">DELETE</span> <span style="color:#f92672">/</span><span style="color:#a6e22e">_component_template</span><span style="color:#f92672">/</span><span style="color:#a6e22e">jp_</span><span style="color:#f92672">*</span>
<span style="color:#a6e22e">DELETE</span> <span style="color:#f92672">/</span><span style="color:#a6e22e">_component_template</span><span style="color:#f92672">/*</span>
</code></pre></div><p>最後のサンプルを実行すると、Elasticのツールなどが登録したIndex Template以外はすべて削除されてしまうので本当に気を付けましょう。</p>
<h3 id="simulalte-api">Simulalte API</h3>
<p>さて、コンポーネントとテンプレートを作成したので確認をしましょう。
Legacy Index Templateでは確認するためには実際にインデックスを作成するしかありませんでしたが、V2ではSimulate APIが用意されています。
このSimulate APIには2つのAPIがあります。</p>
<ul>
<li>POST /_index_template/_simulate/&lt;テンプレート名&gt;</li>
<li>POST /_index_template/_simulate_index/&lt;インデックス名&gt;</li>
</ul>
<p>Index Templateの確認のためのAPIとインデックス名を指定したときに出来上がるIndexの設定を確認するためのAPIです。
Indexを実際に作成しなくても確認できるのは便利ですね。</p>
<p>例えば先ほど作成した<code>blog_template</code>を試してみましょう。</p>
<h4 id="_index_template_simulate-api">_index_template/_simulate API</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">POST</span> <span style="color:#a6e22e">_index_template</span><span style="color:#f92672">/</span><span style="color:#a6e22e">_simulate</span><span style="color:#f92672">/</span><span style="color:#a6e22e">blog_template</span>
</code></pre></div><p>レスポンスはこんな感じです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">{
  <span style="color:#e6db74">&#34;template&#34;</span> <span style="color:#f92672">:</span> {
    <span style="color:#e6db74">&#34;settings&#34;</span> <span style="color:#f92672">:</span> {
      <span style="color:#e6db74">&#34;index&#34;</span> <span style="color:#f92672">:</span> {
        <span style="color:#e6db74">&#34;analysis&#34;</span> <span style="color:#f92672">:</span> {
          <span style="color:#e6db74">&#34;analyzer&#34;</span> <span style="color:#f92672">:</span> {
            <span style="color:#e6db74">&#34;simple_jp&#34;</span> <span style="color:#f92672">:</span> {
              <span style="color:#e6db74">&#34;filter&#34;</span> <span style="color:#f92672">:</span> [
                <span style="color:#e6db74">&#34;kuromoji_readingform&#34;</span>
              ],
              <span style="color:#e6db74">&#34;type&#34;</span> <span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;custom&#34;</span>,
              <span style="color:#e6db74">&#34;tokenizer&#34;</span> <span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;kuromoji_tokenizer&#34;</span>
            }
          }
        },
        <span style="color:#e6db74">&#34;number_of_shards&#34;</span> <span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;3&#34;</span>
      }
    },
    <span style="color:#e6db74">&#34;mappings&#34;</span> <span style="color:#f92672">:</span> {
      <span style="color:#e6db74">&#34;properties&#34;</span> <span style="color:#f92672">:</span> {
        <span style="color:#e6db74">&#34;hoge&#34;</span> <span style="color:#f92672">:</span> {
          <span style="color:#e6db74">&#34;type&#34;</span> <span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;text&#34;</span>,
          <span style="color:#e6db74">&#34;analyzer&#34;</span> <span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;simple_jp&#34;</span>
        }
      }
    },
    <span style="color:#e6db74">&#34;aliases&#34;</span> <span style="color:#f92672">:</span> { }
  },
  <span style="color:#e6db74">&#34;overlapping&#34;</span> <span style="color:#f92672">:</span> [
    {
      <span style="color:#e6db74">&#34;name&#34;</span> <span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;blog_template2&#34;</span>,
      <span style="color:#e6db74">&#34;index_patterns&#34;</span> <span style="color:#f92672">:</span> [
        <span style="color:#e6db74">&#34;blog_*&#34;</span>
      ]
    }
  ]
}
</code></pre></div><p><code>template</code>にコンポーネントがマージされた結果が出力されます。
<code>overlapping</code>は<code>index_patterns</code>がかぶる可能性があるIndex Templateの情報が出力されます。
サンプル用に<code>blog_template2</code>という、同じ<code>index_patterns</code>で<code>priority</code>が低いものを登録してあるためです。
<code>index_patterns</code>が完全に同じではなくとも、重複する可能性があるものはここに出力されます。
例えば、<code>index_patterns</code>が<code>b*</code>という別のIndex Templateを作成してからSimulate APIを実行すると、<code>overlapping</code>にそのIndex Templateも出力されます。</p>
<p>Simulate Index Template APIのもう一つの機能は登録前のIndex Templateの確認です。
リクエストのURLのテンプレート名をなくし、<code>PUT _index_template</code>と同じJSONをリクエストボディとして送信した場合、コンポーネントをマージしたテンプレートがどんなものかを確認できます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">POST</span> <span style="color:#a6e22e">_index_template</span><span style="color:#f92672">/</span><span style="color:#a6e22e">_simulate</span>
{
  <span style="color:#e6db74">&#34;index_patterns&#34;</span><span style="color:#f92672">:</span> [<span style="color:#e6db74">&#34;blog_*&#34;</span>],
  <span style="color:#e6db74">&#34;template&#34;</span><span style="color:#f92672">:</span> {
    <span style="color:#e6db74">&#34;mappings&#34;</span><span style="color:#f92672">:</span> {
      <span style="color:#e6db74">&#34;properties&#34;</span><span style="color:#f92672">:</span> {
        <span style="color:#e6db74">&#34;hoge&#34;</span><span style="color:#f92672">:</span> {
          <span style="color:#e6db74">&#34;type&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;text&#34;</span>,
          <span style="color:#e6db74">&#34;analyzer&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;simple_jp&#34;</span>
        }
      }
    }
  },
  <span style="color:#e6db74">&#34;priority&#34;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">10</span>,
  <span style="color:#e6db74">&#34;composed_of&#34;</span><span style="color:#f92672">:</span> [<span style="color:#e6db74">&#34;jp_simple_kuromoji&#34;</span>]
}
</code></pre></div><p>このリクエストを送信すると、コンポーネントがマージされた結果が返ってきます。<code>index_patterns</code>がかぶるものがある場合は<code>overlapping</code>も一緒に返却されます。</p>
<h4 id="_index_template_simulate_index-api">_index_template/_simulate_index API</h4>
<p>今度はインデックス名を指定するSimulate APIを試してみましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">POST</span> <span style="color:#a6e22e">_index_template</span><span style="color:#f92672">/</span><span style="color:#a6e22e">_simulate_index</span><span style="color:#f92672">/</span><span style="color:#a6e22e">blog_2021</span>
</code></pre></div><p>これだけです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">{
  <span style="color:#e6db74">&#34;template&#34;</span> <span style="color:#f92672">:</span> {
    <span style="color:#e6db74">&#34;settings&#34;</span> <span style="color:#f92672">:</span> {
      <span style="color:#e6db74">&#34;index&#34;</span> <span style="color:#f92672">:</span> {
        <span style="color:#e6db74">&#34;analysis&#34;</span> <span style="color:#f92672">:</span> {
          <span style="color:#e6db74">&#34;analyzer&#34;</span> <span style="color:#f92672">:</span> {
            <span style="color:#e6db74">&#34;simple_jp&#34;</span> <span style="color:#f92672">:</span> {
              <span style="color:#e6db74">&#34;filter&#34;</span> <span style="color:#f92672">:</span> [
                <span style="color:#e6db74">&#34;kuromoji_readingform&#34;</span>
              ],
              <span style="color:#e6db74">&#34;type&#34;</span> <span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;custom&#34;</span>,
              <span style="color:#e6db74">&#34;tokenizer&#34;</span> <span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;kuromoji_tokenizer&#34;</span>
            }
          }
        },
        <span style="color:#e6db74">&#34;number_of_shards&#34;</span> <span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;3&#34;</span>
      }
    },
    <span style="color:#e6db74">&#34;mappings&#34;</span> <span style="color:#f92672">:</span> {
      <span style="color:#e6db74">&#34;properties&#34;</span> <span style="color:#f92672">:</span> {
        <span style="color:#e6db74">&#34;hoge&#34;</span> <span style="color:#f92672">:</span> {
          <span style="color:#e6db74">&#34;type&#34;</span> <span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;text&#34;</span>,
          <span style="color:#e6db74">&#34;analyzer&#34;</span> <span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;simple_jp&#34;</span>
        }
      }
    },
    <span style="color:#e6db74">&#34;aliases&#34;</span> <span style="color:#f92672">:</span> { }
  },
  <span style="color:#e6db74">&#34;overlapping&#34;</span> <span style="color:#f92672">:</span> [
    {
      <span style="color:#e6db74">&#34;name&#34;</span> <span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;fuga&#34;</span>,
      <span style="color:#e6db74">&#34;index_patterns&#34;</span> <span style="color:#f92672">:</span> [
        <span style="color:#e6db74">&#34;b*&#34;</span>
      ]
    },
    {
      <span style="color:#e6db74">&#34;name&#34;</span> <span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;2021&#34;</span>,
      <span style="color:#e6db74">&#34;index_patterns&#34;</span> <span style="color:#f92672">:</span> [
        <span style="color:#e6db74">&#34;*_2021&#34;</span>
      ]
    }
  ]
}
</code></pre></div><p>例で作成した<code>blog_template</code>が適用されていますが、それ以外に<code>index_patterns</code>に合致したが<code>priority</code>が低くて適用されなかったものが<code>overlapping</code>に出力されています。
実際に適用されたテンプレートの名前も別途出力してくれるとわかりやすいかもしれないですね。
(<code>*_2021</code>というインデックスパターンのテンプレートを試しに作ってみたのですが、これはバグがありそうです。<code>2021</code>に合致するインデックス名をSimulateしたら<code>overlapping</code>に合致しないものがたくさん出てきました。バグ報告しとくか)。</p>
<h3 id="kibana対応">Kibana対応</h3>
<p>ここまで、Index Template V2のAPIの説明でしたが、Kibanaでの対応についても調べてみました。</p>
<h4 id="index-managementstack-management機能elasticライセンスが必要だが無償の機能">Index Management（Stack Management機能。Elasticライセンスが必要だが無償の機能）</h4>
<p>7.9からKibanaの<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.10/index-mgmt.html">Index管理画面</a>でComposable Templateが利用できるようになっています（<a href="https://github.com/elastic/kibana/pull/70220">GitHub Issue</a>）。
画面のスクショを一通り貼っておきます。残念ながら、それぞれのJSONの編集部分では補完などはサポートされていないようでした。
頑張って自分でsettingsやmappingsのJSONを記述していく感じになります。JSONとして正しいかどうかはチェックしてくれます。
Index Templateのウィザードでは、ボタンでコンポーネントを追加したり削除したり、順序を入れ替えたりといった作業が可能になっています。
また、プレビュー表示が可能なので、<code>composed_of</code>で選択したものが今どのように適用されているか？といったのも確認できるようになっていました。
結構便利に管理できそうです。ちなみにスクショは7.10の画面になります。</p>
<ul>
<li>Component Template周り
<ul>
<li>一覧表示とウィザード</li>
</ul>
</li>
</ul>
<p>
<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" style="max-width:300px">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20201218/list_component_template.png" />
    </div>
    <a href="/images/entries/20201218/list_component_template.png" itemprop="contentUrl"></a>
  </figure>
</div>



<div class="box" style="max-width:300px">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20201218/component_template_wizard1.png" />
    </div>
    <a href="/images/entries/20201218/component_template_wizard1.png" itemprop="contentUrl"></a>
  </figure>
</div>



<div class="box" style="max-width:300px">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20201218/component_template_wizard2.png" />
    </div>
    <a href="/images/entries/20201218/component_template_wizard2.png" itemprop="contentUrl"></a>
  </figure>
</div>



<div class="box" style="max-width:300px">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20201218/component_template_wizard3.png" />
    </div>
    <a href="/images/entries/20201218/component_template_wizard3.png" itemprop="contentUrl"></a>
  </figure>
</div>



<div class="box" style="max-width:300px">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20201218/component_template_wizard4.png" />
    </div>
    <a href="/images/entries/20201218/component_template_wizard4.png" itemprop="contentUrl"></a>
  </figure>
</div>
</p>
<ul>
<li>Index Template周り
<ul>
<li>一覧表示とウィザード</li>
</ul>
</li>
</ul>
<p>

<div class="box" style="max-width:300px">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20201218/list_index_template.png" />
    </div>
    <a href="/images/entries/20201218/list_index_template.png" itemprop="contentUrl"></a>
  </figure>
</div>



<div class="box" style="max-width:300px">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20201218/index_template_wizard1.png" />
    </div>
    <a href="/images/entries/20201218/index_template_wizard1.png" itemprop="contentUrl"></a>
  </figure>
</div>



<div class="box" style="max-width:300px">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20201218/index_template_wizard2.png" />
    </div>
    <a href="/images/entries/20201218/index_template_wizard2.png" itemprop="contentUrl"></a>
  </figure>
</div>



<div class="box" style="max-width:300px">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20201218/index_template_wizard3.png" />
    </div>
    <a href="/images/entries/20201218/index_template_wizard3.png" itemprop="contentUrl"></a>
  </figure>
</div>



<div class="box" style="max-width:300px">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20201218/index_template_wizard4.png" />
    </div>
    <a href="/images/entries/20201218/index_template_wizard4.png" itemprop="contentUrl"></a>
  </figure>
</div>
</p>
<h4 id="consoledev-toolsossで利用可能">Console(Dev Tools。OSSで利用可能)</h4>
<p>リクエストを実行は可能ですが、自動補完機能は一部のみ対応しているようです(<a href="https://github.com/elastic/kibana/issues/75967">GitHub Issue</a>)。</p>
<p>対応済みの機能</p>
<ul>
<li><code>DELETE _component_template</code> (ただし、ここまで。存在するコンポーネント名は補完されない)</li>
</ul>
<p>上記以外はまだ未対応のようです。
プルリクエストチャンスかも？</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://github.com/elastic/elasticsearch/issues/53101">Composable Templates · Issue #53101 · elastic/elasticsearch</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.8/release-highlights.html#add-composable-index-templates">What’s new in 7.8 | Elasticsearch Reference ［7.8］ | Elastic</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.10/index-mgmt.html">Index management | Elasticsearch Reference ［7.10］ | Elastic</a></li>
<li><a href="https://github.com/elastic/kibana/pull/70220">［Composable template］ Create / Edit wizard by sebelga · Pull Request #70220 · elastic/kibana</a></li>
<li><a href="https://github.com/elastic/kibana/issues/75967">［Console］ Support suggesting index templates v2 · Issue #75967 · elastic/kibana</a></li>
</ul>
<h2 id="まとめ">まとめ</h2>
<p>ちょっと長くなってしまいましたが、新しいIndex Templateについての紹介でした。
これまでと違い、複数のテンプレートが適用されない点があるのでそこは注意が必要そうです。
コンポーネントをうまく使えば、管理が簡易化はされそうですね。</p>
</content:encoded>
    </item>
    
    <item>
      <title>ElasticのWorkplace Searchを触ってみる - その2 - インストールと起動</title>
      <link>https://blog.johtani.info/blog/2020/05/07/install-workplace-search/</link>
      <pubDate>Thu, 07 May 2020 11:32:50 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2020/05/07/install-workplace-search/</guid>
      <description>前回はWorkplace Searchの概要について書きましたが、今回はインストールと構成要素について説明します。なお、2020/5/7時点で</description>
      <content:encoded><p>前回はWorkplace Searchの概要について書きましたが、今回はインストールと構成要素について説明します。なお、2020/5/7時点での情報を元に本記事は書いていますのでご注意ください。基本的にはインストールと起動方法についての手順を元に書いています。所々に考察を挟んだ形の記事になっていますので、気になるところだけ呼んでいただければと。</p>
<h2 id="記事一覧">記事一覧</h2>
<ul>
<li><a href="/blog/2020/05/01/intro-workplace-search/">ElasticのWorkplace Searchを触ってみる - その1</a></li>
</ul>
<h2 id="インストール">インストール</h2>
<p>インストール方法は<a href="https://www.elastic.co/guide/en/workplace-search/current/workplace-search-install.html">公式リファレンス</a>もしくは<a href="https://www.elastic.co/jp/downloads/enterprise-search">ダウンロードページ</a>に記載があります。
現時点ではMacもしくはLinuxが対象でWindowsはまだサポート対象外となっています。</p>
<h3 id="必要なもの">必要なもの</h3>
<p>インストールに必要なものは以下になります。</p>
<ul>
<li>Elasticsearch 7.6.x + Platinum license
<ul>
<li><a href="https://www.elastic.co/jp/elasticsearch/service">Elastic CloudのElasticsearch Service</a> もしくは</li>
<li><a href="https://www.elastic.co/downloads/elasticsearch">ダウンロード</a>してローカルで起動</li>
</ul>
</li>
<li>enterprise-search-7.6.0.tar.gz
<ul>
<li><a href="https://www.elastic.co/jp/downloads/enterprise-search">ダウンロードページはこちら</a></li>
</ul>
</li>
<li>Java 8もしくは11
<ul>
<li>Long Term Supportの対象であるJavaです。2020/5/7時点では8か11</li>
</ul>
</li>
</ul>
<p>今回はローカルにElasticsearchの7.6.2をインストールしてから試してみます。30日間のトライアルライセンスが有効になっているので、Platinumの機能を試すことができます。</p>
<p>Javaの8か11が必要になります。Elasticsearchには7.xからJDKが同梱されるようになりましたが、Workplace SearchがJettyを元に動作しているからです(enterprise-search-7.6.0.tar.gzにjettyというフォルダあり)。</p>
<h3 id="インストール手順">インストール手順</h3>
<p>大まかには以下の3つです。</p>
<ol>
<li>Java 8もしくは11のインストール
<ul>
<li>14でも大丈夫でした(ローカルにはSDKMANでインストールした14.0.1が利用された)。</li>
</ul>
</li>
<li>Elasticsearchのインストール(Elastic Cloudの場合はクラスタの起動)
<ul>
<li>今回はローカルにインストール</li>
</ul>
</li>
<li>Workplace Searchのインストール</li>
</ol>
<p>Javaはもともとインストールされていたので、今回は2と3をインストールしました。どちらもローカルで起動するので、2つをダウンロードして<code>tar.gz</code>ファイルを展開するだけになります。</p>
<h3 id="起動方法と設定">起動方法と設定</h3>
<p><a href="https://www.elastic.co/guide/en/workplace-search/current/workplace-search-install.html#running-enterprise-search">起動方法に起動前の設定の手順</a>も記載があります。
設定しながら起動していきます。</p>
<h4 id="elasticsearchの起動">Elasticsearchの起動</h4>
<p>既存のElasticsearchのクラスターがあり、Platinumのライセンスが有効になっている場合はこの手順は必要ありません。</p>
<ol>
<li>Elasticsearchの設定ファイルでSecurity機能をオンに
<ul>
<li>7.1から基本的な<a href="https://www.elastic.co/jp/subscriptions">セキュリティ機能はベーシックの機能</a>に含まれています。</li>
</ul>
</li>
<li>Elasticsearchを起動
<ul>
<li>まずは起動(パスワードなどを設定するために必要)</li>
</ul>
</li>
<li>Elasticsearchのパスワードの設定
<ul>
<li>Elasticsearchでデフォルトで用意されているユーザーのパスワードを設定してします。手順では自動で生成させる方法ですが、独自に設定することも可能です。</li>
</ul>
</li>
</ol>
<h4 id="workplace-searchの起動">Workplace Searchの起動</h4>
<p>Elasticsearchが起動したらWorkplace Searchの設定をして起動します。</p>
<ol>
<li>Esへの接続設定を<code>config/enterprise-search.yml</code>に指定
<ul>
<li>Esのパスワード設定時に生成された<code>elastic</code>というユーザーのパスワードをここで指定。</li>
<li>yamlファイルに記載があるが、<code>${ELASTICSEARCH_PASSWORD:changeme}</code>という記述をした場合に環境変数を読み込める</li>
</ul>
</li>
<li><code>allow_es_settings_modification: true</code>を<code>config/enterprise-search.yml</code>
<ul>
<li><a href="https://www.elastic.co/guide/en/workplace-search/current/workplace-search-install.html#elasticsearch-cluster-settings">ここに記載があるような変更</a>をWorkplace SearchがEsのクラスターに対して実行する模様。Workplace Search以外でも使用しているElasticsearchクラスターの場合は<code>allow_es_settings_modification</code>を有効にする代わりに、リンク先にあるような設定を自分で追加する。</li>
</ul>
</li>
<li><code>secret_management.encryption_keys</code>を複数設定
<ul>
<li><a href="https://www.elastic.co/guide/en/workplace-search/current/encryption-keys.html">Encryption Keysのガイド</a>に少し詳しい説明がある。</li>
<li>opensslコマンドとかで作ればいいかな??</li>
<li>1.と同じような設定をしようとしたがうまくいかなかったので、ファイルにキーを設定する方式にしました(バグ?)</li>
</ul>
</li>
<li>起動するときにデフォルトユーザーパスワードを指定
<ul>
<li>指定しなければ勝手に生成してコンソールに出力してくれるので、そちらの方がいいかと。</li>
<li>今回は手順通りに指定した。</li>
</ul>
</li>
<li>起動確認のため<code>http://localhost:3002</code>にアクセス</li>
</ol>
<p>起動するとログが流れ、問題がなければ次のようにデフォルトユーザーの情報が出力されます。</p>
<pre><code>#########################################################

*** Default user credentials have been setup. These are only printed once, so please ensure they are recorded. ***
      username: enterprise_search
      password: pas...ple

#########################################################
</code></pre><p>そして無事起動に成功したことも出力されます。</p>
<pre><code>#########################################################

Success! Elastic Workplace Search is starting successfully.

In a few moments, you'll be able to login at the following address:

* URL: http://localhost:3002
  * If this is your first time starting Workplace Search, check the console output above for your user authentication credentials.
  * Visit the documentation: https://swiftype.com/documentation/enterprise-search

Secret session key has been generated.

Set the key in your config file to persist user sessions through process restarts:

secret_session_key: c23...3


#########################################################
</code></pre><p>ブラウザで画面にアクセスすると、次のような画面が表示されました。</p>

<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" style="max-width:600">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20200507/first_page.png" />
    </div>
    <a href="/images/entries/20200507/first_page.png" itemprop="contentUrl"></a>
  </figure>
</div>

<h4 id="起動時のエラー">起動時のエラー</h4>
<p>いくつかのパターンも試してどんなエラーが出るのかを見てみました。
おまけですね。</p>
<h5 id="elasticsearchが見つからないエラー">Elasticsearchが見つからないエラー</h5>
<p>Esを起動しないでWorkplace Searchを起動してみました。</p>
<p>200秒間アクセスしようと試みて駄目だったらエラーで終了みたいです。</p>
<pre><code>
[2020-05-07T03:48:33.645+00:00][13709][2002][app-server][INFO]: Failed to connect to Elasticsearch backend. Make sure it is running.
...
[2020-05-07T03:51:54.038+00:00][13709][2002][app-server][INFO]: Could not connect to Elasticsearch backend after 200s. Terminating...
[2020-05-07T03:51:54.039+00:00][13709][2002][app-server][ERROR]: 
--------------------------------------------------------------------------------

Error: Workplace Search is unable to connect to Elasticsearch. Ensure a healthy Elasticsearch cluster is running at http://127.0.0.1:9200 for user elastic.

--------------------------------------------------------------------------------

</code></pre><h5 id="elasticsearchのsecurityがオフのときのエラー">ElasticsearchのSecurityがオフのときのエラー</h5>
<p>ちなみにSecurityをオフにしたままWorkplace Searchを起動した場合は以下のようなエラーが出ました。</p>
<pre><code>[2020-05-07T03:46:53.474+00:00][13567][2002][app-server][ERROR]: 
--------------------------------------------------------------------------------

Elastic Workplace Search requires Elasticsearch security features to be enabled.
Please enable Elasticsearch security features as outlined here:
  https://www.elastic.co/guide/en/workplace-search/current/workplace-search-install.html

--------------------------------------------------------------------------------
</code></pre><h2 id="構成要素">構成要素</h2>
<p>ここまでインストールして起動してきました。
では、Workplace Searchがどういったコンポーネントから構成されているかを予測してみましょう(あくまで外から見た予想となります。そのうちElastic社のウェビナーとかイベントで内部の発表とかあるかも?)。</p>
<h3 id="インストールページの記載から">インストールページの記載から</h3>
<p>インストールページに<a href="https://www.elastic.co/guide/en/workplace-search/current/workplace-search-install.html#_minimum_hardware">最小ハードウェア</a>という記載があり、そこで何が動く可能性があるかというのがわかります。</p>
<p>起動するものはこんな感じみたいです。</p>
<ul>
<li>Elasticsearch - 外部でもOK</li>
<li>App Server - Workplace SearchのWeb機能</li>
<li>Worker - クローラーとかかな?</li>
<li>Filebeat - Workplace Searchのログ収集用</li>
<li>その他プロセス - なんだろ?</li>
</ul>
<p>という具合です。</p>
<h3 id="設定などからの予想">設定などからの予想</h3>
<p>次は設定項目や起動時のログなどからの予想です。</p>
<ul>
<li>Worklpace Search配下のセキュアなデータストア - アクセストークンなどの管理のため</li>
<li>JRubyアプリケーション - App ServerはJRuby上で動いているRailsアプリ</li>
<li>Filebeatも起動している - Workplace Searchのログ収集のため?
<ul>
<li>Filebeatの接続設定はWorkplace Searchの設定値を利用</li>
</ul>
</li>
</ul>
<h3 id="では構成要素は">では構成要素は?</h3>
<p>ということで、現時点でわかった構成要素は以下のとおりです。</p>
<ol>
<li>Elasticsearch</li>
<li>Workplace Search App Server - Railsアプリ on JRuby
<ul>
<li>Webアプリとは別に(内部?で)、いくつかのワーカーが存在する</li>
<li>管理画面と検索画面の2種類が存在</li>
</ul>
</li>
<li>Filebeat - ログ収集</li>
</ol>
<p>といった感じです。
まだ起動したばかりなのでこのくらいでしょうか。ログを見るともう少しわかりそうな気がします。</p>
<p>基本的には、EsをバックエンドにしたRailsのミドルウェアになります。コネクターや検索画面はすべてWorkplace Searchのミドルウェア経由でアクセスする形になりますので、普通に検索で利用するユーザーにはElasticsearchの存在は見えない作りになっています。</p>
<h2 id="次は">次は?</h2>
<p><a href="https://www.elastic.co/guide/en/workplace-search/current/workplace-search-getting-started.html">Getting Started</a>を元に、どんなアクターがいて、どんな機能が提供されているのか、どんな利用方法なのか?というのを見ていこうと思います。</p>
</content:encoded>
    </item>
    
    <item>
      <title>ElasticのWorkplace Searchを触ってみる - その1</title>
      <link>https://blog.johtani.info/blog/2020/05/01/intro-workplace-search/</link>
      <pubDate>Fri, 01 May 2020 16:29:04 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2020/05/01/intro-workplace-search/</guid>
      <description>2月のElastic社のブログですが、Enterprise Searchとこれまで呼んでいた製品をWorkplace Searchという製品名に</description>
      <content:encoded><p>2月のElastic社のブログですが、Enterprise Searchとこれまで呼んでいた製品を<a href="https://www.elastic.co/jp/workplace-search">Workplace Search</a>という製品名に変更し、App Searchなどを含む製品群を<a href="https://www.elastic.co/jp/enterprise-search">Enterprise Search</a>という名前に変更しました(ちょっとややこしい)。
Workplace Search自体はまだβ版という位置づけですが、ダウンロードして試すことが可能です。</p>
<p>きちんと触ったことがないので、ちょっと触って見ようかなと思い、何回かに分けてブログを書いてみます。まずは概要とかから。</p>
<h2 id="workplace-searchとは">Workplace Searchとは?</h2>
<p>Elasticsearchをバックエンドに利用するElastic社が提供するアプリケーション(ミドルウェア?)の1つです。</p>
<p>もともとはSwiftypeという会社が作っていた、Site Search、App Searchと同じような系列で開発されている統合検索の検索エンジンミドルウェアという感じです。
製品ページを見るとわかりますが、様々なデータソースから、データをクロールしてElasticsearchに保存することで、統合された検索を提供することができるようになる製品です。
最近は会社のドキュメントがさまざまな場所(Google Drive、Saleseforce、GitHub、Dropboxなど)に保存されています。
それぞれで検索窓などはありますが、1箇所で検索することで横断的に検索でき、仕事の効率があがりますよね?ということで作られている製品です。</p>
<h3 id="提供利用方法は">提供(利用)方法は?</h3>
<p>今後の提供方法としては、Elastic Cloudで利用できるSaaS形式のものと、独自に(クラウドのコンピューティングエンジンやオンプレのサーバーなどで)Workplace Searchのアプリを起動する方法(オンプレ版)があります。後者の場合は、Elasticsearchのクラスターを用意する必要があります。なお、後者の場合、Elasticsearchの<a href="https://www.elastic.co/jp/subscriptions">サブスクリプションのプラチナライセンス</a>が必要になるようです(<a href="https://www.elastic.co/jp/downloads/enterprise-search">ダウンロードページ</a>に記載あり)</p>
<p>まだ、β版という位置づけなので、今後どのように変更されるかはわかりませんが、今回は2020年5月1日時点でのベータ版(7.6.0)を元にどんなものかを紹介します。現時点で利用できるのはβ版のオンプレ版で、MacやLinuxで利用可能です。</p>
<h3 id="ダウンロードとインストール">ダウンロードとインストール</h3>
<p><a href="https://www.elastic.co/jp/downloads/enterprise-search">ダウンロードページ</a>にインストール方法などの記載があります。</p>
<p>インストールして触って見るところはまた後日。</p>
<h2 id="ライセンス価格は">ライセンス、価格は?</h2>
<p>まだ不明です。SaaS版の提供はまだです。
オンプレ版については少なくとも、<a href="https://www.elastic.co/jp/subscriptions">Elasticのサブスクリプション</a>のプラチナが必要になります。こちらは、価格は公開されていません。Elastich社もしくはパートナー企業での問い合わせが必要になります。
(たぶん、ドキュメントレベルのセキュリティとかSSOとかの仕組みがプラチナで提供されているのでそのあたりを使っているのでは?と想像してます。)</p>
<h2 id="想定できそうな用途は">想定できそうな用途は?</h2>
<p>社内の文書検索でしょうか。ただ、いわゆる昔ながらのエンタープライズサーチと呼ばれている、社内のファイルサーバーなどの文書検索ではなく、クラウドサービスを複数利用している会社が利用する想定になっています。</p>
<p>例えば、開発者は社内Wiki(Confluence)で社内文書を書き、Issue管理にはJIRAやGitHubを活用しており、ただ、社内での説明にはGoogle Driveを利用しているといった場合です。こういう場合、あの機能についての説明や資料ってどこだっけ?というので、あちこち探し回ったりしないといけないです。また、営業部門やサポート、マーケティングなどが絡んでくると更に、SalesforceやZendeskといったデータソースも出てきます。
情報が散らばっていて、それらを探し出したりまとめるだけで時間を取られている場合などに便利かもしれません。</p>
<h2 id="次は">次は?</h2>
<p>実際にインストールしてから起動して、どんな感じで使えるのかといったところを見て、どんな機能が提供されているのかを見ていこうと思います。</p>
</content:encoded>
    </item>
    
    <item>
      <title>辞書の更新についての注意点</title>
      <link>https://blog.johtani.info/blog/2020/04/27/note-updating-dictionary/</link>
      <pubDate>Mon, 27 Apr 2020 10:44:15 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2020/04/27/note-updating-dictionary/</guid>
      <description>先日、Elasticsearchでのカスタム辞書の利用方法についてブログを書きました。 辞書の設定方法について記載しましたが、今回は辞書の更新</description>
      <content:encoded><p>先日、<a href="/blog/2020/04/22/custom-dictionary-after-7-4/">Elasticsearchでのカスタム辞書の利用方法についてブログ</a>を書きました。</p>
<p>辞書の設定方法について記載しましたが、今回は辞書の更新について書いていなかったので、書いてみようと思います。
ここで「辞書」としているのは、Kuromojiのユーザー辞書、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-synonym-graph-tokenfilter.html">Synonym Graph Token FilterのSynonym辞書</a>(いわゆる類義語辞書)のことになります。サードパーティのAnalyzer等に関する話ではありません。</p>
<h2 id="辞書更新に関する制限事項">辞書更新に関する制限事項</h2>
<p>辞書の更新について、大原則と制限事項が存在します。</p>
<h3 id="大原則辞書の更新データも更新">大原則(辞書の更新=データも更新)</h3>
<p>ElasticsearchはAnalyzerが切り出した単語を元に転置インデックスを作成して、検索を行っています(<a href="https://noti.st/johtani/halVGM">この仕組みに関するスライドはこちらを参照のこと</a>)。
Analyzerが辞書を持っている場合、その辞書を元に単語を切り出して転置インデックスに利用します。
また、検索クエリの単語に対してもこのAnalyzerの辞書が利用されます。</p>
<p>辞書に新しい単語を追加するということは、その単語に関連するドキュメントも更新しないと行けないということになります。</p>
<p>例えば、Kuromojiを利用していて、「グランベリーパーク」という単語「グランベリー」「パーク」という単語に分割できるような新しい単語として辞書に追加する場合を考えてみましょう。ユーザーが「グランベリー」で検索しても検索結果として出てきてほしいという場合です。</p>
<p>辞書に「グランベリーパーク」を登録していない頃に登録されたドキュメントは「グランベリーパーク」という1単語として転置インデックスの見出し語を切り出します(Kuromojiはカタカナの連続している文字列については未知語として1単語にし、「名詞-一般」の品詞を付与)。</p>
<p>更新前でのドキュメントのAnalyze結果</p>
<pre><code>「グランベリーパーク」「で」「ショッピング」
</code></pre><p>もし、辞書に「グランベリーパーク」を「グランベリー」「パーク」から構成される新規の単語として登録しそれを使用した場合、辞書を更新したあとから、「グランベリーパーク」という単語がAnalyzerからは出てこなくなります。</p>
<p>更新後でのドキュメントのAnalyze結果</p>
<pre><code>「グランベリー」「パーク」「で」「ショッピング」
</code></pre><p>ということは、辞書更新以前のドキュメントは「グランベリーパーク」という見出し語に対して登録されているので、辞書更新以前に登録されているドキュメントは検索にヒットしなくなります。</p>
<p>このように転置インデックスを利用している検索エンジンでは、単語の区切りが変更されるような辞書の更新があった場合、最低でも影響があるドキュメントについては再登録が必要となるわけです。</p>
<p>これが大原則(辞書更新=データも更新)となります。
基本的には辞書の更新を行った場合は、ドキュメントの再インデックス(再登録)が必要となります。</p>
<h3 id="elasticsearchでの制限事項">Elasticsearchでの制限事項</h3>
<p>Elasticsearchでは、辞書の更新に関して実装上の制限事項が存在しています。
内部的な実装として、ElasticsearchではAnalyzerのインスタンス(正確にはAnalyzerのFactoryのインスタンス)の生成がインデックスに関する内部のインスタンスが生成されたタイミングの1回のみとなっています。</p>
<p>このインスタンスの生成時に設定ファイル(辞書を含む)を読み込んでいます。</p>
<p>言い換えると、辞書(ファイル、インデックス設定に関わらず)の読み込みは、インデックスが作られたタイミングのみということになります。
なおここで言う「インデックスが作られたタイミング」というのは、以下の2パターンです。</p>
<ol>
<li>インデックス新規作成時</li>
<li>インデックスオープン時</li>
</ol>
<p>では、ここから辞書を更新してそれを既存のインデックスに適用する方法について説明しましょう。</p>
<h2 id="辞書の更新方法ファイル編">辞書の更新方法(ファイル編)</h2>
<p>前回のブログで説明しましたが、Elasticsearch 7.4よりも古いバージョンでは、ファイルでKuromojiのユーザー辞書を設定していました。まずはこちらの方法について説明します。前提として、すでにユーザー辞書を設定したKuromoji Tokenizerがインデックスに設定されているものとします(<a href="https://www.elastic.co/guide/en/elasticsearch/plugins/current/analysis-kuromoji-tokenizer.html">ユーザー辞書の設定方法については公式リファレンスを御覧ください</a>)。</p>
<p>辞書ファイルに新規にエントリーを追加しただけでは、設定は読み込まれていません。新規辞書を反映させるためには以下の手順が必要となります。</p>
<ol>
<li>更新した辞書ファイルの配布
<ul>
<li>複数ノードでElasticsearchのクラスターを構成している場合はすべてのノードに更新した辞書ファイルを配布する必要があります。</li>
</ul>
</li>
<li>インデックスのクローズ(<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-close.html">公式リファレンス</a>)
<ul>
<li>設定ファイルを再読込させるために一度インデックスをクローズします。</li>
<li>クローズするので、書き込み、検索などの処理を停止する必要があります。もし停止していない場合はクライアント側ではインデックスがクローズされているという旨のエラーを受け取ります(400で、<code>index_closed_exception</code>)。</li>
</ul>
</li>
<li>インデックスのオープン(<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-open-close.html">公式リファレンス</a>)
<ul>
<li>設定ファイルを読み込みます。これで、新規追加された単語が読み込まれます。</li>
</ul>
</li>
<li>再インデックス
<ul>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update-by-query.html"><code>_update_by_query</code></a>を利用することで、対象のインデックスのデータを再インデックスすることができます。条件無しでAPIを呼び出すとすべてのデータが再度登録されます。</li>
<li><code>_source</code>が<code>false</code>の場合は<code>_update_by_query</code>は利用できません。元データをもう一度外部からElasticsearchに対して登録する必要があります。</li>
</ul>
</li>
</ol>
<p><a href="https://gist.github.com/johtani/25e971ded639e3bea3229ebf861e62be#file-1_-_-json">Kibanaでの手順をGistにしてあります</a>。手順はこちらをご覧ください。</p>
<h2 id="辞書の更新方法インデックス設定編">辞書の更新方法(インデックス設定編)</h2>
<p>ファイルの場合とは少し手順が異なります。
インデックスの設定としてユーザー辞書を登録しているため、ファイルをElasticsearchのクラスターにあるノードに配布する必要がありません。
また、辞書の設定はインデックスの設定に指定してありますが、こちらは動的に設定変更できる項目ではないため、インデックスを先にクローズする必要があります。</p>
<ol>
<li>インデックスのクローズ(<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-close.html">公式リファレンス</a>)
<ul>
<li>辞書の設定を更新するにはインデックスをクローズする必要があります。辞書の設定は動的に更新できる項目にはなっていないためです。</li>
<li>オープンしているインデックスで更新しようとした場合は<code>illegal_argument_exception</code>で<code>Can't update non dynamic settings...</code>というメッセージが返ってきます。</li>
</ul>
</li>
<li>辞書の更新(<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.6/indices-update-settings.html">公式リファレンス:インデックス設定の更新</a>)
<ul>
<li><code>user_dictionary_rules</code>に単語と追加します。</li>
</ul>
</li>
<li>インデックスのオープン(<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-open-close.html">公式リファレンス</a>)
<ul>
<li>設定ファイルを読み込みます。これで、新規追加された単語が読み込まれます。</li>
</ul>
</li>
<li>再インデックス
<ul>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update-by-query.html"><code>_update_by_query</code></a>を利用することで、対象のインデックスのデータを再インデックスすることができます。条件無しでAPIを呼び出すとすべてのデータが再度登録されます。</li>
<li><code>_source</code>が<code>false</code>の場合は<code>_update_by_query</code>は利用できません。元データをもう一度外部からElasticsearchに対して登録する必要があります。</li>
</ul>
</li>
</ol>
<p><a href="https://gist.github.com/johtani/25e971ded639e3bea3229ebf861e62be#file-2_-_-json">Kibanaでの手順をGistにしてあります</a>。手順はこちらをご覧ください。</p>
<h2 id="第3の方法新規インデックス作成">第3の方法(新規インデックス作成)</h2>
<p>ここまで、インデックスのクローズ、オープンで既存のインデックスに対して辞書を更新する方法について説明しました。
ただ、残念なことにAmazon Elasticsearch ServiceではElasticsearchが提供しているすべてのAPIが利用できるわけではありません(<a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/aes-supported-es-operations.html">Amazon ESの利用可能なAPIの一覧はこちら</a>)。
(<code>_close</code>は駄目だけど<code>_open</code>は呼べるのかな???)</p>
<p>ということで、新規にインデックスを作成して、新しい辞書の設定を反映したインデックスを用意し、そこにデータをコピーもしくは登録するという方法になります(<a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/custom-packages.html">Amazon ESのカスタム辞書のドキュメントに手順がありますね</a>)。</p>
<p>手順としては以下のとおりです。</p>
<ol>
<li>辞書の更新(用意)
<ul>
<li>新しい単語などを登録した辞書を用意します。</li>
<li>ファイル、インデックス設定どちらでもOKです。</li>
<li>ファイルの場合は、既存のファイル名とは異なるファイル名にしたほうが混乱がなくなります。</li>
</ul>
</li>
<li>新規インデックス作成
<ul>
<li>1.で作成した辞書を元に新規インデックスを作成します。</li>
</ul>
</li>
<li>新規インデックスにデータコピー
<ul>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.6/docs-reindex.html"><code>_reindex</code> API</a>を利用するとデータコピーが簡単です。<code>source</code>と<code>dest</code>を指定するだけです。</li>
<li><code>_source</code>が<code>false</code>の場合は<code>_update_by_query</code>は利用できません。元データをもう一度外部からElasticsearchに対して登録する必要があります。</li>
</ul>
</li>
<li>アプリケーション側で新規インデックスを利用するように変更
<ul>
<li><code>_alias</code>を使用しておくと切り替えが簡単です(<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.6/indices-add-alias.html">公式リファレンスはこのあたり</a>)。</li>
</ul>
</li>
</ol>
<p>考慮すべき点としては、サービスを提供しながら行う場合は、3.の<code>_reindex</code>を実行し始めたタイミング以降の登録・更新データの扱いについてでしょうか。</p>
<h2 id="まとめ">まとめ</h2>
<p>辞書の更新に関する大原則、制限事項、手順などについて説明しました。
辞書の変更は検索に大きく影響がでます。そのあたりをきちんと考慮しながら更新しましょう。
ユーザー辞書、カスタム辞書を扱う際の参考にしていただければと。
他にもユーザー辞書で気をつけないといけないこともありますが、今日はこのあたりで。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Kuromojiのカスタム辞書をインデックスの設定で指定</title>
      <link>https://blog.johtani.info/blog/2020/04/22/custom-dictionary-after-7-4/</link>
      <pubDate>Wed, 22 Apr 2020 10:30:56 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2020/04/22/custom-dictionary-after-7-4/</guid>
      <description>Elasticsearchで日本語を扱うときに、カスタム辞書を使いたいという要望がよくあります。 AWSのElasticsearch Servi</description>
      <content:encoded><p>Elasticsearchで日本語を扱うときに、カスタム辞書を使いたいという要望がよくあります。
<a href="https://aws.amazon.com/jp/about-aws/whats-new/2020/04/custom-dictionary-files-now-supported-on-amazon-elasticsearch-service/">AWSのElasticsearch Serviceでカスタム辞書ファイルを読み込める機能が発表されたようです</a>。</p>
<p>実は、Elasticsearchの7.4からファイルを使用しなくても日本語のTokenizerでカスタム辞書を利用することができるようになっています。</p>
<h2 id="カスタム辞書をインデックスの設定で指定">カスタム辞書をインデックスの設定で指定</h2>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/plugins/7.4/analysis-kuromoji-tokenizer.html#analysis-kuromoji-tokenizer">やり方はドキュメントに記載</a>があります。</p>
<p>トークナイザーの設定をインデックスの設定に記述しますが、このときに
<code>user_dictionary_rules</code>という設定を利用することでカスタム辞書を指定できます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#960050;background-color:#1e0010">PUT</span> <span style="color:#960050;background-color:#1e0010">custom_dic_sample</span>
{
  <span style="color:#f92672">&#34;settings&#34;</span>: {
    <span style="color:#f92672">&#34;index&#34;</span>: {
      <span style="color:#f92672">&#34;analysis&#34;</span>: {
        <span style="color:#f92672">&#34;tokenizer&#34;</span>: {
          <span style="color:#f92672">&#34;kuromoji_user_dict&#34;</span>: {
            <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;kuromoji_tokenizer&#34;</span>,
            <span style="color:#f92672">&#34;mode&#34;</span>: <span style="color:#e6db74">&#34;extended&#34;</span>,
            <span style="color:#f92672">&#34;user_dictionary_rules&#34;</span>: [
              <span style="color:#e6db74">&#34;グランベリーパーク,グランベリー パーク,グランベリー パーク,カスタム名詞&#34;</span>,
              <span style="color:#e6db74">&#34;高輪ゲートウェイ,高輪 ゲートウェイ,タカナワ ゲートウェイ,カスタム名詞&#34;</span>]
          }
        },
        <span style="color:#f92672">&#34;analyzer&#34;</span>: {
          <span style="color:#f92672">&#34;my_analyzer&#34;</span>: {
            <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;custom&#34;</span>,
            <span style="color:#f92672">&#34;tokenizer&#34;</span>: <span style="color:#e6db74">&#34;kuromoji_user_dict&#34;</span>
          }
        }
      }
    }
  }
}
</code></pre></div><p>辞書の内部は<code>&quot;単語,出てきてほしい単語列(スペース区切り),読みの単語列(スペース区切り),品詞名&quot;</code>になります。配列で設定可能で、複数の単語を登録したい場合は、カンマ区切りで登録していきます(上記例では2つの単語を登録しています)。</p>
<h2 id="_analyzeを利用して設定の確認">_analyzeを利用して設定の確認</h2>
<p>実際に上記の設定がうまく動作するかは<code>_analyze</code>のエンドポイントを利用します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#960050;background-color:#1e0010">GET</span> <span style="color:#960050;background-color:#1e0010">custom_dic_sample/_analyze</span>
{
  <span style="color:#f92672">&#34;text&#34;</span>: <span style="color:#e6db74">&#34;グランベリーパークがオープンしました。&#34;</span>,
  <span style="color:#f92672">&#34;analyzer&#34;</span>: <span style="color:#e6db74">&#34;my_analyzer&#34;</span>
}
</code></pre></div><p>出力は以下のようになります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#f92672">&#34;tokens&#34;</span> : [
    {
      <span style="color:#f92672">&#34;token&#34;</span> : <span style="color:#e6db74">&#34;グランベリー&#34;</span>,
      <span style="color:#f92672">&#34;start_offset&#34;</span> : <span style="color:#ae81ff">0</span>,
      <span style="color:#f92672">&#34;end_offset&#34;</span> : <span style="color:#ae81ff">6</span>,
      <span style="color:#f92672">&#34;type&#34;</span> : <span style="color:#e6db74">&#34;word&#34;</span>,
      <span style="color:#f92672">&#34;position&#34;</span> : <span style="color:#ae81ff">0</span>
    },
    {
      <span style="color:#f92672">&#34;token&#34;</span> : <span style="color:#e6db74">&#34;パーク&#34;</span>,
      <span style="color:#f92672">&#34;start_offset&#34;</span> : <span style="color:#ae81ff">6</span>,
      <span style="color:#f92672">&#34;end_offset&#34;</span> : <span style="color:#ae81ff">9</span>,
      <span style="color:#f92672">&#34;type&#34;</span> : <span style="color:#e6db74">&#34;word&#34;</span>,
      <span style="color:#f92672">&#34;position&#34;</span> : <span style="color:#ae81ff">1</span>
    },
    {
      <span style="color:#f92672">&#34;token&#34;</span> : <span style="color:#e6db74">&#34;が&#34;</span>,
      <span style="color:#f92672">&#34;start_offset&#34;</span> : <span style="color:#ae81ff">9</span>,
      <span style="color:#f92672">&#34;end_offset&#34;</span> : <span style="color:#ae81ff">10</span>,
      <span style="color:#f92672">&#34;type&#34;</span> : <span style="color:#e6db74">&#34;word&#34;</span>,
      <span style="color:#f92672">&#34;position&#34;</span> : <span style="color:#ae81ff">2</span>
    },
    {
      <span style="color:#f92672">&#34;token&#34;</span> : <span style="color:#e6db74">&#34;オープン&#34;</span>,
      <span style="color:#f92672">&#34;start_offset&#34;</span> : <span style="color:#ae81ff">10</span>,
      <span style="color:#f92672">&#34;end_offset&#34;</span> : <span style="color:#ae81ff">14</span>,
      <span style="color:#f92672">&#34;type&#34;</span> : <span style="color:#e6db74">&#34;word&#34;</span>,
      <span style="color:#f92672">&#34;position&#34;</span> : <span style="color:#ae81ff">3</span>
    },
    <span style="color:#960050;background-color:#1e0010">...(省略)</span>
  ]
}
</code></pre></div><p>ちなみに、デフォルトの<code>kuromoji</code>を利用した場合は、<code>グランベリーパーク</code>が1単語として出力されます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#960050;background-color:#1e0010">GET</span> <span style="color:#960050;background-color:#1e0010">_analyze</span>
{
  <span style="color:#f92672">&#34;text&#34;</span>: <span style="color:#e6db74">&#34;グランベリーパークがオープンしました。&#34;</span>,
  <span style="color:#f92672">&#34;analyzer&#34;</span>: <span style="color:#e6db74">&#34;kuromoji&#34;</span>
}

<span style="color:#960050;background-color:#1e0010">##</span> <span style="color:#960050;background-color:#1e0010">レスポンス</span>
{
  <span style="color:#f92672">&#34;tokens&#34;</span> : [
    {
      <span style="color:#f92672">&#34;token&#34;</span> : <span style="color:#e6db74">&#34;グランベリーパーク&#34;</span>,
      <span style="color:#f92672">&#34;start_offset&#34;</span> : <span style="color:#ae81ff">0</span>,
      <span style="color:#f92672">&#34;end_offset&#34;</span> : <span style="color:#ae81ff">9</span>,
      <span style="color:#f92672">&#34;type&#34;</span> : <span style="color:#e6db74">&#34;word&#34;</span>,
      <span style="color:#f92672">&#34;position&#34;</span> : <span style="color:#ae81ff">0</span>
    },
    {
      <span style="color:#f92672">&#34;token&#34;</span> : <span style="color:#e6db74">&#34;オープン&#34;</span>,
      <span style="color:#f92672">&#34;start_offset&#34;</span> : <span style="color:#ae81ff">10</span>,
      <span style="color:#f92672">&#34;end_offset&#34;</span> : <span style="color:#ae81ff">14</span>,
      <span style="color:#f92672">&#34;type&#34;</span> : <span style="color:#e6db74">&#34;word&#34;</span>,
      <span style="color:#f92672">&#34;position&#34;</span> : <span style="color:#ae81ff">2</span>
    }
  ]
}
</code></pre></div><p>これで、カスタム辞書を使用することで<code>グランベリー</code>で検索された場合に、<code>グランベリーパーク</code>もヒットするという仕組みです。</p>
<p><code>_analyze</code>は<code>explain</code>というパラメータも持っており、こちらを利用することで、単語の品詞情報なども取得できます。これを使うことで、実際に設定がきちんと動作しているかの確認に利用できます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#960050;background-color:#1e0010">GET</span> <span style="color:#960050;background-color:#1e0010">custom_dic_sample/_analyze</span>
{
  <span style="color:#f92672">&#34;text&#34;</span>: <span style="color:#e6db74">&#34;グランベリーパークがオープンしました。&#34;</span>,
  <span style="color:#f92672">&#34;analyzer&#34;</span>: <span style="color:#e6db74">&#34;my_analyzer&#34;</span>,
  <span style="color:#f92672">&#34;explain&#34;</span>: <span style="color:#66d9ef">true</span>
}
<span style="color:#960050;background-color:#1e0010">##</span> <span style="color:#960050;background-color:#1e0010">レスポンス(一部のみ)</span>
{
  <span style="color:#f92672">&#34;detail&#34;</span> : {
    <span style="color:#f92672">&#34;custom_analyzer&#34;</span> : <span style="color:#66d9ef">true</span>,
    <span style="color:#f92672">&#34;charfilters&#34;</span> : [ ],
    <span style="color:#f92672">&#34;tokenizer&#34;</span> : {
      <span style="color:#f92672">&#34;name&#34;</span> : <span style="color:#e6db74">&#34;kuromoji_user_dict&#34;</span>,
      <span style="color:#f92672">&#34;tokens&#34;</span> : [
        {
          <span style="color:#f92672">&#34;token&#34;</span> : <span style="color:#e6db74">&#34;グランベリー&#34;</span>,
          <span style="color:#f92672">&#34;start_offset&#34;</span> : <span style="color:#ae81ff">0</span>,
          <span style="color:#f92672">&#34;end_offset&#34;</span> : <span style="color:#ae81ff">6</span>,
          <span style="color:#f92672">&#34;type&#34;</span> : <span style="color:#e6db74">&#34;word&#34;</span>,
          <span style="color:#f92672">&#34;position&#34;</span> : <span style="color:#ae81ff">0</span>,
          <span style="color:#f92672">&#34;baseForm&#34;</span> : <span style="color:#66d9ef">null</span>,
          <span style="color:#f92672">&#34;bytes&#34;</span> : <span style="color:#e6db74">&#34;[e3 82 b0 e3 83 a9 e3 83 b3 e3 83 99 e3 83 aa e3 83 bc]&#34;</span>,
          <span style="color:#f92672">&#34;inflectionForm&#34;</span> : <span style="color:#66d9ef">null</span>,
          <span style="color:#f92672">&#34;inflectionForm (en)&#34;</span> : <span style="color:#66d9ef">null</span>,
          <span style="color:#f92672">&#34;inflectionType&#34;</span> : <span style="color:#66d9ef">null</span>,
          <span style="color:#f92672">&#34;inflectionType (en)&#34;</span> : <span style="color:#66d9ef">null</span>,
          <span style="color:#f92672">&#34;partOfSpeech&#34;</span> : <span style="color:#e6db74">&#34;カスタム名詞&#34;</span>,
          <span style="color:#f92672">&#34;partOfSpeech (en)&#34;</span> : <span style="color:#66d9ef">null</span>,
          <span style="color:#f92672">&#34;positionLength&#34;</span> : <span style="color:#ae81ff">1</span>,
          <span style="color:#f92672">&#34;pronunciation&#34;</span> : <span style="color:#66d9ef">null</span>,
          <span style="color:#f92672">&#34;pronunciation (en)&#34;</span> : <span style="color:#66d9ef">null</span>,
          <span style="color:#f92672">&#34;reading&#34;</span> : <span style="color:#e6db74">&#34;グランベリー&#34;</span>,
          <span style="color:#f92672">&#34;reading (en)&#34;</span> : <span style="color:#e6db74">&#34;guramberi&#34;</span>,
          <span style="color:#f92672">&#34;termFrequency&#34;</span> : <span style="color:#ae81ff">1</span>
        },
        {
</code></pre></div><p><code>partOfSpeech</code>にカスタム辞書で設定した<code>カスタム名詞</code>が出力されていますね。
<code>_analyze</code>のAPIはこのように、アナライザーの挙動の確認に非常に便利なので是非活用してみてください。</p>
<p><a href="https://github.com/johtani/analyze-api-ui-plugin">KibanaでこのAPIを使うためのプラグイン</a>も開発していますので、こちらも合わせて利用してみてください。</p>
<h2 id="注意点">注意点</h2>
<p>ちなみに、<code>user_dictionary</code>と<code>user_dictionary_rules</code>を<a href="https://github.com/elastic/elasticsearch/blob/master/plugins/analysis-kuromoji/src/main/java/org/elasticsearch/index/analysis/KuromojiTokenizerFactory.java#L62">両方指定した場合はエラー</a>となります。
ファイルをベースにしつつ、追加の設定をするという使い方はできないので、注意しましょう。</p>
<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">インデックスの設定で書くことにより、バックアップ・リストアは楽になるかな。ただ、クラスターステートに取り込まれるから、あまりにも巨大なカスタム辞書だと心配かなぁ。ファイルの場合はクラスターステートには取り込まれないので、そこは圧迫しない。</p>&mdash; Jun Ohtani (@johtani) <a href="https://twitter.com/johtani/status/1252790960108400641?ref_src=twsrc%5Etfw">April 22, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>それ以外の注意点については、別途ブログを書きました。
<a href="/blog/2020/04/27/note-updating-dictionary/">「辞書の更新についての注意点」</a>、こちらも合わせてご覧ください。</p>
<h2 id="まとめ">まとめ</h2>
<p>カスタム辞書をファイルではなくインデックスの設定値として設定する方法を紹介しました。こちらは、Elasticsearch 7.4で導入された機能になります。7.4以降を利用している場合はこちらを利用することも検討してはいかがでしょうか?
また、<code>_analyze</code> APIも便利なので合わせて活用してみてください。</p>
</content:encoded>
    </item>
    
    <item>
      <title>ElasticsearchのAnalyze APIのVisual Studio Codeのクライアントプラグイン</title>
      <link>https://blog.johtani.info/blog/2020/03/25/vsc-es-analzye-plugin/</link>
      <pubDate>Wed, 25 Mar 2020 11:10:05 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2020/03/25/vsc-es-analzye-plugin/</guid>
      <description>先日、Visual Studio Codeのプラグインを作ってみた(Azure Search Analyze Client)というブログを書きました。 このプラグインを作ってたタイミン</description>
      <content:encoded><p>先日、<a href="/blog/2020/03/19/azure-search-analyze-plugin">Visual Studio Codeのプラグインを作ってみた(Azure Search Analyze Client)</a>というブログを書きました。
このプラグインを作ってたタイミングで、Elasticの河村さん経由で、<a href="https://msdevjp.connpass.com/event/169431/">Microsoft Open Tech Night #9 w/ Elastic</a>でなにかLTしませんか?という打診がありました。</p>
<p>仕組み的には似たようなものだし、Elasticsearch用の拡張機能も作れるし、発表のネタにもなるし一石二鳥では?ということで、LTを快諾し、昨日発表してきました。</p>
<h2 id="資料とか">資料とか</h2>
<p>発表資料やGitHubのリポジトリなどは、以下のとおりです。</p>
<ul>
<li>発表資料 : <a href="https://noti.st/johtani/vDhbXW/analyze-api-vs-code">Analyze APIのVS Codeプラグインを作ってみた</a></li>
<li>GitHub Repository : <a href="https://github.com/johtani/vs-code-es-analyze-client">https://github.com/johtani/vs-code-es-analyze-client</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=johtani.elasticsearch-analyze-api-client">Visual Studio Code Marketplaceページ</a></li>
</ul>
<h2 id="機能">機能</h2>
<p>まだ、必要最低限の機能を実装した感じです。</p>
<ul>
<li>Analyze APIのパラメータ入力用のエディタ起動(<code>Elasticsearch Analyze Client: Create Elasticsearch Analyze Request</code>)</li>
<li>Esにリクエストを送信して結果の表示</li>
</ul>
<p>インストールからリクエスト送信して結果が出てくるまでのデモです。</p>

<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" style="max-width:600">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20200325/plugin-demo.gif" />
    </div>
    <a href="/images/entries/20200325/plugin-demo.gif" itemprop="contentUrl"></a>
  </figure>
</div>

<p>1点LTのデモのときに話すのを忘れていましたが、<code>.esanalyze</code>という拡張子のファイルであれば、このプラグインが入力値を見つけ出して、「<code>Analyze text with analyzers</code>」というコマンド送信用のリンクをエディタ画面に表示する機能があります。
ですので、パラメータ入力用のエディタを起動し、値を設定したあとにファイルを<code>hoge.esanalyze</code>というような名前で保存してもらえれば、後日そのファイルを開くことでリクエストが再送できます。</p>
<h3 id="azure-search版との機能の違い">Azure Search版との機能の違い</h3>
<p>先日のAzure Search向けのクライアントとの違いがいくつかあります。
ElasticsearchのAnalyze APIの方が多機能であるため、プラグインとしても違いがあったほうがいいかなと。</p>
<ol>
<li>入力がJSON形式</li>
<li>結果画面に詳細表示切り替えボタンを追加</li>
</ol>
<p>現時点では対応していませんが、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-analyze.html#analyze-api-custom-analyzer-ex">Analyze APIはカスタムのtokenizer、filter、char_filterの設定を入力として受け付けることが可能です</a>。そのときに指定するのはJSON形式でtokenizerなどの設定を記述します。
今後、これらの対応をすることを考えると、入力全体をJSON形式で読み込めるほうがわかりやすいかなということで、入力はJSON形式で入力してもらうことを想定しました。</p>
<p>結果画面に詳細表示切り替えボタンを追加したのは、2つの理由があります。1つはAzure SearchのAnalyze APIよりもTokenの情報としていくつか他の情報も存在するためです。複数のAnalyzerとの比較をする場合は、単語列だけを比較したいですが、Analyzer個別の詳細情報を見たい場合もあるので、切り替えができたほうがよいかなと。
2つ目の理由はまだ実装していませんが、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-analyze.html#explain-analyze-api">explainパラメータの出力</a>への対応のためです。
explainパラメータを指定すると、カスタムAnalyzerの場合に、Analyzerの設定にあるchar_filter、tokenizer、token_filterのそれぞれのステップでの単語列の出力が結果として返ってきます。この結果には標準の出力よりもさらに多くのtokenの情報(例えば、kuromojiだと品詞情報、読み、原型など)が追加されてきます。これらの表示を切り替えることができたほうがよいかと。</p>
<p>これらは、実は<a href="https://github.com/johtani/analyze-api-ui-plugin/blob/master/docs/GETTING_STARTED.md#3-show-analyzed-result-of-custom-analyzer">Kibanaのプラグインとしてすでに実装済み</a>になっています。
同等の機能は実装できるかなという目論見もあり、そちらに合わせた感じにしてあります。</p>
<h2 id="今後の対応">今後の対応</h2>
<p>現時点では、Analyzer名の指定のみが可能となっています。Kibanaのプラグインと同程度の機能はGitHubのIssueとして登録してみました。</p>
<ul>
<li><a href="https://github.com/johtani/vs-code-es-analyze-client/issues/5">explainパラメータ対応</a></li>
<li><a href="https://github.com/johtani/vs-code-es-analyze-client/issues/3">fieldパラメータ対応</a></li>
<li><a href="https://github.com/johtani/vs-code-es-analyze-client/issues/4">custom analyzer対応</a></li>
</ul>
<p>その他に、インデックス名やアナライザ名の自動補完みたいな機能があると便利かも?と妄想していたりします(実装が大変かもですが。。。)。Kibanaのプラグインの場合は、Mappingやインデックス名を調べるときに、KibanaのConsoleからチェックすればよかったのですが、このプラグイン単体だとそのあたりの情報の取得に他のツール(Kibanaだったり、REST API Clientだったり)を使わないといけないという問題点はあるかなぁと。</p>
<p>あとは、結果画面がこのままで本当に見やすいかどうか?なども気になってはいます。</p>
<h2 id="まとめ">まとめ</h2>
<p>まだまだ、作ってみたというレベルのプラグインです。
どのくらいの人に使ってもらえるかもわかりませんが、こんな機能あるといい?など要望があればリクエストいただければと。
Twitterで聞いていただいてもいいですし、GitHubのIssueとして登録していただいても構いません。
そもそもいらないなぁなんて意見でももちろん大歓迎です。フィードバックお待ちしてます!</p>
</content:encoded>
    </item>
    
    <item>
      <title>2019年のElastic StackとElastic</title>
      <link>https://blog.johtani.info/blog/2019/12/01/whats-happen-at-elastic-in-2019/</link>
      <pubDate>Sun, 01 Dec 2019 00:00:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2019/12/01/whats-happen-at-elastic-in-2019/</guid>
      <description>Elastic stack (Elasticsearch) Advent Calendar 2019の1日目の記事になります。 まだ、1ヶ月を残してますが、簡単に今年起こったことを振り返ってみようと思います。毎年恒例ですね、</description>
      <content:encoded><p><a href="https://qiita.com/advent-calendar/2018/elasticsearch">Elastic stack (Elasticsearch) Advent Calendar 2019</a>の1日目の記事になります。</p>
<p>まだ、1ヶ月を残してますが、簡単に今年起こったことを振り返ってみようと思います。毎年恒例ですね、ここ数年。</p>
<!-- more -->
<h3 id="elastic-stack-660リリース1月">Elastic Stack 6.6.0リリース(1月)</h3>
<p><a href="https://www.elastic.co/jp/blog/elastic-stack-6-6-0-released">リリース記事はこちら</a></p>
<p>Elastic APMが6.6のリリースと同時にElastic CloudでAPM Serverが無料で利用できるようになったのが地味に便利でした。APMのデモをやるために、それまでは手元にAPM Serverの起動が必要だったので。。。</p>
<p>ユーザーの方たちにはIndex Lifecycle Management（インデックスライフサイクル管理：ILM）がリリースされたのが便利だったと思います。
まだ、ベータでしたが、インデックスの世代管理を格段に便利にしてくれるツールになり、現在では必須アイテムとなっています。
もう一つ、地味に便利なのは、KibanaからElasticsearchへの接続を複数指定できるようになった点かと思います。</p>
<h3 id="elatic-common-schemaのベータリリース2月">Elatic Common Schemaのベータリリース(2月)</h3>
<p><a href="https://www.elastic.co/jp/blog/introducing-the-elastic-common-schema">リリース記事はこちら</a></p>
<p>Elastic Stackではメトリック、APM、ログなど、様々なデータを一元的に可視化することができるという利点があります。ただ、一元的にデータを可視化、検索するためには異なるデータセットに統一されたフィールド名が欠かせません。そのための手段としてElasticが公開したのが<a href="https://github.com/elastic/ecs">Elastic Common Schema</a>です。
各種データの項目名、型などを共通化する仕様をGitHub上で公開しています。最近のBeatsのモジュールはこのElastic Common Schemaに則ってデータが定義されるようになってきています。これにより、ログからメトリックへ、APMからログデータへというシームレスな移動ができるようになっています。</p>
<h3 id="elastic-stack-670リリース3月">Elastic Stack 6.7.0リリース(3月)</h3>
<p><a href="https://www.elastic.co/jp/blog/elastic-stack-6-7-0-released">リリース記事はこちら</a></p>
<p>Elastic MapsやUptimeといった、これまでの可視化とは異なる便利なアプリが増え始めました。Mapsでは地図の表現が格段にアップしたので、コレまで以上に地理情報と合わせた可視化が楽しくなりました。</p>
<p>もちろん、基本的に必要な技術が着実にGAされていくのもElastic Stackの素晴らしい点です。</p>
<ul>
<li>Index Lifecycle Management(ILM)がGA</li>
<li>Cross Cluster Replication(CCR)がGA</li>
<li>CanvasがGA</li>
<li>Logs &amp; Infra UIがGA</li>
</ul>
<h3 id="elastic-stack-700リリース4月">Elastic Stack 7.0.0リリース(4月)</h3>
<p><a href="https://www.elastic.co/jp/blog/elastic-stack-7-0-0-released">リリース記事はこちら</a></p>
<p>メジャーバージョンのリリースです。
KibanaのUIが刷新されたり、Elasticsearchのクラスター管理の機能が新規に構築されたり、様々な改善がこのリリースでも入っています。また、メジャーバージョンのリリースのタイミングが、さまざまな大きな仕様の変更や改善が入るタイミングでもあります。これまで以上にパフォーマンスが改善（Top-Nクエリ高速化など）されたり、新しい機能の追加（ナノ秒のサポート）されたりしました。</p>
<h3 id="elasticsearchのセキュリティの主要な機能が無料に5月">Elasticsearchのセキュリティの主要な機能が無料に(5月)</h3>
<p><a href="https://www.elastic.co/jp/blog/security-for-elasticsearch-is-now-free">リリース記事はこちら</a></p>
<p>6.8.0および7.1.0のリリースはこの機能の無償提供となりました。
結構衝撃的な話だったのではないかなぁと。これ以前は有償の機能だったセキュリティの以下の機能をElastic License配下で無料で提供する形に変わりました。まだ、ご存知でない方は、データの安全のためにもセキュリティ機能を利用することをおすすめします。</p>
<ul>
<li>TLSによる通信暗号化</li>
<li>ユーザー作成と管理にファイルおよびネイティブのレルム認証を使用可能</li>
<li>クラスターAPIとインデックスに対するユーザーアクセスの管理にロールベースのアクセス制御を使用可能、またSpaces機能でKibanaのマルチテナンシーの安全性を向上</li>
</ul>
<h3 id="elasticon19開催5月">Elastic{ON}19開催(5月)</h3>
<p>今年も東京で開催しました。ビデオなどはこちらで公開されています。
<a href="https://www.elastic.co/elasticon/tour/2019/tokyo">https://www.elastic.co/elasticon/tour/2019/tokyo</a></p>
<p>今回も偉そうにElatic Stackの新しくなった点を紹介するなどしてました。。。</p>
<h3 id="elastic-stack-720リリース6月">Elastic Stack 7.2.0リリース(6月)</h3>
<p><a href="https://www.elastic.co/jp/blog/elastic-stack-7-2-0-released">リリース記事はこちら</a></p>
<p><a href="https://www.elastic.co/jp/blog/introducing-elastic-siem">Elastic SIEMがベータリリース</a>されたのがこのタイミングです。
2月の発表したElastic Common Schemaをフルに活用していると言ってもいいのがこの機能になります。まだ今後もどんどん改善が入るであろうきのうになります。</p>
<p>また、Elasticsearchをバックエンドにした検索ミドルウェアとして利用いただける<a href="https://www.elastic.co/blog/elastic-app-search-7-2-0-released">Elastic App Searchのセルフマネージド版</a>もこのタイミングでリリースされています。</p>
<p>さらに、このリリースの直前には<a href="https://www.elastic.co/jp/blog/announcing-elastic-cloud-on-kubernetes-eck-0-9-0-alpha-2">Elastic Cloud on Kuberunetes(ECK)というものベータリリース</a>されました。少しわかりにくいかもですが、ElasticsearchやKibanaをKubernetesのOperatorとして利用できるようになっています。こちらもElastic Licenseでリリースされているのでk8s上でKibanaやEsを管理しようとしている方は触ってみると面白いかもです。</p>
<h3 id="elastic-cloud-elasticsearch-serviceがgcp日本で利用可能に7月">Elastic Cloud Elasticsearch ServiceがGCP日本で利用可能に(7月)</h3>
<p><a href="https://www.elastic.co/jp/blog/elasticsearch-service-is-now-available-on-google-cloud-platform-gcp-in-japan">リリース記事はこちら</a></p>
<p>Elastic Cloudもプラットフォームが拡大した年でした。
Google Cloud Platformの東京リージョンを選択できるようになりました。さらなる統合（支払いをGCP経由にまとめたり、GCPのコンソールから利用できたりなど）も進んでいます。</p>
<h3 id="elastic-stack-730リリース8月">Elastic Stack 7.3.0リリース(8月)</h3>
<p><a href="https://www.elastic.co/jp/blog/elastic-stack-7-3-0-released">リリース記事はこちら</a></p>
<p>データフレームと呼ばれるデータ取り込み時のピボット機能が導入されました。また、MapsのGAリリース、Elastic APMの.NETエージェント正式リリースなど、細かいですが様々なものがリリースされています。</p>
<h3 id="elastic-cloud-elasticsearch-serviceがazureで利用可能に9月">Elastic Cloud Elasticsearch ServiceがAzureで利用可能に(9月)</h3>
<p><a href="https://www.elastic.co/jp/blog/elasticsearch-service-on-elastic-cloud-now-available-on-microsoft-azure">リリース記事はこちら</a></p>
<p>Microsoft Azureへのデプロイも可能になりました。残念ながらまだ日本リージョンには来ていないですが、今後出てくるはずです！さまざまなクラウドベンダーのサポートにより、より多くの人に使っていただけるようになるのかと。</p>
<h3 id="elastic-stack-740リリース10月">Elastic Stack 7.4.0リリース(10月)</h3>
<p><a href="https://www.elastic.co/jp/blog/elastic-stack-7-4-0-released">リリース記事はこちら</a></p>
<p>もう7.4.2まで出ていますが、いい感じの間隔で7.0、7.2、7.3と来ていますね。
7.4では、スナップショットリストアがKibanaから簡単に行えるようになりました。これまではKibanaのConsoleでJSONを見ながら管理されていたかもですが、GUIにより今どんなスナップショットがあるのか、どれをリストアするのかといった操作が簡単にできるようになっています。</p>
<p>KibanaについてはPKI認証のサポートなども始まり、様々な認証方式でより便利にKibanaが使えるようになっています。</p>
<h3 id="12月">12月？</h3>
<p>12月ですし、<a href="https://www.meetup.com/ja-JP/Tokyo-Elastic-Fantastics/events/266551992/">Elasticsearch勉強会では「LT＆忘年会」ということで、懇親会がメインの勉強会として12/6に開催</a>します。悪路クエストの緑川さん、吉岡さんに主体となっていただき、マイクロソフトさんを会場に借りて開催予定です。興味のある方はぜひご参加ください。
LTもおまちしています！</p>
<h3 id="まとめ">まとめ</h3>
<p>駆け足でしたが今年を振り返ってみました。
今年も色々ありました。残すところあと1ヶ月です！</p>
<p>さて、<a href="https://qiita.com/advent-calendar/2019/elasticsearch">Elastic Stack Advent Calendar 2019</a>は今日から25日まで続きます。今年は<a href="https://qiita.com/advent-calendar/2019/elasticsearch2">その2</a>もできています！こらからの記事を楽しみにしています！
本日は<a href="https://qiita.com/advent-calendar/2019/elasticsearch2">その2</a>で[kaibadash@github]さんが「5分でできるElastic stack環境構築」というのを書いてくれてるはずです！</p>
<p>ということで、次は<a href="https://qiita.com/KunihikoKido">KunihikoKido</a>さんの「
Elastic Cloud を使うようになって設計方針やら変わったことについて書きます。」になります。お楽しみに！</p>
</content:encoded>
    </item>
    
    <item>
      <title>Elastic Stack 7.0で入ってくる新機能をちょっと紹介</title>
      <link>https://blog.johtani.info/blog/2018/12/25/whats-new-in-elastic-stack-7/</link>
      <pubDate>Tue, 25 Dec 2018 00:00:01 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2018/12/25/whats-new-in-elastic-stack-7/</guid>
      <description>Elastic stack (Elasticsearch) Advent Calendar 2018の25日目の記事になります。 今年最後のAdvent Calendarです！来年も忘れてなければやるはず！ 今日は、すでにalp</description>
      <content:encoded><p><a href="https://qiita.com/advent-calendar/2018/elasticsearch">Elastic stack (Elasticsearch) Advent Calendar 2018</a>の25日目の記事になります。
今年最後のAdvent Calendarです！来年も忘れてなければやるはず！</p>
<p>今日は、すでにalpha2までリリースされた7系でどんな変更が入るのかをちょっとだけ紹介します。
ほんとにちょっとだけですよ。</p>
<!-- more -->
<h3 id="kibanaのk7-design-kibana">Kibanaのk7 design (kibana)</h3>
<p><a href="https://www.elastic.co/guide/en/kibana/master/release-notes-7.0.0-alpha1.html#K7-design-7.0.0">Kibanaの新デザインです。K7って呼ぶのかな？</a></p>

<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" style="max-width:600">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20181225/k7dashboard.png" />
    </div>
    <a href="/images/entries/20181225/k7dashboard.png" itemprop="contentUrl"></a>
  </figure>
</div>

<p>まだ、メニューと一部が実装されているだけですが、7.0.0でガラッと変わりそうです。
そのほかの画面の<a href="https://github.com/elastic/kibana/issues?utf8=%E2%9C%93&amp;q=is%3Aissue+is%3Aopen+k7">Issueはこちら</a>です。
&ldquo;k7&quot;で検索しただけですが。メタIssueが見つからなかったんで。<a href="https://github.com/elastic/kibana/issues/25736">例えば、こんな感じでアプリとかのスイッチとかがこんな感じになるよというデザイン案が観れたりします</a>。</p>
<h3 id="zen2-elasticsearch">Zen2 (elasticsearch)</h3>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-discovery.html">Elasticsearchの新しいクラスター管理機構アルゴリズム</a>になります。
Zenと呼ばれる独自実装のものを6系までは使っていましたが、7系向けに変更がかかりました。
実際には、Nodeを探す仕組み、Masterの選出アルゴリズム、クラスター状態の管理などを行います。
上記のリンクにあるようにドキュメントも詳しくなりました。
信頼性をさらに向上し、設定ミスを起こしにくくして、より使いやすくという目的で様々な変更が加えられています。
これが、<a href="https://github.com/elastic/elasticsearch/issues/32006">メタIssue</a>かな？
アルゴリズムの変更や、クラスターの状態の管理の方法などの変更に関するIssueやPRにリンクが貼ってあります。</p>
<h3 id="新しいデータタイプ-elasticsearch">新しいデータタイプ (elasticsearch)</h3>
<h4 id="featurefeature-vector-datatype">Feature/Feature vector datatype</h4>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/feature.html">ドキュメントはこちら</a>と<a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/feature-vector.html">こちら</a></p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/query-dsl-feature-query.html">feature query</a>と合わせて使用するためのフィールドで、しかもクエリのスコア計算「のみ」に使用するフィールドになります。
検索条件やソート、Aggregationの対象ではなく、クエリのスコアに影響させたい値を入れておくためのフィールドです。
6から追加された機能の「<a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/search-uri-request.html">track_total_hits</a>」をfalseにした時と合わせると、function_scoreなどで計算をしていた場合よりも、検索性能が上がるという利点まであります。
ちなみに、「track_total_hits」は検索ヒット数を計算しないで、上位のデータを取得する時にクエリを早くするといったことができる機能になります。
<a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/index-modules-index-sorting.html">Index Sorting</a>と組み合わせることで威力が発揮できる仕組みになるはずです。</p>
<h3 id="filebeat-supports-netflow-beats">Filebeat supports NetFlow (beats)</h3>
<p><a href="https://www.elastic.co/guide/en/beats/filebeat/master/filebeat-input-netflow.html">NetFlowが入力</a>として追加されます。
Filebeatと言いつつ、File以外の入力が徐々に増えてきてますね（UDPやTCPにも対応しましたし）。
ネットワーク機器などの監視を行う方などにはさらに便利になってくるのではないでしょうか？
（私はこの辺りは不得手なので、誰か使ってみてもらえればと！）</p>
<h2 id="まとめ">まとめ</h2>
<p>まだ、序の口って感じですが、今年はこの辺で。7系ではここであげた以外にも様々な機能が追加されています（もしくは予定です）。
Elasticのドキュメントの良いところは、masterブランチのドキュメントも公開されていることです。
ドキュメントのバージョンを<code>7.0.0-alpha2</code>にすれば、masterブランチで追加されたページが見れるので、
興味のある方は眺めてみていただければと。物によって、リリースノートが書かれていなかったりするので注意は必要ですが。</p>
<p>今年もあと数日になりましたが、Advent Calendarへの参加ありがとうございました！
来年ももちろんやりますので、年始からネタを考えてくださいね。</p>
<p>来年一発目は、<a href="https://www.meetup.com/ja-JP/Tokyo-Elastic-Fantastics/events/257301177/">第28回Elasticsearch勉強会 - 6.5機能紹介 -</a>になります。ウェビナーでも紹介しましたが、6.5で入った様々な新機能をデモありで紹介する予定です。
興味のある方はぜひご参加ください。</p>
<p>では、来年もよろしくお願いいたします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>2018年のElastic StackとElastic</title>
      <link>https://blog.johtani.info/blog/2018/12/01/whats-happen-at-elastic-in-2018/</link>
      <pubDate>Sat, 01 Dec 2018 10:48:38 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2018/12/01/whats-happen-at-elastic-in-2018/</guid>
      <description>Elastic stack (Elasticsearch) Advent Calendar 2018の1日目の記事になります。 ちょっと遅れちゃいました。。。 まだ、1ヶ月を残してますが、簡単に今年起こったことを振り返ってみよ</description>
      <content:encoded><p><a href="https://qiita.com/advent-calendar/2018/elasticsearch">Elastic stack (Elasticsearch) Advent Calendar 2018</a>の1日目の記事になります。</p>
<p>ちょっと遅れちゃいました。。。
まだ、1ヶ月を残してますが、簡単に今年起こったことを振り返ってみようと思います。毎年恒例ですね、ここ数年。</p>
<!-- more -->
<h3 id="elastic-stack-620リリース2月">Elastic Stack 6.2.0リリース(2月)</h3>
<p><a href="https://www.elastic.co/jp/blog/elastic-stack-6-2-0-released">リリース記事はこちら</a></p>
<p>APMがGAリリースされ、Beats monitoring UIも追加されました。Stackとしての統一度がちょっとずつ上がってきた感じですね。
Kibanaのホーム画面（左メニューのKibanaアイコンをクリックした時）にデータ登録のチュートリアル的な画面が追加されています。
特にBeatsを利用する時の流れが簡単にわかるのがいい感じです。Metricsなどはローカルでちょっと試すのにも簡単な流れですので、ぜひ一度やってみてもらいたいなと。
個人的にはtermsを使ったパイチャートで、<a href="https://github.com/elastic/kibana/pull/15525">その他の数値がどのくらいあるかといった表示ができるよう</a>になって、やっと帰ってきた！（Kibana 3の頃にはあった機能）という印象でした。</p>
<h3 id="elasticon18開催2月">Elastic{ON}18開催(2月)</h3>
<p>第4回目のユーザーカンファレンスがSFで開催されました。
今年のキーノートが今年最大のニュースですね。
<a href="https://www.elastic.co/jp/blog/doubling-down-on-open">X-Packのコードの公開が発表された</a>のがこの時でした。
個人的に今後もオープンソースに携わっていきたいと思いながら日々働いていますが、
Elasticのオープンソースへのこだわりと、シンプルな考え方を再確認して素晴らしい会社で働けてるなーと。
商用のソースコードを公開してユーザーや顧客の皆さんとより良いものを作っていきたいという形ですので、今後もよろしくお願いします！
<a href="https://www.elastic.co/elasticon/conf/2018/sf/opening-keynote">キーノートの動画はこちら</a>からご覧いただけます。</p>
<p>そのほかにも次のような発表が行われました。</p>
<ul>
<li>SQL for elasticsearch</li>
<li>Canvas</li>
<li>Elastic App Search(旧Swiftype)</li>
</ul>
<h3 id="elastic-stack-630リリース6月">Elastic Stack 6.3.0リリース(6月)</h3>
<p><a href="https://www.elastic.co/jp/blog/elastic-stack-6-3-0-released">リリース記事はこちら</a></p>
<p>2月末のElastic{ON}で発表されたX-Packのコードの公開にはやはり時間がかかりました。
有償コードのリポジトリとの統合やライセンスの変更、テスト環境などなど、色々大変だったみたいです。
ようやく公開され、ベーシックのライセンスの扱いなども変わり、より使いやすくなったのがこのタイミングです。</p>
<ul>
<li>X-Packをプラグインとしてのインストールが不要に</li>
<li>ベーシックライセンスがデフォルトでONに。6.3から登録などが不要に。</li>
<li>Apache 2.0ライセンスの部分のみのディストリビューションも別途ダウンロードできるようになどなど</li>
</ul>
<p><a href="https://www.elastic.co/jp/webinars/elastic-stack-6-3">日本でもリリースウェビナーをやりました</a>。ご覧いただけましたかね？</p>
<h3 id="elastic-cloud-elasticsearch-serviceがより使いやすく8月">Elastic Cloud Elasticsearch Serviceがより使いやすく(8月)</h3>
<p><a href="https://www.elastic.co/jp/blog/the-next-generation-elasticsearch-service-hot-warm-clusters-machine-learning-more-hardware-choices-and-new-pricing">リリース記事はこちら</a></p>
<p>これまでは、メモリとストレージの比率だけしか指定できなかったのですが、
このリリースで様々なユースケースに応じた組み合わせが可能になりました。
CPUやメモリリソースよりもストレージを大きくしたりなどです。
専用マスターノードを追加できたり、待望の機械学習（Machine Learning）が提供されたりと色々と変更があり使いやすくなったかと。
昔からよく聞かれる、Kuromojiなどのカスタム辞書を登録する機能もあるので、Elastic Cloud便利です。
<a href="https://www.elastic.co/jp/cloud/elasticsearch-service">ご存知ない方は、14日間のトライアル</a>もありますので試していただければと！</p>
<h3 id="elastic-stack-640リリース8月">Elastic Stack 6.4.0リリース(8月)</h3>
<p><a href="https://www.elastic.co/jp/blog/elastic-stack-6-4-0-released">リリース記事はこちら</a></p>
<p>フィールドエイリアスや韓国語のアナライザーがElasticsearchに追加されました。
Kibanaはデザインがここからさらに少しずつ変更が入ってたりします。
<a href="https://elastic.github.io/eui/#/">Elastic UIフレームワークと呼ばれるデザイン用のライブラリ</a>が、ElasticのプロダクトのUIに取り込まれていってる感じです。統一感が取れてきてますよね。私が開発している<a href="https://github.com/johtani/analyze-api-ui-plugin/issues/25">Analyze UIのプラグインにも取り込みました</a>。
あとは、マイクロソフトのde:codeで話をさせていただいた、<a href="https://www.elastic.co/blog/logstash-6-4-0-released">Logstash向けのAzure Moduleがリリース</a>されたのもこのバージョンでした。AzureのEvent Hubからデータを取り込んで、SQLデータベースのモニタリングや、ユーザーの認証などをとってKibanaで可視化するものです。</p>
<p>もっとも気に入っているのはサンプルデータの登録が簡単になったことです。これまでは、KibanaとElasticsearchを用意した後に、データを入れるためにFilebeatなどを使ってから、ようやくKibanaで遊べるという形でした。
6.4からは、ElasticsearchとKibanaを立ち上げて、Kibanaのホーム画面の「Sample Data」のリンクを押した後に、「Sample flght data」の「Add」ボタンを押せばKibanaからデータが登録されます（<a href="https://www.elastic.co/guide/en/kibana/current/tutorial-sample-data.html">サンプルデータについてはこちら</a>）。とりあえず触ってみたいという方への敷居がさらに下がったのではないかなぁと。</p>
<h3 id="elastic認定エンジニア第1号8月">Elastic認定エンジニア第1号(8月)</h3>
<p><a href="https://www.elastic.co/jp/blog/celebrating-the-first-elastic-certified-engineer">ブログ記事はこちら</a></p>
<p>認定制度も始まりました。Elasticsearchの知識、経験を問われるテストを受けていただき、合格すると認定されるというやつです。
なんと、社外で世界初の認定エンジニアがアクロクエストの吉岡さんでした（上記ブログ参照）。
私もトレーナーやってるのもあり、慌てて認定をとったりしましたw。
認定テストは筆記ではなく、実際に作業をするテストなので実践的です。
トレーニングの受講が必須ではないのも面白いなぁと思いました。
トレーニングや認定エンジニアに興味がある方は、<a href="https://training.elastic.co">Elasticのトレーニングのサイト</a>をご覧ください。
1月末にはまた、日本語でElasticsearchのトレーニングも開催されます！</p>
<h3 id="elastic-cloud-enterprise-20リリース9月">Elastic Cloud Enterprise 2.0リリース(9月)</h3>
<p><a href="https://www.elastic.co/jp/blog/elastic-cloud-enterprise-2-0-0-released">リリース記事はこちら</a></p>
<p><a href="https://www.elastic.co/jp/products/ece">Elastic Cloud Enterprise</a>をご存知ない方もいらっしゃるかもしれません。
Elastic Cloudの裏側で利用しているクラスターの起動などの仕組みを製品として提供しているのがこちらになります。
Elastic Cloudで機械学習や様々な構成ができるようになったものがリリースされたのがこの2.0です。
複数のElasticsearchクラスターを管理したい場合には、こちらが便利なツールになってるんじゃないかなぁと。
部署ごとにクラスターを提供するといったことが可能になるので、乱立する前に利用するのも便利かなーと。</p>
<h3 id="ニューヨーク証券取引所で株式を公開10月">ニューヨーク証券取引所で株式を公開(10月)</h3>
<p><a href="https://www.elastic.co/jp/blog/ze-bell-has-rung-thank-you-users-customers-and-partners">ブログ記事</a></p>
<h3 id="日本語でブログ10月">日本語でブログ(10月)</h3>
<p><a href="https://www.elastic.co/jp/blog/how-to-configure-elasticsearch-cluster-better">Elasticsearchの運用に関する典型的な4つの誤解</a>というブログを書きました。4年も働いてるのに、会社のブログに翻訳以外で書いたことなかったので。。。
Twitterや勉強会、ブログ記事などで見かけるよくある誤解に関する記事を書いてみました。
Elasticは英語のブログも活発に書かれているのですが、今後もこのような形で日本語でのブログも頑張りますので、
読んでみたいものなどあればコメントいただければと。</p>
<p>まぁ、<a href="https://www.elastic.co/jp/blog/author/kosho-owa">弊社の大輪は色々書いてるんで</a>、私がもっと頑張れって話ですかね。。。</p>
<h3 id="elastic-stack-650リリース11月">Elastic Stack 6.5.0リリース(11月)</h3>
<p><a href="https://www.elastic.co/jp/blog/elastic-stack-6-5-0-released">リリース記事はこちら</a></p>
<p>昨日（11/30）のウェビナーでも話をさせていただきましたが、Elastic Stack 6.5は「本当にマイナーリリース？？？」と思うほど盛りだくさんの機能がリリースされました。</p>
<ul>
<li>インフラUI、ログUI</li>
<li>Elastic APMの分散トレーシング対応</li>
<li>Java &amp; Go APM Agent GAリリース</li>
<li>Cross Cluster Replication</li>
<li>ODBCドライバー</li>
<li>Kibana Canvas</li>
<li>Kibana Spaces</li>
<li>Data Visualizer for files</li>
<li>Functionbeat</li>
<li>LogstashのApp Search output</li>
</ul>
<p>リストアップしただけでもこれです。45分のウェビナーでは伝えきれてないなぁとも思ってますので、何か検討しようと思います！</p>
<h3 id="elasticsearch勉強会3月から12月">Elasticsearch勉強会(3月から12月)</h3>
<p><a href="https://www.meetup.com/ja-JP/Tokyo-Elastic-Fantastics/">Elasticsearch勉強会ページ</a></p>
<p>今年は、6回の勉強会を開催（1つは12月19日開催）しました。
9月からは、ユースケースなど、もっと参加者の皆さんの興味があることにフォーカスしながら開催をしてみ始めました。
参加しやすくなってればいいのですが。。。
そろそろまたアンケートをとったりして、参加しやすいか、どんな改善がしてほしいかなどを聞きたいなと思っています。</p>
<p>12月はもっと皆さんと喋りたいなということで、<a href="https://www.meetup.com/ja-JP/Tokyo-Elastic-Fantastics/events/256619262/">スピーカーなしの「LT&amp;忘年会」</a>にしてみました。
私やElasticのものも参加するので、ぜひ色々聞いたり、他のコミュニティの方達の使い方を聞き出して、
新しい発見をしていただければなーと思います。LTでスピーカーの練習をするってものありですよ！（まだ誰も応募してくれてない。。。）
発表することで、フィードバックがもらえて、自分の使い方に自信が持てたり、その他の視点を得ることができると思いますので、
ぜひ発表してみていただければと。</p>
<h3 id="12月のjohtani出没イベント">12月のjohtani出没イベント</h3>
<p>12月は以下のイベントにブースを出してます。イベントに参加される方ははぜひブースにお立ち寄りください！！</p>
<ul>
<li>12/4-5 : <a href="https://containerdays.jp">Japan Container Days</a> - 東京</li>
<li>12/8 : <a href="https://www.ospn.jp/osc2018-fukuoka/">OSC福岡</a> - 福岡</li>
<li>12/15 : <a href="http://www.java-users.jp/ccc2018fall/#/">JJUG CCC 2018 Fall</a> - 東京</li>
<li>12/19 : <a href="https://www.meetup.com/ja-JP/Tokyo-Elastic-Fantastics/events/256619262/">第27回Elasticsearch勉強会</a> - 東京</li>
</ul>
<p>なんか、忙しそうだな。。。</p>
<h3 id="まとめ">まとめ</h3>
<p>駆け足でしたが今年を振り返ってみました。
今年も色々ありましたが、今後もよろしくお願いいたします。</p>
<p>さて、<a href="https://qiita.com/advent-calendar/2018/elasticsearch">Elastic Stack Advent Calendar 2018</a>は今日から25日まで続きます。こらからの記事を楽しみにしています！</p>
<p>ということで、次は<a href="https://qiita.com/kaibadash@github">kaibadash@github</a>さんの「ぼくの考えた最強のElasticsearch index設定を最強にわかりやすく書くぞ！！！」になります。お楽しみに！</p>
</content:encoded>
    </item>
    
    <item>
      <title>第25回Elasticsearch勉強会を開催しました。</title>
      <link>https://blog.johtani.info/blog/2018/10/17/26th-elasticsearch-tokyo-meetup/</link>
      <pubDate>Wed, 17 Oct 2018 17:33:50 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2018/10/17/26th-elasticsearch-tokyo-meetup/</guid>
      <description>毎月開催の2回目になります。 今回は日経さんの会場をお借りしての開催となりました。 前回から、スピーカーの募集をhttp://bit.ly/Sp</description>
      <content:encoded><p>毎月開催の2回目になります。
今回は日経さんの会場をお借りしての開催となりました。</p>
<p>前回から、スピーカーの募集をhttp://bit.ly/SpeakerElasticTokyoMeetup で行なっております。
ぜひ皆さんのノウハウを共有していただけると助かります。
また、次回もすでにスケジュール済みです。次回は<a href="https://www.meetup.com/ja-JP/Tokyo-Elastic-Fantastics/events/254646236/">「ログ/メトリック分析」回</a>になります。</p>
<p>以下は、個人的なメモになります。</p>
<!-- more -->
<h3 id="メディアコンテンツ向け記事検索dbとして使うelasticsearch--future-architect-株式会社-村田-靖拓さん-twitter-famipapamart">メディアコンテンツ向け記事検索DBとして使うElasticsearch / Future Architect 株式会社 村田 靖拓さん (twitter: @famipapamart)</h3>
<ul>
<li>メディア記事コンテンツ検索</li>
<li>全ての情報が1indexに入っているようにすること。</li>
<li>typeは少し悩んだ。</li>
<li>範囲検索にはならない場合がある。（文字列で登録してWildcard検索できるようにした）</li>
<li>kuromojiで基本対応</li>
<li>異体字についてはchar filterでマッピング</li>
<li>細かな設定とかもスライドにて公開予定。
<ul>
<li>基本的なプラグインだけで対応した</li>
</ul>
</li>
<li>Dynamic Field mappingを有効にしたまま対応</li>
<li>パフォーマンス検証</li>
<li>初回のインデックスのロードは<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/tune-for-search-speed.html#_warm_up_the_filesystem_cache">この辺かなぁ？</a>。</li>
<li>自力でQueryのoffset-limitを構築するのかぁ。
<ul>
<li>ソート条件が固定らしいのでできる方法</li>
</ul>
</li>
</ul>
<h3 id="minne-での検索運用仮--_shiro16-さん">minne での検索運用(仮) / @_shiro16 さん</h3>
<ul>
<li>ハンドメイドなものをマーケットプレイスがminne</li>
<li>SolrからElasticsearchに切り替えた話 2016/02以降はEs
<ul>
<li>昔は、DBからSolrへ同期</li>
<li>Es版ではDBからの同期ではなく、Workerに対してリクエストを入れる</li>
</ul>
</li>
<li>現状は独自にEC2で運用中</li>
<li>ユーザーが求めているものがきちんとでているかを計測している
<ul>
<li>行動ログはどんな感じ？</li>
<li>TDにログを入れて、CTRとかを計算してre:dashで可視化</li>
</ul>
</li>
<li>A/Bテストも実施
<ul>
<li>指標はキャンペーンなどが実施されている場合にブレる場合もある</li>
</ul>
</li>
<li>トレンドをログから知ることができる</li>
<li>Function Scoreでスコアを変更してる
<ul>
<li>季節的な単語でスコアを変更したりする</li>
</ul>
</li>
<li>ドリンクの対応などをして聴けてないところが。。。</li>
</ul>
<h3 id="query_stringのはなし--加藤遼さん日本経済新聞社">query_stringのはなし / 加藤遼さん　(日本経済新聞社)</h3>
<p>電池が切れそう＋ピザとかの手配をしていたらメモが取れず。</p>
<ul>
<li>苦労が滲み出る感じのセッションでした。</li>
<li>query_string queryが実際にどんなクエリになっているかの説明を交えて説明してもらえたのはすごくよかったんじゃないかと。</li>
</ul>
<h2 id="まとめ">まとめ</h2>
<p>検索は話してくれる人が多いし話題に事欠かないなぁという印象でした。
今回も、スピーカーの皆さん、会場提供をしていただいた日経さんありがとうございました。</p>
<p>他のユースケースのスピーカーも募集してます。ぜひMeetup.comの概要に記載してあるリンクからスピーカーの応募をお願いします！</p>
</content:encoded>
    </item>
    
    <item>
      <title>2018年のElasticは？</title>
      <link>https://blog.johtani.info/blog/2017/12/24/elastic-2018/</link>
      <pubDate>Sun, 24 Dec 2017 23:10:16 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2017/12/24/elastic-2018/</guid>
      <description>Merry Christmas! Elastic Stack Advent Calendar 2017の24日目の記事になります。 ちょっとですが、2018年のElasticについて書いてみようかと思います。 イベント いくつか</description>
      <content:encoded><p>Merry Christmas!
<a href="https://qiita.com/advent-calendar/2017/elasticsearch">Elastic Stack Advent Calendar 2017</a>の24日目の記事になります。</p>
<p>ちょっとですが、2018年のElasticについて書いてみようかと思います。</p>
<!-- more -->
<h2 id="イベント">イベント</h2>
<p>いくつか出展が決まっているイベントがあるのでまずは宣伝を。</p>
<h4 id="osc-osaka-2018">OSC Osaka 2018</h4>
<p>まずは、1月25日、26日に<a href="https://www.ospn.jp/osc2018-osaka/">OSC Osaka 2018</a>に出展し、話をします。参加者がいそうであれば、25日や26日の夜に勉強会もありかなぁと思っています。
セッションでは入門的な話をする予定です。ブースにいますので、色々質問がある関西の方はぜひご参加ください。</p>
<h4 id="developer-summit-2018">Developer Summit 2018</h4>
<p>2月15日、16日は<a href="http://event.shoeisha.jp/devsumi/20180215">Developer Summit 2018</a>に出展します。
こちらでもブースにいますので、AMA（Ask Me Anything）的に使っていただくのもいいかなと。
デブサミに参加される方はぜひお立ち寄りください。</p>
<h4 id="manabiya">Manabiya</h4>
<p>3月23日、24日は<a href="https://manabiya.tech">Manabiya</a>に出展します。
こちらでもAMAのつもりでブースを出す予定です。質問がある方はぜひお立ち寄りください。
こちらのイベントは初めての開催になるようなので、どんなイベントになるか楽しみにしています。</p>
<p>イベント回りはこの辺りで。
また、1月末に勉強会を予定しています。決まり次第また<a href="https://www.meetup.com/ja-JP/Tokyo-Elastic-Fantastics/">Meetup.com</a>の方々にメールを出す予定です。</p>
<h2 id="elastic-stackの2018年は">Elastic Stackの2018年は？</h2>
<h4 id="canvas">Canvas!</h4>
<p>昨年のElastic{ON}でみなさんをCanvasがリリースされるかなぁと。
現在、みなさんにテストしてもらえるように<a href="http://canvas.elastic.co">canvas.elastic.co</a>というサイトを公開中で、実際にインストールして試すことができるようになっています。
ぜひ、触って、全く新しいUIを体験して見てください。</p>
<h4 id="sql">SQL?</h4>
<p>こちらも昨年のElastic{ON}でみなさんから反響があったものです。
もう直ぐでてくるのではないかなぁと。</p>
<h4 id="その他は">その他は？</h4>
<p>いくつか面白そうで、取り込み済みのものをピックアップしておきます。</p>
<ul>
<li><a href="https://github.com/elastic/elasticsearch/pull/27478">Add ranking evaluation API</a>
<ul>
<li>検索クエリなどに対して検索結果のランクのクオリティを評価するためのAPIの追加（7.0予定）</li>
</ul>
</li>
<li>JDK9サポート？
<ul>
<li>6.2でサポートされそうです。が、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.x/setup.html#jvm-version">LTSのJDK8が推奨のままの予定</a>です。</li>
</ul>
</li>
<li>High-level REST ClientでいくつかAPIが追加
<ul>
<li><a href="https://github.com/elastic/elasticsearch/pull/27574">https://github.com/elastic/elasticsearch/pull/27574</a>、https://github.com/elastic/elasticsearch/pull/27351</li>
</ul>
</li>
<li>APM正式リリース？
<ul>
<li><a href="https://www.elastic.co/jp/solutions/apm">ベータ版</a>がリリースされているので、秒読み段階？</li>
</ul>
</li>
</ul>
<h2 id="ということで">ということで</h2>
<p>より詳しく知りたい方は、サンフランシスコで開催される<a href="https://www.elastic.co/elasticon/conf/2018/sf">Elastic{ON} 2018</a>に参加するのが一番です！（ステマ）
私も参加予定ですので、ぜひ、現地でお会いし、色々な情報をゲットしましょう。</p>
<p>明日で、今年のAdvent Calendarも最後です。micci184さんの記事を楽しみにしましょう！</p>
</content:encoded>
    </item>
    
    <item>
      <title>2017年のElastic StackとElastic</title>
      <link>https://blog.johtani.info/blog/2017/12/01/whats-happen-at-elastic-in-2017/</link>
      <pubDate>Fri, 01 Dec 2017 00:00:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2017/12/01/whats-happen-at-elastic-in-2017/</guid>
      <description>Elastic stack (Elasticsearch) Advent Calendar 2017の1日目の記事になります。 まだ、1ヶ月を残していますが、簡単に今年起こったことを振り返ってみようかと思います。思った以上に</description>
      <content:encoded><p><a href="https://qiita.com/advent-calendar/2017/elasticsearch">Elastic stack (Elasticsearch) Advent Calendar 2017</a>の1日目の記事になります。</p>
<p>まだ、1ヶ月を残していますが、簡単に今年起こったことを振り返ってみようかと思います。思った以上に色々ありましたね。。。</p>
<!-- more -->
<h3 id="elastic-stack-520リリース-1月">Elastic Stack 5.2.0リリース (1月)</h3>
<p><a href="https://www.elastic.co/jp/blog/elastic-stack-5-2-0-released">リリース記事はこちら</a></p>
<p>HeatmapがKibanaで追加されたり、Heartbeatがベータですが追加されました。
個人的には、Terms aggregationの<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.2/search-aggregations-bucket-terms-aggregation.html#_filtering_values_with_partitions">Filtering Valuesによるパーティション</a>が便利になったと思います。Terms Aggsでページングに似たことができるようになりました。</p>
<h3 id="elasticon17開催-3月">Elastic{ON}17開催 (3月)</h3>
<p>第3回目のユーザカンファレンスが開催されました。
バレーダンサーの踊りから始まったキーノート、様々なユーザ企業によるユースケース発表などいろいろありました。
<a href="https://www.elastic.co/elasticon/conf/2017/sf">セッションはこちらのサイトから</a>から録画を見ることができます。
<a href="https://www.elastic.co/elasticon/conf/2017/sf/elasticsearch-sql">SQL for Elasticsearch</a>やAwardが目を引いたと思います。SQL対応まだ出てきていないですが、もうすぐじゃないかと！</p>
<h3 id="elastic-stack-530リリース-3月">Elastic Stack 5.3.0リリース (3月)</h3>
<p><a href="https://www.elastic.co/blog/elastic-stack-5-3-0-released">リリース記事はこちら</a></p>
<p><a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-modules-overview.html">Filebeat module</a>が導入され、ログファイルを取り込んでKibanaで可視化するまでの手順がより簡単になりました。Elasticの目指しているものの一つに、シンプルな使い方、簡単にはじめられることといったものがあります。KibanaのTimepickerもより便利になったのも、このバージョンからです。</p>
<h3 id="shayがceoに-5月">ShayがCEOに (5月)</h3>
<p>2月にすでに発表されていましたが、Elasticsearchの生みの親のShay BanonがCEOに正式に就任しました。CEOになってさらに、精力的に様々なことをやっていて、本当にすごいなと思います。</p>
<h3 id="elastic-stack-540600-alpha1リリース-5月">Elastic Stack 5.4.0、6.0.0-alpha1リリース (5月)</h3>
<p><a href="https://www.elastic.co/blog/elastic-stack-5-4-0-released">5.4.0リリース記事はこちら</a>、<a href="https://www.elastic.co/blog/elastic-stack-6-0-0-alpha1-released">6.0.0-alpha1リリース記事はこちら</a></p>
<p>5.4.0は節目になるリリースでした。Machine Learningがベータリリースとして、X-Packに追加されましたし、ElasticsearchではCross Cluster Searchの改善が進みました。LogstashではPersistent QueueがGAになりましたし、KibanaにはTime Series Visual BuilderやEvent Contextなどが追加されますます使いやすくなりました。</p>
<p>また、6.0.0のalpha版も同時にリリースされ、様々な方からのフィードバックが集まり始めました。</p>
<h3 id="elastic-cloud-enterprise-gaリリース-5月">Elastic Cloud Enterprise GAリリース (5月)</h3>
<p>Elastic Cloudのバックエンドの技術を製品に採用したものになります。
多くのElasticsearchクラスタを管理しないといけない方には朗報でした。</p>
<h3 id="opbeatがjoin-6月">OpbeatがJoin (6月)</h3>
<p><a href="https://www.elastic.co/blog/welcome-opbeat-to-the-elastic-family">Opbeatチームがジョイン</a>したのが6月です。Elastic StackがAPM(Application Performance Monitoring)でも活躍することになりそうです。APMの仕組みとしては、APM Agentをアプリ側に配置し、APM Serverへデータを送信し、Elasticsearchに保存、Kibanaで可視化するという流れになります。</p>
<h3 id="elastic-stack-550リリース-7月">Elastic Stack 5.5.0リリース (7月)</h3>
<p><a href="https://www.elastic.co/blog/kibana-5-5-0-released">リリース記事はこちら</a></p>
<p>Machime LearningがGAリリースになったのが5.5.0です。色々な方から質問を受けました。それ以外にも、ElasticsearchのWindows MSI InstallerやKibanaのFilter editorなどが追加されました。Filter editorはこれまで検索条件を記述するのが難しいと感じていたKibanaユーザにとても喜んでもらえたものじゃないかなと。
GrokDebuggerが導入されたのもこのタイミングです。</p>
<h3 id="elastic-stack-560リリース-9月">Elastic Stack 5.6.0リリース (9月)</h3>
<p><a href="https://www.elastic.co/blog/elastic-stack-5-6-0-released">リリース記事はこちら</a></p>
<p>5系最後のマイナーリリースであり、6へのアップグレードが楽になる様々な仕組みが用意されたのがこのバージョンです。ElasticsearchのJava High level REST clientが導入されたのもこのバージョンです。本当に様々な機能が次のメジャーバージョンとの互換性のために組み込まれています。。。</p>
<h3 id="elastic-cloud-on-gcp-9月">Elastic Cloud on GCP (9月)</h3>
<p><a href="https://www.elastic.co/blog/announcing-the-ga-of-elastic-cloud-hosted-elasticsearch-on-google-cloud-platform-gcp">リリース記事はこちら</a></p>
<p>これまで、AWS上のみで展開していたElastic CloudがGCP上でも展開されることになりました。残念ながら、日本リージョンはまだありませんが、問い合わせなどが増えれば今後サポートされる可能性が高くなると思います！</p>
<h3 id="elastic-apm-alpha-9月">Elastic APM alpha (9月)</h3>
<p><a href="https://www.elastic.co/guide/en/apm/get-started/current/overview.html">リリース記事はこちら</a></p>
<p>OpbeatチームによりElastic StackのAPMがAlphaですがリリースされました。APMがOpen Sourceで利用できるんです！Agentがもっと増えてくると色々なことに使えるようになると思います。ぜひAgentを作成してみてください！</p>
<h3 id="elastic-stack-600リリース-11月">Elastic Stack 6.0.0リリース (11月)</h3>
<p><a href="https://www.elastic.co/blog/elastic-stack-6-0-0-released">リリース記事はこちら</a></p>
<p>待ちに待った6.0.0のリリースです。<a href="https://events.elastic.co/6-0-elastic-stack-jp">新機能については本日(12/1)の昼に行われるウェビナーをご覧ください！</a></p>
<h3 id="swiftypeがjoin-11月">SwiftypeがJoin (11月)</h3>
<p><a href="https://www.elastic.co/jp/about/press/elastic-acquires-saas-site-search-leader-swiftype">ニュースリリースはこちら</a></p>
<p>Swiftypeと呼ばれる検索のSaaSを提供している会社がジョインしました。
個人的には今年一番嬉しいニュースです。やはり、検索が好きなので。
簡単に<a href="http://blog.johtani.info/blog/2017/11/10/welcome-swiftype/">Site Searchを構築できる仕組み</a>は非常に面白いものです。
興味のある方は、ぜひ触ってみてください。日本語固有の機能などはまだないので、今後関わっていければなーと。</p>
<h3 id="elasticon-tour-tokyo開催-12月">Elastic{ON} Tour Tokyo開催 (12月)</h3>
<p>まだ開催前ですが、今年も<a href="https://www.elastic.co/elasticon/tour/2017/tokyo">東京で1dayイベントを開催</a>します。
残念ながら、もうSold outなので、キャンセル待ちになってしまっているみたいですが。私もスピーカーとして喋りますし、AMAブースにも立っています。
参加される方はぜひ声をかけていただければと思います。</p>
<h4 id="osc-2017enterprise-12月">OSC 2017.Enterprise (12月)</h4>
<p>オープンソースカンファレンスで今年も様々な都市に出張しました。
今年の締めくくりということで、<a href="https://www.ospn.jp/osc2017.enterprise/">12/8に渋谷で開催されるカンファレンス</a>に出展します。時間のある方は、ぜひブースに遊びに来てください。入門者向けのセッションもあるので、こちらもお待ちしております。</p>
<h3 id="まとめ">まとめ</h3>
<p>超駆け足ですが、今年を振り返ってみました。
今年もいろんなことがありました。書くのが大変だったw。
OSCなどイベントで声をかけていただいた皆様、ありがとうございました。</p>
<p>さて、<a href="https://qiita.com/advent-calendar/2017/elasticsearch">Elastic Stack Advent Calendar 2017</a>は始まったばかりです。これからの記事を楽しみにしています！</p>
<h4 id="ということで">ということで、</h4>
<p>次は<a href="https://qiita.com/aeroastro">aeroastroさん</a>の「Elasticsearchのインデックスを本当の意味で無停止再構築する方法」（<a href="https://qiita.com/advent-calendar/2017/elasticsearch">Advent Calendarのページはこちら</a>）になります、お楽しみに！</p>
</content:encoded>
    </item>
    
    <item>
      <title>データ分析基盤構築入門 を一部執筆しました。</title>
      <link>https://blog.johtani.info/blog/2017/09/21/release-intro-logging-analysis-system/</link>
      <pubDate>Thu, 21 Sep 2017 10:02:30 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2017/09/21/release-intro-logging-analysis-system/</guid>
      <description>久々に執筆しました。といっても、以前の書籍の更新版です。 まぁ、更新版といっても、私以外の方々は結構な量を書き直しor新規書き起こしされてます</description>
      <content:encoded><p>久々に執筆しました。といっても、<a href="http://blog.johtani.info/blog/2014/08/04/release-magazine-book-of-log-aggs-and-viz/">以前の書籍</a>の更新版です。
まぁ、更新版といっても、私以外の方々は結構な量を書き直しor新規書き起こしされてますが。。。</p>
<p>ということで、みなさん「買って」から感想をいただけるとうれしいです！（以下の画像でAmazonにジャンプできます！Kindle版も発売中です。）</p>
<p><a target="_blank"  href="https://www.amazon.co.jp/gp/product/477419218X/ref=as_li_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=477419218X&linkCode=as2&tag=johtani-22&linkId=f7cbe8130343ea340b18b53eba20d4b7"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&MarketPlace=JP&ASIN=477419218X&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL250_&tag=johtani-22" ></a><img src="//ir-jp.amazon-adsystem.com/e/ir?t=johtani-22&l=am2&o=9&a=477419218X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>
<!-- more -->
<p>今回もElasticsearchの章を担当しました。
5.4ベースで書きましたが、ちょっとずつ6でどう変わるかなども記載してあります。
また、付録ではLogstashやBeatsにもちょっと触れています。
また、自分が一番好きなKibanaの機能であるDev ToolsのConsoleについても記載してあります。こちらも合わせて目を通していただければと。</p>
<p>みなさんのフィードバック（ツイート、ブログ、Amazonのコメントなどなど）をお待ちしております！</p>
</content:encoded>
    </item>
    
    <item>
      <title>2016年のElastic Stack</title>
      <link>https://blog.johtani.info/blog/2016/12/25/elasticsearch-6-features/</link>
      <pubDate>Sun, 25 Dec 2016 00:03:50 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2016/12/25/elasticsearch-6-features/</guid>
      <description>Merry Christmas! Elastic stack Advent Calendar 2016 最終日の記事になります。 簡単に今年の変遷を振り返ってみます。 Elasticsearch 2.2 (2月) Elasticsearch 2.2.0、2.1.2、1.7.5リリース クエリプロ</description>
      <content:encoded><p>Merry Christmas!
<a href="http://qiita.com/advent-calendar/2016/elastic">Elastic stack Advent Calendar 2016</a> 最終日の記事になります。</p>
<p>簡単に今年の変遷を振り返ってみます。</p>
<!-- more -->
<h2 id="elasticsearch-22-2月">Elasticsearch 2.2 (2月)</h2>
<ul>
<li><a href="https://www.elastic.co/jp/blog/elasticsearch-2-2-0-and-2-1-2-and-1-7-5-released">Elasticsearch 2.2.0、2.1.2、1.7.5リリース</a></li>
</ul>
<p>クエリプロファイラやGeo系の性能改善などが取り込まれました。
また、同時期にリリースされたKibana 4.4ではColor pickerやShare用のURLの短縮化機能なども追加されました。</p>
<h2 id="第2回目のユーザカンファレンスelasticon開催2月">第2回目のユーザカンファレンス、Elastic{ON}開催（2月）</h2>
<p>サンフランシスコで、弊社第2回目のカンファレンスが開催されました。
2015年の会場よりも大きくなり、多数の方に参加いただきました。
ここで、以下の発表がありました。</p>
<h3 id="elastic-stackとx-packの紹介">Elastic StackとX-Packの紹介</h3>
<p>これまで、ELK stackと呼ばれて意味明日が、Beatsチームの参加により、ELKだけではなくなったこともあり、Elastic Stackと呼び名を変える事になりました。
また、Marvel、Shield、Watcherなどの商用の拡張機能についても、
単体の名称ではなく、X（Extension）-Packと1つの名前になる事に。
詳細については<a href="https://www.elastic.co/jp/blog/heya-elastic-stack-and-x-pack">公式のブログ</a>をご覧ください。</p>
<h3 id="elastic-cloudとelastic-cloud-enterpriseの発表">Elastic CloudとElastic Cloud Enterpriseの発表</h3>
<p>2015年にElasticにジョインし、
これまでFound.no（Found）と呼ばれていた弊社のElasticsearch as a Serviceが<a href="https://www.elastic.co/jp/blog/introducing-elastic-cloud-and-elastic-cloud-enterprise">Elastic Cloudと名称変更</a>しました。
また、Elastic Cloudで培っているノウハウを詰め込んだElastic Cloud Enterpriseも発表しました。実際に利用可能になるまでには
まだもう少しかかってしまいますが、アルファ版が公開されていますので、興味のある方は触ってみてください。</p>
<p>Elastic{ON}2016で撮影された、<a href="https://www.elastic.co/blog/life-without-elasticsearch-elasticon16">「Elasticsearchがないあなたの人生はどうなりますか？」</a> といった面白い動画も公開されています。</p>
<h2 id="elasticsearch-23リリース3月">Elasticsearch 2.3リリース（3月）</h2>
<ul>
<li><a href="https://www.elastic.co/jp/blog/elasticsearch-2-3-0-and-2-2-2-released">Elasticsearch 2.3.0および2.2.2をリリース</a></li>
</ul>
<p>Reindex APIが登場し、Mappingの変更やShard数の変更など、色々とデータの更新などがやりやすくなりました。
また、Task Managementの機能も追加され、長時間かかる処理を間違った場合などの対処が楽になりました。
個人的には、Deprecation Loggingの機能が導入されたことが嬉しいこととなります。次期メジャーバージョンで廃止される機能についてログに出力されるようになりました。
実際に運用されているアプリで利用している機能が今後なくなるかどうかをログを見るとわかるという仕組みです。</p>
<h2 id="rally登場4月">Rally登場（4月）</h2>
<ul>
<li><a href="https://www.elastic.co/jp/blog/announcing-rally-benchmarking-for-elasticsearch">Rally登場：Elasticsearchのベンチマークツール</a></li>
</ul>
<p>Elasticsearchのベンチマークツールがリリースされました。
定期的にElasticsearchの性能を計測することは問題点を見つける事に役に立ちます。そういった手助けをしてくれるツールが公開されることは非常に便利なことかと。</p>
<h2 id="elastic-stack-5-alpha1-リリース4月">Elastic Stack 5 alpha1 リリース（4月）</h2>
<ul>
<li><a href="https://www.elastic.co/jp/blog/elastic-stack-release-5-0-0-alpha-1">Elastic Stack 5.0.0 alpha 1 リリース</a></li>
</ul>
<p>Ingest NodeやLucene 6、新しいKibanaのUIなど多くのものが詰まっていました。ここから多くのユーザにテストしてもらい、5.0の正式リリースを迎えることができました。</p>
<h2 id="elasticsearch-240リリース8月">Elasticsearch 2.4.0リリース（8月）</h2>
<ul>
<li><a href="https://www.elastic.co/jp/blog/release-bonanza-elasticsearch-graph-shield-watcher-marvel-reporting-logstash-2-4-beats-1-3-and-kibana-4-6-are-now-available"></a></li>
</ul>
<p>2.xの最後のマイナーバージョンリリースです。
Reportingなどの追加とドットつきフィールド名の復活がありました。</p>
<h2 id="elastic-stack-500-beta1-リリース9月">Elastic Stack 5.0.0 beta1 リリース（9月）</h2>
<ul>
<li><a href="https://www.elastic.co/jp/blog/elastic-stack-release-5-0-0-beta1">Elastic Stack Release - 5.0.0-beta1</a></li>
</ul>
<p>ついにベータです。Painlessがスクリプトのデフォルトになったり、TimelionがKibanaに取り込まれるなど、正式リリースまであと少し！</p>
<h2 id="prelertチームジョイン9月">Prelertチームジョイン（9月）</h2>
<ul>
<li><a href="https://www.elastic.co/blog/welcome-prelert-to-the-elastic-team">Welcome Prelert to the Elastic Team</a></li>
</ul>
<p>Machine Learningエンジンを開発し、Elasticsearch,Kibanaとの組み合わせの製品をリリースしていたPrelertという会社がジョインしました。
Elasticsearchに保存された多くのデータをより活用していただくことができるかと思います。
Elastic{ON} Tour 2016 Tokyoで弊社SAの大輪の発表も人気があるものでした。まだベータ段階ですが、利用して見ることも可能です。
ビデオなどが公開されたらまたツイートしようと思います。</p>
<h2 id="elasticon-tour-tokyo-2016開催12月">Elastic{ON} Tour Tokyo 2016開催（12月）</h2>
<p>今年で2回目のTokyoローカルの1日イベントでした。
ブログは「まだ」書いてませんが、、、今回も盛りだくさんのイベントになりました。
早朝のトレーニング（ハンズオンではない）にも80名近くの方に参加していただけましたし、私はKibanaのキーノート＋デモという大役をもらいましたし、ちょっと大変でした。
今年もAMA（Ask Me Anything）ブースが大盛況でした。
色々な方から、弊社のサポート、開発者が色々な質問を受け、それに答えるという形です。楽しんでいただけたかと思います。
来年もぜひ開催したいなと思っています。</p>
<p>また、<a href="https://www.elastic.co/blog/first-wave-of-elasticon-17-sessions-revealed">Elastic{ON}17のセッションも</a>いくつか発表されています。
ぜひ、サンフランシスコで行われる本場のカンファレンスにもご参加ください！</p>
<h2 id="来年は">来年は？</h2>
<p>1月後半か2月に<a href="https://www.meetup.com/ja-JP/Tokyo-Elastic-Fantastics/">Elasticsearch勉強会</a>を検討しようと思っています。スピーカーに興味のある方は連絡いただければと。</p>
<p>会社としては、<a href="https://www.elastic.co/elasticon/conf/2017/sf">Elastic{ON}2017</a>が3月にまた開催されます。これで3回目となります。もちろん私も参加予定なので、参加される方は、現地で会いましょう！</p>
<p>そのほかにも<a href="http://www.bigdatacon.jp/ja/">BIG DATA ANALYTICS TOKYO</a>やオープンソースカンファレンス（<a href="http://www.ospn.jp/osc2017-osaka/">大阪</a>）、<a href="http://event.shoeisha.jp/devsumi/20170216/">デブサミ</a>といったカンファレンスに参加（登壇・ブースなど）予定です。
参加される方は、ぜひブースまでお越しください。</p>
<p>では、また来年のAdvent Calendarでお会いしましょう！</p>
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 5.0の便利機能紹介？</title>
      <link>https://blog.johtani.info/blog/2016/12/01/elasticsearch-5-dot-0-highlight/</link>
      <pubDate>Thu, 01 Dec 2016 17:34:30 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2016/12/01/elasticsearch-5-dot-0-highlight/</guid>
      <description>Elastic stack Advent Calendar 1日目の記事になります。 Elasticsearch 5.0が10月末にリリースされました。 リリースのブログでいくつか紹介されているのですが、そこでは紹介されて</description>
      <content:encoded><p>Elastic stack Advent Calendar 1日目の記事になります。</p>
<p><a href="https://www.elastic.co/jp/blog/elasticsearch-5-0-0-released">Elasticsearch 5.0</a>が10月末にリリースされました。
リリースのブログでいくつか紹介されているのですが、そこでは紹介されていない機能について2、3紹介しようと思います。</p>
<!-- more -->
<p>その前に、5.0、あれ？その前は2.xじゃなかったっけ？？と困惑されている方もいるかと思うので、簡単に5となった経緯の紹介をしようかと。</p>
<h3 id="バージョン番号">バージョン番号</h3>
<p>なぜ2から5に飛んだのかという話ですが、このスライドがその紹介になっています。</p>
<p><a href="https://speakerdeck.com/johtani/elastic-stack-5-dot-0-alpha1-alpha5?slide=5">https://speakerdeck.com/johtani/elastic-stack-5-dot-0-alpha1-alpha5?slide=5</a></p>
<p><a href="https://www.elastic.co/elasticon/conf/2016/sf/opening-keynote">Elastic{ON} 2016のキーノート</a>でも紹介がありましたが、KibanaやLogstashとElasticsearchを組み合わせて使うときにバージョンのミスマッチで動かないというユーザの声が上がっていました。
2.xのリリースから、同じ日にKibana、Logstash、Beatsもリリースするようになったのですが、
やはり、バージョン番号が異なるため、ミスマッチで動かないというユーザが時々いました。</p>
<p>Elastic Stackという名称にもなったため、バージョン番号をそろえようという事になり、
Elasticsearch、Kibana、Logstash、Beats全てが5.0.0としてリリースされ、
今後は同じバージョン番号になります。</p>
<p>ちなみに、「5」になった理由はKibanaのメジャーバージョンが「4」だったためです。</p>
<p>さて、では、いくつか機能の紹介を。</p>
<h3 id="reindex-from-remote-cluster">Reindex from remote cluster</h3>
<p>Reindexが2.3から導入されました。データの再登録ができるようになり、マッピングの変更や
Shardの数の変更などが柔軟に行えるようになりました。
便利でしたが、あくまでも同一のクラスタでデータを登録し直す形でした。</p>
<p>5.0からはこの機能に加えて、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html#reindex-from-remote">異なるクラスタからデータを取得してReindex</a>を行うことができるようになりました。
こんな形になります。</p>
<pre><code>POST _reindex
{
  &quot;source&quot;: {
    &quot;remote&quot;: {
      &quot;host&quot;: &quot;http://otherhost:9200&quot;,
      &quot;username&quot;: &quot;user&quot;,
      &quot;password&quot;: &quot;pass&quot;
    },
    &quot;index&quot;: &quot;source&quot;,
    &quot;query&quot;: {
      &quot;match&quot;: {
        &quot;test&quot;: &quot;data&quot;
      }
    }
  },
  &quot;dest&quot;: {
    &quot;index&quot;: &quot;dest&quot;
  }
}
</code></pre><p><code>username</code>と<code>password</code>はリモートのクラスタに認証の気候が存在する場合に利用できるオプションです。
また、ReindexのAPIはクエリを使用して、必要なデータだけを取得することが可能です。
この機能により、1.xや2.xのクラスタからデータを移行することが可能になります。</p>
<h3 id="custom-analyzer-test-using-analyze-api">Custom analyzer test using Analyze API</h3>
<p>もう一つ、ちょっとだけ便利な機能を紹介します。
独自にAnalyzerを定義（TokenizerとToken Filterなどを個別に設定）して、その挙動を確認するとき、2.xまでは、インデックスを作成してそのインデックスに対して<code>_analyze</code> APIを呼び出す必要がありました。</p>
<p>5.xからは<code>_analyze</code> APIの読み出しのパラメータで指定できるようになりました。
こんな感じです。ここでは、<code>lowercase</code>フィルタのあとに、<code>{...}</code>で<code>stop</code>フィルタを
パラメータの中で、指定しています。</p>
<pre><code>curl -XGET 'localhost:9200/_analyze' -d '
{
  &quot;tokenizer&quot; : &quot;whitespace&quot;,
  &quot;filter&quot; : [&quot;lowercase&quot;, {&quot;type&quot;: &quot;stop&quot;, &quot;stopwords&quot;: [&quot;a&quot;, &quot;is&quot;, &quot;this&quot;]}],
  &quot;text&quot; : &quot;this is a test&quot;
}'
</code></pre><p>ちょっとだけですが、Analyzerなどを試すのが楽になるのではないでしょうか？</p>
<p>ということで、以上が1日目の記事でした。
Logstashなど、他の5.0.0に関する記事もAdvent Calendarに空きがあるようなので、個別にかこうかなと思います。お楽しみに！</p>
</content:encoded>
    </item>
    
    <item>
      <title>Lucene Kuromoji for NEologdで指定した品詞の単語を抜き出すIngest Pluginを書いてみた #elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2016/07/22/making-ingest-processor-plugin-with-cookiecutter/</link>
      <pubDate>Fri, 22 Jul 2016 13:26:56 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2016/07/22/making-ingest-processor-plugin-with-cookiecutter/</guid>
      <description>久しぶりに、技術的なブログ書いてます。 Ingest Processorのプラグインを作ってみたくなったので、書いてみました。 ただ書いてみるんじゃ3番煎じ</description>
      <content:encoded><p>久しぶりに、技術的なブログ書いてます。</p>
<p>Ingest Processorのプラグインを作ってみたくなったので、書いてみました。
ただ書いてみるんじゃ3番煎じになりそうなので、<a href="https://cookiecutter.readthedocs.io/en/latest/readme.html">cookiecutter</a>を使ってみました。</p>
<!-- more -->
<p>と言っても、同僚のAlexが<a href="https://discuss.elastic.co/t/cookiecutter-template-for-writing-ingest-processors/52985">cookiecutter-elasticsearch-ingest-processor</a>と言うテンプレートを作ってくれているのを使っただけですが。（https://discuss.elastic.co に投稿された記事で、使い方がアニメgifで説明されててわかりやすいです）</p>
<p><a href="https://cookiecutter.readthedocs.io/en/latest/readme.html">cookiecutter</a>とは、コマンドラインで質問に答えると、テンプレートからプロジェクトが生成できるツールです。
Elasticでは、カスタムBeatを作る時に利用する例がいつかの日本語ブログや発表資料で話題になっていました。
これのIngest Processorのプラグインバージョンです。</p>
<p>今回は、NEologdも使ってみたかったので、Lucene Kuromoji for NEologdを利用して
指定した品詞の単語だけを抽出するProcessorを作ってみました。</p>
<p>GitHubのプロジェクト：https://github.com/johtani/elasticsearch-ingest-kuromoji-pos-extract</p>
<h3 id="cookiecutterの使い方">Cookiecutterの使い方</h3>
<p><a href="https://cookiecutter.readthedocs.io/en/latest/readme.html">Cookiecutterのインストールはサイト</a>をご覧ください。</p>
<pre><code>cookiecutter gh:spinscale/cookiecutter-elasticsearch-ingest-processor
</code></pre><p>あとは、出てくる以下の項目を指定するだけです。</p>
<ul>
<li><code>processor_type</code> : Ingest Processorのタイプ名です。<code>kuromoji_part_of_speech_extract</code>としました。（Alexのだと<code>_</code>を使うとちょっと問題があるので後述）</li>
<li><code>description</code> : readme.mdに利用されます。</li>
<li><code>developer_name</code> : 名前を記載。Javaのファイルのヘッダに利用</li>
<li><code>elasticsearch_version</code> : デフォルトで<code>5.0.0-alpha4</code>が指定されているので、特に指定せず</li>
</ul>
<p>以上の質問に答えたら、プロジェクトのディレクトリ構造が出来上がってます。
プロジェクトのビルドなどにはGradleを利用します。</p>
<h3 id="プロジェクトのintellij-idea用のファイルを生成">プロジェクトのIntelliJ IDEA用のファイルを生成</h3>
<p>build.gradleファイルでGradleのideaプラグインがapplyされているので、以下のコマンドを叩けばIntelliJ IDEAのプロジェクトファイル（？）が生成され、IntelliJで開けばすぐに開発ができる状態にできます。</p>
<pre><code>gradle idea
</code></pre><h3 id="コーディング">コーディング</h3>
<p>あとは、必要処理をコーディングします。
実際にコーディングするクラスは<code>org.elasticsearch.plugin.ingest.kuromoji_part_of_speech_extract</code>のパッケージにある以下の2つです。（パッケージ名にはprocessor_typeの名前が指定されている）</p>
<ul>
<li>IngestKuromojiPartOfSpeechExtractPlugin</li>
<li>KuromojiPartOfSpeechExtractProcessor</li>
</ul>
<h4 id="ingestkuromojipartofspeechextractplugin">IngestKuromojiPartOfSpeechExtractPlugin</h4>
<p>Pluginというクラスは、プラグインをNodeのModuleとして登録する処理を書くクラスとなります。
生成してすぐは、次のような形になっています。（※importやクラス定義の部分は省略しています。）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Java" data-lang="Java"><span style="color:#f92672">...</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> Setting<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> YOUR_SETTING <span style="color:#f92672">=</span>
            <span style="color:#66d9ef">new</span> Setting<span style="color:#f92672">&lt;&gt;(</span><span style="color:#e6db74">&#34;ingest.kuromoji_part_of_speech_extract.setting&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;foo&#34;</span><span style="color:#f92672">,</span> <span style="color:#f92672">(</span>value<span style="color:#f92672">)</span> <span style="color:#f92672">-&gt;</span> value<span style="color:#f92672">,</span> Setting<span style="color:#f92672">.</span><span style="color:#a6e22e">Property</span><span style="color:#f92672">.</span><span style="color:#a6e22e">NodeScope</span><span style="color:#f92672">);</span>

    <span style="color:#a6e22e">@Override</span>
    <span style="color:#66d9ef">public</span> List<span style="color:#f92672">&lt;</span>Setting<span style="color:#f92672">&lt;?&gt;&gt;</span> getSettings<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">return</span> Arrays<span style="color:#f92672">.</span><span style="color:#a6e22e">asList</span><span style="color:#f92672">(</span>YOUR_SETTING<span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">onModule</span><span style="color:#f92672">(</span>NodeModule nodeModule<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> IOException <span style="color:#f92672">{</span>
        nodeModule<span style="color:#f92672">.</span><span style="color:#a6e22e">registerProcessor</span><span style="color:#f92672">(</span>KuromojiPartOfSpeechExtractProcessor<span style="color:#f92672">.</span><span style="color:#a6e22e">TYPE</span><span style="color:#f92672">,</span>
                <span style="color:#f92672">(</span>registry<span style="color:#f92672">)</span> <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">new</span> KuromojiPartOfSpeechExtractProcessor<span style="color:#f92672">.</span><span style="color:#a6e22e">Factory</span><span style="color:#f92672">());</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">...</span>
</code></pre></div><p><code>YOUR_SETTING</code>プロパティと<code>getSettings()</code>メソッドは<code>elasticsearch.yml</code>で指定したい設定を記述する場合の例になります。今回は特に必要ないので両方削除しました。
最終系は<a href="https://github.com/johtani/elasticsearch-ingest-kuromoji-pos-extract">GitHubのコード</a>をご覧ください。</p>
<h4 id="kuromojipartofspeechextractprocessor">KuromojiPartOfSpeechExtractProcessor</h4>
<p>Processorは実際にIngest Nodeで行う処理を書くところです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Java" data-lang="Java">
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> String TYPE <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;kuromoji_part_of_speech_extract&#34;</span><span style="color:#f92672">;</span>

    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> String field<span style="color:#f92672">;</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> String targetField<span style="color:#f92672">;</span>

    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">KuromojiPartOfSpeechExtractProcessor</span><span style="color:#f92672">(</span>String tag<span style="color:#f92672">,</span> String field<span style="color:#f92672">,</span> String targetField<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> IOException <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">super</span><span style="color:#f92672">(</span>tag<span style="color:#f92672">);</span>
        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">field</span> <span style="color:#f92672">=</span> field<span style="color:#f92672">;</span>
        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">targetField</span> <span style="color:#f92672">=</span> targetField<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>

    <span style="color:#a6e22e">@Override</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">execute</span><span style="color:#f92672">(</span>IngestDocument ingestDocument<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
        String content <span style="color:#f92672">=</span> ingestDocument<span style="color:#f92672">.</span><span style="color:#a6e22e">getFieldValue</span><span style="color:#f92672">(</span>field<span style="color:#f92672">,</span> String<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">);</span>
        <span style="color:#75715e">// TODO implement me!
</span><span style="color:#75715e"></span>        ingestDocument<span style="color:#f92672">.</span><span style="color:#a6e22e">setFieldValue</span><span style="color:#f92672">(</span>targetField<span style="color:#f92672">,</span> content<span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>

    <span style="color:#a6e22e">@Override</span>
    <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">getType</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">return</span> TYPE<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Factory</span> <span style="color:#66d9ef">extends</span> AbstractProcessorFactory<span style="color:#f92672">&lt;</span>KuromojiPartOfSpeechExtractProcessor<span style="color:#f92672">&gt;</span> <span style="color:#f92672">{</span>

        <span style="color:#a6e22e">@Override</span>
        <span style="color:#66d9ef">public</span> KuromojiPartOfSpeechExtractProcessor <span style="color:#a6e22e">doCreate</span><span style="color:#f92672">(</span>String processorTag<span style="color:#f92672">,</span> Map<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">,</span> Object<span style="color:#f92672">&gt;</span> config<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
            String field <span style="color:#f92672">=</span> readStringProperty<span style="color:#f92672">(</span>TYPE<span style="color:#f92672">,</span> processorTag<span style="color:#f92672">,</span> config<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;field&#34;</span><span style="color:#f92672">);</span>
            String targetField <span style="color:#f92672">=</span> readStringProperty<span style="color:#f92672">(</span>TYPE<span style="color:#f92672">,</span> processorTag<span style="color:#f92672">,</span> config<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;target_field&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;default_field_name&#34;</span><span style="color:#f92672">);</span>

            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> KuromojiPartOfSpeechExtractProcessor<span style="color:#f92672">(</span>processorTag<span style="color:#f92672">,</span> field<span style="color:#f92672">,</span> targetField<span style="color:#f92672">);</span>
        <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>

</code></pre></div><p><code>TYPE</code>が<a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/put-pipeline-api.html">Ingest APIのPipelineでProcessorを指定するときに使う名前</a>になります。ここは、cookiecutterの時にprocessor_typeに入力した文字列になっています。
<code>kuromoji_part_of_speech_extract</code>だと長いので、<code>kuromoji_pos_extract</code>に変えました。</p>
<p><code>execute()</code>メソッドに<code>// TODO implement me!</code>とあります。
この部分に実際の処理を記述していきます。</p>
<p>あとは、<code>Factory</code>クラスでIngest APIで指定された設定項目を読み込みます。
今回作成した<code>elasticsearch-ingest-kuromoji-pos-extract</code>では品詞を指定する必要があるので、<code>pos_tags</code>を指定できるように処理を追加しました。</p>
<p>私が実装したものの説明をするとちょっと長くなりそうなので、<a href="https://github.com/johtani/elasticsearch-ingest-kuromoji-pos-extract">GitHubのコード</a>をご覧ください。</p>
<h3 id="テストのコーディング">テストのコーディング</h3>
<p>テストのクラスもテンプレートで生成されています。</p>
<ul>
<li>KuromojiPartOfSpeechExtractProcessorTests</li>
<li>KuromojiPartOfSpeechExtractRestIT</li>
</ul>
<h4 id="kuromojipartofspeechextractprocessortests">KuromojiPartOfSpeechExtractProcessorTests</h4>
<p>Processorクラスのテストになります。生成直後は次のような感じです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Java" data-lang="Java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">testThatProcessorWorks</span><span style="color:#f92672">()</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
    Map<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">,</span> Object<span style="color:#f92672">&gt;</span> document <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;&gt;();</span>
    document<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;source_field&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;fancy source field content&#34;</span><span style="color:#f92672">);</span>
    IngestDocument ingestDocument <span style="color:#f92672">=</span> RandomDocumentPicks<span style="color:#f92672">.</span><span style="color:#a6e22e">randomIngestDocument</span><span style="color:#f92672">(</span>random<span style="color:#f92672">(),</span> document<span style="color:#f92672">);</span>

    KuromojiPartOfSpeechExtractProcessor processor <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> KuromojiPartOfSpeechExtractProcessor<span style="color:#f92672">(</span>randomAsciiOfLength<span style="color:#f92672">(</span>10<span style="color:#f92672">),</span> <span style="color:#e6db74">&#34;source_field&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;target_field&#34;</span><span style="color:#f92672">);</span>
    processor<span style="color:#f92672">.</span><span style="color:#a6e22e">execute</span><span style="color:#f92672">(</span>ingestDocument<span style="color:#f92672">);</span>
    Map<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">,</span> Object<span style="color:#f92672">&gt;</span> data <span style="color:#f92672">=</span> ingestDocument<span style="color:#f92672">.</span><span style="color:#a6e22e">getSourceAndMetadata</span><span style="color:#f92672">();</span>

    assertThat<span style="color:#f92672">(</span>data<span style="color:#f92672">,</span> hasKey<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;target_field&#34;</span><span style="color:#f92672">));</span>
    assertThat<span style="color:#f92672">(</span>data<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;target_field&#34;</span><span style="color:#f92672">),</span> is<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;fancy source field content&#34;</span><span style="color:#f92672">));</span>
    <span style="color:#75715e">// TODO add fancy assertions here
</span><span style="color:#75715e"></span><span style="color:#f92672">}</span>
</code></pre></div><p>テストメソッドも実装されていますが、パラメータの追加の設定処理やアサーションが書かれてません。
実装に合わせて、アサーションや設定処理を追加しましょう。</p>
<h4 id="kuromojipartofspeechextractrestit">KuromojiPartOfSpeechExtractRestIT</h4>
<p>こちらはIntegration Testになります。
実際にElasticsearchに対して外部からAPIを叩くような感じです。
APIを叩くときに利用するJSONの設定やアサーションは<code>src/test/resources</code>にyamlファイルがあります。</p>
<ul>
<li>10_basic.yaml</li>
<li>20_kuromoji_part_of_speech_extract_processor.yaml</li>
</ul>
<p><code>10_basic.yaml</code>はプラグインがインストールされているかの確認のテストです。特に変更する必要はないです。</p>
<p><code>20_kuromoji_part_of_speech_extract_processor.yaml</code>は実際にコーディングしたProcessorが動くかどうかのテストです。</p>
<p>テストの内容については、<a href="https://github.com/johtani/elasticsearch-ingest-kuromoji-pos-extract">GitHubのコード</a>をご覧ください。</p>
<h3 id="テストの実行とzipの生成">テストの実行とZipの生成</h3>
<p>テストの実行とZipの生成は次のコマンドを実行すればOKです。</p>
<pre><code>gradle check
</code></pre><p>テストに問題があった場合は、コケますし、問題なければ<code>SUCCESS</code>と表示が出ます。
成功した場合は<code>build/distributions/</code>というディレクトリにzipファイルができています。
これをElasticsearchのpluginコマンドでインストールすれば動きます。</p>
<pre><code>bin/plugin install file:///path/to/elasticsearch-ingest-kuromoji-pos-extract/build/distribution/ingest-kuromoji_part_of_speech_extract-0.0.1-SNAPSHOT.zip
</code></pre><h3 id="kuromoji_pos_extractの利用方法">kuromoji_pos_extractの利用方法</h3>
<p>Ingest APIには便利な<a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/simulate-pipeline-api.html">Simulate Pipeline API</a>があります。</p>
<p>ということで、<a href="https://github.com/neologd/mecab-ipadic-neologd/blob/master/README.ja.md">mecab-ipadic-NEologd</a>にあったサンプルの文章を使って、使い方の説明です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-JSON" data-lang="JSON"><span style="color:#960050;background-color:#1e0010">POST</span> <span style="color:#960050;background-color:#1e0010">_ingest/pipeline/_simulate</span>
{
  <span style="color:#f92672">&#34;pipeline&#34;</span> : {
    <span style="color:#f92672">&#34;description&#34;</span> : <span style="color:#e6db74">&#34;kuromoji neologd extract test&#34;</span>,
    <span style="color:#f92672">&#34;processors&#34;</span> : [
      {
        <span style="color:#f92672">&#34;kuromoji_pos_extract&#34;</span> : {
        <span style="color:#f92672">&#34;field&#34;</span> : <span style="color:#e6db74">&#34;body&#34;</span>,
        <span style="color:#f92672">&#34;target_field&#34;</span> : <span style="color:#e6db74">&#34;noun_field&#34;</span>,
        <span style="color:#f92672">&#34;pos_tags&#34;</span> : [
          <span style="color:#e6db74">&#34;名詞-固有名詞-組織&#34;</span>,
          <span style="color:#e6db74">&#34;名詞-固有名詞-一般&#34;</span>,
          <span style="color:#e6db74">&#34;名詞-固有名詞-人名-一般&#34;</span>,
          <span style="color:#e6db74">&#34;名詞-固有名詞-地域-一般&#34;</span>,
          <span style="color:#e6db74">&#34;名詞-固有名詞-地域-国&#34;</span>
          ]
        }
      }
      ]
  },
  <span style="color:#f92672">&#34;docs&#34;</span> : [
    {
      <span style="color:#f92672">&#34;_index&#34;</span>: <span style="color:#e6db74">&#34;index&#34;</span>,
      <span style="color:#f92672">&#34;_type&#34;</span>: <span style="color:#e6db74">&#34;type&#34;</span>,
      <span style="color:#f92672">&#34;_id&#34;</span>: <span style="color:#e6db74">&#34;id&#34;</span>,
      <span style="color:#f92672">&#34;_source&#34;</span>: {
        <span style="color:#f92672">&#34;body&#34;</span> : <span style="color:#e6db74">&#34;10日放送の「中居正広のミになる図書館」（テレビ朝日系）で、SMAPの中居正広が、篠原信一の過去の勘違いを明かす一幕があった。&#34;</span>
      }
    }
    ]
}
</code></pre></div><p>結果はこちら。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-JSON" data-lang="JSON">{
  <span style="color:#f92672">&#34;docs&#34;</span>: [
    {
      <span style="color:#f92672">&#34;doc&#34;</span>: {
        <span style="color:#f92672">&#34;_index&#34;</span>: <span style="color:#e6db74">&#34;index&#34;</span>,
        <span style="color:#f92672">&#34;_id&#34;</span>: <span style="color:#e6db74">&#34;id&#34;</span>,
        <span style="color:#f92672">&#34;_type&#34;</span>: <span style="color:#e6db74">&#34;type&#34;</span>,
        <span style="color:#f92672">&#34;_source&#34;</span>: {
          <span style="color:#f92672">&#34;noun_field&#34;</span>: [
            <span style="color:#e6db74">&#34;10日&#34;</span>,
            <span style="color:#e6db74">&#34;中居正広のミになる図書館&#34;</span>,
            <span style="color:#e6db74">&#34;テレビ朝日&#34;</span>,
            <span style="color:#e6db74">&#34;SMAP&#34;</span>,
            <span style="color:#e6db74">&#34;中居正広&#34;</span>,
            <span style="color:#e6db74">&#34;篠原信一&#34;</span>
          ],
          <span style="color:#f92672">&#34;body&#34;</span>: <span style="color:#e6db74">&#34;10日放送の「中居正広のミになる図書館」（テレビ朝日系）で、SMAPの中居正広が、篠原信一の過去の勘違いを明かす一幕があった。&#34;</span>
        },
        <span style="color:#f92672">&#34;_ingest&#34;</span>: {
          <span style="color:#f92672">&#34;timestamp&#34;</span>: <span style="color:#e6db74">&#34;2016-07-22T06:18:49.007+0000&#34;</span>
        }
      }
    }
  ]
}
</code></pre></div><p><code>noun_field</code>に固有名詞の単語が抜き出せているのがわかるかと思います。</p>
<h3 id="alexのテンプレートで困った点">Alexのテンプレートで困った点</h3>
<p>テンプレートは便利だったのですが、<code>processor_type</code>に<code>_</code>を使用したタイプ名を指定すると次のような問題（？）が発生しました。</p>
<ul>
<li>クラス名が<code>Kuromoji_part_of_speech_extractProcessor</code>となってしまう</li>
</ul>
<p>深刻な問題ではないのですが、JavaだとCamel Caseが普通なのでちょっと気になって。
ということで、<a href="https://github.com/spinscale/cookiecutter-elasticsearch-ingest-processor/pull/1">プルリク</a>作って出してみました。まだ取り込まれてないかな。</p>
<p>取り込み前に使いたい方は以下のコマンドを実行してください。
<code>processor_class_name</code>という項目が増えています。
デフォルトだと<code>processor_type</code>の<code>_</code>の部分を取り除きつつCamel Caseにしたものが入ります。</p>
<pre><code>cookiecutter gh:johtani/cookiecutter-elasticsearch-ingest-processor
</code></pre><h3 id="まとめ">まとめ</h3>
<p>ということで、とりあえず作ってみましたというものになります。
特徴的な単語（固有名詞だけ）を抜き出して、別のフィールドにできるので、タグみたいなものをこれを使って前処理で作れるようになるかなぁと。</p>
<h2 id="参考ブログ元ネタ">参考ブログ（元ネタ？）</h2>
<p>インスパイア元となったブログです。</p>
<ul>
<li><a href="http://dev.classmethod.jp/server-side/elasticsearch/ingest-plugin-useragent/">User Agentを解析するIngest Pluginを書いてみた</a></li>
<li><a href="http://blog.cybozu.io/entry/2016/07/05/080000">Elasticsearch 5.0.0のIngest Node用プラグインを書いた話</a></li>
</ul>
</content:encoded>
    </item>
    
    <item>
      <title>第16回Elasticsearch勉強会を開催しました。 #elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2016/06/28/16th-elasticsearch-meetup/</link>
      <pubDate>Tue, 28 Jun 2016 13:55:55 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2016/06/28/16th-elasticsearch-meetup/</guid>
      <description>第16回Elasticsearch勉強会を開催しました。 スタッフの皆さん、スピーカーの皆さん、会場提供していただいたリクルートテクノロジーズ</description>
      <content:encoded><p><a href="https://elasticsearch.doorkeeper.jp/events/46539">第16回Elasticsearch勉強会</a>を開催しました。
スタッフの皆さん、スピーカーの皆さん、会場提供していただいた<a href="http://recruit-tech.co.jp">リクルートテクノロジーズさん</a>、ありがとうございました！
今回は、司会だけに注力してみました（）。</p>
<!-- more -->
<h3 id="チェックイン数など">チェックイン数など</h3>
<ul>
<li>チェックインした人：141名</li>
<li>キャンセルしなかった人：67名</li>
</ul>
<p>でした。</p>
<p>今回は、参加希望者が多くて、当日にも100名近いキャンセル待ちの方がいたので、
240名まで、参加者枠を増枠（会場キャパ190名程度）して対応しました。
まぁ、読み通り、1/3の方はキャンセルしない形でした。
天気も良く電車の遅延などもなさそうだったので、ちょっとドキドキしてたのですが。</p>
<p>以下は簡単なメモです。</p>
<h2 id="logstashとelasticsearchで作るenterprise-search-platform-elastic-kosho-owa">「LogstashとElasticsearchで作るEnterprise Search Platform」/ Elastic Kosho Owa</h2>
<p>スライド：https://speakerdeck.com/kosho/enabling-enterprise-search-platform-with-elastic-stack</p>
<ul>
<li>使ってるLogstashの設定ファイルを elastic-japan at elastic dot co に送るとTシャツがもらえるらしい。</li>
<li>Logstashの<a href="https://github.com/logstash-plugins/logstash-filter-ruby/blob/master/lib/logstash/filters/ruby.rb">filter-ruby</a>はここで、evalしてcallしてるから、特にforkとかしてないかと。</li>
</ul>
<h2 id="企業業界情報プラットフォームspeedaにおけるelasticsearchの活用--株式会社ユーザベース-北内-啓さん">「企業・業界情報プラットフォームSPEEDAにおけるElasticsearchの活用」 / 株式会社ユーザベース 北内 啓さん</h2>
<p>スライド：http://www.slideshare.net/tau3000/speedaelasticsearch-63510388</p>
<ul>
<li>アルゴリズム関連の開発担当</li>
<li>企業データをいろんな軸で検索したい
<ul>
<li>データ数が約70億レコードになりそう（通貨 x MySQL）</li>
</ul>
</li>
<li>300万企業データ＋Nestedとかで持ってる。
<ul>
<li>11万フィールド？？？</li>
<li>10台の物理サーバに24仮想マシン</li>
</ul>
</li>
<li>企業名の検索
<ul>
<li>recall重視</li>
</ul>
</li>
<li>NewsPicksの検索機能
<ul>
<li>「日本 化粧品 売上高」業界のデータとかも観れるのかな？有料会員向け機能</li>
<li>登録済みキーワードかどうかをRDB＋Esに検索して、ID化するっぽい
<ul>
<li>ID（Analyze必要ない）検索だから、termクエリだった、サンプルが。</li>
</ul>
</li>
</ul>
</li>
<li>ノードの役割分担
<ul>
<li>更新はMasterNode経由でDataNodeへ。</li>
<li>検索はClientNode経由でDataNodeへ。</li>
</ul>
</li>
<li>1.xかぁ。。。</li>
</ul>
<h2 id="elasticsearchベースの全文検索システムfess--株式会社エヌツーエスエム-菅谷信介さん">「Elasticsearchベースの全文検索システムFess」 / 株式会社エヌツーエスエム 菅谷信介さん</h2>
<p>スライド：http://www.slideshare.net/shinsuke/elasticsearchfess</p>
<ul>
<li>10.xからSolrをやめてElasticsearchへ。</li>
<li>日本語検索
<ul>
<li>bigram＋形態素（1文字検索とかに対応するため）</li>
</ul>
</li>
<li>NeologDに対応したkuromojiを利用</li>
<li>DBFluteをESFluteとしてEs対応</li>
<li>KOPFを組み込んで使ってる</li>
<li>configをREST API経由で更新できるプラグインあり</li>
</ul>
<h2 id="lt">LT</h2>
<h3 id="elasticsearchとgcpのネットワークでハマった話-株式会社サイバーエージェント-平田大地-さん-daichild">「ElasticsearchとGCPのネットワークでハマった話」 株式会社サイバーエージェント 平田大地 さん @daichild</h3>
<p>スライド：https://speakerdeck.com/daic_h/gcpfalsenetutowakudehamatutahua</p>
<ul>
<li>hhkb2 2刀流！</li>
<li>networkのKeep-alive周りで困ったよというお話。</li>
<li>後で聞いたけど、<a href="https://www.elastic.co/guide/en/elasticsearch/plugins/current/cloud-gce.html">GCE Cloud Plugin</a>は使ってるそうです。</li>
</ul>
<p><strong>06/28 17:00追記</strong></p>
<ul>
<li>Pingを定期的に実行させることで回避も出来るようです。</li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.3/modules-transport.html#_tcp_transport">transport.ping_schedule</a>に時間を指定します。通常のNode（Transport以外）は&rsquo;-1'が指定してあり、動作してません。</li>
</ul>
<h3 id="スクリプトフィールドで作るランキングみたいな何かiwag-さん">「スクリプトフィールドで作るランキングみたいな何か」iwag さん</h3>
<p>スライド：https://speakerdeck.com/iwag/elasticsearch-dezuo-rurankingu</p>
<ul>
<li>1.xかぁ。。。</li>
<li>あとは、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html">function_score</a>とかも面白いですよ！</li>
</ul>
<h2 id="その他感想などのブログ">その他、感想などのブログ</h2>
<ul>
<li><a href="http://tsuyoshi-nakamura.hatenablog.com/entry/2016/06/28/115244">第16回elasticsearch勉強会に参加してきた</a></li>
<li><a href="https://masutaka.net/chalow/2016-06-28-1.html">第16回Elasticsearch勉強会に参加してきた </a></li>
</ul>
<h2 id="まとめ宣伝">まとめ＋宣伝？</h2>
<p>1.xがまだまだいますねぇ、早く2.xにアップしましょう！（5.0ももう直ぐだし）。懇親会でも色々と話しましたが、https://discuss.elastic.co というフォーラムあるので、ぜひ活用してください。</p>
<p>次回は8月末か9月頭かでしょうか。
<a href="http://www.ospn.jp/osc2016-kyoto/">7月末にOSC京都</a>に出没するので、京都で勉強会やりたいと思ってます！
会場とかスピーカーとか興味ある人連絡ください。</p>
<p>東京の勉強会のスピーカーも随時募集中ですので、連絡ください。</p>
</content:encoded>
    </item>
    
    <item>
      <title>第15回Elasticsearch勉強会を開催しました。 #elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2016/03/17/15th-elasticsearch-jp/</link>
      <pubDate>Thu, 17 Mar 2016 12:43:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2016/03/17/15th-elasticsearch-jp/</guid>
      <description>第15回Elasticsearch勉強会を開催しました。 スタッフの皆さん、スピーカーの皆さん、会場提供していただいたリクルートテクノロジーズ</description>
      <content:encoded><p><a href="https://elasticsearch.doorkeeper.jp/events/40444">第15回Elasticsearch勉強会</a>を開催しました。
スタッフの皆さん、スピーカーの皆さん、会場提供していただいた<a href="http://recruit-tech.co.jp">リクルートテクノロジーズさん</a>、ありがとうございました！
今回は、Elastic{on} 2016開催直後ということで、大半はElastic{on}に関する話でした。</p>
<!-- more -->
<h3 id="チェックイン数など">チェックイン数など</h3>
<ul>
<li>チェックインした人：114名</li>
<li>キャンセルしなかった人：62名</li>
</ul>
<p>でした。
今回は、少しおそめで1時間前にキャンセル待ちがいない状態にしました。
まぁ、いつもの感じでしょうか。数値も安定してきた感じですかね。</p>
<h2 id="elasticsearchと機械学習を実際に連携させる--preferred-networks-america-inchttpswwwpreferred-networksjp-cto-久保田展行kubota-nobuyuki-さん">&ldquo;Elasticsearchと機械学習を実際に連携させる&rdquo; / <a href="https://www.preferred-networks.jp">Preferred Networks America, Inc.</a> CTO 久保田展行(Kubota Nobuyuki) さん</h2>
<p>スライド：<a href="http://www.slideshare.net/nobu_k/elasticsearch-59627321">Elasticsearchと機械学習を実際に連携させる</a></p>
<p><a href="http://blog.johtani.info/blog/2016/01/08/14th-elasticcsearch-jp/">前回の続き</a>の話で、今回が本題でした。</p>
<p>勉強会直前に発表された<a href="http://sensorbee.io">SensorBee</a>をElasticsearchと一緒に使うとどんなことができるかというお話です。
まぁ、前処理重要ですよねというのが、いつものことですが、印象的でした。
いつものようにわかりやすい説明だったので、使ってブログを書いて欲しいなと。</p>
<p>発表の中で、説明に出てきたデモとか。</p>
<ul>
<li><a href="https://research.preferred.jp/2016/01/ces2016/">CES2016でロボットカーのデモを展示してきました</a></li>
</ul>
<h2 id="elasticon-2016レポート--elastic-jun-ohtani">&ldquo;Elastic{ON} 2016レポート&rdquo; / Elastic Jun Ohtani</h2>
<p>スライド：<a href="https://speakerdeck.com/johtani/elastic-on-2016-repoto">elastic{on} 2016 レポート</a></p>
<p>写真多めで、キーノートをメインに話をしました。</p>
<p>簡単なまとめとしては</p>
<ul>
<li>プロダクトロゴができました。<a href="https://www.elastic.co/brand">ロゴ画像などはこちら</a></li>
<li>次のメインバージョンは全て5.0。（<a href="https://www.elastic.co/v5">5.0に関する通知が欲しい人はこちらで登録できます</a>）</li>
<li><a href="https://www.elastic.co/elasticon/conf/2016/sf">elastic{on} 2016のビデオなどはこちら</a></li>
<li>BBL始めます。連絡ください</li>
</ul>
<h2 id="elasticonの過ごし方--クラスメソッド株式会社-藤本-真司-さん">&ldquo;Elastic{ON}の過ごし方&rdquo; / クラスメソッド株式会社 藤本 真司 さん</h2>
<p>スライド：<a href="http://dev.classmethod.jp/server-side/elasticsearch/elasticsearch-study-15-lt/">Elastic{ON}の過ごし方</a></p>
<p>印象に残ったのは</p>
<ul>
<li>「自他共に認めるブログの会社」</li>
<li>4/12にSAPさんに会場を借りてElastic＆クラスメソッドでイベントやります。</li>
</ul>
<p>やっぱりご飯が美味しいんですねぇ。
早速<a href="http://dev.classmethod.jp/server-side/elasticsearch/elasticsearch-study-15-lt/">ブログ</a>が書かれてました。</p>
<h2 id="elasticon-2016-見るべきセッション資料-7選--acroquest-technology株式会社-谷本-心-さん">&ldquo;Elastic{ON} 2016 見るべきセッション資料 7選&rdquo; / Acroquest Technology株式会社 谷本 心 さん</h2>
<p>スライド：<a href="https://speakerdeck.com/shintanimoto/elastic-on-2016-jian-rubekisetusiyonzi-liao-7xuan-number-elasticsearchjp">Elastic{ON} 2016 見るべきセッション資料 7選 #elasticsearchjp</a></p>
<p>印象に残ったのは</p>
<ul>
<li>東京でハンズオンやる会場提供者募集中！</li>
<li>Ingest Node（参考：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/ingest.html">Ingest Nodeのドキュメントは公開中。</a>）</li>
<li>Reindex API（参考：<a href="https://github.com/elastic/elasticsearch/pull/17060">Backport reindex to 2.x </a>）</li>
</ul>
<h2 id="その他感想などのブログ">その他、感想などのブログ</h2>
<ul>
<li><a href="http://dev.classmethod.jp/server-side/elasticsearch/elasticsearch-study-15-lt/">第15回elasticsearch勉強会にLTで登壇しました #elasticsearch #elasticsearchjp</a></li>
<li><a href="http://d.hatena.ne.jp/Kazuhira/20160316/1458142636">第15回elasticsearch勉強会に参加してきました #elasticsearch #elasticsearchjp</a></li>
</ul>
<h2 id="まとめ宣伝">まとめ＋宣伝</h2>
<p>来年のElastic{ON}に参加したいと思っていただけたらよかったなと。</p>
<p>4/12にクラスメソッドさんとイベントを行います。また、ツイートすると思います。</p>
<p>次回はいつも通りだと5月中旬になるかと思います（大丈夫かな？<a href="http://www.ospn.jp/osc2016-nagoya/">OSC 2016 Nagoya</a>でしゃべったり、ブース出したりとかするけど）。
5末に名古屋に出没します。名古屋で勉強会できればやりたいと思ってます。会場とかスピーカーとか興味がある方は連絡ください。</p>
</content:encoded>
    </item>
    
    <item>
      <title>第14回Elasticsearch勉強会を開催しました。 #elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2016/01/08/14th-elasticcsearch-jp/</link>
      <pubDate>Fri, 08 Jan 2016 11:34:56 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2016/01/08/14th-elasticcsearch-jp/</guid>
      <description>あけましておめでとうございます、johtaniです。 第14回Elasticsearch勉強会を開催しました。 スタッフの皆さん、スピーカーの皆</description>
      <content:encoded><p>あけましておめでとうございます、johtaniです。</p>
<p><a href="https://elasticsearch.doorkeeper.jp/events/36330">第14回Elasticsearch勉強会</a>を開催しました。
スタッフの皆さん、スピーカーの皆さん、会場提供していただいた<a href="http://recruit-tech.co.jp">リクルートテクノロジーズさん</a>、ありがとうございました！
今年もよろしくお願いします！参加していただき盛り上げていただいた参加者の皆さんもありがとうございました。</p>
<!-- more -->
<h3 id="チェックイン数など">チェックイン数など</h3>
<ul>
<li>チェックインした人：122名</li>
<li>キャンセルしなかった人：58名</li>
</ul>
<p>でした。
今回も当日の昼の時点でキャンセル待ちがない状態にしていました。
いくつか電車が止まっていたという話を聞いていたので、開始を5分遅らせ、
受付は45分くらいまで開けておくという対応をしてもらいました。</p>
<h3 id="ココが辛いよelasticsearch--株式会社リクルートテクノロジー-tatakaba-さん">&ldquo;ココが辛いよelasticsearch&rdquo; / 株式会社リクルートテクノロジー @tatakaba さん</h3>
<p>スライド：<a href="http://www.slideshare.net/takahitotakabayashi/elasticsearch-56936397">ココが辛いよelasticsearch</a></p>
<p>実際にいくつかのサービスで運用されている内容とどういった機能を利用しているか、
どういったものを独自に作っているかという話をしていただきました。</p>
<ul>
<li>独自PluginでA/Bテストしてる</li>
<li>Snapshotの活用</li>
<li>Index作成は環境に合わせて行っている。</li>
<li>バージョンは混在</li>
<li>PusnaRSのバージョンアップの話。
<ul>
<li>2つのバージョンのクラスタを用意してリアルタイムに切り替え。</li>
</ul>
</li>
<li>Elasticsearchの活用
<ul>
<li>QueryのRewrite：</li>
<li>SolrのリクエストをEsで受け付けたり。</li>
</ul>
</li>
<li>辛い話。
<ul>
<li>バージョンアップが辛い</li>
<li>Riverなくなるのつらい</li>
<li>データずれるのつらい</li>
</ul>
</li>
</ul>
<p>補足：</p>
<h4 id="バージョンアップについて">バージョンアップについて</h4>
<p>1.x系から2.x系にアップされるのであれば、こちらを必ず試してください。</p>
<p><a href="https://github.com/elastic/elasticsearch-migration">https://github.com/elastic/elasticsearch-migration</a></p>
<p>「.」が使えなくなるという話は、Solrとの大きな違いになるのかもなぁと。
ネスト構造のデータの表記を「.」で行うというのを厳密に行えるように、
「.」を使えなくしたというのがあるかと。</p>
<h4 id="riverについて">Riverについて</h4>
<p>Riverがなくなった理由については、https://www.elastic.co/blog/deprecating-rivers で記載があります。
便利なのですが、負荷が偏ったり、スケールしないとかいう問題点があるかなと。</p>
<p>良いサンプルとしては、JDBC Riverなどは、Javaのプログラムとして起動できるように変更されていたりします。</p>
<p><a href="https://github.com/jprante/elasticsearch-jdbc/wiki/jdbc-plugin-feeder-mode-as-an-alternative-to-the-deprecated-elasticsearch-river-api">https://github.com/jprante/elasticsearch-jdbc/wiki/jdbc-plugin-feeder-mode-as-an-alternative-to-the-deprecated-elasticsearch-river-api</a></p>
<p>（<strong>個人的</strong> には、SolrのDIHもRiverもあんまり好きではなかったです。データの変換処理と、ロード処理は別々にしたい人だったので。）</p>
<h4 id="データのズレなど">データのズレなど</h4>
<p>耐障害性とか信頼性に関しては、どういった問題点があるのか、どういった対応をしているのかというのがまとめられたページが用意されています。</p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/resiliency/current/index.html">https://www.elastic.co/guide/en/elasticsearch/resiliency/current/index.html</a></p>
<h3 id="機械学習を利用したちょっとリッチな検索--preferred-networks-america-inc-cto-久保田展行kubota-nobuyuki-さん">「機械学習を利用したちょっとリッチな検索」 / Preferred Networks America, Inc. CTO 久保田展行(Kubota Nobuyuki) さん</h3>
<p>スライド：<a href="http://www.slideshare.net/nobu_k/ss-56810268">機械学習を利用したちょっとリッチな検索</a></p>
<p>来日していただき、機械学習と検索の話をしてもらいました。
本編は次回の発表かもw</p>
<ul>
<li>機械学習を元に、検索対象の情報を元の情報から増やしてあげる。</li>
<li>増えた情報を検索できるようにする</li>
</ul>
<h4 id="今日のゴール">今日のゴール：</h4>
<ul>
<li>機械学習とはどういうものか？</li>
<li>データの集め方とか、アノテーションとか</li>
<li>学習の方法（ツールやライブラリに依存）</li>
</ul>
<h4 id="esでの活用方法">Esでの活用方法</h4>
<ul>
<li>オフラインで学習させて、情報を付与した後に、Elasticsearchに入れる</li>
<li>Jubatus＋fluentdで</li>
<li>ChainerサポートのOSSのツールを公開予定</li>
</ul>
<p>「ここからが本当の地獄だ。。。」ってのが聴きたいw</p>
<h3 id="lucene-query-再考---domain-specific-query-実装----supership株式会社-インフラ事業開発本部検索グループ-大川真吾-さん">「Lucene Query 再考 - Domain Specific Query 実装 -」 / Supership株式会社 インフラ事業開発本部検索グループ 大川真吾 さん</h3>
<p>スライド：<a href="http://www.slideshare.net/ShingoOKAWA/elasticsearch-20150107-56772462">Lucene Query 再考 - Domain Specific Query 実装 -</a></p>
<p>Luceneのクエリに関する話と、クエリパーサーに関する話でした。
こういった濃い話も勉強会でしてもらえると、色々な参加者に楽しんでいただけるかなぁと。
次回も続きを話してもらう予定です。</p>
<p>補足：</p>
<p>参考までにですが、Elasticsearchに入門したての人向けに、
Analyzerとか転置インデックスとかの話をした時のスライドになります。
<a href="https://speakerdeck.com/johtani/lucenetori-ben-yu-falsejian-suo">https://speakerdeck.com/johtani/lucenetori-ben-yu-falsejian-suo</a></p>
<h3 id="lt">LT:</h3>
<h4 id="fluentd-meets-beats--repeatedly-さん">Fluentd meets Beats / @repeatedly さん</h4>
<p>スライド：http://www.slideshare.net/repeatedly/fluentpluginbeats-at-elasticsearch-meetup-14</p>
<p>参考Qiita：http://qiita.com/repeatedly/items/77af41788f0b3ccdefd2</p>
<p>Beatsの説明をTDの人からしてもらうなどw
FluentdにBeatsからのデータを流し込めるようにしたプラグインが出たという話でした。</p>
<p>filebeatの性能の件は社内で聞いてみようかと。</p>
<h4 id="elasticsearchインデクシングのパフォーマンスを測ってみた--日本ibm黒澤亮二さん">Elasticsearchインデクシングのパフォーマンスを測ってみた / 日本IBM　黒澤亮二さん</h4>
<p>スライド：<a href="http://www.slideshare.net/kuron99/elasticsearch-56784623">Elasticsearchインデクシングのパフォーマンスを測ってみた</a></p>
<p>参考Qiita：http://qiita.com/rjkuro/items/e79eec7ffb0511b7c678</p>
<p>細かな性能測定の結果を駆け足で話してもらいました。
皆さんもこの指標をもとに、手元の環境を計測してみたりしてみてもらえればと。</p>
<p>あとは、2.x系になってるので、同じ方法で計測してもらってまた
発表してもらえると嬉しいなー（棒）</p>
<h2 id="その他感想などのブログ">その他、感想などのブログ</h2>
<ul>
<li><a href="http://acro-engineer.hatenablog.com/entry/2016/01/08/123857">Elasticsearch勉強会　第14回フィードバック</a></li>
</ul>
<h2 id="まとめ宣伝">まとめ＋宣伝</h2>
<p>久々に（初めてかな？）、ゲストがいないのに自分が喋りませんでした。
次回は3月中旬を予定してます。
次回は、Elastic{ON}16の報告をする予定です。いろいろと発表あるだろうし。</p>
<p>あと、今月末の1/29に<a href="http://www.ospn.jp/osc2016.enterprise-osaka/">オープンソースカンファレンス 2016.enterprise@Osaka</a>にブース出展します。
セミナー枠でも弊社OSSプロダクトの概要を話しする予定です。
関西の方は、ぜひ参加していただければと。ブースでお待ちしております。</p>
<p>また、スピーカーや場所が用意できたら、出張勉強会もまたやりたいなと思っています。
興味ある方は、連絡ください！</p>
</content:encoded>
    </item>
    
    <item>
      <title>2015年のElasticsearch</title>
      <link>https://blog.johtani.info/blog/2015/12/25/about-elasticsearch-in-2015/</link>
      <pubDate>Fri, 25 Dec 2015 13:29:54 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/12/25/about-elasticsearch-in-2015/</guid>
      <description>今年最後のAdvent Calendarとなります。 この記事はElasticsearch Advent Calendar 2015の最終日のエントリです。 簡単に今年の変遷を</description>
      <content:encoded><p>今年最後のAdvent Calendarとなります。</p>
<p>この記事は<a href="http://qiita.com/advent-calendar/2015/elasticsearch">Elasticsearch Advent Calendar 2015</a>の最終日のエントリです。</p>
<p>簡単に今年の変遷を、Elasticsearchをベースに振り返ってみようかと思います。</p>
<!-- more -->
<h2 id="kibana-4リリース2月">Kibana 4リリース（2月）</h2>
<ul>
<li><a href="http://blog.johtani.info/blog/2015/02/20/kibana-4-literally-ja/">Kibana 4（日本語訳）</a></li>
</ul>
<p>いきなり、Elasticsearchではない話題ですが。
AggregationベースのKibanaがリリースされました。
画面が黒くないというので、話題になりましたw
12月末時点では、4.3.1になっています。
Sub Aggregationによる強力なグラフ表示や異なるインデックスに対するグラフを
一つのダッシュボードに表示できるといったことができるようになりました。</p>
<h2 id="セキュリティ向けプラグインshieldのリリース2月">セキュリティ向けプラグインShieldのリリース（2月）</h2>
<ul>
<li><a href="http://blog.johtani.info/blog/2015/02/27/you-know-for-security-shield-goes-ga-ja/">セキュリティ向けプラグインShieldのリリース（日本語訳）</a></li>
</ul>
<p>商用向けのプラグインの第2弾です。
セキュリティ強化のためのプラグインで、いろいろなところで引き合いがあったりします。</p>
<h2 id="初のユーザカンファレンスelasticon開催3月">初のユーザカンファレンス、Elastic{ON}開催（3月）</h2>
<ul>
<li><a href="http://blog.johtani.info/blog/2015/03/11/attend-elasticon/">#elasticon に参加中</a></li>
</ul>
<p>サンフランシスコで、弊社初のカンファレンスが開催されました。（来年（2016年）もサンフランシスコで開催されます。）
また、ここで、以下の2点の発表がありました。</p>
<ul>
<li>ロゴ及びドメイン名などの変更</li>
<li>Foundのジョイン</li>
</ul>
<p>約1300名が参加する大イベントでした。
初の渡米で楽しんできましたが、ドメインの切り替えなどは大変でした。。。
まだ、ロゴを変えて1年経ってないということが実感できてないです。</p>
<p><a href="https://www.elastic.co/found">Found</a>のジョインはまだまだ、日本で知名度が出てないかもなぁと。
もっと広めないと。
利点としては以下の通りです。</p>
<ul>
<li>新バージョンがすぐに利用可能に。また、バージョンアップも画面で指定可能</li>
<li>公式プラグイン＋その他いくつかのプラグインが利用可能</li>
</ul>
<h2 id="elasticsearch-15-リリース4月">Elasticsearch 1.5 リリース（4月）</h2>
<ul>
<li><a href="http://blog.johtani.info/blog/2015/04/01/elasticsearch-1-5-0-released-ja/">Elasticsearch 1.5.0リリース（日本語訳）</a></li>
</ul>
<p>主に、resiliencyに関する改良になります。
毎リリースで信頼性向上につながる改良が含まれる形になっています。
このリリースの近くで初の東京の外での勉強会を<a href="http://blog.johtani.info/blog/2015/04/04/elasticsearch-study-session-at-nagoya/">名古屋で開催</a>したりもしました。</p>
<h2 id="discusselasticcoをオープン5月">discuss.elastic.coをオープン（5月）</h2>
<ul>
<li><a href="https://discuss.elastic.co">https://discuss.elastic.co</a></li>
</ul>
<p>これまでは、Google Groupsを使っていましたが、Elasticが提供しているプロダクトが
別々のグループであったために、プロダクトにまたがった質問がやりにくかったり、検索がしにくかったりという問題点がありました。
今では、過去のGoogle Groupsのデータも移行されているので、是非参加して、質問・回答してみてください。
<a href="https://discuss.elastic.co/c/in-your-native-tongue/18-category">日本語でやりとりできるカテゴリ</a>もあるので、どんどん、やりとりしていただければ。</p>
<h2 id="elasticsearch-16-リリース6月">Elasticsearch 1.6 リリース（6月）</h2>
<ul>
<li><a href="http://blog.johtani.info/blog/2015/06/10/elasticsearch-1-6-0-released-ja/">Elasticsearch 1.6.0リリース（日本語訳）</a></li>
</ul>
<p>2.0に向けたUpgrade APIが含まれるなど、次期リリースに向けた準備が整いつつあるリリースでした。
他にもsynced flushの取り込みやレスポンスのJSONのフィルタリングなど細かな改善も取り込まれています。</p>
<h2 id="found-premiumとstandardリリース7月">Found PremiumとStandardリリース（7月）</h2>
<ul>
<li><a href="http://blog.johtani.info/blog/2015/07/07/we-just-made-found-more-awesome-ja/">さらに進化したFound（日本語訳）</a></li>
</ul>
<p>Foundに弊社のサポートチームがサポートできるプレミアムが追加されました。
これにより、商用プラグインとして提供しているShieldが（現在はWatcherも）利用できるなど、
より便利になりました。また、Kibana 4も無料で提供されていたりします。</p>
<p><a href="https://www.elastic.co/found/pricing">小さなサイズのものですと、無料で試していただける</a>ものもあるので、試してみてもらえればと。</p>
<h2 id="elasticsearch-17-リリース7月">Elasticsearch 1.7 リリース（7月）</h2>
<ul>
<li><a href="http://blog.johtani.info/blog/2015/07/22/elasticsearch-1-7-0-and-1-6-1-released-ja/">Elasticsearch 1.7.0 および 1.6.1リリース（日本語訳）</a></li>
</ul>
<p>1.x系、最後のリリースでした。
小さい改善ですが、セキュリティフィックス、クラスタの安定化に寄与する機能改善が含まれています。</p>
<p>この<a href="http://blog.johtani.info/blog/2015/07/16/kansai-1st-elasticsearch-jp/">リリース直前に大阪、京都で勉強会も開催してみました。</a></p>
<h2 id="elasticsearch-200-beta1-リリース8月">Elasticsearch 2.0.0-beta1 リリース（8月）</h2>
<ul>
<li><a href="http://blog.johtani.info/blog/2015/08/27/elasticsearch-2-0-0-beta1-released-ja/">Elasticsearch 2.0.0-beta1リリース（日本語訳）</a></li>
</ul>
<p>待ちに待った、Lucene 5ベースのElasticsearchの登場でした。
doc_valuesがデフォルトになったり、エラーが構造化されて見やすくなったり、
Pipeline Aggregationが導入されたりしています。
また、問題点の洗い出しも兼ねて、ベータリリースとして、本リリースまでに多くのIssueをあげていただきました。</p>
<h2 id="elasticsearch-200-リリース10月">Elasticsearch 2.0.0 リリース（10月）</h2>
<p>2.0の本リリースです。リリースまでに、beta1、2及び、rc1がリリースされました。</p>
<p>追加された機能や目玉の改善については「<a href="https://speakerdeck.com/johtani/elasticsearch-2-dot-0falseshao-jie">Elasticsearch 2.0の紹介</a>」のスライドを参考にしていただければと。</p>
<p>また、Elasticsearch 2.0のリリースに合わせて、商用プラグインやLogstash、Kibanaの新しいバージョンがリリースされました。
Kibanaなどは、プラットフォームとしての機能を備え、Senseや<a href="http://blog.johtani.info/blog/2015/12/01/introduction-timelion/">Timelion</a>と言ったプラグインアプリもリリースされています。</p>
<ul>
<li><a href="http://blog.johtani.info/blog/2015/10/29/logstash-2-0-0-released-ja/">Logstash 2.0.0リリース（日本語訳）
</a></li>
<li><a href="http://blog.johtani.info/blog/2015/10/29/kibana-4-2-0-ja/">Kibana 4.2.0リリース（日本語訳）
</a></li>
<li><a href="http://blog.johtani.info/blog/2015/10/30/sense-2-0-0-beta1-ja/">Senseの歴史 - Sense 2.0.0-beta1の紹介(日本語訳)</a></li>
<li><a href="http://blog.johtani.info/blog/2015/10/30/shield-watcher-and-marvel-2-0-ga-released-ja/">Shield、Watcher、Marvel 2.0.0 GAリリース（日本語訳）</a></li>
</ul>
<h2 id="elasticsearch-210-リリース11月">Elasticsearch 2.1.0 リリース（11月）</h2>
<ul>
<li><a href="https://www.elastic.co/blog/elasticsearch-2-1-0-and-2-0-1-released">Elasticsearch 2.1.0 and 2.0.1 released</a></li>
</ul>
<h2 id="beats-100のリリース11月">Beats 1.0.0のリリース（11月）</h2>
<ul>
<li><a href="https://www.elastic.co/blog/beats-1-0-0">The Beats 1.0.0</a></li>
</ul>
<p>Go言語で書かれた軽量データシッパーになります。
パケットをキャプチャしてElasticsearchに送る<a href="https://www.elastic.co/downloads/beats/packetbeat">Packetbeat</a>、
topコマンドで取れるデータなどを<a href="https://www.elastic.co/downloads/beats/topbeat">Topbeat</a>、
ログファイルなどを取り込み配送する<a href="https://www.elastic.co/downloads/beats/filebeat">Filebeat</a>がリリースされました。</p>
<p><a href="https://www.elastic.co/guide/en/beats/libbeat/current/index.html">libbeat</a>と呼ばれる、
ベースとなるライブラリを元にしたプロダクトで、Logstashのエージェントのような使い方もできるようになっています。</p>
<p>Go言語に興味のある方などは、調べてみてはいかがでしょう？</p>
<h2 id="来年は">来年は？</h2>
<p>日本では、<a href="https://elasticsearch.doorkeeper.jp/events/36330">1/7に第14回Elasticsearch勉強会</a>を開催します。
すでに、38名のキャンセル待ちとなっていますが、おそらく、年明けにキャンセルがそこそこ出ると思うので、まだ間に合うんじゃないかなぁと。</p>
<p>会社としては、<a href="https://www.elastic.co/elasticon/conf/2016/sf">Elastic{ON}16</a>が控えています。参加される方は、ぜひ現地で声をかけてください！！</p>
<p>その他にもイベント、オープンソースカンファレンス（まずは、<a href="https://www.ospn.jp/osc2016.enterprise-osaka/">大阪</a>、<a href="http://www.ospn.jp/osc2016-spring/">東京</a>）などに出没する予定ですので、こちらも参加していただければと。</p>
<p>では、また来年のAdvent Calendarでお会いしましょう！</p>
</content:encoded>
    </item>
    
    <item>
      <title>第13回Elasticsearch勉強会を開催しました。#elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2015/11/10/13th-elasticsearch-jp/</link>
      <pubDate>Tue, 10 Nov 2015 17:22:58 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/11/10/13th-elasticsearch-jp/</guid>
      <description>第13回Elasticsearch勉強会を開催しました。 スタッフの皆さん、スピーカーの皆さん、会場提供していただいたリクルートテクノロジーズ</description>
      <content:encoded><p><a href="https://elasticsearch.doorkeeper.jp/events/33631">第13回Elasticsearch勉強会</a>を開催しました。
スタッフの皆さん、スピーカーの皆さん、会場提供していただいた<a href="http://recruit-tech.co.jp">リクルートテクノロジーズさん</a>、ありがとうございました！
来年もよろしくお願いします！参加していただき盛り上げていただいた参加者の皆さんもありがとうございました。</p>
<p>7月同様、<a href="http://samuraism.com">サムライズム</a>の<a href="https://twitter.com/yusuke">@yusuke</a>さんに
テキスト翻訳していただき、大変助かりました。</p>
<!-- more -->
<h3 id="チェックイン数など">チェックイン数など</h3>
<ul>
<li>チェックインした人：100名</li>
<li>キャンセルしなかった人：36名</li>
</ul>
<p>でした。
今回は当日の時点でキャンセル待ちがない状態にしていました。
雨もあって、これなかった人もいるのでしょうか。</p>
<h2 id="beyond-the-basics-with-elasticsearch--honza-král--elastic">&ldquo;Beyond the basics with Elasticsearch&rdquo; / Honza Král / Elastic</h2>
<p>スライド：https://speakerdeck.com/elasticsearch/beyond-the-basics-with-elasticsearch<br>
参考ビデオ（別のカンファレンスで話した時のビデオ）：https://www.youtube.com/watch?v=yIixWzjTNog</p>
<p>Pycon HKでアジアに来ていたHonzaに、ついでに日本で話をしてもらうという企画で、
前回から1カ月足らずでの開催となりました。
Elasticsearchの基本的な検索機能とは別の機能に関して少し話をしてもらった感じです。
<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-percolate.html">Percolator</a>と<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html">Aggregation</a>の話でした。</p>
<p>詳しくはビデオやスライドを見てもらうのがいいかなと。</p>
<h2 id="how-did-we-use-foundno-for-our-services--株式会社アイリッジtakuya-noguchi-さん-tn961ir">&ldquo;How did we use Found.no for our services?&rdquo; / 株式会社アイリッジ　Takuya Noguchi さん @tn961ir</h2>
<p>スライド：未定</p>
<ul>
<li>Foundユーザー。1.7までの話。</li>
<li>社内で独自にクラスタを構築していたが、managed serviceを利用したいと思っていた。</li>
<li>Found用のACLがShieldに</li>
<li>マルチバイトのインデックス名とかも使いたいが、Nginxとの連携でちょっと。。。</li>
<li>セキュリティ関連の話も。Securityに関する報告はこういうものも用意されてるので、こちらに相談してもらうのがいいかも。https://www.elastic.co/community/security</li>
<li>要望がいくつか。</li>
</ul>
<h2 id="ログ収集の仕組みを再考しようあとマウンテンビューに行ってきました--acroquest-technology株式会社-谷本-心さん-cero_t">&ldquo;ログ収集の仕組みを再考しよう！　あとマウンテンビューに行ってきました。&rdquo; / Acroquest Technology株式会社 谷本 心さん @cero_t</h2>
<p>スライド：http://www.slideshare.net/shintanimoto/lets-reconsider-about-collecting-logs-plus-visiting-elasticmoutain-view</p>
<p>ログの小話から始まり、ログに関する考え方とかを披露してもらいました。
さらに踏み込んだログの活用の方法の話になるかと思いきや、
思いっきり話が飛んで、マウンテンビューのElasticオフィスに遊びに行った写真が出てきましたw</p>
<p>写真の後は、弊社のTanya（<a href="https://www.elastic.co/elasticon/tour/2015/tokyo">来月のElastic{ON} Tour Tokyo</a>で来日予定）から
聞いた弊社製品に関する話をしていただきました。
きっと、Beatsに関して次は話してくれるんだろうなぁ（棒）。
流れ的には、<a href="https://www.elastic.co/elasticon/conf/2016/sf">来年の2月にサンフランシスコで開催されるElastic{ON}16</a>につながりそうだったので、ここで宣伝しときますね。
今年3月に開催されたイベントには残念ながら日本の方はいなかったので、次回は日本の方がいると嬉しいなぁと。</p>
<h2 id="lt-elasticsearch-を使った単語共起頻度の計算--株式会社はてなidtakuya-a-さん">LT &ldquo;「Elasticsearch を使った単語共起頻度の計算」&rdquo; / 株式会社はてな　id:takuya-a さん</h2>
<p>スライド：未定</p>
<p>一風変わったElasticsearchの使い方的な話でした。
検索用にデータを登録してあるElasticsearchから単語の頻度情報を抜き出して、
別のインデックスに登録するという感じでしょうか。
こういうのが、実は、Elasticsearchに機能としてあると便利だったりするのかもなぁと思ってみたり。</p>
<p>LTよりはちょっと長かったですかねw</p>
<h2 id="その他感想などのブログ">その他、感想などのブログ</h2>
<ul>
<li><a href="http://arika.hateblo.jp/entry/2015/11/09/204652">elasticsearch勉強会</a></li>
</ul>
<h2 id="まとめ宣伝">まとめ＋宣伝</h2>
<p>今回も@yusukeさんのテキスト翻訳に助けていただきました。ほんとありがとうございます。
今年の勉強会はこれがラストになります。
来月は、トレーニングと<a href="https://www.elastic.co/elasticon/tour/2015/tokyo">Elastic{ON} Tour Tokyo</a>があるので忙しくなりそうですが、
参加予定の方は楽しみにしていてください！</p>
<ul>
<li>Operations : <a href="http://training.elastic.co/class/Operations/Japan/Dec">http://training.elastic.co/class/Operations/Japan/Dec</a></li>
<li>Developer : <a href="http://training.elastic.co/class/Developer/Japan/Dec">http://training.elastic.co/class/Developer/Japan/Dec</a></li>
</ul>
</content:encoded>
    </item>
    
    <item>
      <title>Senseの歴史 - Sense 2.0.0-beta1の紹介(日本語訳)</title>
      <link>https://blog.johtani.info/blog/2015/10/30/sense-2-0-0-beta1-ja/</link>
      <pubDate>Fri, 30 Oct 2015 17:55:06 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/10/30/sense-2-0-0-beta1-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：The Story of Sense - Announcing Sense 2.0.0-beta1 誕生 よくある良いプロジェクト同様、Senseもビールを飲みながら考</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="https://www.elastic.co/blog/sense-2-0-0-beta1">The Story of Sense - Announcing Sense 2.0.0-beta1</a></p>
<!-- more -->
<h2 id="誕生">誕生</h2>
<p>よくある良いプロジェクト同様、Senseもビールを飲みながら考えつきました。
<a href="https://en.wikipedia.org/wiki/Amstel">Amstel</a>での手漕ぎボートのセッションの後で。
友人の<a href="https://twitter.com/jkaizer">Jasper</a>と私はJasperの<a href="http://q42.nl/">会社</a>で毎年行われる
<a href="http://w00t.camp/">ハッカソン</a>について話をしていました。
このハッカソンはどのようなアイデアでどんなチームで行うかを聞き取りされる、厳密なハッカソンです。
その時、私とJasperはChromeブラウザに別のヒストリーを表示するという作業をやると<a href="https://twitter.com/anneveling">Anne Veling</a>に話をしていました。</p>
<p>Jasperと私はElasticsearchのユーザでしたが、リッチなREST APIにリクエストを送信するための
便利なツールがないと知っていました。
恥ずべきことに、cURLコマンドを利用するターミナルがその時の一番良いツールでした。
皆さん、ターミナルでボディつきのリクエストをサブミットするのがどのくらい不便かというのをわかるために、
5秒ほどターミナルで実行してみてください。
タイプミスのような単純なことでさえ、すべてのコマンドを再タイプしなければならなかったり、
複数行サポートのターミナルと戦ったりです。
ウェブベースのJSONエディタを見つけ出して、それをベースにすることが必要でした。</p>
<h2 id="終わりなきウィークエンド">終わりなきウィークエンド</h2>
<p>リサーチをして、Anneに電話しました。
私は彼に、History Pageのプロジェクトにもコミットするが、
Elasticsearchユーザなので、便利なコンソールを開発する時間も欲しいという話をしました。
私たちは、<a href="https://ace.c9.io/">Ace</a>オンラインエディタを利用して、
自動でAPIを認識するナレッジベースを構築し、
コンテキストに沿ったサジェストを大なうようにしました。
Anneはすぐに、それが素晴らしいと同意してくれました。
しかし、彼は、ハッカソンの基本的なルール（週末にそれが終わる必要がある）に違反しているので、
そのアイデアを却下するしかありませんでした。
確かに、私たちが提案していたものは行えませんでした。
最後に、私たちは、ChromeのHistory Pageの素晴らしい置き換えについて実装しました。</p>
<p>それでも、私はチャレンジし、それが終わるであろうことを終わるであろうことを証明しなければなりませんでした。
次の週末（といくつかの終業後 :)）に、私はそれを作りました。
Senseの誕生です。
それは、まだバグだらけでしたが、動きました。
これを見せるとみんな興奮しました。</p>
<h2 id="初期">初期</h2>
<p>Knowledge Baseの拡張とバグのフィックスで数日を過ごしました。
Senseは広まり始め、ずっと古いバグのあるバージョンを利用しないといけないのかと私は恐れました。
SenseをChromeのExtentionとしてリリースすることを決め、リリースすると自動的に更新されるようにしました。
History Panelのような機能を一つづつ追加するようにしました。</p>
<p>Elasticにジョインしてから、会社の人たちがSenseを使用しているということを聞き、とても幸せでした。
特に、<a href="https://twitter.com/clintongormley">Clint</a>と話をしたときのことを覚えています。
彼は、&ldquo;You know what Sense should do? It should use this format and allow you to have multiple requests in the editor&rdquo;
「Senseになにをすべきかわかる？フォーマットを使うべきだし、エディタで複数のリクエストを持つようにするべきだ」
と言いました。
もちろん、その他のチャレンジも行いました。これは、簡単なものではなく、Aceの詳細を知る必要がありました。
それは新しいAceモード（Aceによって利用されているハイライティングロジック）です。
これは、Senseのサジェストエンジンに密に統合されました。</p>
<p>次のものが古いSenseのスクリーンショットです。</p>
<p>画像あり。Figure 1. Sense 0.7
<a href="https://www.elastic.co/blog/sense-2-0-0-beta1">※画像に関しては原文をご覧ください。</a></p>
<p>APIのURLを入力すると、JSONのボディが入力されます。
うまく切り離すことができ、AceのスタンダードJSONモードを使っていました。
しかし、ここで、次のようなフォーマットをどうやってサポートするか考える必要がありました。</p>
<pre><code>GET _cluster/health
POST index/_settings
{
  &quot;index&quot;: { &quot;number_of_replicas&quot;: 3 }
}
</code></pre><p>これは、Aceが3つの異なるものをどうやってパースするかを知る必要があるということです。
HTTPメソッドとURLとJSONボディです。
また、困ったことに、前に説明した前に説明した通り、明らかに別々にはならないものでした。
JSONボディが完全であることを知る唯一の方法はかっこを数えることです。
それは、いくつかの作業とAceのカスタマイズが必要でしたが、それらを切り離すことができました。
そして、Senseのシンタックスが生まれたのです（Thanks Clint!）</p>
<h2 id="marvel時代">Marvel時代</h2>
<p>就業時間中、私の優先すべき仕事は<a href="https://www.elastic.co/products/marvel">Marvel</a>の開発になりました。
これは、Elasticsearchのための管理と監視のためのソリューションです。
（side note: Marvelは生まれ変わっています。（&quot;<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">Shield, Watcher, and Marvel 2.0.0 GA Released</a>&quot;））
Marvelは開発環境ではフリーなので、MarvelにSenseを組み込むことにしました。
これにより、Senseの開発が日中も行えるようになり、多くのユーザに利用され始めました。
また、Senseは実際に真の<a href="https://twitter.com/spenceralger">JavaScript開発者</a>によって開発されました。
彼は、コードをクリーンにし、ブラウザにおける最新の技術を私に教えてくれました。</p>
<p>この期間のSenseは数回書き換えられています。
最も顕著なものは、個別のURLとJSONのサジェストエンジンを書き換えて、
1つのサジェストエンジンにしこれらのコンテキストで動作するようにし、さらに3つ目のコンテキスト（URLパラメータ）を追加したことです。</p>
<p>新しいエンジンはまた、複数のサジェストコンテキストをメンテナンスするのが簡単になりました。
例えば、<code>_search API</code>のソートパラメータを考えます。</p>
<pre><code>GET _search
{
  &quot;sort&quot;: [
     &quot;timestamp&quot;: &quot;desc&quot;,
     &quot;price&quot;: {
        &quot;order&quot;: &quot;desc&quot;.
        &quot;missing&quot;: &quot;last&quot;
     },
     &quot;nested_filter&quot;: { &quot;term&quot;: { ... }},
     &quot;_score&quot;
  ]
}

</code></pre><p>ユーザがどこにいるかによって、Senseは単純な値（<code>_score</code>のような）か、
複雑な構造（<code>order</code>と<code>missing</code>のような）やフィルタ（<code>nested_filter</code>のような）も
サジェストする必要があります。
これらのサジェストのパスが一度に処理され、無関係なものは除外されます。</p>
<h2 id="sense-20の紹介">Sense 2.0の紹介！</h2>
<p>Marvel 1.xはKibana 3.0をベースにしていました。
これは、データの探索やダッシュボードツールとして素晴らしいものでした。
しかし、Kibanaチームはさらに素晴らしいものを出しました。
Kibana 4.xはElasticsearchをバックエンドとするUIアプリを簡単に構築することができる
プラットフォームとして設計されています。
実際に、<a href="https://www.elastic.co/guide/en/marvel/current/index.html">Marvel 2.0</a>はKibanaの
プラットフォームで利用できる最初のアプリです。</p>
<p>Senseの話に戻します。
ElasticsearchのAPIとやりとりする一般的なコンソールです。
これをKibanaのアプリぴったりだと気付きました。
ということで、<a href="https://github.com/elastic/sense/">Sense 2.0</a>をKibanaアプリとしてオープンソースで公開しました。
開発及び本番環境で利用してください。</p>
<p>Figure 2. Screenshot Sense 2.0
<a href="https://www.elastic.co/blog/sense-2-0-0-beta1">※画像に関しては原文をご覧ください。</a></p>
<h2 id="リリースのハイライト">リリースのハイライト</h2>
<p>Sense 2.0の新しい機能をここで簡単に紹介します。
（すべての変更点については<a href="https://www.elastic.co/guide/en/sense/current/release_notes.html#_2_0_0_beta1">こちら</a>をご覧ください。）</p>
<h4 id="elasticsearch-20">Elasticsearch 2.0</h4>
<p>SenseのナレッジベースをElasticsearch 2.0サポートに更新しました。
新しいPipeline aggregationにも対応しています。</p>
<h4 id="複数リクエストの実行">複数リクエストの実行</h4>
<p>テストやいくつかの一連のコマンドを繰り返し実行したい時があるでしょう。
その時に、それら全てをSenseに記述し、
実行したいリクエストを選択状態にしてElasticsearchにリクエストできます。</p>
<p>Figure 3. Submit multiple requests
<a href="https://www.elastic.co/blog/sense-2-0-0-beta1">※画像に関しては原文をご覧ください。</a></p>
<p>Senseは、Elasticsearchにリクエストを一つずつ送信し、それぞれの出力結果を右のパネルに表示します。
これは、問題のデバッグや複数のシナリオでのクエリの組み合わせの実行に非常に便利です。</p>
<h4 id="複数リクエストのコピーペースト">複数リクエストのコピーペースト</h4>
<p>複数リクストを選択し、フォーマットしたり、cURLのコマンドとしてコピーすることも可能です。</p>
<p>Figure 4. Copy multiple requests as cURL
<a href="https://www.elastic.co/blog/sense-2-0-0-beta1">※画像に関しては原文をご覧ください。</a></p>
<pre><code># Delete all data in the `website` index
curl -XDELETE &quot;http://localhost:9200/website&quot;
# Create a document with ID 123
curl -XPUT &quot;http://localhost:9200/website/blog/123&quot; -d'
{
  &quot;title&quot;: &quot;My first blog entry&quot;,
  &quot;text&quot;:  &quot;Just trying this out...&quot;,
  &quot;date&quot;:  &quot;2014/01/01&quot;
}'
</code></pre><p>もちろん、複数のcURLコマンドをコピーしてSenseにペースとすると、Senseはそれらをパースしてくれます。</p>
<h2 id="まとめ">まとめ</h2>
<p>Sense 2.0.0のベータリリースです。
実際に多くの作業が終わった認識です。すぐにGAが出るでしょう。</p>
<p>Sense 2.0を知り、試していただくために、新しい<a href="https://www.elastic.co/guide/en/sense/current/index.html">ドキュメント</a>を参考にしてください。
バグやリクエストがある場合は、<a href="https://discuss.elastic.co/c/ecosystem">フォーラム</a>や<a href="https://github.com/elastic/sense/issues">GitHubのIssue</a>に登録をお願いします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Shield、Watcher、Marvel 2.0.0 GAリリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/10/30/shield-watcher-and-marvel-2-0-ga-released-ja/</link>
      <pubDate>Fri, 30 Oct 2015 16:21:31 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/10/30/shield-watcher-and-marvel-2-0-ga-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Shield, Watcher, and Marvel 2.0.0 GA Released 本日（10/28）Shield、WatcherおよびMarv</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">Shield, Watcher, and Marvel 2.0.0 GA Released</a></p>
<!-- more -->
<p>本日（10/28）Shield、WatcherおよびMarvel 2.0をリリースしました。
これが、<a href="https://www.elastic.co/blog/elasticsearch-2-0-0-released">Elasticsearch 2.0</a>に対応したこれらのプラグインの最初のリリースです。</p>
<p>Elasticsearch 2.0対応のほかに、ShieldとWatcher 2.0は、
セキュリティとアラートを拡張するいくつかの新しい素敵な機能も備えています。</p>
<h2 id="shield">Shield</h2>
<ul>
<li>
<p>拡張可能なレルム - Sheild 1.xはユーザ認証のコア的なものを定義するのにフォーカスし
3つの認証メカニズム（<em>esusers</em>、LDAP/AD、PKI）を提供しました。
これらを提供することで、多くのユーザおよびユースケースをカバー出来ましたが、
追加の認証メカニズムを統合する必要があることもわかっていました。
ということで、Shieldのレルムベースの認証システムをユーザが利用、拡張できるようにオープンにし、
ユーザ認証を扱うためのレルム実装をプラグインとして拡張できるようにしました。
特定もしくはプロプライエタリな認証メカニズムが必要なユーザもShieldの強力な
セキュリティ機能（ロールベースの認証、セキュアな通信など）をフルに活用できるようになりました。
カスタムレルムの詳細については、<a href="https://www.elastic.co/guide/en/shield/current/custom-realms.html">こちら</a>をご覧ください。</p>
</li>
<li>
<p>フィールドとドキュメントのACL - Shield 2.0はフィールドとドキュメントレベルのアクセス制御機能を提供します。
これは、ロールごとにアクセス可能なフィールドやドキュメントを定義できます。
この新しい機能は、設定の変更するよりも便利です。
このアクセス制御はElasticsearchのLuceneインデックスという最も低レベルで実装されています。
その結果として、このメンテナンスがより簡単であるだけでなく、より良くなっています。
詳細については<a href="https://www.elastic.co/guide/en/shield/current/setting-up-field-and-document-level-security.html">こちら</a>をご覧ください。</p>
</li>
<li>
<p>ユーザなりすまし - Shield 2.0で、ユーザなりすましの機能が実装されました。
これは、ユーザ（適切なパーミッションを持った）が、他のユーザになることができ、
それらのユーザのためにリクエストを実行できます。
これは、Elasticsearch上に構築されたアプリケーションがすでにユーザ認証を行いますが、
認可はElasticsearchサイドで行う必要があるような場合に有用です。
このシナリオで、アプリケーションの&quot;main&quot;ユーザを設定でき、正しくなりすましを割り当て、
ElasticsearchにアプリケーションユーザとしてリクエストをElasticsearchに実行させることができます。
詳細については、<a href="https://www.elastic.co/guide/en/shield/current/submitting-requests-for-other-users.html">こちら</a>をご覧ください。</p>
</li>
</ul>
<h2 id="watcher">Watcher</h2>
<ul>
<li>
<p>SlackとHipChatインテグレーション - SlackとHipChatはチーム/グループコラボレーションツールです。
これらは、急速に主流になり、組織の主な内部コミュニケーションハブとなっています。
Watcher 2.0はチャンネル/ルームやユーザにこれらのコミュニケーションチャネル経由で、Watchの通知を行うことができるアクションを
実装しました。
<a href="https://www.elastic.co/guide/en/watcher/current/configuring-slack.html">slack</a>や<a href="https://www.elastic.co/guide/en/watcher/current/configuring-hipchat.html">hipchat</a>アクションについてはドキュメントをご覧ください。</p>
</li>
<li>
<p>Array Compare Condition - 新しいconditionはタイムシリーズのデータのスパイクを検知するのを簡単にします。
<a href="https://www.elastic.co/guide/en/watcher/current/condition.html#condition-compare">compare</a> conditionは1.xで導入されましたが、このコンディションはElasticsearchのダイナミックスクリプト機能を有効にする必要がアンク使えます。
詳細については<a href="https://www.elastic.co/guide/en/watcher/current/condition.html#condition-array-compare">array_compare</a> conditionをご覧ください。</p>
</li>
<li>
<p>Watchの有効・無効化 - ユーザからの多かったリクエストとして、Watchの無効化がありました。
1.xには、登録済みのWatchを無効にする機能がありませんでした。
これは、Watchを消すか、Watchのトリガーを変更することで回避していました。
これは、全体としてはWatchを管理するのを難しくする回避方法でしかありません。
2.0では、APIを呼び出すだけで、Watchの変更をすることなく、簡単にWatchの有効化・無効化が可能になりました。
これは1.0からあるべき基本的な機能でしたが、ついにこの問題を解決しました。
詳細は<a href="https://www.elastic.co/guide/en/watcher/current/watch-active-state.html#watch-active-state">こちら</a>をご覧ください。</p>
</li>
</ul>
<h2 id="marvel">Marvel</h2>
<p>Marvel 2.0を紹介するのに興奮しています。
Kibana 4をベースとした、再設計されたUIを持っています。
Marvel 1.xで学んだ多くのことを導入し、より使いやすく監視しやすいUIになっています。
ShieldとWatcherと同様に、最初のMarvelのリリースは将来的な成長の基盤となり
Elasticsearch2.0を効率的に管理するための主要なメトリックにフォーカスしています。</p>
<p>画像あり。
<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">※画像に関しては原文をご覧ください。</a></p>
<p>再設計により、インタフェースを6ページに減らしています。</p>
<h3 id="cluster-list">Cluster list</h3>
<p>画像あり。
<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">※画像に関しては原文をご覧ください。</a></p>
<p>ユーザやカスタマーの多くは複数のクラスタを利用しています。
新しいMarvelはそれらを集中的にモニタリングする一つのクラスタからそれらを簡単に監視できます。
各クラスタのデータ送信先をこのモニタリングクラスタにするだけです。</p>
<h3 id="cluster-overview">Cluster Overview</h3>
<p>画像あり。
<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">※画像に関しては原文をご覧ください。</a></p>
<p>クラスタオーバービューはある一つのクラスタの主要な性能メトリックを見ることができ、
素早くスパイクを発見できます。
このページはまた、アクティブなシャードのリカバリやリロケーションも見ることができます。</p>
<h3 id="indices-list">Indices List</h3>
<p>画像あり。
<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">※画像に関しては原文をご覧ください。</a></p>
<p>インデックスのリストにはクラスタにあるすべてのインデックスとその属性が表示されます。
テーブルはライブでアップデートされ、フィルタリングやソートも可能です。
一番大きなインデックスは？といったことも調べられます。</p>
<h3 id="index-detail">Index Detail</h3>
<p>画像あり。
<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">※画像に関しては原文をご覧ください。</a></p>
<p>インデックス詳細ページはインデックスの主な性能メトリックを見ることができ、シャードの配置についても表示します。</p>
<h3 id="nodes-list">Nodes List</h3>
<p>画像あり。
<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">※画像に関しては原文をご覧ください。</a></p>
<p>ノードリストはクラスタにあるノードとその主な性能メトリックを見ることができます。
テーブルはライブでアップデートされ、フィルタリングも可能です。
高いCPU利用率やディスクの残り容量なども簡単にわかるようになっています。</p>
<h3 id="node-detail">Node Detail</h3>
<p>画像あり。
<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">※画像に関しては原文をご覧ください。</a></p>
<p>ノード詳細ページは個別のノードに関する主な性能メトリックを見ることができ、ノードにあるシャードのリストも見ることができます。</p>
<p>新しいMarvelはKibana 4の上に構築されたので、管理方法が変わっています。
Marvelのインストールは2つのステップがあります。
marvel-agentとmarvel user interfaceです。</p>
<h2 id="marvel-agent">Marvel Agent</h2>
<p>marvel-agentはElasticsearchクラスタにプラグインとしてインストールします。
主なパフォーマンス情報を取得し、ローカルもしくは分離されたモニタリングクラスタにデータを保存・送信します。</p>
<h2 id="marvel-user-interface">Marvel User Interface</h2>
<p>Marvel UIはKibanaのプラグインとしてインストールします。
これは、Kibana 4.2の新しいプラグインインフラを利用し、
Marvel Appとして、Kibanaのインタフェースとは個別に提供されます。
Kibanaのアプリの切り替えは次の画像の通りです。</p>
<p>画像あり。
<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">※画像に関しては原文をご覧ください。</a></p>
<p>2.0リリースは私たちのプロダクトの大きな一歩です。またユーザの意見を常にお待ちしています。
ぜひ、Webフォーラム（https://discuss.elastic.co）やメール（info@elastic.co）でご意見を。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 2.0.0リリース(日本語訳)</title>
      <link>https://blog.johtani.info/blog/2015/10/29/elasticsearch-2-0-0-released-ja/</link>
      <pubDate>Thu, 29 Oct 2015 16:20:43 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/10/29/elasticsearch-2-0-0-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Elasticsearch 2.0.0 GA released Elasticsearch 1.0.0のリリース以降、 477のコミッター2,79</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="https://www.elastic.co/blog/elasticsearch-2-0-0-released">Elasticsearch 2.0.0 GA released</a></p>
<!-- more -->
<p>Elasticsearch 1.0.0のリリース以降、
477のコミッター2,799のpull requestがあった、
**Elasticsearch 2.0.0 GA（Lucene 5.2.1ベース）**をリリースしました。</p>
<p>それだけでなく、<a href="#shield-watcher">Shield（セキュリティプラグイン）とWatcher（アラーティングプラグイン）</a>、
新しくなった<a href="#marvel">Marvel（モニタリングプラグイン）</a>（プロダクション環境でフリー！）、
また、新しくオープンソースとなった<a href="#sense">Sense editor</a>の2.0.0もリリースしました。</p>
<p><a href="https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0">Elasticsearch 2.0.0</a>のダウンロードはこちらから。
また、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.0/breaking-changes-2.0.html">2.0.0での重要な変更点についてはこちら</a>をご覧ください。
全ての変更点については、次をご覧ください。</p>
<ul>
<li><a href="https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0">Changes list for Elasticsearch 2.0.0</a></li>
<li><a href="https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0-rc1">Changes list for Elasticsearch 2.0.0-rc1</a></li>
<li><a href="https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0-beta2">Changes list for Elasticsearch 2.0.0-beta2</a></li>
<li><a href="https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0-beta1">Changes list for Elasticsearch 2.0.0-beta1</a></li>
</ul>
<p>商用プラグインについてはこちらです。</p>
<ul>
<li><a href="https://www.elastic.co/guide/en/shield/2.0.0/release-notes.html#_2_0_0">Shield 2.0.0 change logs</a></li>
<li><a href="https://www.elastic.co/guide/en/watcher/2.0.0/release-notes.html#_2_0_0">Watcher 2.0.0 change logs</a></li>
</ul>
<h2 id="elasticsearchの新機能">Elasticsearchの新機能</h2>
<p>Elasticsearch 2.0.0には素晴らしい新機能があります。</p>
<h4 id="pipeline-aggregations">Pipeline Aggregations</h4>
<p>Aggregationsで導関数や移動平均のような他のAggregationの結果に対する計算が可能となります。
この機能はクライアントサイドで実装しなければなりませんでしたが、
Elasticsearchに計算させることで、より強力な解析のクエリを簡単に組み立て、クライアントのコードを簡略化できます。
これは、予測解析や予測解析や例外検知といった可能性をもたらします。
Pipeline Aggregationについては次をご覧ください。</p>
<ul>
<li><a href="https://www.elastic.co/blog/out-of-this-world-aggregations">Out of this world aggregations.</a></li>
<li><a href="https://www.elastic.co/blog/staying-in-control-with-moving-averages-part-1">Staying in Control with Moving Averages - Part 1.</a></li>
<li><a href="https://www.elastic.co/blog/staying-in-control-with-moving-averages-part-2">Staying in Control with Moving Averages - Part 2.</a></li>
</ul>
<h4 id="queryfilter-merging">Query/Filter merging</h4>
<p>フィルタはもうありません。
全てのフィルタ条件はクエリとなりました。
クエリコンテキストで使用した場合、関連度のスコアに影響し、フィルタコンテキストで使用した場合、
これまでのフィルタのように、ヒットしなかったドキュメントを除外するだけとなります。
この変更はクエリの実行時に自動的に最も効率的な順序で実行するように最適化されることを意味します。
例えば、遅いクエリ（フレーズやgeo）の最初の実行は速い近似フェーズで実行され、
それから、遅い正確なフェーズで結果を修正します。
フィルタコンテキストでは、直近でよく使われた条件が自動的にキャッシュされます。
詳細については、&quot;<a href="https://www.elastic.co/blog/better-query-execution-coming-elasticsearch-2-0">Better query execution coming to Elasticsearch 2.0</a>&ldquo;をご覧ください。</p>
<h4 id="設定可能な圧縮率">設定可能な圧縮率</h4>
<p><code>_source</code>のようなStored fieldsは高速なLZ4（デフォルト）で圧縮するか、インデックスサイズを小さくできるDEFLATE
で圧縮できます。
これは、特にロギングのケースで便利です。
古いインデックスをオプティマイズする前に<code>best_compression</code>に変更することができます。
詳細については&rdquo;<a href="https://www.elastic.co/blog/store-compression-in-lucene-and-elasticsearch">Store compression in Lucene and Elasticsearch</a>&ldquo;をご覧ください。</p>
<h4 id="堅牢に">堅牢に</h4>
<p>新しいElasticsearchはJava Security Managerの元で実行されます。
これは、セキュリティの観点で大きな前進です。
Seciruty ManagerはElastcsearchにより制限をかけ、ハッカーによりシステムに対して何でもできるようなものを制限します。
Elasticsearchはまた、インデキシングの観点でも堅牢になっています。</p>
<ul>
<li>ドキュメントはインデキシングリクエストに答える前に、耐久性のためにディスクに<code>fsync</code>されます。</li>
<li>すべてのファイルはチェックサムにより、早期に障害を検知します。</li>
<li>すべてのファイルはどんなファイルへの書き込みもアトミックです</li>
</ul>
<p>最後に、システム管理者から要請の多かった変更として、
設定されて居ないノードがパブリックなネットワークから参加しないようになりました。
Elasticsearchは<a href="https://manage.contentstack.io/blog/elasticsearch-unplugged">デフォルトではローカルホストのみにバインド</a>します。マルチキャストは無くなりました。（プラグインとして残っています。）</p>
<h4 id="パフォーマンスと信頼性">パフォーマンスと信頼性</h4>
<p>上記以外にも細かな修正がElasticsearchとLuceneにはあります。
より安定し、信頼性をあげ、簡単に設定できるようにするものです。例えば、次のようなものです。</p>
<ul>
<li>ヒープの使用率の低減（doc valuesがデフォルト、マージ時のメモリ使用率の削減、
roaring bitsetsによるフィルタキャッシュ）</li>
<li>構造化され読みやすくなった例外</li>
<li>設定の代わりに、フィードバックループを使用した自動調整</li>
<li>安全で明確で信頼性のあるタイプマッピングの大きな修正</li>
<li>クラスタ状態の差分変更による伝搬の高速化および、大きなクラスタでのより安定的に</li>
<li>normsの圧縮の改善。これまではヒープスペースを大きく利用していた。</li>
<li>マージの自動的な調整（不可解な設定の微調整が必要ない）</li>
<li>より詳細なLuceneのメモリリポート</li>
<li>最適化されたクエリ実行を活用するためにParent/childを書き換え</li>
</ul>
<h4 id="コアプラグイン">コアプラグイン</h4>
<p>公式にサポートされたコアプラグインはElasticsearchと同じバージョン番号で同じタイミングでリリースされます。
インストールするプラグインとElasticsearchの複雑なバージョンの対応表に悩まされる必要はもうありません。
コアプラグインのインストールは次のように簡略化されています。</p>
<pre><code>bin/plugin install analysis-icu
</code></pre><h2 id="a-nameshield-watchershieldとwatcherの新機能a"><a name="shield-watcher">ShieldとWatcherの新機能</a></h2>
<p>商用プラグインも新しい機能をリリースしました。</p>
<h4 id="shield">Shield</h4>
<ul>
<li>フィールドおよびドキュメントレベルのアクセス制御</li>
<li>ユーザのなりすまし</li>
<li>カスタム拡張可能な認証レルム</li>
</ul>
<h4 id="watcher">Watcher</h4>
<ul>
<li>個別のWatchを有効/無効に</li>
<li>SlackやHipChatへの通知</li>
</ul>
<p>これらの詳細については“<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">Shield, Watcher, and Marvel 2.0.0 GA Released</a>”をご覧ください。</p>
<p>コアプラグイン同様、商用プラグインもElasticsearchのバージョンと同じものが同時にリリースされます。
インストールは次の通りです。</p>
<pre><code>bin/plugin install license
bin/plugin install shield
bin/plugin install watcher
</code></pre><h2 id="a-namemarvelmarvel-200はプロダクションでの利用もフリーにa"><a name="marvel">Marvel 2.0.0はプロダクションでの利用もフリーに</a></h2>
<p>Marvelモニタリングプラグインはカスタマに非常に価値のあるもので、
ユーザの発展とともに問題を診断したり見つけたりするのに役に立ってきました。
私たちは、何を改善でき、Mαrvelを一から書き直すことで、いろいろとわかったことがあります。</p>
<ul>
<li>Marvel UIを新しい<a href="https://www.elastic.co/blog/kibana-4-2-0">Kibanaプラットフォーム</a>上に構築</li>
<li>ダッシュボードにはより簡単に問題を発見するために、最も重要なメトリックを可視化</li>
<li>1つのインストールで、複数のクラスタのモニタリングをサポート（商用サポート対象）</li>
</ul>
<p>一番良い点はMarvelがすべてのElasticsearchユーザに対してプロダクション環境でフリーになったことです！
ライセンスが必要ですが、課金の必要はありません。
もし、マルチクラスタモニタリングサポートが必要な場合、それは商用サポート対象となります。</p>
<p>詳細に関しては“<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">Shield, Watcher, and Marvel 2.0.0 GA Released</a>”をご覧ください。</p>
<h2 id="a-namesensesense-editorがオープンソースにa"><a name="sense">Sense editorがオープンソースに</a></h2>
<p>Sense（ブラウザベースのElasticsearchリクエストとDSL向けのエディタ）を
<a href="https://www.elastic.co/blog/kibana-4-2-0">Kibanaプラットフォーム</a>のアプリとして、オープンソースにしました。
また、このリリースで新しい機能が追加されています。</p>
<ul>
<li>複数のcURLリクエストをペースとすると、Sense表記に変更</li>
<li>複数のSenseリクエストをcURL表記にしてコピー</li>
<li>複数のリクエストを一度に実行可能</li>
<li>Elasticsearch 2.0サポートとなった自動補完機能</li>
</ul>
<p>SenseはKibanaのアプリとして次のようにインストールします。</p>
<pre><code>./bin/kibana plugin --install elastic/sense
</code></pre><p>Senseの詳細については、&quot;<a href="https://www.elastic.co/blog/sense-2-0-0-beta1">The Story of Sense - Announcing Sense 2.0.0-beta1</a>&ldquo;をご覧ください。</p>
<h2 id="elasticsearch-migration-plugin">Elasticsearch Migration Plugin</h2>
<p>Elasticsearch Migration PluginはElasticsearch 1.xから2.0にアップグレードする時の良い出発点となります。
1.xのElasticsearchクラスタにサイトプラグインとしてインストールすると、
アップグレードする前に解決すべき問題があるかどうかを検知してくれます。
（例えば、Lucene 3のような古いインデックスや、2.0.0にした場合に動作しない問題のある
マッピング（<a href="https://www.elastic.co/blog/great-mapping-refactoring">The Great Mapping Refactoring</a>）のような問題）</p>
<p>プラグインに関して<a href="http://github.com/elastic/elasticsearch-migration">Elasticsearch Migration repository</a>をご覧ください。</p>
<h2 id="まとめ">まとめ</h2>
<p>ぜひ、<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0">Elasticsearch 2.0.0</a>をダウンロードして、試してみてください。
そして、感想をTwitter(<a href="https://twitter.com/elastic">@elastic</a>)や<a href="https://discuss.elastic.co/c/elasticsearch">Webフォーラム</a>などで教えて下さい。
また、問題がありましたら、<a href="https://github.com/elastic/elasticsearch/issues">GitHub issues page</a>で報告をお願いします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Release, we have（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/10/29/release-we-have-ja/</link>
      <pubDate>Thu, 29 Oct 2015 14:18:59 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/10/29/release-we-have-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Relase, we have ※画像に関しては原文をご覧ください。 Elasticにとって大きな1日</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="https://www.elastic.co/blog/release-we-have">Relase, we have</a>
※画像に関しては原文をご覧ください。</p>
<!-- more -->
<p>Elasticにとって大きな1日（社内では「release bonanza」と呼んでいる）です。
多くの主要なプロダクトを新たにリリースしました。
そして、本日、それらを一緒に利用する時にそれらを一緒に利用する時にユーザの体験についてまとめてみました。</p>
<p>次の通りです。</p>
<p><a href="https://www.elastic.co/blog/elasticsearch-2-0-0-released">Elasticsearch 2.0</a>リリース。
大きなマイルストーン、チームによる改善、そして、コミュニティからの素晴らしい貢献。
Pipeline Aggsと呼ばれる新しいタイプのaggregations、
クエリとフィルタのコンセプトを統合することにより簡素化されたクエリDSL、
better compressionオプション、
JavaのSecurity Managerを有効にすることによる強化されたセキュリティ、
FSの挙動に関する強化（fsync、checksum、atmicなリネーム）、
パフォーマンス、マッピングの挙動の一貫性などなどです。
また、我々のチームによる改善も含まれているLucene 5ベースにアップグレードしています。</p>
<p><a href="https://www.elastic.co/blog/kibana-4-2-0">Kibana 4.2</a>リリース。
Elasticsearch 2.0対応、ダークテーマ、カスタマイズ可能な地図、多くの改善。
Kibana 4.2の多くに作業については外部プラグインサポートといった、内蔵に関するものでした。
この後の説明に続きます。</p>
<p><a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">Marvel 2.0</a>リリース。
Elasticsearch 2.0対応、合理化されたメトリックス、簡素化されたUI、
多くはKibanaプラグイン（Kibanaプラットフォーム上に構築）としての書き換えです。
このKibana拡張の最初の努力は、Kibanaのプラグインをどうやって書くか、
Kibanaユーザに公式に何をする必要があるかといったものを特定するのに役立ちました。
おっと、忘れるところでした、Marvelを全てのユーザにフリーで使えるようにしました。
マルチクラスタサポートについては有償となります。</p>
<p><a href="https://www.elastic.co/blog/sense-2-0-0-beta1">Sense 2.0</a>リリース。
2つ目のKibanaプラグインがこれです。
SenseをKibanaプラグインとして書き換えました。
Elasticsearch 2.0サポート、複数リクエストの実行、
curlへのコピーなどです。
おっと、忘れるところでした。オープンソースとすることにしました！</p>
<p><a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">Shield + Watcher 2.0</a>リリース。ElasticsearchのためのセキュリティプラグインであるShieldと、アラート管理のためのプラグインであるWatcherにも
多くの結果が入っています。
最も要求のあった機能である、フィールドお呼びドキュメントレベルでのセキュリティについて、Luceneに落とし込んで実装しました。
また、セキュリティの操作についてプラガブルに実装できるように変更しました。
Watcherは監視の無効化、SlackやHipChatへの通知（bot ops向け）が可能です。</p>
<p><a href="https://www.elastic.co/blog/logstash-2-0-0-released">Logstash 2.0</a>リリース。
Elasticsearch 2.0のサポート、クリーンな停止、全面的なパフォーマンス改善、<a href="https://www.elastic.co/products/beats">Beats</a>サポート。</p>
<p>ご覧の通り、すべてのプロダクトに関する大きな結果です。
チーム間およびFoundの開発者との間での密な連携に感謝します。
これらが私たちが公式にElasticsearch / Kibanaをホストしている<a href="https://www.elastic.co/found">Found</a>で
利用可能です。</p>
<p>ひゅう、息切れしました。
チームがしてきたことは、感動的で、謙虚で、刺激的です！
Elasticが会社として、全てのユーザ、コントリビュータがどのように私たちの大きなミッションに対する結果をもたらしたかという素晴らしい良い例です。
ユーザに愛され、楽しまれ、成功に導き、革新させる製品を是非ご利用ください。ありがとうございます。</p>
<p>&ldquo;A Lion, in Africa?&rdquo; - まだまだ終わりではありません。この文言で終わりにしますが、すぐに（本当にすぐに）戻ってきます。;)</p>
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 2.0.0-beta2リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/09/18/elasticsearch-2-0-0-beta2-released-ja/</link>
      <pubDate>Fri, 18 Sep 2015 17:31:41 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/09/18/elasticsearch-2-0-0-beta2-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Elasticsearch 2.0.0-beta2 released 本日（9/17）、Lucene 5.2.1ベースのElas</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="https://www.elastic.co/blog/elasticsearch-2-0-0-beta2-released">Elasticsearch 2.0.0-beta2 released</a></p>
<p>本日（9/17）、<strong>Lucene 5.2.1</strong>ベースの<strong>Elasticsearch 2.0.0-beta2</strong>をリリースしました。
本リリースが2.0.0のRCの前の最後のベータリリースになります。</p>
<p><strong>注意事項</strong>
本リリースはベータリリースであり、テストを目的としたものとなります。
Elasticsearch 2.0.0-beta2はElasticsearch 2.0.0-beta1と互換がありません。
また、Elasticsearch 2.0.0 GAと互換性があるかどうかの保証はありません。</p>
<p><strong>本番環境には利用しないでください。</strong></p>
<!-- more -->
<p><a href="https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0-beta2">Elasticsearch 2.0.0-beta2のダウンロードおよび、すべての変更についてはリンク</a>をごらんください。</p>
<p>2.0.0-beta1をテストし、問題点を報告していただいた皆様、ありがとうございます。
2.0.0-beta1のあとのElasticsearchのコアの部分の修正のほとんどはバグフィックスになりますが、
<a href="https://github.com/elastic/elasticsearch/pull/12893">geo_shapeフィールドの<code>points_only</code>最適化</a>のようなちょっとした改善も含んでいます。</p>
<p>また、本リリースでは、商用プラグインの重要な新機能もあります。
こちらについては<a href="https://www.elastic.co/blog/shield-and-watcher-2.0.0-beta2-released">Shield and Watcher 2.0.0-beta2 released</a>をごらんください。
簡単な紹介は次の通りです。</p>
<h3 id="shieldの新機能">Shieldの新機能</h3>
<h5 id="ドキュメントおよびフィールドレベルのセキュリティ">ドキュメントおよびフィールドレベルのセキュリティ</h5>
<p>Shieldは、クエリを利用したインデックスにあるドキュメントへのアクセスを制御するためのロールを定義できるようになりました。
また、ドキュメントにある特定のフィールドに関するアクセス制限も可能です。
フィルタされたエイリアスのような形ではなく、ドキュメントを検索したり、IDで取得したりする場合にこれらの制限が利用できます。
詳細は<a href="https://www.elastic.co/guide/en/shield/2.0.0-beta2/setting-up-field-and-document-level-security.html">Field- and Document-level Security</a>をごらんください</p>
<h5 id="ユーザなりすまし">ユーザなりすまし</h5>
<p>特定のユーザーに他のユーザーに扮して、彼らのためにリクエストを実行する能力を与えることが、現在できます。
これは、認証がアプリケーションによって実行される場合に便利です。
そして、それは、ユーザの許可レベルを考慮するようにElasticsearchにリクエストします。
詳細は<a href="https://www.elastic.co/guide/en/shield/2.0.0-beta2/submitting-requests-for-other-users.html">Submitting Requests for Other Users</a>をごらんください。</p>
<h5 id="プラガブルな認証レルム">プラガブルな認証レルム</h5>
<p>このリリースで、サードパーティの拡張のための認証レルムのインフラを公開しました。
もし、特定の認証要求があり、Shieldがサポートしていない（が、内部の認証管理システムを使いたいような）場合、
これらの要求に見合う新しい認証レルムを利用するプラグインを作成可能です。
詳細は<a href="https://www.elastic.co/guide/en/shield/2.0.0-beta2/custom-realms.html">Custom Realms</a>をごらんください。</p>
<h3 id="watcherの新機能">Watcherの新機能</h3>
<h5 id="監視の一時">監視の一時</h5>
<p>新しく、<code>active</code> / <code>inactive</code> の状態がwatchに追加されました。
これらは、Watchを中断したり、要求に応じて再開させたりできます。
詳しくは、<a href="https://www.elastic.co/guide/en/watcher/2.0.0-beta2/watch-active-state.html">Active State</a>をごらんください。</p>
<h5 id="チャットのための新しいアクション">チャットのための新しいアクション</h5>
<p><code>slack</code>と<code>hipchat</code>アクションが追加されました。
これは、Watcherが通知を、SlackやHipchatのユーザに直接送ったり、
チームのチャットルームに送ったりすることが出来るようにします。
詳細については、<a href="https://www.elastic.co/guide/en/watcher/2.0.0-beta2/actions.html#actions-slack">Slack action</a>および、<a href="https://www.elastic.co/guide/en/watcher/2.0.0-beta2/actions.html#actions-hipchat">Hipchat action</a>をごらんください。</p>
<h2 id="20に関するこれまでのブログ記事">2.0に関するこれまでのブログ記事</h2>
<p>これまでのリリースについての情報はこれらのブログ記事をごらんください。</p>
<p>* <a href="https://www.elastic.co/blog/elasticsearch-2-0-0-beta1-released">Elasticsearch 2.0.0.beta1 released</a></p>
<ul>
<li><a href="https://www.elastic.co/blog/elasticsearch-2.0.0.beta1-coming-soon">Elasticsearch 2.0.0.beta1 coming soon!</a></li>
<li><a href="https://www.elastic.co/blog/great-mapping-refactoring">The Great Mapping Refactoring</a></li>
<li><a href="https://www.elastic.co/blog/store-compression-in-lucene-and-elasticsearch">Store compression in Lucene and Elasticsearch</a></li>
<li><a href="https://www.elastic.co/blog/better-query-execution-coming-elasticsearch-2-0">Better query execution coming to Elasticsearch 2.0</a></li>
<li><a href="https://www.elastic.co/blog/out-of-this-world-aggregations">Out of this world aggregations</a></li>
<li><a href="https://www.elastic.co/blog/staying-in-control-with-moving-averages-part-1">Staying in Control with Moving Averages - Part 1</a></li>
<li><a href="https://www.elastic.co/blog/staying-in-control-with-moving-averages-part-2">Staying in Control with Moving Averages - Part 2</a></li>
<li><a href="https://www.elastic.co/blog/core-delete-by-query-is-a-plugin">The Delete by Query API Is now a plugin</a></li>
<li><a href="https://www.elastic.co/blog/elasticsearch-unplugged">Elasticsearch unplugged - Networking changes in 2.0</a></li>
</ul>
<p>また、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.0/index.html">Elasticsearch 2.0.0-beta2のドキュメント</a>や<a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.0/breaking-changes-2.0.html">2.0のbreaking changesのリスト</a>もごらんください。</p>
<h2 id="elsticsearch-migration-plugin">Elsticsearch Migration Plugin</h2>
<p>Elasticsearch Migration Pluginは、既存のインデックスをアップグレードする
必要があるか、他に必要な行動がないかについて、Elasticsearch
2.0.0-beta2を試す前に確認する助けとなります。
Lucene 3のような古いインデックスや、2.0.0にした場合に動作しない問題のある
マッピングのような問題を発見できます。</p>
<p>プラグインの動作に関しては[Elasticsearch Migration repository](Elasticsearch Migration repository)をごらんください。</p>
<h2 id="テストしましょう">テストしましょう！</h2>
<p>Elasticsearch 2.0.0 GAをすぐにリリースできるようにより多くのベータテスターをお待ちしています。</p>
<p>ぜひ、<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0-beta2">Elasticsearch 2.0.0-beta2</a>をダウンロードして、試してみてください。
そして、感想をTwitter(<a href="https://twitter.com/elastic">@elastic</a>)や<a href="https://discuss.elastic.co/c/elasticsearch">Webフォーラム</a>などで教えて下さい。
また、問題がありましたら、<a href="https://github.com/elastic/elasticsearch/issues">GitHub issues page</a>で報告をお願いします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch unplugged - 2.0におけるネットワークの変更(日本語訳)</title>
      <link>https://blog.johtani.info/blog/2015/08/28/elasticsearch-unplugged-ja/</link>
      <pubDate>Fri, 28 Aug 2015 12:01:30 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/08/28/elasticsearch-unplugged-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Elasticsearch unplugged - Networking changes in 2.0 Elasticsearchをローカルのマシンで起</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="https://www.elastic.co/blog/elasticsearch-unplugged">Elasticsearch unplugged - Networking changes in 2.0</a></p>
<p>Elasticsearchをローカルのマシンで起動します。
そして、昨日試したデータを削除するために<code>DELETE *</code>を実行します。
すると、悲しそうな叫びを同僚が発していることに気づき、なぜそんなことになっているのか不思議に思うでしょう。。。</p>
<!-- more -->
<p>Elasticsearchはいつも、親しみやすいものでした。
複数ノードのクラスタがどのように機能するのかをテストするには、
ローカルのマシンでいくつかのElasticsearchのインスタンスを起動するだけでした。
起動したインスタンスはマルチキャストを利用して自動的にお互いを見つけて、1つのクラスタになり、負荷を共有し始めます。
しかし、これは親しみやすすぎました。
カンファレンスなどで、ローカルのマシンでElasticsearchを起動してみてください。
すると100ノードのクラスタに参加しているのがすぐにわかるでしょう。</p>
<p>もうすぐリリースされる、2.0.0-beta1では、Elasticsearchが通信先を選択するネットワークの機能に関する変更があります。
ただし、これまで通り、簡単に開発者が経験できる機能も残っています。</p>
<h2 id="localhostへのバインド">localhostへのバインド</h2>
<p>以前、Elasticsearchはデフォルトで、利用可能なネットワークインタフェース全てにバインドしていました。
そこから、一番適したインタフェースを<code>publish_host</code>として選択しようとします。
このアドレスはElasticsearchがクラスタの他のノードとやりとりするためのアドレスです。</p>
<p>Elasticsearch 2.0では、デフォルトでは、<code>localhost</code>にのみバインドします。
<code>127.0.0.1</code>（IPv4）と<code>[::1]</code>（IPv6）の両方にバインドしようとします。
また、どちらかのみの環境でも動作します。
この変更は、特に指定がない限り、Elasticsearchがネットワーク上の他のノードと接続しません。
本番環境に移行する場合は、<code>network.host</code>パラメータを使って設定しましょう。
設定は、<code>elasticsearch.yml</code>に記述するか、コマンドラインで指定します。</p>
<pre><code>bin/elasticsearch --network.host 192.168.1.5
bin/elasticsearch --network.host _non_loopback_
</code></pre><p><code>network.host</code>の全てのオプションについては、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.0/modules-network.html">network settingsのドキュメント</a>をごらんください。</p>
<h2 id="マルチキャストは廃止">マルチキャストは廃止</h2>
<p>Elasticsearch 1.xはネットワークの他のノードに接続・探索するためにマルチキャストを使用しました。
マルチキャストは魔法のような挙動です。。。
残念ながら、マルチキャストのサポートは良くも悪くもあります。
Linuxはローカルホストでマルチキャストの待ち受けをしていません。
OS/Xは構成されたアドレスの全てのインタフェースにマルチキャストで配信できます。
また、ネットワークによってはマルチキャストはデフォルトでは使用できなくなっています。</p>
<p>Elasticsearch 2.0は異なるアプローチを採用しました。
マルチキャストを廃止します（ただし、新たにプラグインとして提供します）。
代わりに、ローカルホストでは、Elasticsearchは<code>transport.tcp.port</code>で指定されている範囲（デフォルトは<code>9300-9400</code>）の最初の5ポートに対してユニキャストを使用できるようにします。</p>
<p>これは、開発者のための、設定することなく自動的にクラスタを組むという機能を残しています。
しかし、本番に移行するときは、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.0/modules-discovery-zen.html#unicast">unicast hosts</a>で次のようにリストを指定する必要があります。</p>
<pre><code>discovery.zen.ping.unicast.hosts: [ 192.168.1.2,  192.168.1.3 ]
</code></pre><p>unicast hostsとしてクラスタにあるノードの全てのリストを指定する必要はありません。
少なくとも、マスタノードとして選出されるべきものを指定します。
巨大なクラスタでは、3つの専用のマスタノードを持っており、この3つをunicast hostsとして設定することを推奨しています。</p>
<p>これにより、開発の知識・経験が、私たちの推奨する本番でのネットワーク設定に、より近いものとなります。</p>
<h2 id="ノード情報の変更">ノード情報の変更</h2>
<p>最後に、<code>inet[/127.0.0.1:9200]</code>といったシンタックスを廃止します。
これは、Elasticsearchが<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-nodes-info.html">nodes-info API</a>などで、使用していたIPアドレスのためのシンタックスです。
今は、RFCに準拠した形で表示します。
<code>127.0.0.1:9200</code>（IPv4）や<code>[::1]:9200</code>（IPv6）のようにです。</p>
<p>質問がある場合は、<a href="https://discuss.elastic.co/c/elasticsearch">ElasticsearchのWebフォーラム</a>で質問してください。ベータはもうすぐです！（翻訳した時点で、すでにベータリリースされています。）</p>
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 2.0.0-beta1リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/08/27/elasticsearch-2-0-0-beta1-released-ja/</link>
      <pubDate>Thu, 27 Aug 2015 10:29:12 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/08/27/elasticsearch-2-0-0-beta1-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Elasticsearch 2.0.0-beta1 released 本日（8/26）、Lucene 5.2.1ベースのElas</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="https://www.elastic.co/blog/elasticsearch-2-0-0-beta1-released">Elasticsearch 2.0.0-beta1 released</a></p>
<p>本日（8/26）、<strong>Lucene 5.2.1</strong>ベースの<strong>Elasticsearch 2.0.0-beta1</strong>をリリースしました。
本リリースは469名のコミッターからの2,500以上ものpull requestを含んでいます。
pull requestのうち、約850が2.0のための新規のものとなります。</p>
<p><strong>注意事項</strong>
本リリースはベータリリースであり、テストを目的としたものとなります。
Elasticsearch 2.0.0-beta1は Elasticsearch 2.0.0 GAと互換性があるかどうかの保証はありません。</p>
<p><strong>本番環境には利用しないでください。</strong></p>
<!-- more -->
<p><a href="https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0-beta1">Elasticsearch 2.0.0-beta1のダウンロードおよび、すべての変更についてはリンク</a>をごらんください。</p>
<p>Elasticsearch 2.0.0-beta1には次の新しい変更が含まれています。</p>
<ul>
<li>Pipeline Aggregations：これは、他のaggregationsの結果に対するAggregationを実行できます（導関数、移動平均、Holt Winter予測アルゴリズムなども含む）</li>
<li>ディスクやファイルシステムキャッシュにより適したより良いデータの圧縮</li>
<li>doc-valuesがデフォルトになったこと、マージ実行時のメモリ使用量の低減、フィルターキャッシュのためのroaring bitsetsなどにより、ヒープの使用率がより効率的に。</li>
<li>構造化された例外</li>
<li>最適化されたクエリ実行順序、フィルタの自動キャッシュ、より高速なクエリに書き換えられたparent-child</li>
<li>設定の代わりに、フィードバックループを使用した自動調整</li>
<li>トランザクションログへの書き込みがデフォルトで、アトミックでかつ冗長に</li>
<li>安全で明確で信頼性のあるタイプマッピング</li>
<li>デフォルトでローカルホストでのみクラスタを構成</li>
<li>クラスタ状態の差分によりより高速に変更を伝搬</li>
</ul>
<p>上記の変更以外にも、多くのElasticsearchおよびLuceneに対する継続的な変更が含まれています。
これらは、Elasticsearch 2.0をより安全に、より簡単に、より良いものにしています。
本リリースに関するより詳しい情報が次のブログにあるので、参考にしてください。</p>
<ul>
<li><a href="https://www.elastic.co/blog/elasticsearch-2.0.0.beta1-coming-soon">Elasticsearch 2.0.0.beta1 coming soon!</a></li>
<li><a href="https://www.elastic.co/blog/great-mapping-refactoring">The Great Mapping Refactoring</a></li>
<li><a href="https://www.elastic.co/blog/store-compression-in-lucene-and-elasticsearch">Store compression in Lucene and Elasticsearch</a></li>
<li><a href="https://www.elastic.co/blog/better-query-execution-coming-elasticsearch-2-0">Better query execution coming to Elasticsearch 2.0</a></li>
<li><a href="https://www.elastic.co/blog/out-of-this-world-aggregations">Out of this world aggregations</a></li>
<li><a href="https://www.elastic.co/blog/staying-in-control-with-moving-averages-part-1">Staying in Control with Moving Averages - Part 1</a></li>
<li><a href="https://www.elastic.co/blog/staying-in-control-with-moving-averages-part-2">Staying in Control with Moving Averages - Part 2</a></li>
<li><a href="https://www.elastic.co/blog/core-delete-by-query-is-a-plugin">The Delete by Query API Is now a plugin</a></li>
<li><a href="https://www.elastic.co/blog/elasticsearch-unplugged">Elasticsearch unplugged - Networking changes in 2.0</a></li>
</ul>
<p>また、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.0/index.html">Elasticsearch 2.0.0-beta1のドキュメント</a>も参考になります。
特に、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.0/breaking-changes-2.0.html">2.0での重大な変更点について</a>は必ずごらんください。</p>
<h2 id="core-plugins">Core plugins</h2>
<p>コアプラグインの開発の方法を変更しました。
公式にサポートしているプラグインは、現在<a href="https://github.com/elastic/elasticsearch/tree/master/plugins">elasticsearchのリポジトリ</a>に含まれています。
これにより、コアと一緒にテストされ、Elasticsearchと同じタイミングでリリースされます。
コアプラグインはElasticsearchと同じバージョン番号隣ます。
インストールは次のようになります。</p>
<pre><code>sudo bin/plugin install analysis-icu
</code></pre><p><a href="https://www.elastic.co/guide/en/elasticsearch/plugins/2.0/index.html">プラグインの新しいドキュメント</a>は私たちのWebサイトの<a href="https://www.elastic.co/guide/index.html">Guide</a>にあります。</p>
<h2 id="commercial-plugins">Commercial plugins</h2>
<p>私たちの商用プラグインもElasticsearchと同じバージョン番号となり、Elasticsearchと一緒にリリースされます。
ShieldやWatcherはすでに2.0.0-beta1が利用可能です。
インストールのコマンドはは次のようになります。</p>
<pre><code>sudo bin/plugin install license
sudo bin/plugin install shield
sudo bin/plugin install watcher
</code></pre><p>MarvelおよびSenseに関する新しい情報もありますが、もう少しお待ちください。</p>
<p>2.0.0-beta1の商用プラグインに関するドキュメントは次のリンクからごらんください。</p>
<ul>
<li><a href="https://www.elastic.co/guide/en/shield/2.0.0-beta1/index.html">Shield 2.0.0-beta1</a></li>
<li><a href="https://www.elastic.co/guide/en/watcher/2.0.0-beta1/index.html">Watcher 2.0.0-beta1</a></li>
</ul>
<h2 id="elasticsearch-migration-plugin">Elasticsearch Migration plugin</h2>
<p>Elasticsearch 2.0.0-beta1を試す前に、
既存のインデックスのアップグレードするためになにか行う必要があるかどうかを確認するためのElasticsearch Migration Pluginもリリースしました。
2.0.0では機能しない、問題のあるマッピングなどを見つけるために便利なプラグインです。</p>
<p>このプラグインの利用方法については<a href="http://github.com/elastic/elasticsearch-migration">Elasticsearch Migration repository</a>をごらんください。</p>
<h2 id="既知の問題">既知の問題</h2>
<p>同じインデックスの異なるタイプに、同じ名前の<code>ip</code>タイプのフィールドを追加した時に、問題があることがわかっています。
この問題は次のリリースでフィックスされます。詳細は<a href="https://github.com/elastic/elasticsearch/issues/13112">#13112</a>をごらんください。</p>
<h2 id="テストしましょう">テストしましょう！</h2>
<p>Elasticsearch 2.0.0 GAをすぐにリリースできるようにより多くのベータテスターをお待ちしています。</p>
<p>ぜひ、<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0-beta1">Elasticsearch 2.0.0-beta1</a>をダウンロードして、試してみてください。
そして、感想をTwitter(<a href="https://twitter.com/elastic">@elastic</a>)や<a href="https://discuss.elastic.co/c/elasticsearch">Webフォーラム</a>などで教えて下さい。
また、問題がありましたら、<a href="https://github.com/elastic/elasticsearch/issues">GitHub issues page</a>で報告をお願いします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Delete by Query APIはプラグインへ（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/08/20/core-delete-by-query-is-a-plugin-ja/</link>
      <pubDate>Thu, 20 Aug 2015 13:24:04 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/08/20/core-delete-by-query-is-a-plugin-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：The Delete by Query API Is now a plugin Elasticsearchの2.0.0-beta1では、これまで</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="https://www.elastic.co/blog/core-delete-by-query-is-a-plugin">The Delete by Query API Is now a plugin</a></p>
<p>Elasticsearchの2.0.0-beta1では、これまであった <a href="https://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-delete-by-query.html">Delete by Query API</a>が<a href="https://github.com/elastic/elasticsearch/pull/10859">削除</a>され、
新しく <a href="https://www.elastic.co/guide/en/elasticsearch/plugins/2.0/plugins-delete-by-query.html">Delete by Query plugin</a>に<a href="https://github.com/elastic/elasticsearch/pull/11516">置き換え</a>られています。</p>
<!-- more -->
<p>もし、Delete by Query を利用する場合、2.0にアップグレードしたあとは、プラグインをインストールし、ドキュメントに従ってください。</p>
<pre><code>bin/plugin install delete-by-query
</code></pre><h2 id="なぜプラグインに">なぜプラグインに？</h2>
<p>ElasticsearchのコアなAPIの品質を保つためであり、以前のDelete by Queryの実装は簡単にはフィックスできない大きな問題がありました。</p>
<ul>
<li>各リクエストのあとに、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-refresh.html">refresh</a>を実行します。これは、<a href="https://github.com/elastic/elasticsearch/issues/3593">削除されたデータが想定外に検索に出てこないようにするため</a>です。<br>
また、<a href="https://github.com/elastic/elasticsearch/issues/6025">セグメントが大量にでき、マージが大量に発生し、ヒープが大量に消費されてインデキシングが劇的にスローダウンし</a>、クラスタの複数のノードがクラッシュしてしまう状況も引き起こしました。</li>
<li>このクエリは、プライマリ、レプリカの両方で実行されるため、ことなるドキュメントを削除し、矛盾したレプリカ（データの破損）を引き起こしました。</li>
<li>アップグレードが不安定になります。これは、Delete by Queryリクエストがトランザクションログの中にクエリとして残るためです。そのため、アップグレードのあとに正確にパースされなかったり正確に実行されないかもしれません。例えば、インデックスエイリアスに対するリクエストで、それが削除された後の場合に<a href="https://github.com/elastic/elasticsearch/issues/10262">このようなバグ</a>が発生します。</li>
</ul>
<p>対照的に、<a href="https://www.elastic.co/guide/en/elasticsearch/plugins/2.0/plugins-delete-by-query.html">新しいプラグイン</a>は、安全な実装です。
<a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/scan-scroll.html">scanとscrollリクエスト</a>でクエリにマッチしたIDを見つけ、そのIDを使って、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html">bulk indexing API</a>で削除します。</p>
<p>この実装は、遅い必要があります。特に、クエリが多くのドキュメントを削除する場合です。
もし、多くのドキュメントをこのAPIを利用して削除する場合、アプリケーションをテストしてください。
そして、<a href="https://www.elastic.co/blog/lucenes-handling-of-deleted-documents">代わりにインデックス全体を消す</a>ようなアプローチに切り替えることができないか検討してください。</p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/plugins/2.0/delete-by-query-plugin-reason.html">Delete by Query pluginのドキュメント</a>に、新しい実装についての違いなどのより詳しい説明があります。</p>
<h2 id="elasticsearch-coreを最小限に">Elasticsearch coreを最小限に</h2>
<p>プラグインに切り替えることは、簡単な決断ではありませんでした。
多くのユーザは問題なく、Delete by Queryを利用していました。
しかし、危険が常にそこにあり、些細とは言い切れない数のユーザが上記のような深刻な問題に遭遇していました。</p>
<p>さらに、Elsticsearchのコアは信頼できるものでなければなりません。
他のコアAPIを利用して実装できる機能は、コアに含みません。特に、それがバグを含んでいる場合。
コアのすべての機能は強固であるべきで、Delete by Queryは人気があり、高性能ですが、そうではありませんでした。</p>
<p>必要に応じて、このような難しいトレードオフの末、信頼性と品質を選びます。</p>
<h2 id="マッピングの削除の廃止">マッピングの削除の廃止</h2>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-delete-mapping.html">タイプのマッピングを削除する機能</a>も2.0で<a href="https://github.com/elastic/elasticsearch/issues/8877">廃止</a>されます。
これは、同じフィールド名を、異なるフィールドのタイプで再利用した場合に、インデックスの破損を引き起こす可能性があるためです。</p>
<p>しかし、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-all-query.html">Match All Query</a>で、Delete by Queryプラグインに対してタイプを指定することで、タイプのすべてのドキュメントを削除することはできます。
または、1つのインデックスに異なるタイプを複数含める代わりに、個別のインデックスに分割するようなアプローチに変更することを検討してください。</p>
</content:encoded>
    </item>
    
    <item>
      <title>第11回Elasticsearch勉強会を開催しました。#elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2015/07/31/11th-elasticsearch-jp/</link>
      <pubDate>Fri, 31 Jul 2015 14:41:53 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/07/31/11th-elasticsearch-jp/</guid>
      <description>第11回Elasticsearch勉強会を開催しました。 スタッフの皆さん、スピーカーの皆さん、会場提供していただいたリクルートテクノロジーズ</description>
      <content:encoded><p><a href="https://elasticsearch.doorkeeper.jp/events/28321">第11回Elasticsearch勉強会</a>を開催しました。
スタッフの皆さん、スピーカーの皆さん、会場提供していただいた<a href="http://recruit-tech.co.jp">リクルートテクノロジーズさん</a>、そして、Shayありがとうございました！
次回もよろしくお願いします！参加していただき盛り上げていただいた参加者の皆さんもありがとうございました。</p>
<p>今回は、CTOのShayが来日していたので、英語でいろいろと喋ってもらいました。
4月同様、<a href="http://samuraism.com">サムライズム</a>の<a href="https://twitter.com/yusuke">@yusuke</a>さんに
テキスト翻訳していただき、大変助かりました。
今回はQAベースのトークだったのでちょっときつかったですね、申し訳ない。。。</p>
<!-- more -->
<h3 id="チェックイン数など">チェックイン数など</h3>
<ul>
<li>チェックインした人：141名</li>
<li>キャンセルしなかった人：51名</li>
</ul>
<p>でした。
今回はあらかじめ220名（全員が来たらキャパオーバー）としていたので、キャンセル待ちの人は
当日の午後にはいなくなっていた状態です。まぁ、こんなもんかな。結構入りましたね。ありがたいです。</p>
<h2 id="lt">LT</h2>
<p>今回は、少し趣向を変えて、4社の方達にLTをしていただきました。
Shayが来日しているのもあり、事前に英語でスライドを作っていただけると助かりますとお願いさせていただきました。
英語でスライドを作っていただいていたので、伝わりやすくて助かりました、スピーカーの方々ありがとうございました！<br>
（海外のユーザにもリンクを紹介しやすいので、英語でスライド作ってもらえるといろいろと知ってもらえるのかも。）</p>
<h3 id="elasticsearch-and-recruit-technologies-co-ltd--株式会社リクルートテクノロジーズ守谷-純之介さん">Elasticsearch and Recruit Technologies Co., Ltd. / 株式会社リクルートテクノロジーズ　守谷 純之介さん</h3>
<p>スライド：未定</p>
<p>N-Gramと形態素のハイブリッドの話などをしていただきました。
@ITで連載もされてますね。ありがとうございます。</p>
<ul>
<li><a href="http://www.atmarkit.co.jp/ait/articles/1507/08/news009.html">リクルート全社検索基盤のアーキテクチャ、採用技術、開発体制はどうなっているのか (1/2)</a></li>
<li><a href="http://www.atmarkit.co.jp/ait/articles/1507/29/news010.html">ElasticsearchとKuromojiを使った形態素解析とN-Gramによる検索の適合率と再現率の向上 (1/3)</a></li>
</ul>
<p>Shayからは、<a href="https://www.elastic.co/products/hadoop">elasticsearch-hadoop</a>があるから検討してねと質問（お願い？）がありましたw。</p>
<h3 id="elasticsearch-as-a-dmp--株式会社インティメートマージャー松田和樹さんmats116">Elasticsearch as a DMP / 株式会社インティメート・マージャー　松田和樹さん　@mats116</h3>
<p>スライド：<a href="http://www.slideshare.net/im_docs/elasticsearch-as-a-dmp">Elasticsearch as a DMP</a></p>
<p>いくつかのデータソースからAEROSPIKE経由でelasticsearchにデータを登録しているようです。
Data Management Platformのエンジンの一部として、elasticsearchを利用しているようです。</p>
<p>Shayからの質問：「どの機能を使って関心のある単語を抽出していますか？」<br>
回答：「<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-significantterms-aggregation.html">Significant Term Aggregation</a>」です。<br>
Shay：「おぉ、チェックしてみますw」。</p>
<h3 id="real-time-social-big-data-analytics-using-elasticsearch--株式会社ホットリンク宮田洋毅さんkakka_jp">Real-time social big data analytics using elasticsearch / 株式会社ホットリンク宮田洋毅さん　@kakka_jp</h3>
<p>スライド：未定</p>
<p>ソーシャルメディアのデータを解析するのにelasticsearchにデータを入れて解析。
時間軸での解析やテキストマイニングなんかをしているみたいでした。
いろいろと独自のプラグインを作ってるようです。（興味あるなぁ）</p>
<p>Shayからの質問：「ノード数は？」「30ノードで30シャード」</p>
<h3 id="elasticsearch-in-hatena-bookmark--株式会社はてなidskozawa">Elasticsearch in Hatena Bookmark / 株式会社はてな　id:skozawa</h3>
<p>スライド：<a href="http://www.slideshare.net/shunsukekozawa5/elasticsearch-in-hatena-bookmark">Elasticsearch in Hatena Bookmark</a></p>
<ul>
<li>はてなブックマークの検索の歴史（MySQL -&gt; Sedue -&gt; Solr -&gt; Elasticsearch）</li>
<li>はてなブックマークの検索（ユーザが利用）と社内利用と、ログ解析で利用してる</li>
</ul>
<p>Shayからの質問：「昨年会いましたよね？今はクラスタのサイズはどのくらいのサイズですか？」「メインクラスタは9データノード」</p>
<h2 id="open-qa-with-shay">Open QA with Shay</h2>
<p>思い出せるものだけ。。。（あとで追記します）</p>
<ul>
<li>Elasticsearch 2.0の話
<ul>
<li><a href="https://www.elastic.co/blog/out-of-this-world-aggregations">Pipeline Aggregation</a>とか。</li>
</ul>
</li>
<li>Spark Streaming対応してる？
<ul>
<li>まだ検討中</li>
</ul>
</li>
<li>elasticsearch-hadoopってどんなもの？HDFSにインデックス作ったりするの？
<ul>
<li>いえ、Hadoopの入出力先としてelasticsearchが使える感じ</li>
</ul>
</li>
<li>個人的にAWSのCloudSearchとAWSでElasticsearchはどっちがいい？
<ul>
<li>時系列データはCloudSearchだと難しいだろうし、AWS上なら<a href="http://found.no">found.no</a>があるよ！</li>
</ul>
</li>
<li>PostgreSQLみたいに信頼性の高いデータストアを目指してる（まだ、プライマリデータストアには使わないで）</li>
</ul>
<h2 id="その他感想などのブログ">その他、感想などのブログ</h2>
<ul>
<li><a href="http://tech.im-dmp.net/archives/4941">Elasticsearch勉強会でLTしてきました | Intimate Merger Engineer Blog </a></li>
<li><a href="http://togetter.com/li/853331">『第11回elasticsearch勉強会』のまとめ #elasticsearchjp</a>
* <a href="http://suzuki.tdiary.net/20150728.html#p01">[Elasticsearch] 第11回 Elasticsearch 勉強会へ参加してきた - 雑文発散(2015-07-28)</a></li>
<li><a href="http://kakakakakku.hatenablog.com/entry/2015/07/27/224203">第11回 Elasticsearch 勉強会に参加したら英語力に危機感を覚えて最高だった</a></li>
</ul>
<h3 id="まとめ">まとめ</h3>
<p>今回はShayが来日したので特別バージョンでした。
もっと英語を翻訳するサポートしないとですね、反省してます。。。ぜんぜん流暢じゃないしw</p>
<p>次回は9月に開催予定ですが、12月にまたShayが再度来日する予定です。
丸1日のイベントを検討中で、Shay以外にも開発者が来日すると思います。
どんな話が聞きたい、どんな人と話をしたいなどあれば、コメントいただければ（対応できるかは。。。）</p>
<p>勉強会のスピーカーは随時募集中ですので、コメント、メール、ツイートなど、コンタクトしていただければと思います。 よろしくお願いいたします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 1.7.1 および 1.6.2リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/07/29/elasticsearch-1-7-1-and-1-6-2-released-ja/</link>
      <pubDate>Wed, 29 Jul 2015 21:35:53 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/07/29/elasticsearch-1-7-1-and-1-6-2-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Elasticsearch 1.7.1 and 1.6.2 released 本日（7/29）、Lucene 4.10.4ベースのE</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="https://www.elastic.co/blog/elasticsearch-1-7-1-and-1-6-2-released">Elasticsearch 1.7.1 and 1.6.2 released</a></p>
<p>本日（7/29）、<strong>Lucene 4.10.4</strong>ベースの<strong>Elasticsearch 1.7.1</strong>および<strong>Elasticsearch 1.6.2</strong> のバグフィックス版をリリースしました。
これらのリリースは稀ですが、データの欠損が発生する重要なバグのフィックスを含んでいます。
<strong>すべてのユーザにアップグレードを推奨します。</strong></p>
<p>ダウンロードおよびすべての変更については次のリンクをごらんください。</p>
<ul>
<li>最新安定版：<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-7-1">Elasticsearch 1.7.1</a></li>
<li>1.6系バグフィックス：<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-6-2">Elasticsearch 1.6.2</a></li>
</ul>
<!-- more -->
<p>問題のバグ(<a href="https://github.com/elastic/elasticsearch/pull/12487">#12487</a>)は、
同時に複数のノードが故障またはリスタートをした場合の非常にまれな状況で、
シャードのすべてのコピーがクラスタから削除されてしまう状況を発生させます。
このバグは1.5.0から含まれています。</p>
<p>このリリースはまた、IPv4アドレスのCIDRマスクのバグのフィックス、
Shieldユーザがmore-like-this APIを利用できないバグのフィックスなど、
いくつかの変更も含んでいます（詳細は<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-7-1">更新リスト</a>をごらんください）。</p>
<p>ぜひ、<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-7-1">Elasticsearch 1.7.1</a>をダウンロードして、試してみてください。
そして、感想をTwitter(<a href="https://twitter.com/elastic">@elastic</a>)などで教えて下さい。
また、問題がありましたら、<a href="https://github.com/elastic/elasticsearch/issues">GitHub issues page</a>で報告をお願いします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 1.7.0 および 1.6.1リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/07/22/elasticsearch-1-7-0-and-1-6-1-released-ja/</link>
      <pubDate>Wed, 22 Jul 2015 15:33:37 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/07/22/elasticsearch-1-7-0-and-1-6-1-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Elasticsearch 1.7.0 and 1.6.1 released 本日（7/16）、Lucene 4.10.4ベースのE</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="https://www.elastic.co/blog/elasticsearch-1-7-0-and-1-6-1-released">Elasticsearch 1.7.0 and 1.6.1 released</a></p>
<p>本日（7/16）、<strong>Lucene 4.10.4</strong>ベースの<strong>Elasticsearch 1.7.0</strong>および<strong>Elasticsearch 1.6.1</strong> のバグフィックス版をリリースしました。
これらのリリースはセキュリティフィックスを含んでおり、<strong>すべてのユーザにアップグレードを推奨します。</strong></p>
<p>ダウンロードおよびすべての変更については次のリンクをごらんください。</p>
<ul>
<li>最新安定版：<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-7-0">Elasticsearch 1.7.0</a></li>
<li>1.6系バグフィックス：<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-6-1">Elasticsearch 1.6.1</a></li>
</ul>
<!-- more -->
<p>1.7.0が1.x系の最後のリリースとなります。
今後の新機能については、Elasticsearch 2.0以降で取り込まれる予定です。</p>
<p>Elasticsearch 1.7.0は小さなリリースですが、2つの重要なセキュリティフィックスと
クラスタの安定化とリカバリに関する2つの重要な機能を含んでいます。</p>
<ul>
<li><a href="#security">セキュリティフィックス</a></li>
<li><a href="#delayed">シャードアロケーションを遅らせる</a></li>
<li><a href="#prioritization">インデックスリカバリの優先度</a></li>
</ul>
<h2 id="a-namesecurityセキュリティフィックスa"><a name="security">セキュリティフィックス</a></h2>
<p>Elasticsearch 1.6.1 と 1.7.0 は次の2つのセキュリティフィックスを含んでいます。</p>
<h3 id="リモートコード実行の脆弱性">リモートコード実行の脆弱性</h3>
<p>Elasticsearch 1.6.1より前のバージョンには、transport protocol（ノードとJavaクライアント間での通信に利用）により、
リモートでコードが実行される脆弱性があります。
これは、<a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3253">CVE-2015-3253</a>でのGroovyに関係しています。</p>
<p>Groovyのダイナミックスクリプティングがオフでも脆弱性があります。
アップグレードをしないユーザは、transport protocol のポート（デフォルトで9300）信頼したエージェントからのみの
アクセスに限定することで、脆弱性から保護できます。</p>
<p>この問題を<a href="https://www.elastic.co/community/security">CVE-2015-5377</a>としました。</p>
<h3 id="ディレクトリ探索の脆弱性">ディレクトリ探索の脆弱性</h3>
<p>Elasticsearch 1.0.0から1.6.0までのバージョンで、ElasticsearchのJVMプロセスによって読み込みが可能なファイルを
取得することができるディレクトリ探索攻撃の脆弱性があります。
アップグレードをしないユーザは、信頼できない場所からの<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html">Snapshot-Restore API</a>の呼び出しを防ぐためにファイアウォール、リバースプロキシやShieldを使用することができます。</p>
<p>この問題を<a href="https://www.elastic.co/community/security">CVE-2015-5531</a>としました。</p>
<h2 id="a-namedelayedシャードアロケーションを遅らせるa"><a name="delayed">シャードアロケーションを遅らせる</a></h2>
<p>Elasticsearch 1.6.0で<a href="https://www.elastic.co/blog/elasticsearch-1-6-0-released#synced-flush">Synced Flushing</a>が導入されました。
これは、ノードのリスタート時に、更新が止まっているシャードのリカバリを劇的にスピードアップします。
しかし、この変更は、シャードの配置を無効にしている環境でのみうまく実行されます。
ノードが一時的にクラスタから外れている場合や予期せぬリブートの場合には役に立ちません。</p>
<p>このシナリオとは次のようなものです。</p>
<ul>
<li>ノードの想定外のシャットダウン</li>
<li>マスタがたのノードにシャードを再配置</li>
<li>各シャードが新しい場所にネットワーク越しにコピー</li>
<li>その間に、外れていたノードが再度クラスタにジョイン</li>
<li>マスタは新しいノードにシャードを再配置。新しいノードに存在する既存のシャードが全く再利用されない可能性がある</li>
</ul>
<p>ノードレベルとクラスタレベルの両方の並列的なリカバリを抑制しても、
この&quot;シャードシャッフル&quot;がクラスタに対して負荷をかける可能性があります。
これは、外れたノードが再度ジョインするのを単に待つことにより防げるかもしれません。</p>
<h3 id="待ちましょう">待ちましょう！</h3>
<p>Elasticsearch 1.7.0は<a href="https://www.elastic.co/guide/en/elasticsearch/reference/1.7/delayed-allocation.html"><code>index.unassigned.node_left.delayed_timeout</code></a>設定を追加しました。デフォルトでは1分です。
これは、ノードがクラスタから外れたとき、ほかのノードにこれらのノードを再配置するまでマスタが1分待つということです。
ノードがこの1分の間に復帰した場合、マスタはローカルにあるシャードを再度配置します。</p>
<h3 id="なぜ1分">なぜ1分？</h3>
<p>ノードがシャットダウンし、リスタートし、復帰するために十分な時間が1分だからです。
しかし、ノードが復帰しない場合にはまだ再配置が発生することを意味します。
デフォルト値を決定するのは難しいです。
この設定をどのくらいに減らすか、増やすかを決める必要があるかもしれません。</p>
<p>このデフォルト値は、<code>config/elasticsearch.yml</code>ファイルに設定できますが、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-update-settings.html">インデックス設定の更新API</a>を使って設定することも可能です。</p>
<p>このデフォルトに関する知見をぜひフィードバックしてください。</p>
<h2 id="a-nameprioritizationインデックスリカバリの優先度a"><a name="prioritization">インデックスリカバリの優先度</a></h2>
<p>1.7.0の2つ目の重要な機構はフルクラスタリスタートのような後に、
どの順番でインデックスをリカバリするかという優先度をつけることができるという機能です。</p>
<p>電源故障による、ロギング用のクラスタのダウンを想像してください。
クラスタが普及した場合、500個のインデックスをリカバリするような場合、499個のインデックスのデータは古く、
500番目のインデックスが重要です。
もっとも最近作成されたインデックスがリカバリされるまで、インデキシングを待つというようなことはできません。</p>
<p>これまでは、インデックスはランダムな順序でリカバリされ、重要なインデックスがリカバリされるまで待つしかありませんでした。
1.7.0では、インデックスは優先度の順番でリカバリされます。
この優先度は次のプロパティで指定できます。</p>
<ul>
<li><code>index.priority</code>設定（大きな値が優先度が高い）</li>
<li>インデックス作成日（新しいものが優先度が高い）</li>
<li>インデックス名</li>
</ul>
<p>既存のクラスタについて特に変更せずとも、最も最近作成されたインデックスが古いものよりも復旧されます。
古いインデックスの優先度を上げるためには、<code>index.priority</code>設定に0よりも大きな値を設定します。</p>
<pre><code>PUT important_index/_settings
{
  &quot;index.priority&quot;: 5
}
</code></pre><p>この設定は、存在するインデックスに対して更新できます。リカバリ中にもです。</p>
<h2 id="まとめ">まとめ</h2>
<p>ぜひ、<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-7-0">Elasticsearch 1.7.0</a>をダウンロードして、試してみてください。
そして、感想をTwitter(<a href="https://twitter.com/elastic">@elastic</a>)などで教えて下さい。
また、問題がありましたら、<a href="https://github.com/elastic/elasticsearch/issues">GitHub issues page</a>で報告をお願いします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>大阪と京都でElasticsearch勉強会を開催しました。 #elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2015/07/16/kansai-1st-elasticsearch-jp/</link>
      <pubDate>Thu, 16 Jul 2015 10:40:57 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/07/16/kansai-1st-elasticsearch-jp/</guid>
      <description>東京以外での勉強会の第2弾として、関西で勉強会を開催してきました。 Elasticsearch勉強会 in 大阪 Elasticsearch勉強会 in 京</description>
      <content:encoded><p>東京以外での勉強会の第2弾として、関西で勉強会を開催してきました。</p>
<ul>
<li><a href="https://elasticsearch.doorkeeper.jp/events/27555">Elasticsearch勉強会 in 大阪</a></li>
<li><a href="https://elasticsearch.doorkeeper.jp/events/27553">Elasticsearch勉強会 in 京都</a></li>
</ul>
<p>会場提供をしていただいた、Yahoo!大阪、はてなのみなさん、ご協力ありがとうございました！</p>

<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20150715/osaka.jpg" />
    </div>
    <a href="/images/entries/20150715/osaka.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<!-- more -->


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20150715/kamogawa.jpg" />
    </div>
    <a href="/images/entries/20150715/kamogawa.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<p>ここからはいつものメモです。
ちなみに、大阪の勉強会に、<a href="https://twitter.com/takuya_a">@takuya_a</a>さんと<a href="https://twitter.com/5kozawa">@5kozawa</a>さんの両名にお越しいただき話をしていただきました。
なので、勉強会の内容はほぼ同一になります。</p>
<h2 id="introduction-elastic-johtani">Introduction Elastic @johtani</h2>
<p>スライド：<a href="https://speakerdeck.com/johtani/introduction-elastic-1">Introduction Elasticsearch</a></p>
<p>初めての関西での勉強会ということで、ElasticsearchのOSSおよび商用プラグインの紹介をしてきました。
もちろん、Kibanaのデモもちょっとだけ。スプラトゥーンに関するデータをKibanaでちょっとだけ。
突貫でデータをかき集めたのでもう少し改良しないとですが。</p>
<h2 id="elasticsearch-での類似文書検索と-more-like-this-api-詳解--株式会社はてなidtakuya-a">Elasticsearch での類似文書検索と More Like This API 詳解 / 株式会社はてな　id:takuya-a</h2>
<p>スライド：<a href="https://speakerdeck.com/takuyaa/elasticsearch-defalselei-si-wen-shu-jian-suo-to-more-like-this-query-api-xiang-jie">Elasticsearch での類似文書検索と More Like This Query API 詳解</a></p>
<p>Elasticsearchの<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-mlt-query.html">More Like This</a>のソースコードリーディングみたいな感じで、
内部でどうやって処理されているかの説明を詳しくしてもらいました。</p>
<p>前のはてなエンジニアセミナーで話をされていた検索精度の件に絡んだ内容になっているかと。
（大阪で発表してもらった時より京都での発表が分かりやすくなってました。1日で改善されたのすごい！）
MoreLikeThisだとチューニングつらいので、自分で作るために<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-termvectors.html">TermVectorAPI</a>でやってみたという流れかと。</p>
<p>以下は発表後に出てきた質問のいくつかです。</p>
<p>Q:MoreLikeThisに対してTermVectorで柔軟にできる？
A:TermVectorのAPIで統計情報が取れるので、それを使うことでさらなるデータの更新ができる。</p>
<p>Q:TFとかの統計情報が必要なら、すべてインデックスをしたあとじゃないとちゃんとした値はとれないのでは？
A:TermVectorで取得したものをどうやって使うか</p>
<p>Q:TermVectorAPi&hellip;聞こえなかった
A:。。。</p>
<h2 id="elasticsearchを用いたはてなブックマークのトピック生成--株式会社はてなidskozawa">Elasticsearchを用いたはてなブックマークのトピック生成 / 株式会社はてな　id:skozawa</h2>
<p>スライド：<a href="http://www.slideshare.net/shunsukekozawa5/elasticsearch-in">Elasticsearchを用いたはてなブックマークのトピック生成</a></p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-significantterms-aggregation.html">Significant Terms Aggregation</a>を活用してる話。
トピックページの生成のために、Significant Terms Aggregationをどうやって利用しているかなどのお話でした。</p>
<p>トピックの集合の重複だったり、精度の判定方法とかいろいろ詳しく説明していただきました。</p>
<p>Q:2011年と12年で11年の方が多いのは？
A:ブックマークの件数に比例</p>
<p>Q:Significant terms aggsのsizeはいくつをつかってますか？
A:20を指定してます。</p>
<p>Q:Yahooとかニュースをストップワードとしてますが、Yahoo自体のニュースに関してはどーしてるんですか？
A:本文とタイトルから別々に作っていて、タイトルからは弾かれますが、本文から作った時に出てきます。</p>
<h2 id="はてなブックマークにおける-elasticsearch-の運用まわりの話--株式会社はてなidhagihala">はてなブックマークにおける Elasticsearch の運用まわりの話 / 株式会社はてな　id:hagihala</h2>
<p>スライド：未定（おそらく公開される）</p>
<p>体調が回復しきっていない中の発表ありがとうございました。
大幅に修正された資料が出てくるかなと。（ツイートできない数値がちらほらあったので）</p>
<p>Elasticsearchのクラスタの構成、どういった点で困ってたのでどういう調べ方をしたのか、どういった対処をしたのか。
どのあたりが次の課題かなどの話もありました。</p>
<h2 id="感想反省点など">感想・反省点など</h2>
<p>大阪、京都ともに30名弱の方の参加をしていただきました。ありがとうございました。
反省点としては、ハッシュタグを告知し忘れてました。。。</p>
<p>勉強会はやはり、東京が異常に活発で、大阪や京都はまだそれほどでもないのかなぁとも。
大阪はエンジニアの人や会社も多い気がするんですが。私の告知の仕方もあるかもなぁと。
次回があれば、大阪での事例も聞きたいので、スピーカーをもっと探さないとなと。</p>
<h2 id="関連ブログなど">関連ブログなど</h2>
<p>見つけたら、リンク追加していきます。</p>
<ul>
<li><a href="http://skozawa.hatenablog.com/entry/2015/07/17/194709">Elasticsearch勉強会 in 大阪/京都で発表しました</a>
* <a href="http://stop-the-world.hatenablog.com/entry/2015/07/22/014047">「Elasticsearch での類似文書検索と More Like This Query API 詳解」というタイトルで発表しました</a></li>
</ul>
<h2 id="その他余談">その他（余談）</h2>
<p>大阪のYahoo!さんは立地条件（梅田のすぐそば）がよく、</p>


<div class="box" style="max-width:300">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20150715/yahoo_osaka.jpg" />
    </div>
    <a href="/images/entries/20150715/yahoo_osaka.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<p>夜景も綺麗でした。大阪城とかも見えてました。（夜景じゃないけど。。。）</p>


<div class="box" style="max-width:600">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20150715/view_from_yahoo.jpg" />
    </div>
    <a href="/images/entries/20150715/view_from_yahoo.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<p>京都は祇園祭の真っ最中。</p>


<div class="box" style="max-width:300">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20150715/naginata2.jpg" />
    </div>
    <a href="/images/entries/20150715/naginata2.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<p>水曜日はお休みをいただいて、観光してました。ちょっと日焼けが。。。
おかげで、リフレッシュできました。三十三間堂とか良かった:)</p>
<p>あまり、関西に縁がない（大阪15年ぶり、京都10年ぶり）ので、
もっとユーザが増えて勉強会の機運が高まると嬉しいなと。:)</p>
</content:encoded>
    </item>
    
    <item>
      <title>Mappingのすばらしいリファクタリング（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/07/08/great-mapping-refactoring-ja/</link>
      <pubDate>Wed, 08 Jul 2015 18:11:31 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/07/08/great-mapping-refactoring-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：The Great Mapping Refactoring Elasticsearchのユーザの悩みの最も大きなものの一つは、 タイプと</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="https://www.elastic.co/blog/great-mapping-refactoring">The Great Mapping Refactoring</a></p>
<!-- more -->
<p>Elasticsearchのユーザの悩みの最も大きなものの一つは、
タイプとフィールドのマッピングに関する多義性です。
この多義性は、インデックス時の例外やクエリ時の例外、
正しくない結果、リクエストからリクエストへ変化する結果、
また、インデックスの故障やデータのロスを結果として引き起こします。</p>
<p>Elasticsearchをより強固で予測可能な振る舞いをするようにする作業において、
フィールドやタイプのマッピングをより厳格でより信頼性を高くするかといったことに
多くの変更を費やしました。
多くのケースで、Elasticsearch v2.0で新しいインデックスを作るときにのみ、
新しいルールを強制し、これまでのインデックスに関しては後方互換性を保つようにします。</p>
<p>しかし、幾つかのケースでは、先ほど説明したようなフィールドマッピングの
コンフリクトなどが存在するため、それらを利用できないです。</p>
<blockquote>
<p>コンフリクトしたフィールドのマッピングをもつインデックスはElasticsearch v2.0にはアップグレードできません。</p>
</blockquote>
<p>もし、これらのインデックスのデータが必要ない場合は、インデックスを消せばいいです。
そうでない場合はマッピングを正しくして再度インデックスする必要があるでしょう。</p>
<p>マッピングを正しく変更することは、私たちが簡単に決めることではありません。
ここからは、現在ある問題点と、私たちがどのように実装して解決したかについて説明します。</p>
<ul>
<li><a href="#conflicting-field-mappings">フィールドマッピングのコンフリクト</a></li>
<li><a href="#ambiguous-field-lookup">あいまいなフィールドのルックアップ</a></li>
<li><a href="#type-meta-fields">タイプのメタフィールド</a></li>
<li><a href="#analyzer-settings">アナライザ設定</a></li>
<li><a href="#index_name-and-path"><code>index_name</code>と<code>path</code></a></li>
<li><a href="#mapping-update">同期的なマッピングの更新</a></li>
<li><a href="#delete-mapping">マッピングの削除</a></li>
<li><a href="#prepare-2_0">2.0のための準備</a></li>
</ul>
<h2 id="a-nameconflicting-field-mappingsフィールドマッピングのコンフリクトa"><a name="conflicting-field-mappings">フィールドマッピングのコンフリクト</a></h2>
<p>これまで、わたしたちはドキュメントのタイプは「データベースのテーブルのようなもの」と説明していました。
タイプの目的を説明する簡単な方法だったからです。
しかし、残念なことにこれは、真実ではありません。
「同じ」インデックスの「異なるタイプ」にある同じ名前のフィールドは、
内部的に、Luceneのフィールド名が同じものになります。</p>
<p>もし<code>error</code>フィールドとして、ドキュメントタイプが<code>apache</code>のものには数値（integer）を、
ドキュメントタイプが<code>nginx</code>のものには文字列（string）を割り当てた場合、
Elasticsearchは同じLuceneのフィールドに数値と文字列のデータをもつことになります。
このフィールドに対して、検索やaggregationを行う場合、おかしな結果を受け取るか、例外が帰ってくるか、
インデックスが破損することになります。</p>
<p>この問題を解決するために、まず、ドキュメントタイプの名前をフィールドの名前の前に追加することを考えました。
各フィールドは完全に別のものとなります。
このアプローチの利点はドキュメントタイプが実際のテーブルのようになることです。</p>
<p>しかし、この方法には多くの欠点があります。</p>
<ul>
<li>フィールドは常に、他のタイプとは異なるものであると区別するためもしくは、複数のタイプに同じフィールドのクエリのためにワイルドカードをつけた場合、
ドキュメントタイプを前につける必要があります。</li>
<li>複数のドキュメントタイプに対して同じフィールド名で検索する場合、クエリを個別に発行しなければならなく遅くなります。</li>
<li>多くの検索で、既存の多くのクエリを壊してしまうために、単純な<code>match</code>や<code>term</code>クエリの代わりに、multi-fieldクエリを使う必要があります。</li>
<li>圧縮の効率の悪さから、ヒープ利用量、ディスク使用量、I/Oなどが、増加します。</li>
<li>複数のドキュメントタイプに対するaggregationは、global ordinalの利点を利用できなくなるために、遅くなり、メモリの使用量も増えます。</li>
</ul>
<h3 id="解決方法">解決方法</h3>
<p>最終的に、同じインデックスの同じ名前を持つ全てのフィールドは、同じマッピングを持つ必要があるというルールを採用することに決めました。
ただ、<code>copy_to</code>や<code>enabled</code>のようなパラメータはタイプごとに指定することができるようになっています。
これにより、データの破損、クエリ時の例外そして、おかしな結果が発生する問題を防ぎます。
クエリとaggregationは現在でも高速なままで、圧縮率を最大化し、ヒープ使用量やディスク使用率の低減させます。</p>
<p>この解決方法の欠点は、個別のテーブルとしてタイプを扱いたいユーザが彼らの考え方を変える必要があるということです。
これは、思ったよりも問題ではありません。
実際には、多くのフィールド名はデータの明確なタイプを表現しています。
<code>created_date</code>は常に、日付ですし、<code>number_of_hits</code>フィールドはいつも数値です。
フィールドマッピングがコンフリクトしているユーザはデータを失ったり、おかしなデータを受け取ったり、データを欠損させています。
ベストプラクティスにユーザが従っているかどうかによらず、インデックス時に正しい振る舞いを強制することが現在の違いです。</p>
<p>ユーザの多くがコンフリクトしていないフィールドマッピングをもっていれば、
コンフリクトが起きた場合、技術がこれらのシチュエーションを扱うことが可能になると思いませんか？
そこにはいくつかの解決方法があります。</p>
<h4 id="タイプの代わりにインデックスを別々に">タイプの代わりにインデックスを別々に</h4>
<p>最も簡単な解決方法です。インデックスを別々のインデックスとし、実際のデータベーステーブルのようにします。
インデックスをまたいだ検索はタイプをまたいだ検索のように動作しますし、
ソートやaggregationも同じデータタイプへのクエリのように動作します。これまでと同じ制限です。</p>
<h4 id="コンフリクトしたフィールドの名前の変更">コンフリクトしたフィールドの名前の変更</h4>
<p>コンフリクトがごくわずかな場合、（Logstashやアプリケーションで使っているものも一緒に）よりわかりやすいフィールド名に変更することで解決できます。
例えば、2つの<code>error</code>フィールドがあった場合に、<code>error_code</code>と<code>error_message</code>に変更します。</p>
<h4 id="copy_toもしくはmulti-fieldsを利用"><code>copy_to</code>もしくはmulti-fieldsを利用</h4>
<p>異なるドキュメントタイプのフィールドは別々の<code>copy_to</code>を設定できます。
元の<code>error</code>フィールドは<code>index</code>の設定に<code>no</code>が設定してあり、全てのドキュメントタイプで無効化されていますが、
特定のタイプだけ、<code>error</code>フィールドの値を数値の<code>error_code</code>フィールドにコピーすることができます。</p>
<pre><code>PUT my_index/_mapping/mapping_one
{
  &quot;properties&quot;: {
    &quot;error&quot;: {
      &quot;type&quot;: &quot;string&quot;,
      &quot;index&quot;: &quot;no&quot;,
      &quot;copy_to&quot;: &quot;error_code&quot;
    },
    &quot;error_code&quot;: {
      &quot;type&quot;: &quot;integer&quot;
    }
  }
}
</code></pre><p>他のタイプでは文字列の<code>error_message</code>にコピーします。</p>
<pre><code>PUT my_index/_mapping/mapping_two
{
  &quot;properties&quot;: {
    &quot;error&quot;: {
      &quot;type&quot;: &quot;string&quot;,
      &quot;index&quot;: &quot;no&quot;,
      &quot;copy_to&quot;: &quot;error_message&quot;
    },
    &quot;error_message&quot;: {
      &quot;type&quot;: &quot;string&quot;
    }
  }
}
</code></pre><p>同様の解決方法として<a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/mapping-core-types.html#multi-fields">multi-field</a>も使えます。</p>
<h4 id="各データタイプに対してネストしたフィールドに">各データタイプに対してネストしたフィールドに</h4>
<p>ときどき、Elasticsearchに送ったドキュメントやドキュメントがもっているフィールドを制御できない場合があります。
部分的なコンフリクトに加え、闇雲に、ユーザが送ってきたフィールドを受け入れると、マッピングが肥大化します。
タイムスタンプやIPアドレスをフィールド名に使うようなドキュメントがあると考えてください。</p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-nested-type.html"><code>nested</code> フィールド</a>にすることで、<code>str_val</code>、<code>int_val</code>、<code>date_val</code>というような各データタイプを利用できます。</p>
<p>このアプローチによって、次のドキュメントは</p>
<pre><code>{
  &quot;message&quot;: &quot;some string&quot;,
  &quot;count&quot;:   1,
  &quot;date&quot;:    &quot;2015-06-01&quot;
}
</code></pre><p>アプリケーションによって、次のようにフォーマットしなおす必要があります。</p>
<pre><code>{
  &quot;data&quot;: [
    {&quot;key&quot;: &quot;message&quot;, &quot;str_val&quot;:  &quot;some_string&quot; },
    {&quot;key&quot;: &quot;count&quot;,   &quot;int_val&quot;:  1             },
    {&quot;key&quot;: &quot;date&quot;,    &quot;date_val&quot;: &quot;2015-06-01&quot;  }
  ]
}
</code></pre><p>この解決方法は、アプリケーションサイドでより多くの作業が必要ですが、コンフリクトの問題とマッピングの肥大化の問題を同時に解決します。</p>
<h2 id="a-nameambiguous-field-lookupあいまいなフィールドのルックアップa"><a name="#ambiguous-field-lookup">あいまいなフィールドのルックアップ</a></h2>
<p>現在、フィールドの指定には&quot;short name&rdquo;、フルパス、ドキュメントタイプを前につけたフルパスが利用できます。
これらのオプションがあいまいさをもたらしています。
サンプルとして次のマッピングをご覧ください。</p>
<pre><code>{
  &quot;mappings&quot;: {
    &quot;user&quot;: {
      &quot;properties&quot;: {
        &quot;title&quot;: {
          &quot;type&quot;: &quot;string&quot;
        }
      }
    },
    &quot;blog&quot;: {
      &quot;properties&quot;: {
        &quot;title&quot;: {
          &quot;type&quot;: &quot;string&quot;
        },
        &quot;user&quot;: {
          &quot;type&quot;: &quot;object&quot;,
          &quot;fields&quot;: {
            &quot;title&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        }
      }
    }
  }
}
</code></pre><ul>
<li><code>title</code>は<code>user.title</code>、<code>blog.title</code>、<code>blog.user.title</code>のどれでしょう？</li>
<li><code>user.title</code>は<code>user.title</code>または<code>blog.user.title</code>のどちらでしょう？</li>
</ul>
<p>答えは「場合によります。」です。Elasticsearchが最初に見つけたものになります。
フィールドはリクエストごとに変わるため、各ノードでマッピングがどのようにシリアライズされたかに依存します。</p>
<p>2.0では、フィールドを指定する時に、ドキュメントタイプを除いたフルパス名を使用するべきでしょう。</p>
<ul>
<li><code>user.title</code>は、<code>blog</code>タイプの<code>user.title</code>を意味します。</li>
<li><code>title</code>は、<code>user</code>と<code>blog</code>タイプの<code>title</code>フィールドを意味します。</li>
<li><code>*title</code>は<code>user.title</code>と<code>title</code>フィールドの両方にマッチします。</li>
</ul>
<p><code>user</code>タイプの<code>title</code>フィールドと<code>blog</code>タイプの<code>title</code>の違いはどのように指定するのでしょう？</p>
<p>指定できません。<a href="#conflicting-field-mappings">フィールドマッピングのコンフリクト</a>で説明した変更により、
<code>title</code>フィールドは両方のタイプで同じフィールドになります。
本質的に<code>title</code>と呼ばれる1つのフィールドになります。</p>
<p><code>user.</code>や<code>blog.</code>のようなタイプのプレフィックスはタイプを指定することによるフィルタリングで効果があります。
クエリの<code>blog.title</code>フィールドは<code>blog</code>タイプのドキュメントだけを検索し、<code>user</code>タイプのドキュメントを検索しません。
このシンタックスは誤解を招きやすいです。なぜなら、いつでも動作するわけではないからです。
aggregationやsuggestionはすべてのタイプに関する結果を含みます。
この利用のため、上記の例のあいまいさがあるので、タイプのプレフィックスはサポートしません。</p>
<p><strong>重要</strong> short nameやタイププレフィックスを利用したpercolatorは更新する必要があります。</p>
<h2 id="a-nametype-meta-fieldsタイプのメタフィールドa"><a name="type-meta-fields">タイプのメタフィールド</a></h2>
<p>すべてのタイプはメタフィールドを持っています。<code>_id</code>、<code>_index</code>、<code>_routing</code>、<code>_parent</code>、<code>_timestamp</code>などです。
これらのほとんどは<code>index</code>、<code>store</code>、<code>path</code>のような幾つかの設定をサポートしています。
これらの設定について次のようにシンプルにしました。</p>
<ul>
<li><code>_id</code>と<code>_type</code>は変更不可</li>
<li><code>_index</code>は、ドキュメントのもつインデックスを保存するために<code>enabled</code></li>
<li><code>_routing</code>は<code>required</code>のみを指定</li>
<li><code>_size</code>は<code>enabled</code>のみ</li>
<li><code>_timestamp</code>はデフォルトで保存される</li>
<li><code>_boost</code>と<code>_analyzer</code>は廃止。古いインデックスのものは無視される</li>
</ul>
<p>ドキュメントのフィールドから<code>_id</code>と<code>_routing</code>と<code>_timestamp</code>の値を抽出することができました。
この機能は廃止されます。これは、ドキュメントのパースとコンフリクトを起こすためです。
代わりに、これらの値はURLもしくはquery stringで指定可能です。</p>
<p><code>_boost</code>と<code>_analyzer</code>フィールドは例外で、すでにあるメタフィールドの設定は古いインデックスのものが採用されます。</p>
<h2 id="a-nameanalyzer-settingsアナライザ設定a"><a name="analyzer-settings">アナライザ設定</a></h2>
<p>これまで、indexとsearchのアナライザがインデックス、タイプ、フィールド、ドキュメント（<code>_analyzer</code>フィールドで）の
それぞれのレベルで指定可能でした。
同じフィールドに対して異なるanalysis chainの組み合わせができることにより、おかしな関連度を引き起こしていました。
フィールドマッピングのコンフリクトを解消することに加え、アナライザの設定も簡略化します。</p>
<ul>
<li>Analyzedな文字列フィールドは、<code>analyzer</code>設定と<code>search_analyzer</code>設定（<code>analyzer</code>設定の値をデフォルトとする）を指定できます。<code>index_analyzer</code>設定は<code>analyzer</code>となります。</li>
<li>複数のタイプで同じ名前のフィールドがある場合、フィールドはすべて、同じアナライザの設定を持たなければなりません。</li>
<li>タイプレベルのデフォルト設定の<code>analyzer</code>、<code>index_analyzer</code>、<code>search_analyzer</code>設定は廃止されます。</li>
<li>デフォルトアナライザはインデックスごとにインデックスの<code>analysis</code>設定で設定します。これらは<code>default</code>もしくは<code>default_search</code>という名前で設定します。</li>
<li>ドキュメントごとの<code>_analyzer</code>フィールドはサポートしません。既存のインデックスのものは無視されます。</li>
</ul>
<h2 id="a-nameindex_name-and-pathindex_nameとpatha"><a name="index_name-and-path"><code>index_name</code>と<code>path</code></a></h2>
<p><code>index_name</code>と<code>path</code>設定は（Elasticsearch v1.0.0から利用できる）<code>copy_to</code>によって置き換わりました。
既存のインデックスについてはこれらは機能しますが、新しいインデックスでは指定できません。</p>
<h2 id="a-namemapping-update同期的なマッピングの更新a"><a name="mapping-update">同期的なマッピングの更新</a></h2>
<p>現在、これまで存在していないフィールドを含むドキュメントをインデキシングするとき、
フィールドはローカルのマッピングに追加され、それから、マスターに変更（新しいマッピングをすべてのシャードに適用する更新）が送信されていました。
同時に2つのシャードに同じフィールドを追加することができます。
また、そのとき、異なる2つのマッピングがある可能性があります。
1つは<code>double</code>でもう1つは<code>long</code>だったり、<code>string</code>と<code>date</code>だったりと。</p>
<p>このような場合、マスターに最初に届いたマッピングが採用されます。
しかし、「負けた」マッピングをもつシャードでは、すでに異なるデータのタイプを利用しているため、
これを利用し続けます。
そのご、ノードをリスタートしたときに、シャードが別のノードに移動し、マスターにあるマッピングを適用します。
このとき、インデックスが破損したりデータを失ったりします。</p>
<p>これを防ぐために、シャードはインデキシングを続ける前に、新しいマッピングがマスターによって採用されるかどうかを待つようになりました。
これはすべてのマッピングが安全に更新されます。
新しいフィールドをもっているドキュメントをインデキシングすると、前よりも処理が遅くなるでしょう。
受け入れられることを待つ必要があるためです。
しかし、クラスタの状態の更新処理のスピードが次の2つの新しい機能によって大きく改善されています。</p>
<ul>
<li><strong>クラスタ状態の差分</strong>：可能であれば、クラスタの状態の変更はクラスタ状態全体の変更ではなく、部分的なものとする。</li>
<li><strong>シャードへのリクエストの非同期化</strong>：シャードアロケーション処理中に、マスタノードは、
割り当てられていないシャードのコピーの日付が最新のものを持っているかを見つけるために、リクエストをデータノードに対して送信します。
ここで、クラスタ状態を変更する呼び出しがブロッキングで行われていました。v1.6.0から、このリクエストはバックグラウンドで非同期で実行されます。
これにより、マッピング更新のようなペンディングタスクをより早く処理できるようになります。</li>
</ul>
<h2 id="a-namedelete-mappingマッピングの削除a"><a name="delete-mapping">マッピングの削除</a></h2>
<p>（そのタイプのドキュメントがある場合）タイプマッピングを削除できないようにします。
マッピングを削除した後に、削除されたフィールドの情報は、Luceneレベルでは存在し続け、
もし、後から同じ名前のフィールドが追加されたときにインデックスの破損を引き起こします。
そのようなマッピングは残しておくか、新しいインデックスに再インデックスすることができます。</p>
<h2 id="a-nameprepare-2_020のための準備a"><a name="prepare-2_0">2.0のための準備</a></h2>
<p>マッピングがコンフリクトしているかどうかを決めることは、手動で行うには慎重に行う必要があります。
私たちは、<a href="https://github.com/elastic/elasticsearch-migration">Elasticsearch Migration Plugin</a>を提供します。
これは、2.0で非推奨になったり廃止された機能を利用しているかどうかを見つけるために役に立つでしょう。</p>
<p>もし、コンフリクトしたマッピングを持っている場合、
正しいマッピングを持つ新しいインデックスにデータを再インデックスするか、
必要ないなら削除します。
これらのコンフリクトを解決しない限り2.0にはアップグレードできないでしょう。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 2.0.0.beta1リリース間近（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/07/07/elasticsearch-2-dot-0-0-dot-beta1-coming-soon-ja/</link>
      <pubDate>Tue, 07 Jul 2015 15:25:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/07/07/elasticsearch-2-dot-0-0-dot-beta1-coming-soon-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Elasticsearch 2.0.0.beta1 coming soon! Elasticsearch 2.0.0.beta1のリリースの準備をしています。</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="https://www.elastic.co/blog/elasticsearch-2.0.0.beta1-coming-soon">Elasticsearch 2.0.0.beta1 coming soon!</a></p>
<p>Elasticsearch 2.0.0.beta1のリリースの準備をしています。
これは、Lucene 5.2.1に含まれる多くの改善が利用できるようになります。
このリリースに関するいくつかの機能は次のようなものです。</p>
<!-- more -->
<h4 id="pipeline-aggregations">Pipeline Aggregations</h4>
<p>差分や移動平均、他のAggregationsの結果に対する
series arithmeticのようなaggregationが利用可能になります。
この機能は、これまでは、クライアントサイドで実行する必要がありました。
しかし、この計算をより強力な解析クエリを構築してElasticsearchで
実行することができるようになります。
クライアントのコードをより簡潔にすることができます。
これにより、予測解析や異常検知のようなことができるようになります。</p>
<h4 id="queryfilter-merging">Query/Filter merging</h4>
<p>Filterはなくなります。全てのフィルタは、クエリになります。
クエリコンテキストで利用されると、効率的に関連度スコアを計算し、
フィルタコンテキストで利用されると、単に、
マッチしていないドキュメントを除外する（今のフィルタのようなもの）だけです
この変更は、クエリ実行が自動的に、より効率的な順番で実行されるように
最適化されることを意味します。
例えば、フレーズやgeoクエリのような遅いクエリは
まず、近似フェーズを実行し、それから、より遅い実際のフェーズが
結果に対して行われます。
フィルタコンテキストにおいて、頻繁に利用される条件は自動的にキャッシュされます。</p>
<h4 id="configurable-store-compression">Configurable store compression</h4>
<p><code>index.codec</code>設定により、高速化のためのLZ4圧縮（<code>default</code>）か
インデックスサイズを小さくするためのDEFLATE（<code>best_compression</code>）を
選択できます。これは、ロギングでとくに役に立ちます。
これにより、古いインデックスオプティマイズする前に<code>best_compression</code>に
変更できます。</p>
<p>これらに関するブログ記事がすぐに公開されるでしょう。</p>
<h3 id="performance-and-resilience">Performance and resilience</h3>
<p>以降では、新しいメジャーリリースに関して簡単に紹介します。
2.0の変更の多くは内部の機能に関するものであり、
直接ユーザに関連するわけではないからです。</p>
<p>新しいメジャーバージョンのテーマは、パフォーマンス、安定性、
堅牢性、予測可能性、そして使い勝手の良さです。</p>
<ul>
<li>物事が予測した通りに動作する</li>
<li>何か問題があった場合に、Elasticsearchから役立つフィードバックがある</li>
<li>ローレベルの設定を扱う必要はなく、Elasticsearchが良い設定を決定する</li>
<li>これらに加え、データがより安全に</li>
</ul>
<p>これらの目標は完全ではありません。
まだ、多くの改善があります。しかし、2.xブランチで、
すでに500コミットを超える大きな改善が実施されています。</p>
<ul>
<li>on-diskの doc valuesをデフォルトで利用（これまではfielddata）。
ヒープ使用量を減らして、スケーラビリティを向上</li>
<li>セグメントマージ処理中のメモリ使用量の削減</li>
<li>normsの圧縮率の改善。ヒープスペースを利用している大きな処理のひとつだったため。</li>
<li>全てのリクエストの後に、transaction logをfsyncすることで、デフォルトで耐久性を向上</li>
<li>全てのファイル変更をアトミックに（部分的なファイルの書き出しはなし）</li>
<li>マージを自動で制限</li>
<li>フレーズクエリやスパンクエリを高速化</li>
<li>フィルタキャッシュをより効率化するための圧縮されたビットセット</li>
<li>クラスタ状態の差分更新</li>
<li>構造化されたJSON形式の例外</li>
<li>よりきめ細かいLuceneのメモリレポート</li>
<li>デフォルトではlocalhostにのみバインド。開発のノードが他のクラスタにジョインするのを防ぐ</li>
<li>parent/childのクエリ実行最適化のためにリライト</li>
<li>Java Security Managerで必要最小限なパーミッションで実行</li>
<li>全てのコアなプラグインをelasticsearchリポジトリに移行し、Elasticsearchのバージョンに同期してリリースされる予定</li>
</ul>
<h2 id="アップグレード前に">アップグレード前に</h2>
<p>メジャーバージョンのアップグレードは問題のあるものを一掃する機会を与えてくれます。
できる限り、これらの変更をアップグレードするために、簡単な方法を提供しようとしています。
しかし、Elasticsearch 2.0にアップグレードする前に、必要な処理が2つあります。</p>
<p>1つ目は、フィールドとタイプマッピングに関することです。
mapping APIは、現在、それほど厳密ではありません。
内蔵された保護機構を提供する代わりに、ユーザがベストプラクティスを知っていると信頼していました。
2.0では、mappingはより厳密で安全ですが、いくつかの変更では、後方互換性を保っていません。
詳細については<a href="https://www.elastic.co/blog/great-mapping-refactoring">The Great Mapping Recatoring</a>をごらんください。</p>
<p>2つ目はElasticsearch 0.20以前のユーザに関する変更です。
これは、Lucene 3.xを使っています。
Elasticsearch 2.xはLucene 5をベースにしています。
Lucene 5はLucene 4.xによって作成されたインデックスの読み込みはサポートしていますが、
Lucene 3.xに関してはサポートしていません。</p>
<p>Elasticsearch 0.20以前のバージョンによって生成されたインデックスを持っている場合、
Elasticsearch 2.xのクラスタをスタートすることはできません。
これらの古いインデックスを削除するか、Elaticsearch 1.6.0以上に含まれている
<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-upgrade.html">upgrade API</a>を使用してアップグレードする必要があります。</p>
<p>upgrade APIの実行は2つのジョブを実行します。</p>
<ul>
<li>古いLuceneフォーマットのセグメントを最新のフォーマットで書き換えます</li>
<li>Elasticsearch 2.xによって読み込めるようという印をインデックスに追加します</li>
</ul>
<p>全てのセグメントを最新バージョンにアップグレードするのも良い案ですが、
アップグレード前に必要な処理を最小限に抑えることも可能です。
（Lucene 3.xのセグメントだけをアップグレード）
その場合は、<code>only_ancient_segments</code>パラメータを指定します。</p>
<h2 id="elasticsearch-migration-plugin">Elasticsearch Migration Plugin</h2>
<p>Elasticsearch 2.0 に移行する前に、インデックスがアップグレードが必要なのか、
ほかになにかするべきことがあるのかをチェックする助けになる
Elasticsearch Migration Pluginをリリースしました。</p>
<p>まず、プラグインをインストールします</p>
<pre><code>./bin/plugin -i elastic/elasticsearch-migration
</code></pre><p>プラグインのインストール後はノードのリスタートは必要ありません。</p>
<p>以下のリンクをブラウザで開きます。</p>
<p>http://localhost:9200/_plugin/migration</p>
<p>（<code>localhost:9200</code>はインストールしたホスト名に変更してください。）</p>
<p>Migration pluginに関してバグやご意見がある場合は、<a href="http://github.com/elastic/elasticsearch-migration/issues">GitHubのIssue</a>にお願いします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>さらに進化したFound（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/07/07/we-just-made-found-more-awesome-ja/</link>
      <pubDate>Tue, 07 Jul 2015 15:20:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/07/07/we-just-made-found-more-awesome-ja/</guid>
      <description>4ヶ月前に、Found joined our team at Elasticをアナウンスしました。 Foundの素晴らしいチームと一緒に仕事をしていますが、彼らによって、より</description>
      <content:encoded><p>4ヶ月前に、<a href="https://www.elastic.co/blog/welcome-found">Found joined our team at Elastic</a>をアナウンスしました。
Foundの素晴らしいチームと一緒に仕事をしていますが、彼らによって、より素晴らしい
hosted Elasticsearchを提供することになりました。</p>
<!-- more -->
<p>私たちがともに密接に働くことにより、本日（2015/7/1）、
<a href="https://www.elastic.co/products/found">新しい2つのFound</a>を提供することになりました。
Found StandardはこれまでのFoundの機能に加え、さらに低価格を提供します。
Found Premiumは、SLAサポートと、ShieldやWatcherを将来Found上で提供します。</p>
<h2 id="found-standard">Found Standard</h2>
<p>Foundは素晴らしいです。専用のElasticsearchクラスタ、簡単なスケール、
ビルトインのセキュリティそして、時間単位での課金などを持っています。
私たちは、hosted Elasticsearchを探している方に、
Foundが適したソリューションであると思っていますし、
すべての方に利用できて手頃な価格であるということを確信したいと思っています。</p>
<p>本日（2015/07/01）からFoundの価格をかなり低価格にし、
<strong>月額50ドル以下</strong>でhosted Elasticsearchを簡単に試してもらえるようにしました。</p>
<p>価格を下げることは正しい重要なステップですが、
Foundを利用している全ての人に、より良い経験を持っていただきたいと考えています。
低価格化と一緒に、<strong>free backups</strong>と<strong>built in SSD</strong>もFoundで提供を始めることになります。</p>
<p>Foundの重要な特徴の一つが、高可用性のために、クラスタをいくつのデータセンターに持つかを
選択できることです。
データは重要です。これが正しい選択でユーザの助けになると考えています。
これにより、私たちの価格は、<strong>複数のデータセンターにより安価に</strong>配置することができます。</p>
<p>また、KibanaもElasticsearchのデータを可視化する素晴らしい方法だと考えています。
Kibana 4が最新バージョンですが、
これは、サーバサイドコンポーネントを持っています。
これは、サービスとしてこれを提供するために、追加の料金がかかることを意味します。
Foundチームが築いた素晴らしい基盤とKibanaチームの努力により、
hosted Elasticsearchクラスタで<strong>無料のKibana 4</strong>を7月15日より提供することになりました。</p>
<h2 id="found-premium">Found Premium</h2>
<p>また、私たちは、オープンソースプロダクトに関してサブスクリプションを提供していますが、
Found Standardに対しても提供することになりました。
これが、Found Premiumです。</p>
<p>フォーラムベースのサポートよりもSLAベースのサポートを望んでいる場合、
プロダクトを開発しているチームからのサポートを受けることができるオプションを
提供し始めました。
クリティカルなイベントを持っていたり、私たちのプロダクトに関する
問題を予測するためのベストなヘルプやガイダンス、アドバイスを探しているような場合にサポートします。</p>
<p>さらに近い将来、サブスクリプションの一部として、<a href="https://www.elastic.co/products/shield">Shield</a>（Elasticasearchのセキュリティプラグイン）や<a href="https://www.elastic.co/products/watcher">Watcher</a>（アラーティングプラグイン）が利用できるようになります。</p>
<p>私たちのチームがともに働き、多くのことを可能にし、すばらしい仕事をユーザに提供したかを
将来も楽しみです。
私は非常に誇りに思っていますし、気に入っていただけたらと思っています。
ぜひ、<a href="https://www.elastic.co/webinars/getting-started-with-found">7/15のWebnarに参加して</a>くわしい話を聞いていただき、疑問を解消してください。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 1.6.0リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/06/10/elasticsearch-1-6-0-released-ja/</link>
      <pubDate>Wed, 10 Jun 2015 13:31:02 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/06/10/elasticsearch-1-6-0-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Elasticsearch 1.6.0 released 本日（6/9）、Lucene 4.10.4ベースのElas</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="https://www.elastic.co/blog/elasticsearch-1-6-0-released">Elasticsearch 1.6.0 released</a></p>
<p>本日（6/9）、<strong>Lucene 4.10.4</strong>ベースの<strong>Elasticsearch 1.6.0</strong>をリリースしました。
このリリースはElasticsearchの最新の安定バージョンとなります。
また、素晴らしい新機能がいくつか追加されています。</p>
<!-- more -->
<ul>
<li>synced flushによるリスタートの高速化
* シャード配置は保留中のタスクをブロックしない</li>
<li>レスポンスボディのJSONのフィルタリング</li>
<li>共有ファイルシステムリポジトリに対するセキュリティフィックス</li>
<li>古いインデックスのためのUpgrade API</li>
<li>Kibanaユーザのためのハイライトの強化</li>
<li>Windowsユーザのための<code>mlockall</code></li>
<li>より詳細なスクリプト設定</li>
</ul>
<p><a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-6-0">すべての変更リストとダウンロード</a>はこちらをごらんください。</p>
<h2 id="synced-flushによるリスタートの高速化">synced flushによるリスタートの高速化</h2>
<p>1.6.0より前のバージョンでは、メンテナンスやローリングアップグレード時の
ノードの再起動で、必要であるかどうかに関わらず、多くの場合、
ノードのすべてのシャードのすべてのデータを再度コピーする必要がありました。
この新しいsynced flush機能により、
sync-flushされたインデックスに対して、既存のデータを再利用し、
より早くクラスタを正常な状態にすることができるようにします。</p>
<p>ここで、この変更以前にどのように動いていたかを説明します。
すでにあるレプリカシャードは、ノードがリスタートした後に、
プライマリから復元するときに、
最初のステップはプライマリにあるセグメントとレプリカにあるセグメントを
比較することです。そして、セグメントに違いがあった場合にコピーされます。
問題は、セグメントプライマリのセグメントのマージと
レプリカのセグメントのマージが別々に起こっており、
各シャードのセグメントが完全に異なるが、
それらが同じデータを持っているという点です。</p>
<p>新しいsynced-flush機能では、<code>sync_id</code>がプライマリと
レプリカシャードに、シャードのコンテンツが同一であるという判別するために、
書き込まれます。これは、リカバリがセグメントの比較のステップを
スキップできることを意味します。
リカバリのスピードを高速にします。</p>
<p>synced flushはアイドル状態のインデックスで自動的に実行されます。
直前の5分間でデータが登録、更新削除されていないインデックスに対してです。
これは、ロギングのユースケースで特に役に立ちます。
機能のインデックスはインデキシングがストップしたあとの5分で自動的に
syncされるでしょう。</p>
<p>ノードのリスタートやクラスタのリスタートが必要で、
自動的に発生するsyncを待てない場合は次のようなことが可能です。</p>
<ul>
<li>インデキシングを停止（実行中のリクエストが停止するのも待つ）</li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-cluster.html">シャードのアロケーションを停止</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-synced-flush.html">synced-flush</a>リクエストの発行</li>
<li>ノードのリスタート</li>
<li>シャードのアロケーションの再開</li>
<li>クラスタの状態がグリーンになるまで待つ</li>
<li>インデキシングの再開</li>
</ul>
<p><strong>NOTE:</strong> &ldquo;シャードのアロケーションを停止&quot;のステップが必要です。
これがない場合、Elasticsearchはノードの再起動が始まると、
異なるノードにシャードの再配置を始めます。
これは、新しいノードにシャードデータの全てをコピーする必要があります。</p>
<p>ドキュメントのインデキシング、更新、削除のあとに最初のフラッシュが
発生したときに、
シャードの<code>sync_id</code>が自動的に無効化されます。
詳細については<a href="https://github.com/elastic/elasticsearch/issues/11336">#11336</a>と<a href="https://github.com/elastic/elasticsearch/issues/11179">#11179</a>をごらんください。</p>
<h2 id="シャード配置は保留中のタスクをブロックしない">シャード配置は保留中のタスクをブロックしない</h2>
<p>多数のノードやインデックスを持っているユーザは
クラスタ全体のリスタートのあとのシャードのリカバリで、
長い間、リカバリが止まって見えることに気づいたかもしれません。
これらのリカバリが止まって見える間は、クラスタ設定の更新のような軽微なアクションでさえ、
例外が発生したり、その設定が反映されるまでに長時間かかるといったことが起きていました。
この問題の兆候は保留中のタスクのキューが大きくなることです。</p>
<p>これらの遅延の原因はシャードの配置のプロセスにあります。
配置されるべきシャードのコピーを
持っているのがどのノードかを全てのデータノードに聞きます。
多くのシャードや遅いディスクを持ったデータノードは
反応するのに時間がかかります。
特に、シャードのリカバリがすでにI/Oを利用しているような時です。
このバージョン以前のものは、シャード情報のためのリクエストを
同期的に処理していました。
クラスタ状態の更新はアロケーションプロセスを続けるために
必要な情報を待っている間、ブロックされます。</p>
<p><a href="https://github.com/elastic/elasticsearch/issues/11262">#11262</a>での変更は
この情報のためのリクエストを非同期にします。
クラスタ状態の更新はこのタスクによってブロックされません。
これは、保留中のタスクがより早く処理でき、
クラスタが変更に対してより早く反応できます。
処理中のshard infoリクエストの数は
<code>number_of_in_flight_fetch</code>キーとしてcluster-health APIで取得できます。</p>
<p>さらに、シャードがある理由で復旧に失敗すると、
クラスタは、シャードのリカバリが成功するまで、同じノードに対して
シャードをアロケーションしないようにします。</p>
<h2 id="レスポンスボディのjsonのフィルタリング">レスポンスボディのJSONのフィルタリング</h2>
<p>Elasticsearchは全ての情報を返します。
例えば、検索リクエストは<code>_index</code>、<code>_type</code>、<code>_id</code>、
<code>_score</code>、<code>_source</code>を返します。
しかし、全ての情報が必要でない場合があります。
また、これらのデータを遅いネットワークで転送することは
遅延の原因となります。</p>
<p>ユーザはこの検索メタデータを無効にするための特殊な設定を
行ったり、他のAPIのレスポンスのフォーマットを
コントロールするための設定があります。
<a href="https://github.com/elastic/elasticsearch/issues/10980">#10980</a>の変更で、任意のレスポンスボディのJSONに対して、
必要な要素だけを取得する機能が追加されました。
<code>filter_path</code>パラメータを使用します。</p>
<p>例えば、検索リクエストからは<code>total</code>数と、各要素の<code>hits</code>の配列を欲しい場合、
次のように指定します。</p>
<pre><code>GET _search?filter_path=hits.total,hits.hits
</code></pre><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-nodes-info.html">nodes-info API</a>から各ノードの<code>http_address</code>だけを取得したい場合は、
ノード名の部分にワイルドカード(<code>*</code>)を使用します。</p>
<pre><code>GET _nodes?filter_path=nodes.*.http_address
</code></pre><p>単一の<code>*</code>がJSON階層の1つの階層に対しての
ワイルドカードとして機能します。
2つの<code>**</code>は複数階層に対してとなります。
複数のフィルタはカンマ区切りで指定可能です。
詳細について<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/common-options.html#_response_filtering">Response filtering</a>をごらんください。</p>
<h2 id="共有ファイルシステムリポジトリに対するセキュリティフィックス">共有ファイルシステムリポジトリに対するセキュリティフィックス</h2>
<p>本リリースはsnapshot-restoreで使われる
<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html#_shared_file_system_repository">共有ファイルシステムリポジトリ</a>に関するセキュリティ強化の変更が含まれます。
現在、Elasticsearchのユーザは、Elasticsearchプロセスによって書き込み可能
任意のディレクトリに<code>.snapshot</code>ファイルを書き込むことができます。
<a href="https://github.com/elastic/elasticsearch/issues/11284">#11284</a>の変更で、リポジトリのために使用できるディレクトリを
強制的に指定できるようになりました。
適切なディレクトリが<code>config/elasticsearch.yml</code>設定ファイルの
<code>path.repo</code>に指定される必要があります。</p>
<p>次のように設定されたElasticsearchインスタンスはこのセキュリティ問題に対して影響を受けにくいです。</p>
<ul>
<li><code>root</code>ではなく<code>elasticsearch</code>ユーザとしてElasticsearchを実行</li>
<li><code>elasticsearch</code>ユーザが<code>data</code>ディレクトリに対してのみ
書き込み権限を持っていて、共有ファイルシステムリポジトリに対しても利用できる</li>
<li>ファイアウォールやプロキシ、Shieldを使って、snapshot APIの実行を任意のユーザから実行されるのを防いでいる</li>
</ul>
<p>この問題を<a href="https://www.elastic.co/community/security">CVE-2015-4165</a>としています。</p>
<h2 id="古いインデックスのためのupgrade-api">古いインデックスのためのUpgrade API</h2>
<p>Elasticsearch 2.0以降では、
Lucene 5ベースとなり、Lucene 3
（Elasticsearchのバージョンでは0.90以前）
によって書き出されたセグメントを含んだインデックスを読み込むことが
できなくなります。
これらの「古いインデックス」はLucene 4にアップグレードする必要があり、
2.0-compatibleとして印をつける必要があります。
そうしなければ、Elasticsearch 2.0に以降できないでしょう。</p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-upgrade.html">upgrade API</a>は
、最新のLuceneフォーマットにインデックスにある全てのセグメントを
アップグレードするためにすでに利用できます。
また、最新のフォーマットは性能向上やバグフィックスといった利点もあります。
さらに、2.0-compatibleとして古いインデックスをマークする設定も
書き込むことができます。
さらに、<code>upgrade_only_ancient_segments</code>オプションが
Lucene 3のセグメントだけをアップグレードするために利用でき、
移行前の必要な処理を減らすことができます。</p>
<h2 id="kibanaユーザのためのハイライトの強化">Kibanaユーザのためのハイライトの強化</h2>
<p>KibanaユーザはElasticsearchのハイライトについて2つの点で問題を見つけていました。</p>
<ul>
<li>ワイルドカードでフィールド名を指定した場合に、ハイライトに適さないフィールドも帰ってくる（日付や数値のフィールドなど）</li>
<li>古いインデックスが非常に大きなターム（&gt; 32kB）を含んでいて、ハイライトが失敗する。
最近のバージョンでは、これらの大きなタームはインデックス時に除去される</li>
</ul>
<p><a href="https://github.com/elastic/elasticsearch/issues/11364">#11364</a>の変更で
これらの問題が修正されました。
ワイルドカードを利用したフィールド名では、stringフィールドのみを返し、非常に長いタームによる例外は無視するようになります。</p>
<h2 id="windowsユーザのためのmlockall">Windowsユーザのための<code>mlockall</code></h2>
<p>速いGCはノードの安定性と性能について重要です。
小さなバイトのヒープでさえ、ディスクにスワップすることを許可してしまうと、GCに対して大きな影響が出てしまいます。
ですので、これらのコストは排除されるべきです。</p>
<p>Linuxユーザは<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-configuration.html#setup-configuration-memory"><code>bootstrap.mloclall</code>設定</a>による恩恵を受けています。
これは、RAMにJVMのヒープを起動時にロックします。
<a href="https://github.com/elastic/elasticsearch/issues/10887">#10887</a>では、同様の機能をWindowsユーザにも提供します。</p>
<h2 id="より詳細なスクリプト設定">より詳細なスクリプト設定</h2>
<p>Scriptsはリクエストにインラインで指定できます。
<code>.scripts</code>インデックスにインデックスもでき、<code>config/</code>ディレクトリ配下にファイルとして保存もできます。
これまでは、インラインかインデックスされたスクリプトの両方を同時に有効無効にすることが選択できましたが、
<code>.scripts</code>インデックスをプロキシやShieldで保護することもできました。</p>
<p><a href="https://github.com/elastic/elasticsearch/issues/10116">#10116</a>で追加されたより詳細なスクリプトの設定で、インラインか、インデックスされたものか、ファイル化を個別に言語ごとに設定できるようになりました。
また、例えば、search APIではスクリプトを許可するが、update APIでは許可しないといったような設定も可能です。</p>
<h2 id="最後に">最後に</h2>
<p>ぜひ、<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-6-0">Elasticsearch 1.6.0</a>を試してみてください。
そして、感想をTwitter(<a href="https://twitter.com/elastic">@elastic</a>)や<a href="https://discuss.elastic.co/c/elasticsearch">Webフォーラム</a>などで教えて下さい。
また、問題がありましたら、<a href="https://github.com/elastic/elasticsearch/issues">GitHub issues page</a>で報告をお願いします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>第10回Elasticsearch勉強会を開催しました。#elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2015/06/02/10th-elasticsearch-jp/</link>
      <pubDate>Tue, 02 Jun 2015 15:06:36 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/06/02/10th-elasticsearch-jp/</guid>
      <description>第10回Elsticsearch勉強会を開催しました。 スタッフの皆さん、スピーカーの皆さん、開場提供していただいたリクルートテクノロジーズさ</description>
      <content:encoded><p><a href="https://elasticsearch.doorkeeper.jp/events/25297">第10回Elsticsearch勉強会</a>を開催しました。
スタッフの皆さん、スピーカーの皆さん、開場提供していただいた<a href="http://recruit-tech.co.jp">リクルートテクノロジーズさん</a>、ありがとうございました！
次回もよろしくお願いします！参加していただき盛り上げていただいた参加者の皆さんもありがとうございました。</p>
<!-- more -->
<p>今回も新規の方が結構いたような気がしました。
最終的に、124人がアプリでチェックインした形になりました。
直前にキャンセル待ちから繰り上がると来れない人がいますよねぇ。
多少キャパシティオーバーするくらいの人数で募集するのがいいのでしょうか。
あと、カードが2枚不明で。。。心あたりある人いないでしょうか？</p>
<p>さて、いつもの通り簡単なメモです。</p>
<h2 id="elasticon報告有償プラグインの紹介elastic-jun-ohtani-johtani">Elastic{ON}報告＋有償プラグインの紹介　Elastic Jun Ohtani @johtani</h2>
<p>スライド：<a href="https://speakerdeck.com/johtani/elastic-on-bao-gao-toshang-yong-puraguinfalseshao-jie">elastic{ON}報告と商用プラグインの紹介</a></p>
<p>少し時間が経ってしまいましたが、弊社初のカンファレンス<a href="http://www.elasticon.com">elastic{ON}</a>の紹介をしました。
約1300名の方に参加していただいたカンファレンスで、非常に盛り上がりました。
Microsoft、GitHubなど、いろいろな会社の方が話をしたり、弊社のエンジニアが濃い話をしたりと。
今回は、日本の方はいなかったですが、次回は日本からも参加してもらえると嬉しいです！</p>
<p>あとは、5月に弊社にも日本の営業の人が入社したので、有償プラグインについて簡単ですが説明をしました。
プラグインなどに興味があるかたがいらっしゃいましたら、Twitterなどで連絡いただければと。
もちろん、弊社サイトからの問い合わせでも大丈夫です。</p>
<p><a href="https://www.elastic.co/elasticon">カンファレンスの資料やビデオが弊社サイトで公開</a>されています。
ぜひ一度見ていただければと。</p>
<h2 id="awsで実現するelasticsearchの大規模運用-株式会社インティメートマージャー松田和樹さんmats116httpstwittercommats116">AWSで実現するelasticsearchの大規模運用 株式会社インティメート・マージャー　松田和樹さん　<a href="https://twitter.com/mats116">@mats116</a></h2>
<p>スライド：<a href="http://www.slideshare.net/im_docs/elasticsearch-48873206">第10回elasticsearch勉強会 公開用資料</a></p>
<p>パブリックDMPのサービスの裏側でElasticsearchを利用しているというお話でした。
AWS Auto Scalingに詳しくないので、勉強しないといけないんですが、
リバランスがどのくらいの頻度で発生するのかはちょっと気になります。</p>
<p>SSDを利用したり、doc valuesを利用したりと、性能を気にしながら利用されている点、負荷試験を行って検証されていたりと、
参考になる話でした。
今回はインフラ側の話に寄っていたので、今度はアプリ側でどんな使い方をしているかといった話を聞いてみたいですね！</p>
<h2 id="spark-in-small-or-middle-scale-data-processing-with-elasticsearch株式会社ビズリーチ-島本多可子さん-chibochibo03httpstwittercomchibochibo03">Spark in small or middle scale data processing with Elasticsearch　株式会社ビズリーチ 島本　多可子さん <a href="https://twitter.com/chibochibo03">@chibochibo03</a></h2>
<p>スライド：<a href="http://www.slideshare.net/chibochibo/spark-with-elasticsearch">Spark in small or middle scale data processing with Elasticsearch</a></p>
<p>ScalaとSparkとElasticsearchで検索サービスを作っている話でした。
サービスのアーキテクチャの選別についての説明を順を追って説明していただきました。
失敗と言われていたアーキテクチャを見た時に、「あー、それは。。。」と思っていたら、
思った通りの改善案のアーキテクチャが出てきたので少しホッとしましたw</p>
<p>JSONのクエリが辛いという話がありましたが、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-validate.html">validate API</a>などを利用してもらって、事前にチェックをしてもらうと
少しは改善できるかもなぁと。</p>
<p>Sparkをぼんやりとしかわかってないので、もう一度話を聴きたいなぁと思ったので、
押しかけて話を聴きたいと思います。</p>
<p>話の中で出てきた自作のScalaのElasticsearchクライアントがHTTPのクライアントになった理由が知りたかったです。</p>
<h2 id="lt">LT</h2>
<h3 id="elasticsearchのサジェスト機能を使った話株式会社アイスタイル渡邊-紘太朗さん-ktaro_whttpstwittercomktaro_w">Elasticsearchのサジェスト機能を使った話　株式会社アイスタイル　渡邊 紘太朗さん <a href="https://twitter.com/ktaro_w">@ktaro_w</a></h3>
<p>スライド：<a href="http://www.slideshare.net/ktaro_w/elasticsearch-48826694">Elasticsearchのサジェスト機能を使った話</a></p>
<p>ぴったり5分でしたwまだ2年目なのにこんなにうまく話をしていただけるとは。。。</p>
<p>Gatling便利そうですね。サーバが1台しかないので、単一インデックスの方が性能が出るだろうなと。
Elasticsearchは1インデックスに対してデフォルトだと5シャードで、シャード単位でLuceneのインデックスが作成されます。
この話で行くと、18インデックスを作ると、かなりの数のファイルI/Oが発生するので、いろいろなインデックスに検索をすると
キツいだろうなと。</p>
<p>サジェストについての日本語の資料が少ないという事だったので、ブログを書いてもらえると嬉しいですw</p>
<h3 id="elasticsearchで作る形態素解析サーバ株式会社エヌツーエスエム菅谷信介さん">Elasticsearchで作る形態素解析サーバ　株式会社エヌツーエスエム　菅谷信介さん</h3>
<p>スライド：<a href="http://www.slideshare.net/shinsuke/es-analyzeapi201506">Elasticsearchで作る形態素解析サーバ</a></p>
<p>いつも発表ありがとうございます。私以外の最多発表者じゃないかという話でした。
今回はElasticsearchを形態素解析サーバにしてしまおうという話で、ちょっと面白い話でした。
Elasticsearch以外の場所で形態素解析したい場合には手軽に使えるかもしれないですし、Elasticsearchと同じ解析結果を別の場所で欲しい場合にも便利かも。</p>
<p><a href="https://github.com/johtani/elasticsearch-extended-analyze">extended analyze API</a>の紹介までしていただいて。。。</p>
<p>ちなみに、今は、extended analyze プラグインも指定したAttributeの情報だけ返せるようになってたり、
マルチバリューへの対応もしていたりします。
そのうち本家のanalyze APIに機能を取り込む予定です。（早くしないと）</p>
<h3 id="開発効率up-elasticsearch-client-tool-作ってみたナレッジワークス株式会社木戸国彦さん-9215httpstwittercom9215">開発効率UP! Elasticsearch Client Tool 作ってみた　ナレッジワークス株式会社　木戸国彦さん <a href="https://twitter.com/9215">@9215</a></h3>
<p>スライド：<a href="https://speakerdeck.com/kunihikokido/kai-fa-xiao-lu-atupu-elasticsearch-client-tool-zuo-tutemita">開発効率アップ!Elasticsearch Client Tool 作ってみた</a></p>
<p>Hello Elasticsearch!にはお世話になっている人が多いんじゃないかなと。
今回はSublime Textのプラグインのお話でした。（すみません、Sublime Text使ってなくて。。。）
AtomとかIntellijのプラグインもあるとうれしいなー</p>
<h3 id="変わり種プラグインの作り方日本ibm黒澤亮二さん">変わり種プラグインの作り方　日本IBM　黒澤亮二さん</h3>
<p>スライド：<a href="http://www.slideshare.net/kuron99/elasticsearch-plugin-48848087">変わり種プラグインの作り方</a></p>
<p>Elasticsearchの拡張ポイントの話と、簡単なプラグインの作り方と少しElasticsearch内部の話をしていただきました。
Foundの資料が上がってました。さすが。あそこのブログは面白い話が多いんですよね。
社内で実際に使われてる話とかも聞いてみたい！</p>
<h2 id="その他感想などのブログ">その他、感想などのブログ</h2>
<ul>
<li><a href="http://suzuki.tdiary.net/20150602.html">第10回 Elasticsearch 勉強会へ参加してきた昨日の話</a></li>
<li><a href="http://qiita.com/t-sato/items/45ec24b8df9155d6488f">第10回elasticsearch勉強会 #elasticsearch #elasticsearchjp</a></li>
<li><a href="http://blog.shibayu36.org/entry/2015/06/02/162724">第10回elasticsearch勉強会に行ってきました</a></li>
<li><a href="http://tech.im-dmp.net/archives/3271">elasticsearch勉強会に登壇してきました</a></li>
</ul>
<h2 id="まとめ">まとめ</h2>
<p>懇親会で24Fに移動していただくということで、少し手間をかけてしまいました、すみませんでした。
今回も初参加の方がそこそこいたんじゃないかなと。
あとは、AWSサミットがあるために上京してて参加しましたという方もいらっしゃいました。
大きなカンファレンスの期間の前後に行うとこんなメリットもあるんですね、今後の参考にしたいと思います。
次回は7/27を予定しています。CTOのShayが来日予定です！</p>
<p>あと、東京以外の勉強会も検討しつつあります。興味のある方はコメントやTwitterで反応をいただけると嬉しいです。</p>
<p>スピーカーは随時募集中ですので、コメント、メール、ツイートなど、コンタクトしていただければと思います。
よろしくお願いいたします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Logstashを使ったElasticsearchの再インデックス（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/05/26/reindex-elasticsearch-with-logstash-ja/</link>
      <pubDate>Tue, 26 May 2015 16:08:10 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/05/26/reindex-elasticsearch-with-logstash-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Reindex Elasticsearch With Logstash Thanks David! マッピングを変更したり、インデックスの設定を変更したり、あるサ</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="http://david.pilato.fr/blog/2015/05/20/reindex-elasticsearch-with-logstash/">Reindex Elasticsearch With Logstash</a></p>
<p>Thanks David!</p>
<!-- more -->
<p>マッピングを変更したり、インデックスの設定を変更したり、あるサーバから他のサーバや、
あるクラスタから他のクラスタ（例えば複数のデータセンターのような場合）にデータを再インデックスしたくなることがあるでしょう。</p>
<p>後者のような場合は<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html">SnapshotやRestoreの機能</a>を利用することもできますが、インデックスの設定を変更をしたい場合は
その他の方法が必要になります。</p>
<p><a href="https://www.elastic.co/blog/logstash-1-5-0-ga-released">Logstash 1.5.0</a>で、
<a href="https://www.elastic.co/guide/en/logstash/current/plugins-inputs-elasticsearch.html">elasticsearch input</a>と<a href="https://www.elastic.co/guide/en/logstash/current/plugins-outputs-elasticsearch.html">elasticsearch output</a>を使うことで、とても簡単に再インデックスができます。</p>
<p>ではやってみましょう。</p>
<h2 id="古いクラスタ">古いクラスタ</h2>
<p>elasticsearch 1.5.2 はすでにダウンロード済みとして、<code>localhost:9200</code>で<code>old</code>という名前のクラスタを起動します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">bin/elasticsearch --cluster.name<span style="color:#f92672">=</span>old
</code></pre></div><p>クラスタに<code>person</code>という名前のインデックスが存在します。
これは、5シャードで、100万件のドキュメントを持っています。</p>

<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="http://david.pilato.fr/blog/images/reindex-es01/sense01.png" />
    </div>
    <a href="http://david.pilato.fr/blog/images/reindex-es01/sense01.png" itemprop="contentUrl"></a>
  </figure>
</div>

<h2 id="新しいクラスタ">新しいクラスタ</h2>
<p>次に新しいクラスタを起動します。
<code>localhost:9201</code>で<code>new</code>という名前のクラスタを起動します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">bin/elasticsearch --cluster.name<span style="color:#f92672">=</span>new
</code></pre></div><p>こちらは、空です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">curl -XGET <span style="color:#e6db74">&#34;http://localhost:9201/person&#34;</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
   <span style="color:#f92672">&#34;error&#34;</span>: <span style="color:#e6db74">&#34;IndexMissingException[[person] missing]&#34;</span>,
   <span style="color:#f92672">&#34;status&#34;</span>: <span style="color:#ae81ff">404</span>
}
</code></pre></div><h2 id="logstashのインストール">Logstashのインストール</h2>
<p>次に、Logstash 1.5.0をダウンロードして、インストールします。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">wget http://download.elastic.co/logstash/logstash/logstash-1.5.0.tar.gz
tar xzf logstash-1.5.0.tar.gz
cd logstash-1.5.0
</code></pre></div><p>logstashの設定ファイル<code>logstash.conf</code>を次のように設定します。</p>
<pre><code>input {
  # We read from the &quot;old&quot; cluster
  elasticsearch {
    hosts =&gt; [ &quot;localhost&quot; ]
    port =&gt; &quot;9200&quot;
    index =&gt; &quot;person&quot;
    size =&gt; 500
    scroll =&gt; &quot;5m&quot;
    docinfo =&gt; true
  }
}

output {
  # We write to the &quot;new&quot; cluster
  elasticsearch {
    host =&gt; &quot;localhost&quot;
    port =&gt; &quot;9201&quot;
    protocol =&gt; &quot;http&quot;
    index =&gt; &quot;%{[@metadata][_index]}&quot;
    index_type =&gt; &quot;%{[@metadata][_type]}&quot;
    document_id =&gt; &quot;%{[@metadata][_id]}&quot;
  }
  # We print dots to see it in action
  stdout {
    codec =&gt; &quot;dots&quot;
  }
}
</code></pre><h2 id="実行と修正">実行と修正</h2>
<p>実行します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">bin/logstash -f logstash.conf
</code></pre></div><h3 id="ドキュメントのチェックと修正">ドキュメントのチェックと修正</h3>
<p>何が起きたでしょう？</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">curl -XGET <span style="color:#e6db74">&#34;http://localhost:9200/person/person/AU1wqyQWZJKU8OibfxgH&#34;</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
   <span style="color:#f92672">&#34;_index&#34;</span>: <span style="color:#e6db74">&#34;person&#34;</span>,
   <span style="color:#f92672">&#34;_type&#34;</span>: <span style="color:#e6db74">&#34;person&#34;</span>,
   <span style="color:#f92672">&#34;_id&#34;</span>: <span style="color:#e6db74">&#34;AU1wqyQWZJKU8OibfxgH&#34;</span>,
   <span style="color:#f92672">&#34;_version&#34;</span>: <span style="color:#ae81ff">1</span>,
   <span style="color:#f92672">&#34;found&#34;</span>: <span style="color:#66d9ef">true</span>,
   <span style="color:#f92672">&#34;_source&#34;</span>: {
      <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Tali Elyne&#34;</span>,
      <span style="color:#f92672">&#34;dateOfBirth&#34;</span>: <span style="color:#e6db74">&#34;1955-05-03&#34;</span>,
      <span style="color:#f92672">&#34;gender&#34;</span>: <span style="color:#e6db74">&#34;female&#34;</span>,
      <span style="color:#f92672">&#34;children&#34;</span>: <span style="color:#ae81ff">2</span>,
      <span style="color:#f92672">&#34;marketing&#34;</span>: {
         <span style="color:#f92672">&#34;cars&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;shoes&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;toys&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;fashion&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;music&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;garden&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;electronic&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;hifi&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;food&#34;</span>: <span style="color:#ae81ff">846</span>
      },
      <span style="color:#f92672">&#34;address&#34;</span>: {
         <span style="color:#f92672">&#34;country&#34;</span>: <span style="color:#e6db74">&#34;Germany&#34;</span>,
         <span style="color:#f92672">&#34;zipcode&#34;</span>: <span style="color:#e6db74">&#34;0099&#34;</span>,
         <span style="color:#f92672">&#34;city&#34;</span>: <span style="color:#e6db74">&#34;Bonn&#34;</span>,
         <span style="color:#f92672">&#34;countrycode&#34;</span>: <span style="color:#e6db74">&#34;DE&#34;</span>,
         <span style="color:#f92672">&#34;location&#34;</span>: [
            <span style="color:#ae81ff">7.075943707068682</span>,
            <span style="color:#ae81ff">50.72883500730124</span>
         ]
      }
   }
}
</code></pre></div><p>もう一方のクラスタと比較してみましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">curl -XGET <span style="color:#e6db74">&#34;http://localhost:9201/person/person/AU1wqyQWZJKU8OibfxgH&#34;</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
   <span style="color:#f92672">&#34;_index&#34;</span>: <span style="color:#e6db74">&#34;person&#34;</span>,
   <span style="color:#f92672">&#34;_type&#34;</span>: <span style="color:#e6db74">&#34;person&#34;</span>,
   <span style="color:#f92672">&#34;_id&#34;</span>: <span style="color:#e6db74">&#34;AU1wqyQWZJKU8OibfxgH&#34;</span>,
   <span style="color:#f92672">&#34;_version&#34;</span>: <span style="color:#ae81ff">1</span>,
   <span style="color:#f92672">&#34;found&#34;</span>: <span style="color:#66d9ef">true</span>,
   <span style="color:#f92672">&#34;_source&#34;</span>: {
      <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Tali Elyne&#34;</span>,
      <span style="color:#f92672">&#34;dateOfBirth&#34;</span>: <span style="color:#e6db74">&#34;1955-05-03&#34;</span>,
      <span style="color:#f92672">&#34;gender&#34;</span>: <span style="color:#e6db74">&#34;female&#34;</span>,
      <span style="color:#f92672">&#34;children&#34;</span>: <span style="color:#ae81ff">2</span>,
      <span style="color:#f92672">&#34;marketing&#34;</span>: {
         <span style="color:#f92672">&#34;cars&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;shoes&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;toys&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;fashion&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;music&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;garden&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;electronic&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;hifi&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;food&#34;</span>: <span style="color:#ae81ff">846</span>
      },
      <span style="color:#f92672">&#34;address&#34;</span>: {
         <span style="color:#f92672">&#34;country&#34;</span>: <span style="color:#e6db74">&#34;Germany&#34;</span>,
         <span style="color:#f92672">&#34;zipcode&#34;</span>: <span style="color:#e6db74">&#34;0099&#34;</span>,
         <span style="color:#f92672">&#34;city&#34;</span>: <span style="color:#e6db74">&#34;Bonn&#34;</span>,
         <span style="color:#f92672">&#34;countrycode&#34;</span>: <span style="color:#e6db74">&#34;DE&#34;</span>,
         <span style="color:#f92672">&#34;location&#34;</span>: [
            <span style="color:#ae81ff">7.075943707068682</span>,
            <span style="color:#ae81ff">50.72883500730124</span>
         ]
      },
      <span style="color:#f92672">&#34;@version&#34;</span>: <span style="color:#e6db74">&#34;1&#34;</span>,
      <span style="color:#f92672">&#34;@timestamp&#34;</span>: <span style="color:#e6db74">&#34;2015-05-20T09:53:44.089Z&#34;</span>
   }
}
</code></pre></div><p>Logstashは<code>@version</code>と<code>@timestamp</code>フィールドを追加してしました。
これらを除去したいので、<a href="http://www.elastic.co/guide/en/logstash/current/plugins-filters-mutate.html">Mutate filter plugin</a>の<a href="http://www.elastic.co/guide/en/logstash/current/plugins-filters-mutate.html#plugins-filters-mutate-remove_field"><code>remove_field</code></a>を使います。</p>
<pre><code>filter {
  mutate {
    remove_field =&gt; [ &quot;@timestamp&quot;, &quot;@version&quot; ]
  }
}
</code></pre><h3 id="マッピングのチェックと修正">マッピングのチェックと修正</h3>
<p>実際に、logstashは<code>_source</code>フィールドを既存のドキュメントから読み込み、
それらを新しいクラスタに直接投入しています。
しかし、logstashはマッピングについてはケアしていません。</p>
<p>古いマッピングと新しいマッピングを比較するために、マッピングを取得してみましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">curl -XGET <span style="color:#e6db74">&#34;http://localhost:9200/person/person/_mapping&#34;</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
   <span style="color:#f92672">&#34;person&#34;</span>: {
      <span style="color:#f92672">&#34;mappings&#34;</span>: {
         <span style="color:#f92672">&#34;person&#34;</span>: {
            <span style="color:#f92672">&#34;properties&#34;</span>: {
               <span style="color:#f92672">&#34;address&#34;</span>: {
                  <span style="color:#f92672">&#34;properties&#34;</span>: {
                     <span style="color:#f92672">&#34;city&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>,
                        <span style="color:#f92672">&#34;index&#34;</span>: <span style="color:#e6db74">&#34;not_analyzed&#34;</span>
                     },
                     <span style="color:#f92672">&#34;country&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>,
                        <span style="color:#f92672">&#34;index&#34;</span>: <span style="color:#e6db74">&#34;not_analyzed&#34;</span>
                     },
                     <span style="color:#f92672">&#34;countrycode&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>,
                        <span style="color:#f92672">&#34;index&#34;</span>: <span style="color:#e6db74">&#34;not_analyzed&#34;</span>
                     },
                     <span style="color:#f92672">&#34;location&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;geo_point&#34;</span>
                     },
                     <span style="color:#f92672">&#34;zipcode&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>
                     }
                  }
               },
               <span style="color:#f92672">&#34;children&#34;</span>: {
                  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
               },
               <span style="color:#f92672">&#34;dateOfBirth&#34;</span>: {
                  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;date&#34;</span>,
                  <span style="color:#f92672">&#34;format&#34;</span>: <span style="color:#e6db74">&#34;dateOptionalTime&#34;</span>
               },
               <span style="color:#f92672">&#34;gender&#34;</span>: {
                  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>,
                  <span style="color:#f92672">&#34;index&#34;</span>: <span style="color:#e6db74">&#34;not_analyzed&#34;</span>
               },
               <span style="color:#f92672">&#34;marketing&#34;</span>: {
                  <span style="color:#f92672">&#34;properties&#34;</span>: {
                     <span style="color:#f92672">&#34;cars&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;electronic&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;fashion&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;food&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;garden&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;hifi&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;music&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;shoes&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;toys&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     }
                  }
               },
               <span style="color:#f92672">&#34;name&#34;</span>: {
                  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>
               }
            }
         }
      }
   }
}
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">curl -XGET <span style="color:#e6db74">&#34;http://localhost:9201/person/person/_mapping&#34;</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
   <span style="color:#f92672">&#34;person&#34;</span>: {
      <span style="color:#f92672">&#34;mappings&#34;</span>: {
         <span style="color:#f92672">&#34;person&#34;</span>: {
            <span style="color:#f92672">&#34;properties&#34;</span>: {
               <span style="color:#f92672">&#34;address&#34;</span>: {
                  <span style="color:#f92672">&#34;properties&#34;</span>: {
                     <span style="color:#f92672">&#34;city&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>
                     },
                     <span style="color:#f92672">&#34;country&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>
                     },
                     <span style="color:#f92672">&#34;countrycode&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>
                     },
                     <span style="color:#f92672">&#34;location&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;double&#34;</span>
                     },
                     <span style="color:#f92672">&#34;zipcode&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>
                     }
                  }
               },
               <span style="color:#f92672">&#34;children&#34;</span>: {
                  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
               },
               <span style="color:#f92672">&#34;dateOfBirth&#34;</span>: {
                  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;date&#34;</span>,
                  <span style="color:#f92672">&#34;format&#34;</span>: <span style="color:#e6db74">&#34;dateOptionalTime&#34;</span>
               },
               <span style="color:#f92672">&#34;gender&#34;</span>: {
                  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>
               },
               <span style="color:#f92672">&#34;marketing&#34;</span>: {
                  <span style="color:#f92672">&#34;properties&#34;</span>: {
                     <span style="color:#f92672">&#34;cars&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;electronic&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;fashion&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;food&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;garden&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;hifi&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;music&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;shoes&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;toys&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     }
                  }
               },
               <span style="color:#f92672">&#34;name&#34;</span>: {
                  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>
               }
            }
         }
      }
   }
}
</code></pre></div><p>これにより、いくつかの相違を発見できます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"> <span style="color:#e6db74">&#34;location&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> {
    <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;geo_point&#34;</span>
 }
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"> <span style="color:#e6db74">&#34;location&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> {
    <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;double&#34;</span>
 }
</code></pre></div><p>データをインデックスする「前」に、実際に利用したいマッピングでインデックスを作成しておくことで、
この問題に対処できます。
この時点で、オリジナルのマッピングを望んだ形に変更することができます。例えば、アナライザを変更したりです。
また、インデックスの設定を新しく定義することもできます。
デフォルトでは、Elasticsearchは5つのシャードと各シャードに対して1つのレプリカを作成します。
しかし、この時点でもう一度変更することが可能です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">curl -XDELETE <span style="color:#e6db74">&#34;http://localhost:9201/person&#34;</span>
curl -XPUT <span style="color:#e6db74">&#34;http://localhost:9201/person&#34;</span> -d<span style="color:#e6db74">&#39;
</span><span style="color:#e6db74">{
</span><span style="color:#e6db74">  &#34;settings&#34;: {
</span><span style="color:#e6db74">    &#34;number_of_shards&#34;: 1,
</span><span style="color:#e6db74">    &#34;number_of_replicas&#34;: 0
</span><span style="color:#e6db74">  }
</span><span style="color:#e6db74">}&#39;</span>
curl -XPUT <span style="color:#e6db74">&#34;http://localhost:9201/person/person/_mapping&#34;</span> -d<span style="color:#e6db74">&#39;
</span><span style="color:#e6db74">{
</span><span style="color:#e6db74">  &#34;person&#34;: {
</span><span style="color:#e6db74">    &#34;properties&#34;: {
</span><span style="color:#e6db74">      &#34;address&#34;: {
</span><span style="color:#e6db74">        &#34;properties&#34;: {
</span><span style="color:#e6db74">          &#34;city&#34;: {
</span><span style="color:#e6db74">            &#34;type&#34;: &#34;string&#34;,
</span><span style="color:#e6db74">            &#34;index&#34;: &#34;not_analyzed&#34;
</span><span style="color:#e6db74">          },
</span><span style="color:#e6db74">          &#34;country&#34;: {
</span><span style="color:#e6db74">            &#34;type&#34;: &#34;string&#34;,
</span><span style="color:#e6db74">            &#34;index&#34;: &#34;not_analyzed&#34;
</span><span style="color:#e6db74">          },
</span><span style="color:#e6db74">          &#34;countrycode&#34;: {
</span><span style="color:#e6db74">            &#34;type&#34;: &#34;string&#34;,
</span><span style="color:#e6db74">            &#34;index&#34;: &#34;not_analyzed&#34;
</span><span style="color:#e6db74">          },
</span><span style="color:#e6db74">          &#34;location&#34;: {
</span><span style="color:#e6db74">            &#34;type&#34;: &#34;geo_point&#34;
</span><span style="color:#e6db74">          },
</span><span style="color:#e6db74">          &#34;zipcode&#34;: {
</span><span style="color:#e6db74">            &#34;type&#34;: &#34;string&#34;
</span><span style="color:#e6db74">          }
</span><span style="color:#e6db74">        }
</span><span style="color:#e6db74">      },
</span><span style="color:#e6db74">      &#34;children&#34;: {
</span><span style="color:#e6db74">        &#34;type&#34;: &#34;long&#34;
</span><span style="color:#e6db74">      },
</span><span style="color:#e6db74">      &#34;dateOfBirth&#34;: {
</span><span style="color:#e6db74">        &#34;type&#34;: &#34;date&#34;,
</span><span style="color:#e6db74">        &#34;format&#34;: &#34;dateOptionalTime&#34;
</span><span style="color:#e6db74">      },
</span><span style="color:#e6db74">      &#34;gender&#34;: {
</span><span style="color:#e6db74">        &#34;type&#34;: &#34;string&#34;,
</span><span style="color:#e6db74">        &#34;index&#34;: &#34;not_analyzed&#34;
</span><span style="color:#e6db74">      },
</span><span style="color:#e6db74">      &#34;marketing&#34;: {
</span><span style="color:#e6db74">        &#34;properties&#34;: {
</span><span style="color:#e6db74">          &#34;cars&#34;: {
</span><span style="color:#e6db74">            &#34;type&#34;: &#34;long&#34;
</span><span style="color:#e6db74">          },
</span><span style="color:#e6db74">          &#34;electronic&#34;: {
</span><span style="color:#e6db74">            &#34;type&#34;: &#34;long&#34;
</span><span style="color:#e6db74">          },
</span><span style="color:#e6db74">          &#34;fashion&#34;: {
</span><span style="color:#e6db74">            &#34;type&#34;: &#34;long&#34;
</span><span style="color:#e6db74">          },
</span><span style="color:#e6db74">          &#34;food&#34;: {
</span><span style="color:#e6db74">            &#34;type&#34;: &#34;long&#34;
</span><span style="color:#e6db74">          },
</span><span style="color:#e6db74">          &#34;garden&#34;: {
</span><span style="color:#e6db74">            &#34;type&#34;: &#34;long&#34;
</span><span style="color:#e6db74">          },
</span><span style="color:#e6db74">          &#34;hifi&#34;: {
</span><span style="color:#e6db74">            &#34;type&#34;: &#34;long&#34;
</span><span style="color:#e6db74">          },
</span><span style="color:#e6db74">          &#34;music&#34;: {
</span><span style="color:#e6db74">            &#34;type&#34;: &#34;long&#34;
</span><span style="color:#e6db74">          },
</span><span style="color:#e6db74">          &#34;shoes&#34;: {
</span><span style="color:#e6db74">            &#34;type&#34;: &#34;long&#34;
</span><span style="color:#e6db74">          },
</span><span style="color:#e6db74">          &#34;toys&#34;: {
</span><span style="color:#e6db74">            &#34;type&#34;: &#34;long&#34;
</span><span style="color:#e6db74">          }
</span><span style="color:#e6db74">        }
</span><span style="color:#e6db74">      },
</span><span style="color:#e6db74">      &#34;name&#34;: {
</span><span style="color:#e6db74">        &#34;type&#34;: &#34;string&#34;
</span><span style="color:#e6db74">      }
</span><span style="color:#e6db74">    }
</span><span style="color:#e6db74">  }
</span><span style="color:#e6db74">}&#39;</span>
</code></pre></div><p>さて、もう一度再インデックスしましょう！</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">bin/logstash -f logstash.conf
</code></pre></div>

<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="http://david.pilato.fr/blog/images/reindex-es01/sense02.png" />
    </div>
    <a href="http://david.pilato.fr/blog/images/reindex-es01/sense02.png" itemprop="contentUrl"></a>
  </figure>
</div>

<h2 id="インデックスやタイプ名の変更">インデックスやタイプ名の変更</h2>
<p>もちろん、インデックス名やタイプ名、IDを変更したい場合も変更が可能です！:)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">  <span style="color:#960050;background-color:#1e0010">elasticsearch</span> {
    <span style="color:#960050;background-color:#1e0010">host</span> <span style="color:#960050;background-color:#1e0010">=&gt;</span> <span style="color:#f92672">&#34;localhost&#34;</span>
    <span style="color:#960050;background-color:#1e0010">port</span> <span style="color:#960050;background-color:#1e0010">=&gt;</span> <span style="color:#e6db74">&#34;9201&#34;</span>
    <span style="color:#960050;background-color:#1e0010">protocol</span> <span style="color:#960050;background-color:#1e0010">=&gt;</span> <span style="color:#e6db74">&#34;http&#34;</span>
    <span style="color:#960050;background-color:#1e0010">index</span> <span style="color:#960050;background-color:#1e0010">=&gt;</span> <span style="color:#e6db74">&#34;europe_people&#34;</span>
    <span style="color:#960050;background-color:#1e0010">index_type</span> <span style="color:#960050;background-color:#1e0010">=&gt;</span> <span style="color:#e6db74">&#34;someone&#34;</span>
    <span style="color:#960050;background-color:#1e0010">document_id</span> <span style="color:#960050;background-color:#1e0010">=&gt;</span> <span style="color:#e6db74">&#34;%{[@metadata][_id]}&#34;</span>
  }
</code></pre></div></content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 1.5.2 および 1.4.5リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/04/28/elasticsearch-1-5-2-and-1-4-5-released-ja/</link>
      <pubDate>Tue, 28 Apr 2015 15:14:08 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/04/28/elasticsearch-1-5-2-and-1-4-5-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Elasticsearch 1.5.2 Released 本日（4/27）、Lucene 4.10.4ベースのEla</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="https://www.elastic.co/blog/elasticsearch-1-5-2-and-1-4-5-released">Elasticsearch 1.5.2 Released</a></p>
<p>本日（4/27）、<strong>Lucene 4.10.4</strong>ベースの<strong>Elasticsearch 1.5.1</strong>および<strong>Elasticsearch 1.4.5</strong> をセキュリティバグフィックス版をリリースしました。
ダウンロードおよびすべての変更については次のリンクをごらんください。</p>
<ul>
<li>最新安定版：<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-5-2">Elasticsearch 1.5.2</a></li>
<li>1.4系バグフィックス：<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-4-5">Elasticsearch 1.4.5</a></li>
</ul>
<p><em>本リリースはディレクトリトラバーサルの脆弱性のフィックスです。すべてのユーザにアップグレードを勧めます。</em></p>
<!-- more -->
<p>過去のリリースに関するブログは以下のリンクを参照してください。</p>
<ul>
<li><em>1.5</em>:<a href="http://www.elasticsearch.org/blog/elasticsearch-1-5-1-released/">1.4.1</a>,
<a href="http://www.elasticsearch.org/blog/elasticsearch-1-5-0-released/">1.5.0</a></li>
<li><em>1.4</em>:<a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-4-released/">1.4.4</a>,<a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-3-released/">1.4.3</a>,
<a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-2-released/">1.4.2</a>,<a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-1-released/">1.4.1</a>,
<a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-0-released/">1.4.0</a>, <a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-0-beta-released/">1.4.0.Beta1</a></li>
</ul>
<p>すべての<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-5-2">1.5.2</a>および<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-4-5">1.4.5</a>の変更についてはリンクをごらんください。以下では、セキュリティの問題について紹介します。</p>
<h2 id="ディレクトリトラバーサル脆弱性の発見">ディレクトリトラバーサル脆弱性の発見</h2>
<p>1.5.2および1.4.5以前の全バージョンのElasticsearchで、ディレクトリトラバーサル攻撃に対する脆弱性がみつかりました。
攻撃者はElasticsearchを実行しているサーバからファイルを取得することができます。
この脆弱性はインストールしたばかりのElasticsearchには存在しません。
この脆弱性は&quot;site plugin&quot;がインストールされると露呈します。
ElasticのMarvelプラグインおよびコミュニティサポートの多くのプラグイン（例：Kopf、BigDesk、Head）がsite pluginです。
Elastic Shield、Licensing、Cloud-AWS、Cloud-GCE、Cloud-Azure、analysis pluginおよびriverプラグインはsite pluginでは<em>ありません</em>。</p>
<p>この問題を<a href="https://www.elastic.co/community/security">CVE-2015-3337</a>としました。</p>
<p>バージョン1.5.2と1.4.5はこの脆弱性に対して対策済みで、私たちはすべてのユーザにアップグレードを勧めています。</p>
<p>アップグレードを望まないユーザはいくつかの方法でこの脆弱性に対して対応可能ですが、これらの方法はsite pluginを動作させなくします。</p>
<ul>
<li>site pluginをインストールしているノードの<code>elasticsearch.yml</code>の<code>http.disable_sites</code>を<code>true</code>に設定し、Elasticsearchのノードを再起動</li>
<li>ファイアウォールもしくはプロキシを利用して、<code>/_plugin</code>へのHTTPリクエストをブロック</li>
<li>すべてのsite pluginをすべてのElasticsearchノードからアンインストール</li>
</ul>
<p>この問題を報告していただいた、DocuSignのJohn Heasmanに感謝いたします。</p>
<h2 id="他の変更について">他の変更について</h2>
<ul>
<li><a href="https://github.com/elastic/elasticsearch/pull/10526">インデックスされたスクリプトおよびテンプレート</a>を上書きもしくは削除時に、キャッシュからも完全に削除する。</li>
<li>geo-shapeの多数のフィックス（<code>distance_error_pct</code>を利用した場合の、重要な<a href="https://github.com/elastic/elasticsearch/pull/10679">precisionに関するフィックス</a>を含む）</li>
<li>インデックステンプレートのデフォルトマッピングがバルクインデキシング中にも考慮するように修正</li>
<li>Shadowレプリカが<a href="https://github.com/elastic/elasticsearch/pull/10688">ファイルシステムの遅延</a>に対する対障害性を向上し、プライマリシャードの<a href="https://github.com/elastic/elasticsearch/pull/10585">よりスムーズなリロケーション</a>をサポート</li>
<li><a href="http://github.com/elastic/elasticsearch/issues/10602">geo-contexts</a>をcompletion suggesterで使用した場合のマッピングのリフレッシュループを改善</li>
</ul>
<p>いくつかの重要な変更がv1.4.5にバックポートされています。</p>
<ul>
<li><a href="http://github.com/elastic/elasticsearch/issues/10463">大きなシャードのリカバリを早くする</a>ためのシャードリカバリ中のマージを可能に
* <a href="http://github.com/elastic/elasticsearch/issues/9797">truncated translogs</a>の操作をグレースフルに</li>
<li>マージが遅くなる場合に、<a href="http://github.com/elastic/elasticsearch/issues/9986">delete-by-queryを減速</a></li>
</ul>
<p>ぜひ、<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-5-2">Elasticsearch 1.5.2</a>をダウンロードして、試してみてください。
そして、感想をTwitter(<a href="https://twitter.com/elastic">@elastic</a>)などで教えて下さい。
また、問題がありましたら、<a href="https://github.com/elastic/elasticsearch/issues">GitHub issues page</a>で報告をお願いします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>第9回Elasticsearch勉強会を開催しました。#elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2015/04/17/9th-elasticsearch-jp/</link>
      <pubDate>Fri, 17 Apr 2015 14:41:54 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/04/17/9th-elasticsearch-jp/</guid>
      <description>第9回Elsticsearch勉強会を開催しました。 スタッフの皆さん、スピーカーの皆さん、開場提供していただいたリクルートテクノロジーズさん</description>
      <content:encoded><p><a href="https://elasticsearch.doorkeeper.jp/events/23012">第9回Elsticsearch勉強会</a>を開催しました。
スタッフの皆さん、スピーカーの皆さん、開場提供していただいた<a href="http://recruit-tech.co.jp">リクルートテクノロジーズさん</a>、ありがとうございました！
次回もよろしくお願いします！参加していただき盛り上げていただいた参加者の皆さんもありがとうございました。</p>
<!-- more -->
<p>今回はトレーニングで来日していたIgorとNathanによる特別公演でした。
昨年同様、<a href="http://samuraism.com">サムライズム</a>の<a href="https://twitter.com/yusuke">@yusuke</a>さんに
テキスト翻訳していただき、大変助かりました。ほんとうにすごかった。。。</p>
<h3 id="チェックイン数など">チェックイン数など</h3>
<ul>
<li>今回はチェックインした人：119名</li>
<li>キャンセルしなかった人：45名</li>
</ul>
<p>でした。今回はキャンセル待ちのまま当日を迎えた人もいなかったので良かったかなと。
今回から懇親会ページを別にしてみました。本編の勉強会に参加登録していた方には何度かメールを出していたので、
見つけていなかった人は以内とは思うのですが、勉強会のページと間違える人がいたらしいという話を聞きました。
Doorkeeperで1イベントで複数のチケットにそれぞれの参加者数を設定できるようになると嬉しいかもなぁ。</p>
<p>さて、いつもの通り簡単なメモです。
本当に簡単にですが。</p>
<h2 id="resiliency-in-elasticsearch-and-lucene--igor-motov">Resiliency in Elasticsearch and Lucene / Igor Motov</h2>
<p>スライド：https://speakerdeck.com/elastic/resiliency-in-elasticsearch-and-lucene</p>
<p>※上記スライドは少し古いバージョンです。公開されたら差し替える予定です。</p>
<p>サンフランシスコで行われた<a href="https://www.elastic.co/elasticon">Elastic{ON}</a>（弊社初のカンファレンス）で行われたセッションの
改良版といったところでしょうか。
話の中で登場した機能などのリンクをざっとアップしておきます。</p>
<ul>
<li><a href="http://www.elastic.co/guide/en/elasticsearch/guide/current/fielddata.html">Fielddata</a></li>
<li><a href="http://www.elastic.co/guide/en/elasticsearch/guide/current/doc-values.html">Doc Values</a></li>
<li><a href="http://www.elastic.co/guide/en/elasticsearch/resiliency/current/index.html">Resiliency Status</a></li>
</ul>
<h2 id="kibana4-whats-new---nathan-zamecnik">Kibana4: What&rsquo;s New ? / Nathan Zamecnik</h2>
<p>スライド：未定</p>
<p>Kibana4の紹介をデモを交えてという感じでした。
こちらは、スライドよりもデモを見てもらうのが一番いいのですが。。。</p>
<p>いくつかQAがあったので補足を。ちなみに、Issueのラベルに実装される予定のバージョンが付与されてたりします。</p>
<ul>
<li>Q：グラフをPDFでエクスポートとかできますか？
<ul>
<li>A：4.3.0で実装される予定です。関連Issueはこちら。https://github.com/elastic/kibana/issues/509</li>
</ul>
</li>
<li>Q：巨大な数値の場合にKB、MBなどといった表示は可能ですか？
<ul>
<li>A：4.1.0で実装される予定です。関連Issueはこちら。https://github.com/elastic/kibana/issues/1543</li>
</ul>
</li>
<li>Q：地図のズームを固定することはできますか？
<ul>
<li>A：4.1.0で実装される予定です。関連Issueはこちら。https://github.com/elastic/kibana/issues/1442</li>
</ul>
</li>
</ul>
<h2 id="その他感想などのブログ">その他、感想などのブログ</h2>
<ul>
<li><a href="http://suzuki.tdiary.net/20150415.html#p01">[Elasticsearch] 第9回 Elasticsearch 勉強会へ参加してきた</a></li>
</ul>
<h2 id="まとめ">まとめ</h2>
<p>今回は特別バージョンでした。かなり詳しい話だったので面白かったと思います。
Kibanaはデモを見ていただけましたし。また、海外から人を呼べるといいなぁ。</p>
<p>次回は6月ごろをめどに計画しようかと。
スピーカーは随時募集中ですので、コメント、メール、ツイートなど、コンタクトしていただければと思います。 よろしくお願いいたします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 1.5.1リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/04/13/elasticsearch-1-5-1-released-ja/</link>
      <pubDate>Mon, 13 Apr 2015 11:34:31 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/04/13/elasticsearch-1-5-1-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Elasticsearch 1.5.1 Released 本日（4/9）、Lucene 4.10.4ベースのElas</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="https://www.elastic.co/blog/elasticsearch-1-5-1-released">Elasticsearch 1.5.1 Released</a></p>
<p>本日（4/9）、<strong>Lucene 4.10.4</strong>ベースの<strong>Elasticsearch 1.5.1</strong> をリリースしました。
このリリースはElasticsearchの最新の安定バージョンとなります。</p>
<p>すべての変更については<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-5-1">download Elasticsearch 1.5.1 here</a>をごらんください。</p>
<!-- more -->
<p>本リリースはシャードを新しいノードに配置するスピードを改善するためのバグフィックスを含んでいます。
シャードのリカバリーの最初のフェーズで、コピー元のノードからコピー先のノードへすべてのセグメントをコピーします。
このフェーズ中には登録、更新削除のリクエストはトランザクションログに記録され、リカバリが終了したあとに
コピー先のノードでトランザクションログが再生されます。
シャードが大きい場合、トランザクションログに多数のイベントがたまってしまいます。</p>
<p>以前では、新しいセグメントのマージはリカバリ中のコピー先のノードでは、実行できませんでした。
大きなトランザクションログは結果として、小さな新しいセグメントを多く生成し、リカバリのスピードに非常に影響を与えます。
Issue <a href="https://github.com/elastic/elasticsearch/pull/10463">#10463</a>は
リカバリ中のコピー先のシャードのマージを可能にする変更です。</p>
<p>その他の注目すべきバグフィックスは次のものになります。</p>
<ul>
<li>多くの削除によりバージョンマップがいっぱいになった場合にrefreshを実行するように変更(<a href="https://github.com/elastic/elasticsearch/pull/10312">#10312</a>)</li>
<li>多数のスナップショットを含んだリポジトリの管理の改善(<a href="https://github.com/elastic/elasticsearch/pull/10366">#10366</a>)</li>
<li>実験的な機能である<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-inner-hits.html">inner hits</a>のバグフィックス(<a href="https://github.com/elastic/elasticsearch/pull/10388">#10388</a>, <a href="https://github.com/elastic/elasticsearch/pull/10353">#10353</a>, <a href="https://github.com/elastic/elasticsearch/pull/10309">#10309</a>, <a href="https://github.com/elastic/elasticsearch/pull/10235">#10235</a>)</li>
</ul>
<p>最後に、<a href="https://www.elastic.co/blog/deprecating_rivers">Riverが非推奨となりました</a>、まだ見ていない場合は記事をご覧ください。</p>
<p>ぜひ、<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-5-1">Elasticsearch 1.5.1</a>をダウンロードして、試してみてください。
そして、感想をTwitter(<a href="https://twitter.com/elastic">@elastic</a>)などで教えて下さい。
また、問題がありましたら、<a href="https://github.com/elastic/elasticsearch/issues">GitHub issues page</a>で報告をお願いします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch勉強会 in 名古屋を開催しました。#elasticsearch #elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2015/04/04/elasticsearch-study-session-at-nagoya/</link>
      <pubDate>Sat, 04 Apr 2015 09:47:19 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/04/04/elasticsearch-study-session-at-nagoya/</guid>
      <description>Elasticsearch勉強会 in 名古屋を開催しました。 初の東京以外での勉強会です。 企画、セッションなどお手伝いいただいた@smogamiさ</description>
      <content:encoded><p><a href="https://elasticsearch.doorkeeper.jp/events/21984">Elasticsearch勉強会 in 名古屋</a>を開催しました。
初の東京以外での勉強会です。
企画、セッションなどお手伝いいただいた<a href="https://twitter.com/smogami">@smogami</a>さん、<a href="https://twitter.com/mzp">@mzp</a>さんありがとうございました！</p>

<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" style="max-width:500">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20150406/nagoya.jpg" />
    </div>
    <a href="/images/entries/20150406/nagoya.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<!-- more -->
<h2 id="elasticsearchelk-stack紹介-johtani">Elasticsearch/ELK stack紹介 @johtani</h2>
<p>スライド：<a href="https://speakerdeck.com/johtani/introduction-elasticsearch-and-elk-elasticsearchmian-qiang-hui-in-nagoya">Introduction Elasticsearch</a></p>
<p>初回（次回があるかはわかりませんが。。。）ということもあり、Elasticsearchの説明を行いました。
あと、LogstashとKibanaも。
Kibanaについては、手元の環境でいつものアクセスログのデモやなどを行いました。
また、LTの後に時間があったので、前回の勉強会で利用したチェックリストの説明なども。</p>
<h2 id="スタンドファームにおけるelasticsearch導入事例-mzphttpstwittercommzp-さん">スタンドファームにおけるElasticsearch導入事例 <a href="https://twitter.com/mzp">@mzp</a> さん</h2>
<p>スライド：後日アップ？</p>
<p>* 使ってるのはKibana3</p>
<ul>
<li>アクセスログが保存されてたけど、活用できてなかった。</li>
<li>Fluentd、Elasticsearch、Kibanaをいれて、可視化してみた。</li>
<li>普通にログ検索が簡単にできて嬉しい</li>
<li>システムのレスポンスの性能値などを可視化できるようにして性能改善中</li>
</ul>
<h2 id="kibanaでログ分析を1年続けてみたら業務システムの保守と運用が捗った仮-smogamihttpstwittercomsmogami-さん">Kibanaでログ分析を1年続けてみたら業務システムの保守と運用が捗った(仮) <a href="https://twitter.com/smogami">@smogami</a> さん</h2>
<p>スライド：「<a href="https://speakerdeck.com/exoego/how-and-why-i-have-been-leveraging-kibana-for-devops">Kibanaでログ分析を1年続けてみたら業務システムの保守と運用が捗った</a>」</p>
<ul>
<li>名古屋でJavaの勉強会を主催してみたり（最近できてないけど）</li>
<li>導入するのになかなか大変だった（ファイアウォールだったりが）。。。</li>
</ul>
<p>Kibanaを使ってどんなことをしてるのか？</p>
<ul>
<li>既存システムなどの機能の実行回数やレスポンス時間の推移</li>
<li>曜日ごとにもチェック</li>
<li>どの機能がよく使われるのか？</li>
<li>対象となっているシステムはJavaのシステム。</li>
</ul>
<p>QA</p>
<ul>
<li>Q：ログの出力は新規に追加したのか？
<ul>
<li>A : ログの出力自体はLog4Jの設定を変更しただけ。もともと、各メソッドの開始と終了にそれぞれ時間が出力される仕組みがある。<br>
ログの読み込み自体は自作ツールを利用。</li>
</ul>
</li>
</ul>
<h2 id="飛び込みlt-dabitshttpstwittercomdabits-さん">飛び込みLT <a href="https://twitter.com/dabits">@dabits</a> さん</h2>
<p>スライド：未定</p>
<p>Kibanaの使い道</p>
<ul>
<li>KPIツール</li>
<li>エゴサーチツール - Twitterや2chなどのデータを解析ソーシャル分析みたいな感じ？
* ダッシュボードを用意してあげる場合もあるが、触っていろんな機能を試す人も。</li>
</ul>
<h2 id="感想反省点など">感想・反省点など</h2>
<p>30名弱の方に参加していただきました。ありがとうございました。
東京の勉強会でもそうですが、半分くらいが検索、半分くらいがログ解析関連に興味がある感じでした。
飛び込みLTもしていただけましたし。会場内限定の話もいくつか。</p>
<h4 id="場所">場所</h4>
<p>場所が少しわかりにくかったかなと。。。建物の入り口に看板がないので、1名に看板役として立っていただきました。
ただ、設備は充実していましたし、室内も綺麗でよかったです。</p>


<div class="box" style="max-width:300">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20150406/seminar_room.jpg" />
    </div>
    <a href="/images/entries/20150406/seminar_room.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<h4 id="懇親会">懇親会</h4>
<p>11名（+私）でした。美味しい手羽先などをいただきながら、Elasticsearch以外のことでも盛り上がりましたw。
また、名古屋の観光名所なども教えてもらったりと有意義な時間でしたw。</p>
<p>ということで、少しでもElasticsearch、Kibana、Logstashなどのユーザが増えてくれればうれしいかなと。
私抜きでも勉強会はできると思うので、今後も開いてもらえるとうれしいかぎりです。
初めての東京以外での勉強会でどんな感じの方が利用しているのか、興味があるのかといったことも知ることができました。</p>
<h2 id="関連ブログなど">関連ブログなど</h2>
<ul>
<li><a href="http://blog.exoego.net/2015/04/kibana4-use-case.html">Kibana4活用事例を話しました</a></li>
</ul>
<h2 id="その他余談">その他（余談）</h2>
<p>コンパルという喫茶店のアイスコーヒー。ちょっと新鮮な体験でした。


<div class="box" style="max-width:300">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20150406/ice_coffee.jpg" />
    </div>
    <a href="/images/entries/20150406/ice_coffee.jpg" itemprop="contentUrl"></a>
  </figure>
</div>
</p>
<p>あとは、日曜日に観光場所として教えてもらった、<a href="http://www.tcmit.org/">トヨタ産業技術記念館</a>にも行ってみました。
一人だったけど、非常に楽しめました。実演とかあって、わかりやすいし。
トヨタが自動織機の会社が始まりだってのは知らなかった。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 1.5.0リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/04/01/elasticsearch-1-5-0-released-ja/</link>
      <pubDate>Wed, 01 Apr 2015 12:38:16 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/04/01/elasticsearch-1-5-0-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Elasticsearch 1.5.0 Released 本日（3/23）、Lucene 4.10.4ベースのEla</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="https://www.elastic.co/blog/elasticsearch-1-5-0-released">Elasticsearch 1.5.0 Released</a></p>
<p>本日（3/23）、<strong>Lucene 4.10.4</strong>ベースの<strong>Elasticsearch 1.5.0</strong> をリリースしました。
このリリースはElasticsearchの最新の安定バージョンとなります。
多くの<em>resiliency(復元性、弾力性) enhancement</em>とバグフィックスを含んでおり、
すべてのユーザにアップグレードを推奨しています。</p>
<p>すべての変更については<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-5-0">download Elasticsearch 1.5.0 here</a>をごらんください。</p>
<p>460PRという大量の変更を含む本リリースは、Elasticsearchをよりresilient(弾力のあるもの)にするために
費やされています。</p>
<!-- more -->
<h3 id="inner-hits">Inner hits</h3>
<p>本リリースで追加された、Elasticsearchに最もリクエストされたものの一つがinner hitsです。
これは、<code>has_child</code>もしくは<code>nested</code>クエリにマッチした子のドキュメントを、各親ドキュメントと一緒に返すことができます。</p>
<p>例えば、<code>blog</code>という親ドキュメントと<code>comment</code>という子ドキュメントを持っているとします。
この時、&ldquo;full text search&quot;というコメントを持ったブログ記事を検索したいとします。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#960050;background-color:#1e0010">GET</span> <span style="color:#960050;background-color:#1e0010">/my_index/blog/_search</span>
{
  <span style="color:#f92672">&#34;query&#34;</span>: {
    <span style="color:#f92672">&#34;has_child&#34;</span>: {
      <span style="color:#f92672">&#34;type&#34;</span>:       <span style="color:#e6db74">&#34;comment&#34;</span>,
      <span style="color:#f92672">&#34;score_mode&#34;</span>: <span style="color:#e6db74">&#34;sum&#34;</span>,
      <span style="color:#f92672">&#34;query&#34;</span>: {
        <span style="color:#f92672">&#34;match&#34;</span>: {
          <span style="color:#f92672">&#34;body&#34;</span>:   <span style="color:#e6db74">&#34;full text search&#34;</span>
        }
      }
    }
  }
}
</code></pre></div><p>上記のリクエストは、親の<code>blog</code>ドキュメントを返します。
しかし、どのコメントが関係しているのかはわかりません。
関連しているコメントを検索して親ごとにグルーピングするために、
少し手間のかかる2回目のクエリを実行する必要があります。</p>
<p>Inner hitsがこれを変えてくれます。
<code>inner_hits</code>パラメータを次のように、上記のクエリに追加するだけです！</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#960050;background-color:#1e0010">GET</span> <span style="color:#960050;background-color:#1e0010">/my_index/blog/_search</span>
{
  <span style="color:#f92672">&#34;query&#34;</span>: {
    <span style="color:#f92672">&#34;has_child&#34;</span>: {
      <span style="color:#f92672">&#34;type&#34;</span>:       <span style="color:#e6db74">&#34;comment&#34;</span>,
      <span style="color:#f92672">&#34;score_mode&#34;</span>: <span style="color:#e6db74">&#34;sum&#34;</span>,
      <span style="color:#f92672">&#34;query&#34;</span>: {
        <span style="color:#f92672">&#34;match&#34;</span>: {
          <span style="color:#f92672">&#34;body&#34;</span>:   <span style="color:#e6db74">&#34;full text search&#34;</span>
        }
      },
      <span style="color:#f92672">&#34;inner_hits&#34;</span>: {}
    }
  }
}

</code></pre></div><p>検索結果の各<code>blog</code>記事に、<code>inner_hits</code>という項目があり、そこに検索にヒットしたコメントの
上位3件（デフォルト値）が返ってきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#960050;background-color:#1e0010">...</span>
<span style="color:#e6db74">&#34;hits&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> [
  {
    <span style="color:#f92672">&#34;_index&#34;</span>:   <span style="color:#e6db74">&#34;my_index&#34;</span>,
    <span style="color:#f92672">&#34;_type&#34;</span>:    <span style="color:#e6db74">&#34;blog&#34;</span>,
    <span style="color:#f92672">&#34;_id&#34;</span>:      <span style="color:#ae81ff">1</span>,
    <span style="color:#f92672">&#34;_score&#34;</span>:   <span style="color:#ae81ff">3.68</span>,
    <span style="color:#f92672">&#34;_source&#34;</span>:  { <span style="color:#960050;background-color:#1e0010">...</span> },
    <span style="color:#f92672">&#34;inner_hits&#34;</span>: {
      <span style="color:#f92672">&#34;comment&#34;</span>: {
        <span style="color:#f92672">&#34;total&#34;</span>: <span style="color:#ae81ff">16</span>,
        <span style="color:#f92672">&#34;hits&#34;</span>: [
          {
            <span style="color:#f92672">&#34;_type&#34;</span>:    <span style="color:#e6db74">&#34;comment&#34;</span>,
            <span style="color:#f92672">&#34;_id&#34;</span>:      <span style="color:#ae81ff">5</span>,
            <span style="color:#f92672">&#34;_score&#34;</span>:   <span style="color:#ae81ff">2.79</span>,
            <span style="color:#f92672">&#34;_source&#34;</span>: {
              <span style="color:#f92672">&#34;body&#34;</span>:   <span style="color:#e6db74">&#34;Full text search is the bomb&#34;</span>
            }
          },
          { <span style="color:#960050;background-color:#1e0010">...</span> },
          { <span style="color:#960050;background-color:#1e0010">...</span> }
        ]
      }
    }
  }
]
<span style="color:#960050;background-color:#1e0010">...</span>
</code></pre></div><p><code>inner_hits</code>部分は、第2の検索リクエストに似ています。
<code>size</code>や<code>from</code>パラメータを含めるくことで、挙動をカスタマイズできます。
また、検索から想像するであろう、ページネーション、ソート、ハイライト、<code>_source</code>フィルタリングなどといった機能もサポートします。</p>
<p>Inner hitsはparent-childおよび、<code>nested</code>ドキュメントをサポートします。
この機能は、現時点では<code>experimental</code>ラベルが付与されています。
このラベルは、この機能が将来変更されたり、削除されたりする可能性があるかもしれないことを意味します。
詳細については、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/1.5/search-request-inner-hits.html">Inner Hits documentation</a>をごらんください。</p>
<h3 id="shadow-replicas">Shadow replicas</h3>
<p>Elasticsearchはそれ自身の冗長性に常に気をつけています。
それは、レプリカシャード（各プライマリシャードの冗長なコピー）を持っています。
これは、プライマリシャードを失った時に、データをロスしないようにするためのものです。
レプリカシャードはまた、検索のスループットをスケールアウトするためにも利用できます。
多くのレプリカ（ノードを伴うことで。）はスループットを増加させます。</p>
<p>しかし、ユーザによってはElsticsearchを分散ファイルシステム上でホスティングしており、すでに、
ファイルシステムがレプリケーションと冗長性を担当しています。
ファイルシステムが同じことしているので、各シャードのコピーを複数持つことはあまり意味がありません。</p>
<p>Shadowレプリカはノードを追加することによる検索スループットをスケールアウトすることが、
余分なストレージやインデキシングのコストを払うことなく、可能になります。
代わりに、各シャドーレプリカはプライマリシャードを持っている共有ファイルシステムにread-onlyでアクセスします。
Shadowレプリカは定期的にファイルシステムのビューをリフレッシュし、プライマリシャードのどんな変更も検知するでしょう。</p>
<p>プライマリシャードが失敗したら、Shadowレプリカがプライマリに昇格し、
失敗したプライマリによって書き込まれたトランザクションログを読み込みリプレイできます。</p>
<p>この機能は<em>experimental</em>マークが付いています。詳細については<a href="https://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-shadow-replicas.html">Shadow Replicas documentation</a>をごらんください。</p>
<h3 id="resiliency-improvements">Resiliency improvements</h3>
<p>Elasticsearch 1.1 から 1.3では、インデックスのすべてのファイルのチェックサムを追加し、
それらのファイルが壊れているかどうかをチェックするために利用することにフォーカスしました。
1.4では、Zen discoveryと分散モデルについて大きな改良を加えました。</p>
<p>これらの変更にともなう、より詳細な統計情報やより詳細なロギングがElasticsearchやLuceneの以前のバージョンに存在した
未知の問題を明るみに出しました。
Elasticsearch 1.5.0では、これらの問題の多くに対処しています。</p>
<ul>
<li>
<p>ElasticsearchとLuceneの以前のバージョンにあるバグがインデックスの故障を引き起こしていました。<br>
チェックサムコードのおかげで、これらを発見できました。現在は、Elasticsearchの起動時に自動的にLucene3.x<br>
(Elasticsearch 0.20.x以前)が作成したセグメントを検知して、シャードをオープンする前に、新しいフォーマットを使って、
新しいコミットポイントを書き出します。(<a href="https://github.com/elastic/elasticsearch/pull/9899">#9899</a>)</p>
</li>
<li>
<p>1.3.xもしくは以前のバージョンからローリングアップグレードは、ローカルのシャードデータを再利用しようとせずに、<br>
シャード全体をコピーしようとします。1.3.2と以前のバージョンが実行されているノードからローリングアップグレードすることは
圧縮をオフにしない限りできなくなりました。(<a href="https://github.com/elastic/elasticsearch/pull/9925">#9925</a>)<br>
1.3.xやそれ以前のバージョンからアップグレードする場合、ローリングアップデートする代わりにクラスタの再起動を考えたほうがいいかもしれません。</p>
</li>
<li>
<p>非同期環境は予測することが難しいです。時に、最も予測していないことが起きるからです。<br>
シャード配置、リカバリ、削除のコードの多くが単純化され、状態変更をよりアトミックで決定的にするための変更によりリファクタリングされました。<br>
(<a href="https://github.com/elastic/elasticsearch/pull/8720">#8720</a>, <a href="https://github.com/elastic/elasticsearch/pull/9799">#9799</a>, <a href="https://github.com/elastic/elasticsearch/pull/9784">#9784</a>, <a href="https://github.com/elastic/elasticsearch/pull/9801">#9801</a>, <a href="https://github.com/elastic/elasticsearch/pull/9083">#9083</a>, <a href="https://github.com/elastic/elasticsearch/pull/8579">#8579</a>, <a href="https://github.com/elastic/elasticsearch/pull/8436">#8436</a>, <a href="https://github.com/elastic/elasticsearch/pull/8092">#8092</a>, <a href="https://github.com/elastic/elasticsearch/pull/9902">#9902</a>, <a href="https://github.com/elastic/elasticsearch/pull/6644">#6644</a>, <a href="https://github.com/elastic/elasticsearch/pull/8350">#8350</a>, <a href="https://github.com/elastic/elasticsearch/pull/9770">#9770</a>, <a href="https://github.com/elastic/elasticsearch/pull/9616">#9616</a>, <a href="https://github.com/elastic/elasticsearch/pull/9439">#9439</a>, <a href="https://github.com/elastic/elasticsearch/pull/8350">#8350</a>, <a href="https://github.com/elastic/elasticsearch/pull/8494">#8494</a>)</p>
</li>
<li>
<p>同様に、変更はクラスタ状態の更新が常に前進するということを確実にしました。更新の受け取り順序が順不同であったり、<br>
マスターだったノードからの更新を受け取った場合に混乱させていました。
(<a href="https://github.com/elastic/elasticsearch/pull/9632">#9632</a>, <a href="https://github.com/elastic/elasticsearch/pull/9541">#9541</a>, <a href="https://github.com/elastic/elasticsearch/pull/9503">#9503</a>)</p>
</li>
<li>
<p>チェックサムとチェックサムのバリデーションの強化(<a href="https://github.com/elastic/elasticsearch/pull/8723">#8723</a>,<br>
<a href="https://github.com/elastic/elasticsearch/pull/8599">#8599</a>, <a href="https://github.com/elastic/elasticsearch/pull/8587">#8587</a>, <a href="https://github.com/elastic/elasticsearch/pull/8407">#8407</a>, <a href="https://github.com/elastic/elasticsearch/pull/8010">#8010</a>, <a href="https://github.com/elastic/elasticsearch/pull/8018">#8018</a>)</p>
</li>
<li>
<p>disk threshold allocation deciderを速く(<a href="https://github.com/elastic/elasticsearch/pull/8803">#8803</a>)、賢く(<a href="https://github.com/elastic/elasticsearch/pull/7785">#7785</a>)、自動化(<a href="https://github.com/elastic/elasticsearch/pull/8270">#8270</a>)</p>
</li>
<li>
<p>auto-generated IDの利用時のインデキシングのスピードアップのためのに追加された最適化を除去。<br>
たまにドキュメントを重複して登録するため(<a href="https://github.com/elastic/elasticsearch/pull/7729">#7729</a>)</p>
</li>
</ul>
<h3 id="download-now">Download now</h3>
<p>ぜひ、<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-1-5-0">Elasticsearch 1.5.0</a>をダウンロードして、試してみてください。
そして、感想をTwitter(<a href="https://twitter.com/elastic">@elastic</a>)などで教えて下さい。
また、問題がありましたら、<a href="https://github.com/elastic/elasticsearch/issues">GitHub issues page</a>で報告をお願いします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>セキュリティ向けプラグインShieldのリリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/02/27/you-know-for-security-shield-goes-ga-ja/</link>
      <pubDate>Fri, 27 Feb 2015 18:49:56 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/02/27/you-know-for-security-shield-goes-ga-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：you know, for security: shield goes ga 1/27にShield 1.0 をリリースしました。 Elasticsearc</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="http://www.elasticsearch.org/blog/you-know-for-security-shield-goes-ga/">you know, for security: shield goes ga</a></p>
<p>1/27にShield 1.0 をリリースしました。
Elasticsearch向けの私たちのセキュリティプラグインの最初のリリースです。
11月にShieldについてアナウンスしてから、Elsaticsearchのためのセキュリティの機能は、
一般的に望まれているものから始まり、具体的な考えと実行できる計画へと変遷し、それが、いま現実となりました。</p>
<p>十分にセキュアな環境に、Elasticsearchクラスタをセキュアな状態でデプロイできるようにするため、
私たちは継続的にカスタマーやユーザーからのリクエストを受け取り、統合されたソリューションになるようにしてきました。</p>
<p>私たちは、そのようなプロダクトがどうあるべきか調査することから始め、
カスタマーとユーザが必要とするセキュリティとはどんなものかを理解するために多くの時間を費やしました。
その結果がShieldです。
Shieldは、ElasticsearchクラスタをセキュアにするElasticsearchの有償プラグインです。
私たちは、ShieldをDev、Gold、Platinumサブスクリプションの一部として、追加料金なしで提供します。</p>
<p>最初のリリースでは、基本的な機能と基盤にフォーカスしています。
Elasticsearch自身に対しても、セキュリティに対して準備してきました。
拡張性の側面だけでなく、Elasticsearchにあるデータフローについても再考してきました。
Elasticsearchクラスタをセキュアにする場合に、具体的な価値を即座に届けるだけでなく、素早く拡張できるようにも開発しました。</p>
<!-- more -->
<h3 id="機能">機能</h3>
<p>Shield 1.0は次の5つにフォーカスしています。</p>
<ul>
<li>認証(Authentication)</li>
<li>認可(Authorization)</li>
<li>暗号化通信とノードの認可(Encrypted Communication &amp; Node Authentication)</li>
<li>IPフィルタリング</li>
<li>監査証跡(Audit Trail)</li>
</ul>
<h3 id="認証authentication">認証(Authentication)</h3>
<p>セキュリティの大部分はアイデンティティについてです（例えば、だれがこのAPIを呼び出したのか？システムに何のサービスが接続するか？など）
サービスのライフタイムのある時点で、サブジェクト（例えばユーザー）を現在実行中のサブプロセスなどに結びつけることです。
この関係性を持つためには、サブプロセスを実行する前にユーザの身元を確認するように命じます。
ユーザの身元の確認のプロセスをAuthenticationと呼び、ElasticsearchのすべてのAPIコールでそれが実行されます。</p>
<p>認証の手法は多くの異なるものがあります。
それぞれの手法は、ユーザが認証されたという資格（Authentication Token）を、それぞれのタイプで提供するようにユーザに要求します。
Shield 1.0ではシンプルに、必要なauthentication tokenをユーザ/パスワードペアとしています。
（これは、Shieldの認証基盤が簡単に拡張でき、将来は異なるauthentication tokenもサポートできることを意味します。）</p>
<p>ユーザの資格を受け取ることだけでは不十分で、次に、それらをチェックする必要があります。
Shieldでは、これはレルムの責務です。
レルムは認証プロバイダ/サービスとしてみることができます。
妥当なユーザであると判断/解決されたか、
authentication tokenが適切な資格を持っていない/単に知らないユーザであるということで、拒否されたかです。
Shieldの認証メカニズムでは、複数のレルムを設定でき、さらに、あるレルムの戻り値を扱う他のレルム、というようなchainとすることもできます。
Shield 1.0は3つのレルムをサポートします。</p>
<ul>
<li>esusers - Elasticsearchによって管理されるファイルベースのレルムです。
これは、ファイルにユーザを定義することができます。（Apacheサーバのhtpasswdファイルのようなもの）
このレルムは外部への依存はなく、Shieldをインストールすれば、デフォルトで使用できます。
このレルムは配置が簡単で、マルチテナントなElasticsearchクラスタに対して使用できます。
マルチテナントなElasticsearchクラスタとは、クラスタを複数のアプリでシェアすることをテナントと言います。
また、すべてのユーザがパスワードを忘れてしまうような&quot;emergency&quot;な代替レルムも対応可能です。
(誰もシステムに入れないような状況のことです)</li>
<li>LDAP - 外部のLDAPサーバでユーザを認証するレルムです。
このレルムは組織のLDAPサーバで管理/保存されているユーザをすでに持っている組織を対象としています。</li>
<li>Active Directory - LDAPのタイプの1つで、Active Directoryに対する設定になります。</li>
</ul>
<p>レルムはelasticsearch.yml設定ファイルで、次のように設定可能です。</p>
<blockquote>
<p>shield.authc
realms:</p>
<pre><code>    esuser:
        type: esusers
        order: 0

    ldap:
        type: ldap
        order: 1
        url: ldaps://url/to/ldap1/server

    ldap_fallback:
        type: ldap
        order: 2
        url: ldaps://url/to/ldap2/server
</code></pre>
</blockquote>
<p>上記のようにrealmsが一つのチェインとして参照されます。
レルムごとに、設定された順序で、それらは参照されます。</p>
<p>NOTE : Shieldには、esusersファイルに保存されたユーザを管理するためのコマンドラインツールもあります。</p>
<h2 id="認可authorization">認可(authorization)</h2>
<p>認可(Authorization)は保護されたリソースにアクセスするユーザを許可するか拒否するかということです。
モダンなシステムは、ユーザのパーミッションのために、ロールベースのアクセスコントロール（RBAC）モデルを利用します。
このモデルでは、各ユーザはロールの集合に関連していて、それぞれのロールには、パーミッションの集合が定義されています。
これは、洗練された設定で、パーミッションを機能的なグループで共有させることができます。
例えば、次のようなロールを定義したとします。</p>
<ul>
<li><em>employee</em> - すべての従業員は部門をまたいだ会社のデータへアクセスできます（例えば、コンタクトやディレクトリ情報など）</li>
<li><em>sales</em> - すべての営業職は営業データにアクセスできる（例えば、流通ルート、ルート、顧客）</li>
<li><em>finace</em> - すべての財務の従業員は財務データにアクセスできる（例えば、予算、経費、伝票）</li>
</ul>
<p>財務部門の<code>Ann</code>は従業員と財務のロールを持っており、会社のディレクトリと財務データにアクセスでできます。</p>
<p>認可プロセスはユーザがリクエストに関連したユーザが必要で、このプロセスのために、認証フェーズの後に直接実行されます。</p>
<p>Shieldは2つのタイプのリソースを定義します。クラスタとインデックスです。
これらは、すべてのAPIコールで保護されます。
さらに、それらに関連したパーミッションとロールも定義できます。
一度定義をすると、ロールはユーザもしくはLDAP/ADのグループに関係します。
ロールは<strong>roles.yml</strong>設定ファイルで定義されます。
設定のサンプルは次のようになります。</p>
<pre><code>admin:
    cluster: all
    indices:
        '*' : all

monitor:
    cluster: monitor
    indices:
        '*': monitor

employee:
    indices:
        'company_directory' : read

sales:
    indices:
        'opportunities' : read, write
        'accounts' : read, write

finance:
    indices:
        'expenses' : read, write
        'purchases' : read, write
</code></pre><p>上記のサンプルで、次の5つのロールを定義しています。</p>
<ul>
<li><em>admin</em> - 管理者のロールで、すべてのクラスターレベルの操作とすべてのインデックスに対してすべてのインデックスレベルの操作を実行可能です。
(¥*インデックスはすべてのインデックスにマッチするワイルドカード)</li>
<li><em>monitor</em> - システム/クラスタのモニタリングのためのロール。このロールのユーザはすべてのクラスタとインデックスレベルの情報の読み取りの
APIにアクセス可能だが、インデックスのデータへの読み書きや設定の更新は不能</li>
<li><em>employee</em> - compnay_directoryにあるすべてのデータへの読み取りアクセスを与えられたロール。このロールはクラスタレベルへのアクセスやデータの書き込みアクセスは持っていない
(特にcompany。洗濯されたグループの人々はcompanyディレクトリの更新は可能だが、employeeは読み取りのみが可能)</li>
<li><em>sales</em> - opportunitiesとaccountsインデックスの読み書きができるロール</li>
<li><em>finance</em> - expensesとpurchasesの両方に読み書きができるロール</li>
</ul>
<p>上記のサンプルで定義されている<code>all</code>と<code>read</code>と<code>write</code>として名前がつけられた権限です。
これらは、予約語で、Elasticsearchのローレベルのアクションを複数含んだ権限です。
（<code>write</code>は<code>index, delete, delete_by_query, bulk, update</code>の操作を含んでいます。）
多くのケースで、これらのハイレベルの名前が付けられた権限で十分ですが、特定のロールに特定のアクションを明示的に指定することもできます。
次のようになります。</p>
<pre><code>hr:
    indices:
        'company_directory' : indices:data/write/index, indices:data/write/update
</code></pre><p>ここまで説明した認可のレルムは、各ユーザに関連するロールを識別するためのものです。
内部のesuserレルムでは、提供されるesuserコマンドラインツールを使ってロールはユーザに割り当てたり変更したりもできます。
LDAPやActive Directoryでは、LDAP/ADグループにShieldのロールを割り当てることができます。</p>
<p>認証と認可の両方を用いることで、ユーザリクエストに対して、ユーザごとに許可/不許可をすることができます。</p>
<h3 id="暗号化通信">暗号化通信</h3>
<p>認可はElasticsearchのデータを機能的な観点（許可されたユーザだけが操作を可能にする）で保護しますが、
クライアントからElasticsearchクラスタへ、もしくはクラスタのノード間では暗号化されていないデータを送るためまだ危険があります。
第三者が登頂したり、オンザフライでデータを書き換えたりといった可能性やクラスタを壊すことができます。</p>
<p>Shield 1.0はElasticsearchのすべての通信チャネルをセキュアにすることができます。
クラスタ内のノード間のチャネルやクライアントに公開されているチャネルです。
これは、SSL/TLS通信を導入して実現します。</p>
<p>Shieldで使えるSSLはElasticsearchのtransportサービスをSSL/TLSで通信できるものに置き換えます。
これは、ノード間通信チャネルと、HTTP transport（REST APIを提供するもの）のそれぞれに設定可能です。</p>
<p>ShieldのSSL/TLSは、スタンダードなJavaのものとkeystoreとtruststoreを基本にしたものが利用可能です。
SSL/TLSを設定すると、各ノードのキーストアに証明書をインポートする必要があります。
CAがサインした証明書を使うことも、CAが信頼したものとして許可許諾されたものを使うことが可能です。
これは、信頼されたすべてのCAとして知られているtrust storeが必要です。
新しいノードをクラスタに追加するときに、すべての必要な少なくとも一つの信頼されたCAから発行されてサインされたものが必要になります。
クラスタで個別のノードがすべてのkeystore/truststoreを更新する必要性なしに。？？</p>
<p>通信チャネルを安全にする方法やSSL/TLS設定をどのように行うかは<a href="http://www.elasticsearch.org/guide/en/shield/current/securing-nodes.html">Shieldのドキュメント</a>をご覧ください。</p>
<h3 id="ノード間認証">ノード間認証</h3>
<p>強く推奨しますが、許可されたノードだけがクラスタに接続できるようにするために、ノードの認証をSSL transportに設定することができます。
これは、<code>shield.transport.client.auth</code>に<code>true</code>を設定することで可能です。
設定した場合、ノード間でSSLハンドシェイクが行われ、接続されたノードが接続に来たノードのクライアント認証を要求しチェックします。
もし、チェックに失敗した場合は、SSLシェイクハンドが失敗し接続が拒否されます。</p>
<h3 id="sslクライアント認証">SSLクライアント認証</h3>
<p>transportレベルでノード認証が必要なようなら、次のような疑問がわくでしょう。
Elasticsearchはクラスタに接続するTransportクライアントを使うときはどのように振る舞うのか？
Transportクライアントはクラスタの他のノードと同じチャネルを使うため、コネクションを確立するときに、ノードが他のノードと異なるかどうかを見極めることはできません。</p>
<p>この時、もっとも単純な解決は、Transportクライアントも同様に許可を与えることです。
それは、認証を解決するときに、他の問題（潜在的な悪意）を引き起こします。
Transportクライアントが他のクラスタのノードを偽装しようとすることです。これは望んでいません。</p>
<p>幸いなことに、良い解決方法があります。
トランスポートプロファイルです。
Elasticsearch 1.4で導入されたトランスポートプロファイルは、トランスポートレイヤー（異なるホスト/ポートにバインドされる）のために複数のネットワークチャネルを設定することができます。
Shieldはこのサポートを、プロファイルごとに異なるSSL設定をできるように拡張します。
また、ノードのタイプとクライアントプロファイルタイプの間に明確な違いを設定することも可能です。
これを用いると、2つのプロファイルを設定できるようになります。
ひとつは、クライアントのためのもので、もうひとつはクラスタのノードのためのものです。
これにより、クライアントのための認証の問題が必要なくなり、Shieldはクライアントプロファイルをもった限定されたクライアントからのリクエストを保証します。</p>
<h3 id="ipフィルタリング">IPフィルタリング</h3>
<p>これは、厳密には、認証カテゴリではありませんが関係しています。
Shieldはそれ自身がIPフィルタリングのメカニズムを持っています。
これは、許可/不許可のIPのリストを設定することができます。
これらのフィルタリングのルールは複数のレベルで設定可能です。
transportチャネル、transportプロファイルレベル、そして、HTTPチャネルです。
次の設定は、それらの設定のサンプルです。（設定ファイルはelasticsearch.ymlになります）</p>
<pre><code>shield:

    transport.filter:
        allow:
            - '127.0.0.1'
            - '2001:0db8:1234:0000:0000:8a2e:0370:73
        deny:
            - '10.0.0.0/8'
            - '2001:0db8:1234::/48'
            - '*.google.com'

    http.filter:
        allow: [ '10.0.0.0/8' ]
        deny: [ '127.0.0.1' ]

transport.profiles:
    client:
        shield.filter.deny: [ '_all' ]
</code></pre><p>このように、IPv4とIPv6、CIDR、ホスト名、ワイルドカードが利用できます。
また、この機能はホストOSのIPテーブルに設定することで追加できるが、Shieldにそれを保持し、それらの設定を単純化し、
デプロイの全体から除去できることにも注意してください（詳細は<a href="http://www.elasticsearch.org/guide/en/shield/current/ip-filtering.html">ドキュメントのIPフィルタリングをご覧ください</a>）。</p>
<h3 id="監査証跡audit-trail">監査証跡（Audit Trail）</h3>
<p>セキュアなシステムの必須機能の一つで、監査硝石により、Elasticsearchに発生した重要なイベントをトラッキングすることが可能です。
これらのイベントを保存することは、Elasticsearchクラスタの重要なアクティビティの証拠を提供でき、
不審な/悪意のある可能性のあるイベントを追跡するときの診断ツールにもなります。</p>
<p>Shield 1.0.0で、監査証跡は監査/アクセスlogを一般的なElasticsearchのログとは個別に保存します。
それらは、構造化されているため、読んだりパースするのが容易で、イベントのタイプも分類されています。
また、情報のレベルを設定することができ、各イベントをlogレベルの設定で書き出すことができます。
以下が、イベントのリストです。</p>
<ul>
<li><em>anonymous_access_denied</em> - 認証トークンがないユーザからのリクエストがあった時のログ</li>
<li><em>authentication_failed</em> - リクエストされたユーザの認証に失敗した時のログ</li>
<li><em>access_denied</em> - 認証されたユーザが許可されていない操作を実行した時のログ</li>
<li><em>access_granted</em> - 認証されたユーザが許可された操作を実行した時のログ</li>
<li><em>tampered_request</em> - 不正に書き換えられたリクエストが到着したのを検知した時のログ</li>
<li><em>connection_granted</em> - ノードもしくはtransportクライアントがIPフィルタのルールにパスした時のログ</li>
<li><em>connection_denied</em> - ノードもしくはtransportクライアントがIPフィルタリングルールの制限により却下された時のログ</li>
</ul>
<p>Shieldの監査証跡についてより詳しく知りたい方は、<a href="http://www.elasticsearch.org/guide/en/shield/current/auditing.html">ドキュメント</a>をごらんください。</p>
<h3 id="次のバージョンでは">次のバージョンでは？</h3>
<p>ここまで紹介したように、これはまだ始まりにすぎません。
Shieldに追加される多くの機能があり、しっかりとした基盤を構築したところです。
Shieldの次のバージョンでは、以下の機能の追加にフォーカスするでしょう。（これらだけに限ったわけではありません。）</p>
<ul>
<li>APIによる設定、管理</li>
<li>より拡張され、柔軟なLDAP/Active Directoryサポート</li>
<li>レルムタイプの追加（kerberos、anonymous、certificatesなどなど）</li>
<li>セッションベースの認証</li>
</ul>
<p>ShieldはElasticsearch社の2番目の（<a href="http://www.elasticsearch.com/products/marvel?_ga=1.40546982.567962035.1389706748">Marvel</a>に続く）商用プロダクトです。
ダウンロードして開発環境で評価してください。
インストールは他のプラグインと同様の方法です（インストール方法についての詳細は<a href="http://www.elasticsearch.org/guide/en/shield/current/index.html">こちら</a>）。
一度インストールすると、30日の試用ライセンスが始まります。
もし、さらに時間が必要な場合は、sales@elasticsearch.comまで連絡してください。</p>
<p>私たちのすべてのプロダクトについてフィードバックをお待ちしています。
Shieldの商用利用、機能、ロードマップ、その他のセキュリティに関するトピックなど、質問がありましたら、
<a href="http://www.elasticsearch.com/contact/?_ga=1.32250170.567962035.1389706748">サイトからご連絡ください</a>。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch Coreトレーニング開催</title>
      <link>https://blog.johtani.info/blog/2015/02/27/2nd-tokyo-training/</link>
      <pubDate>Fri, 27 Feb 2015 17:10:29 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/02/27/2nd-tokyo-training/</guid>
      <description>4月13日から3日間、ElasticsearchのCoreトレーニングが東京で開催されます。 Early Birdということで、3/14までに申し込みす</description>
      <content:encoded><p><a href="https://purchases.elasticsearch.com/class/Tokyo/2015-04-13">4月13日から3日間、ElasticsearchのCoreトレーニング</a>が東京で開催されます。
Early Birdということで、3/14までに申し込みすると割引があります。
興味のある方は、見ていただければと。</p>
<!-- more -->
<p>また、4/15にElasticsearch勉強会を開催します。
トレーニングに弊社のエンジニアが来日しますので、なにか話をしてもらう予定です。</p>
<p>募集は後日、<a href="https://elasticsearch.doorkeeper.jp">Elasticsearch勉強会</a>のDoorkeeperで行います。
興味のある方は、登録しておいていただければと。</p>
<p>トレーニングや勉強会でお待ちしております。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Kibana 4（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/02/20/kibana-4-literally-ja/</link>
      <pubDate>Fri, 20 Feb 2015 14:05:52 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/02/20/kibana-4-literally-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：kibana 4. literally. Kibana 4は現在、文字通り、抽象的に、概念的に、精神的に、そしてとても楽しく</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="http://www.elasticsearch.org/blog/kibana-4-literally/">kibana 4. literally.</a></p>
<p>Kibana 4は現在、文字通り、抽象的に、概念的に、精神的に、そしてとても楽しく、プロダクションレディになりました。
1週間前に準備はできていましたが、満足できるものであるという確信を得たいと思っていました。
そして、Kibana 4.0.0 GAをリリースしました。
次のものはサンプルのスクリーンショットと前日譚です。
これらに興奮してしまった方のために、2ステップのプランを用意しました。</p>
<ol>
<li>ダウンロードする：<a href="http://www.elasticsearch.org/overview/kibana/installation/">Kibana 4 downloads</a>ページからダウンロードします。</li>
<li>理解する：<a href="http://www.elasticsearch.org/guide/en/kibana/current/index.html">Kibana 4 docs</a>ページを読んで理解します。</li>
</ol>
<p>Tip : もし、まだ、あなたのクラスタが<a href="http://www.elasticsearch.org/downloads/1-4-4/">Elasticsearch 1.4.4</a>でない場合は、アップグレードする必要があります。<br>
Tip2 : Kibana 4 RC1からアップグレードする場合は、configを移行する必要があります。<a href="https://gist.github.com/spalger/8daf6c2b7f2954639e38">こちらのgistを参照</a></p>
<!-- more -->
<h2 id="前日譚---the-back-story">前日譚 - the back story</h2>
<p>Kibanaはすでに問題解決のためのツールになっています。
なぜ、毎晩2時に呼び出されるんでしょう？
そのコードがプロダクションに入ったのはいつですか？
その結果、何を壊しました？
私たちはそれらを解決しました。
世界的に、長い間、だれも夜中の2時に呼び出されませんでした。知ってます？。</p>

<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="https://www.elastic.co/assets/blt5dddb0351d09a397/Screen-Shot-2015-02-17-at-1.25.15-PM-1024x692.png" />
    </div>
    <a href="https://www.elastic.co/assets/blt5dddb0351d09a397/Screen-Shot-2015-02-17-at-1.25.15-PM-1024x692.png" itemprop="contentUrl"></a>
  </figure>
</div>

<p>*しかし、ここには落とし穴があります。*答えが簡単になれば、問題が難しくなります。
楽な勝利は簡単でした。では、難しい問題（深さが3層の問題）を解きましょう。
複数の要素、複数のフィールドそして、複数のデータソースを分析する必要がある問題を解きましょう。
Kibana 4は少ない時間と労力で最も難しい問題を解決してくれます。</p>
<p>Kibana 3で学んだことをKibana 4に取り込みました。
なぜ10億のデータを持っているのに、地図には1000個しかプロットできないのでしょう？
1つのチャートに1つのフィールドなんでしょう？
なぜ、1つのパネルに1つのチャートなんでしょう？
なぜ、1つのダッシュボードに1つのインデックスなんでしょう？
5つのシナリオを用意し、2つのフィールドにまたがったデータを比較し、
1つのダッシュボードに3つのインデックスのデータを表示してみましょう。
さぁ、やりましょう。終わったらアイスクリーム（トッピング付きの）を取りに行きましょう。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="https://www.elastic.co/assets/blte1c56cdf8c51674d/Screen-Shot-2015-02-17-at-1.24.14-PM-1024x624.png" />
    </div>
    <a href="https://www.elastic.co/assets/blte1c56cdf8c51674d/Screen-Shot-2015-02-17-at-1.24.14-PM-1024x624.png" itemprop="contentUrl"></a>
  </figure>
</div>

<h2 id="the-plot">the plot</h2>
<p>アイスクリームのように、問題には多くの種類があります。
そのために、Kibanaをナポリ風アイスクリーム（3色アイス）のように分割しました。
嫌いな種類は除いて。
もし、あなたがKibanaのユーザ歴が長い場合、最初のタブの<em>Discover</em>がホームであることが正しく感じるでしょう。
これにより、短時間で、検索し、レコードを見つけ、簡単な問題を解決できます。
簡単な問題とは、すべてを物語る1行のデータを見つけることによって解決する問題です。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="https://www.elastic.co/assets/blta5b9c4d326d1bab7/Screen-Shot-2015-02-17-at-1.55.18-PM1-1024x573.png" />
    </div>
    <a href="https://www.elastic.co/assets/blta5b9c4d326d1bab7/Screen-Shot-2015-02-17-at-1.55.18-PM1-1024x573.png" itemprop="contentUrl"></a>
  </figure>
</div>

<p>物事が簡単な検索で説明できるものよりも複雑になった時、チャートとグラフで魔法を作る時間です。
<em>Visualize</em>タブを開き、Elasticsearchのaggregationの力を利用してデータを解析しましょう。
<em>Visualize</em>は複数の次元の性質のデータを見せ、今まで尋ねたことがないような質問に対して素早く回答するチャートやテーブル、
地図を作成できます。
あなたが最初に尋ねる質問は「先週サイトが遅かったのはなぜ？」でした。
しかし、データによって明らかにされた質問は「なぜ、クリスマスに東京からの平均ファイルサイズリクエストがスパイクしたのか？」です。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="https://www.elastic.co/assets/blt8458a51cb72ffdc9/Screen-Shot-2015-02-18-at-11.13.37-AM-1024x617.png" />
    </div>
    <a href="https://www.elastic.co/assets/blt8458a51cb72ffdc9/Screen-Shot-2015-02-18-at-11.13.37-AM-1024x617.png" itemprop="contentUrl"></a>
  </figure>
</div>

<p>最後に、<em>Dashboard</em>でこれらを1つにします。</p>
<p>大きなスクリーンに配置して、こう言います。
「あなたの答えはこのリンクにあります。また、Wikiに埋め込んで、データをCSVにエクスポートしてメールしました。
アイスクリームを食べた後に、自叙伝の第1章を書きました。もっとアイスを持ってきてください。かき混ぜますから。」</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="https://www.elastic.co/assets/blte214158911741112/Screen-Shot-2015-02-17-at-3.30.30-PM-1024x715.png" />
    </div>
    <a href="https://www.elastic.co/assets/blte214158911741112/Screen-Shot-2015-02-17-at-3.30.30-PM-1024x715.png" itemprop="contentUrl"></a>
  </figure>
</div>

<p>それぞれのタブで見てきた詳細については、<a href="http://www.elasticsearch.org/blog/kibana-4-beta-1-released/">Kibana 4 Beta 1 : Released</a>をごらんください。</p>
<h2 id="to-be-continued">to be continued&hellip;</h2>
<p>居眠りをする時間はあります？いいえ、Kibana 4.1についてすでに作業中で、将来の大きなプランを持っています。
多くの労力はKibana 4の土台の安定と実用性を構築することに使われました。
また、Elasticsearchアプリケーションの将来を構築するプラットフォームを作りました。
すべてのものは拡張できるように設計されています。
例えば、可視化はより良くなるように構築されています。
オープンソースは私たちのGitHubアカウント以上のものです。
それは、新しく素晴らしいものを誰もが作ることができる構造を作ることが私たちの約束です。</p>
<p>Kibanaでグラフなどを構築したり、Elasticsearchを利用したアプリケーションを作成するために、
私たち開発者のブログを参考にしてください。
ちょっと見てみたいですか？
Elastic{ON}15のSpencer Algerのトークをチェックしてください。</p>
<p>あなた方なしでは、私たちはここにはいないですし、あなた方の助けがなければ何もできません。
ぜひ、GitHubでのissueや提案、貢献をお待ちしています。
もしくは、IRCでFreenodeの#kibanaに参加してください。</p>
<h2 id="extra-credit">extra credit</h2>
<p>Kibana 4のすべての話に興味がありますか？私たちのKibana 4ベータに関する過去のブログをチェックしてください。</p>
<ul>
<li><a href="http://www.elasticsearch.org/blog/kibana-4-beta-1-released/">Kibana 4 Beta 1: Released</a></li>
<li><a href="http://www.elasticsearch.org/blog/kibana-4-beta-2-get-now/">Kibana 4 Beta 2: Get it now</a></li>
<li><a href="http://www.elasticsearch.org/blog/kibana-4-beta-3-now-more-filtery/">Kibana 4 Beta 3: Now more filtery</a></li>
<li><a href="http://www.elasticsearch.org/blog/kibana-4-rc1-is-now-available/">Kibana 4 RC1: Freshly baked</a></li>
</ul>
<p>最後に、Kibanaの利用に関する話をお持ちなら、ぜひ聞かせてください。
stories at elasticsearch dot comもしくは<a href="http://www.twitter.com/elasticsearch">@elasticsearch</a>に連絡をください。
あなたの話を世界にどのようにシェアしているかごらんください。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 1.4.4および1.3.9リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/02/20/elasticsearch-1-4-4-and-1-3-9-released-ja/</link>
      <pubDate>Fri, 20 Feb 2015 14:05:34 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/02/20/elasticsearch-1-4-4-and-1-3-9-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：elasticsearch 1.4.4 and 1.3.9 released 本日（2/20）、Elasticsearch 1.4.</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-4-and-1-3-9-released/">elasticsearch 1.4.4 and 1.3.9 released</a></p>
<p>本日（2/20）、<strong>Elasticsearch 1.4.4</strong>と<strong>Elasticsearch 1.3.9</strong>をリリースしました。
これはバグフィックスリリースとなります。
主に、Lucene expression scriptsを使う場合のRPMとDEBパッケージの
パッケージング問題のフィックスをしたものです。
<a href="http://www.elasticsearch.org/downloads/1-4-4">1.4.4のダウンロードこちらのリンク</a>からアクセスできます。</p>
<!-- more -->
<h2 id="fixes">fixes</h2>
<p>1.4.3のRPMおよびDEBパッケージにはAntlrとASMの<a href="https://github.com/elasticsearch/elasticsearch/pull/9696">依存関係の不足</a>がありました。
この依存はElasticsearchでLucene expression scriptsを利用する場合に必要になります。
Groovyに関する<a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-3-and-1-3-8-released/">1.4.3の変更</a>により、多くのユーザがLucene explression scriptsを利用することが予想されるため、すぐに、1.4.4をリリースしました。</p>
<p>また、このリリースには、クラスタの保留タスクに関するいくつかのバグフィックスも含まれています。
さらに、date histogramで負のインターバルの場合に<code>OutOfMemoryError</code>を引き起こすバグも
修正されています。</p>
<p>すべての変更については<a href="http://www.elasticsearch.org/downloads/1-4-4">1.4.4のリリースノート</a>および<a href="http://www.elasticsearch.org/downloads/1-3-9">1.3.9のリリースノート</a>をごらんください。</p>
<h2 id="フィードバック">フィードバック</h2>
<p>私たちはフィードバックをお待ちしています。
Twitter(<a href="https://twitter.com/elasticsearch">@elasticsearch</a>)もしくは<a href="https://github.com/elasticsearch/elasticsearch/issues">GitHub issues page</a>で教えてください。</p>
</content:encoded>
    </item>
    
    <item>
      <title>名古屋でElasticsearch勉強会を開催します</title>
      <link>https://blog.johtani.info/blog/2015/02/18/preparing-elasticsearch-meetup-in-nagoya/</link>
      <pubDate>Wed, 18 Feb 2015 15:22:53 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/02/18/preparing-elasticsearch-meetup-in-nagoya/</guid>
      <description>来る、4月4日の土曜日の午後に名古屋でElasticsearch勉強会を開催予定です。 「初」の東京以外の勉強会です。 Twitterでこのよう</description>
      <content:encoded><p>来る、4月4日の土曜日の午後に名古屋でElasticsearch勉強会を開催予定です。
「初」の東京以外の勉強会です。</p>
<!-- more -->
<p>Twitterでこのようなツイートを見かけまして。</p>
<blockquote class="twitter-tweet" lang="ja"><p>名古屋でElasticsearchの勉強会やりたい機運（今のところ2人）。</p>&mdash; mogami (@smogami) <a href="https://twitter.com/smogami/status/562864387632136192">2015, 2月 4</a></blockquote> <script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>これは！ということで、名古屋で勉強会をやろうかと思います。30名程度の場所を借りて実施予定です。
募集はいつもの、<a href="http://elasticsearch.doorkeeper.jp">elasticsearch勉強会のDoorkeeper</a>で行う予定です。
ページの準備まで少々待ちください。（おそらく、3月中旬くらい）
私自身はElasticsearchやELKについて話をしようと思っています。そのほかに、2,3名のスピーカーの方を予定しています。
LTなど興味がある人がいたら、連絡ください。</p>
<p>これを機に（？）他の場所でも勉強会を開催したいと考えています。
ニーズがどのくらいありそうなのかが、まだよくわかっていませんが、関西などでニーズがあるんじゃないかと期待していたり。</p>
<p>興味のある方は、コメント欄、Twitterなどでコンタクトしてもらえればと。
（連絡来るとうれしいなぁ。）</p>
</content:encoded>
    </item>
    
    <item>
      <title>第8回Elasticsearch勉強会を開催しました。#elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2015/02/16/8th-elasticsearch-jp/</link>
      <pubDate>Mon, 16 Feb 2015 15:02:23 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/02/16/8th-elasticsearch-jp/</guid>
      <description>第8回Elsticsearch勉強会を開催しました。 スタッフの皆さん、スピーカーの皆さん、開場提供していただいたリクルートテクノロジーズさん</description>
      <content:encoded><p><a href="http://elasticsearch.doorkeeper.jp/events/19923">第8回Elsticsearch勉強会</a>を開催しました。
スタッフの皆さん、スピーカーの皆さん、開場提供していただいた<a href="http://recruit-tech.co.jp">リクルートテクノロジーズさん</a>、ありがとうございました！
次回もよろしくお願いします！参加していただき盛り上げていただいた参加者の皆さんもありがとうございました。</p>
<!-- more -->
<p>今回は出足が好調で、早々に180人の枠を超えるという嬉しい事態でしたが、
キャンセル待ちが残っているにもかからわらず、来られていない方が67名もいるということで、キャンセル待ちの方には申し訳なかったです。
もうすこし、キャンセルをしてもらえると嬉しいんですが。。。
今回はメールを当日に1度しか打ってないからかなぁ。</p>
<p>さて、いつもの通り簡単なメモです。
本当に簡単にですが。</p>
<h2 id="elasticsearch導入チェックリスト-elasticsearch株式会社-jun-ohtani-johtani">「Elasticsearch導入チェックリスト？」 Elasticsearch株式会社 Jun Ohtani @johtani</h2>
<p>スライド：<a href="https://speakerdeck.com/johtani/elasticsearchdao-ru-tietukurisuto">Elasticsearch導入チェックリスト？</a></p>
<p>Elasticsearchを開発環境や本番に導入する前に気にかけて欲しいことについて発表しました。
元ネタは<a href="http://www.elasticsearch.org/webinars/elasticsearch-pre-flight-checklist/">elasticsearch pre-flight checklist</a>です。
少々古いのですが、私が今回話した内容以外にもモニタリングなどについての話も盛り込まれています。
時間がある方は、見ていただければと。</p>
<h2 id="elasticsearch-クエリとスキーマ定義のすごい細かい話株式会社ドワンゴ-藤堂淳也-さん">「Elasticsearch クエリとスキーマ定義のすごい細かい話」株式会社ドワンゴ 藤堂淳也 さん</h2>
<p>スライド：<a href="https://speakerdeck.com/jtodo/elasticsearch-kueritosukimading-yi-falsexi-kaihua">Elasticsearch クエリとスキーマ定義のすごい細かい話</a></p>
<ul>
<li>フィールドのチェックを別途インデキシングするアプリで行っている。利用できるものだけElasticsearchに投げる</li>
<li>実際に本番環境で利用しているマッピングに対してフィールドを追加する手順について</li>
<li>「これもドキュメントに書いてあるんですが」という感じでドキュメントに色々書いてあるので読みましょうというありがたい発表でした。</li>
</ul>
<p>実際に試行錯誤したり検証するときに行ったことを喋ってもらえたので、どういった点を気にしながら運用、設計するかというのがわかりやすかったです。</p>
<h2 id="elasticsearchとkibanaで実現する30億reqdayのリアルタイム分析株式会社サイバーエージェント山田直行さんsatully">「ElasticsearchとKibanaで実現する、30億req/dayのリアルタイム分析」株式会社サイバーエージェント　山田直行さん　@satully</h2>
<p>スライド：<a href="http://www.slideshare.net/Satully/elasticsearch8-elasticsearchkibana-30reqday">ElasticsearchとKibanaで実現する、30億req/dayのリアルタイム分析</a></p>
<p>会場が21時までしか抑えられていないという失態で、ドタバタしてて前半は聞けてないです。。。</p>
<ul>
<li>前回の発表では30日分Elasticsearchに入れていたが、今は3日分のみ保存</li>
<li>レポートなどにはRedshift＋Tableauを利用</li>
<li>Kibana3をメインに使っているが、Kibana4も検討予定？</li>
</ul>
<p>QA</p>
<ul>
<li>Q：なぜ、ELBを挟んでいるのか？
<ul>
<li>A：特に考えておいているわけではない。</li>
</ul>
</li>
<li>Q：インデックスの構成は？
<ul>
<li>A：1日に2つのインデックス。Bitされたもの、入札されないもの</li>
</ul>
</li>
<li>Q：searchのnodeをやめたのは？
<ul>
<li>A：前回発表した勉強会での懇親会で話を聞いたり、他の方と話を聞いて、不要と判断したため</li>
</ul>
</li>
</ul>
<h2 id="はてなのメディア面を支えるelasticsearch株式会社はてな山家雄介さんyanbe">「はてなのメディア面を支えるElasticsearch」株式会社はてな　山家雄介さん　@yanbe</h2>
<p>スライド：未定。おそらく、開発者ブログに公開されるかと。</p>
<p>* アドテク系にもやってるらしい。BrandSafeはてな</p>
<ul>
<li>はてなブックマークのデータを魅せ方を変える機能などで大活躍。<a href="http://bkuma.hatena.ne.jp">B!KUMA</a>とか</li>
<li>その日の話題の見出し自動生成機能。Significant Terms Aggregationsを利用。</li>
<li>こちらの<a href="http://bookmark.hatenastaff.com/entry/2015/02/05/190331">「自然言語処理技術を用いたはてなブックマークの新機能「トピック」をベータリリースしました」</a>エントリに関係あるのかな？</li>
</ul>
<p>記事の魅せ方を検索できる管理画面ではElasticsearchのクエリDSLを活用されているとのことでした。
検索専門の人でなくても検索式を簡単にくみたてられる画面を用意して、ElasticsearchのクエリDSLに変換するようにしていると。
確かに、クエリをそのまま組み立ててもらうよりも利用しやすい画面がある方がいいですよね。バックエンドはJSとPerlのライブラリとのことでした。</p>
<h2 id="その他感想などのブログ">その他、感想などのブログ</h2>
<ul>
<li><a href="http://takudo.hatenablog.jp/entry/2015/02/14/101749">2015-02-13 第8回 elasticsearch 勉強会 @ 丸の内 リクルート 41Fアカデミーホール</a></li>
<li><a href="http://suzuki.tdiary.net/20150213.html"> [Elasticsearch] 第8回 elasticsearch 勉強会へ参加してきた</a></li>
<li><a href="http://qiita.com/t-sato/items/8e353ccf7d7bba46f635">第8回elasticsearch勉強会 #elasticsearch #elasticsearchjp</a></li>
<li><a href="http://keyamb.hatenablog.com/entry/2015/02/16/015916">第8回 Elasticsearch 勉強会に行ってきた #elasticsearch #elasticsearchjp</a></li>
<li><a href="http://blog.yoslab.com/entry/2015/02/13/203251">勉強会メモ - 第8回elasticsearch勉強会</a></li>
</ul>
<h2 id="まとめ">まとめ</h2>
<p>今回も検索からログまでいろんな話になったので、面白かったかと。
参加された方は新しい方が多かったんじゃないかなぁと。（集計結果で見れないのかな、Doorkeeper）。</p>
<p>今回は、みなさんに21時に41Fから33Fへ移動していただくという大失態があったので、大変申し訳なかったです。
次回（4月中旬）は、このようなことがないように気をつけますので、今後もよろしくお願いいたします。</p>
<p>あと、東京以外の勉強会も検討しつつあります。興味のある方はコメントやTwitterで反応をいただけると嬉しいです。</p>
<p>スピーカーは随時募集中ですので、コメント、メール、ツイートなど、コンタクトしていただければと思います。 よろしくお願いいたします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Groovyスクリプトをダイナミックスクリプトなしで実行(日本語訳)</title>
      <link>https://blog.johtani.info/blog/2015/02/12/running-groovy-scripts-without-dynamic-scripting-ja/</link>
      <pubDate>Thu, 12 Feb 2015 15:13:09 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/02/12/running-groovy-scripts-without-dynamic-scripting-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：running groovy scripts without dynamic scripting Elasticsearch1.3.8と1.4.3のリリースによ</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="http://www.elasticsearch.org/blog/running-groovy-scripts-without-dynamic-scripting/">running groovy scripts without dynamic scripting</a></p>
<p>Elasticsearch1.3.8と1.4.3のリリースにより、デフォルトで、リクエストに含まれるGroovyスクリプトや
インデックスに保存されたスクリプトを動的に実行する機能をオフにしました。
しかし、Groovyはまだデフォルトのスクリプト言語です。
本ブログ記事では、少しだけダイナミックだが、サンドボックスではない言語のためのスクリプトを
どのように使い続けるかを説明します。</p>
<p>本ブログ記事は、それが何を意味し、さらに重要なのは、安全に重要なタスクを実行させるためにスクリプトを
どのように使用し続けるかを理解する助けとなるはずです。</p>
<!-- more -->
<h2 id="ダイナミックスクリプトとは">ダイナミックスクリプトとは？</h2>
<p>Elasticsearchに詳しくない方のために、Elasticsearchでは、
さまざまなリクエストの一部としてスクリプトを送信することができます。
search、aggregation、update、upsert、delete by queryなどです。
あなたのユースケースのために、通常の動作よりも拡張した動作をさせるためにスクリプトを追加できます。</p>
<p>例えば、以下のリクエストは、ダイナミックスクリプトを含んでいます。
<code>field1</code>と<code>field2 + shift</code>が同じ値を持っている時だけドキュメントを返します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#960050;background-color:#1e0010">GET</span> <span style="color:#960050;background-color:#1e0010">/_search</span>
{
  <span style="color:#f92672">&#34;query&#34;</span>:{
    <span style="color:#f92672">&#34;filtered&#34;</span>:{
      <span style="color:#f92672">&#34;filter&#34;</span>:{
        <span style="color:#f92672">&#34;script&#34;</span>:{
          <span style="color:#f92672">&#34;script&#34;</span>:<span style="color:#e6db74">&#34;doc[&#39;field1&#39;].value == (doc[&#39;field2&#39;].value + shift)&#34;</span>,
          <span style="color:#f92672">&#34;lang&#34;</span>:<span style="color:#e6db74">&#34;groovy&#34;</span>,
          <span style="color:#f92672">&#34;params&#34;</span>:{
            <span style="color:#f92672">&#34;shift&#34;</span>:<span style="color:#ae81ff">3</span>
          }
        }
      }
    }
  }
}
</code></pre></div><p>言語を変えることもできます。
それは、当然、シンタックスが変わったり、制限が追加（例えば、Groovyスクリプトの代わりに<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-scripting.html#_lucene_expressions_scripts">Lucene　Expressions</a>に変更）されることもあります。
<code>lang</code>パラメータによって言語を指定できます。</p>
<h3 id="なぜそれはダイナミック">なぜそれはダイナミック？</h3>
<p>上記の例はダイナミックスクリプトです。
それは、実際のスクリプトの部分はサーバサイドで<em>動的に</em>解釈されコンパイルされる必要があるからです。
ダイナミックスクリプトはElasticsearchのAPIによってデータノードに送信されます。
これは、<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-scripting.html#_indexed_scripts">インデックスされたスクリプト(indexed script)</a>も含みます。</p>
<p>言い換えると、もし、スクリプトがデータノード全てに保存されていなければ、
それは、ダイナミックスクリプトとして扱われます。</p>
<h2 id="dynamic-scriptingをオフにするとどうなるか">dynamic scriptingをオフにするとどうなるか？</h2>
<p>最新のリリースでの変更により、Groovyのdynaic scriptingはデフォルトでオフになりました。
先ほどのスクリプトについても同様で、もし、先ほどのリクエストを実行すると、次のようなエラーが発生します。
(一部省略してあります。)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
   <span style="color:#f92672">&#34;error&#34;</span>:<span style="color:#e6db74">&#34;SearchPhaseExecutionException[Failed to execute phase [query], all shards failed; shardFailures {[8FJ02MofSnqVvOQ10BXxhQ][test][0]: SearchParseException[[test][0]: from[-1],size[-1]: Parse Failure [Failed to parse source [{...}]]]; nested: ScriptException[dynamic scripting for [groovy] disabled]...&#34;</span>,
   <span style="color:#f92672">&#34;status&#34;</span>:<span style="color:#ae81ff">400</span>
}
</code></pre></div><p>エラーメッセージの重要な箇所は「ScriptException[dynamic scripting for [groovy] disabled]」です。</p>
<h2 id="スクリプティングを使い続けるには">スクリプティングを使い続けるには？</h2>
<p>Elasticsearchでスクリプトを実行するには3つの方法があります。
2つのダイナミックな方法は、リクエストごとのスクリプト（上述）かインデックスされた
スクリプト(indexed script)を使う方法です。
インデックスされたスクリプトを使うことは、Elasticsearch自身にGroovyスクリプトを保管することで
利用で、それらを要求に応じて利用することです。
（これは、実際には十分機能しますが、これではまだ、信頼できないユーザに対して彼らのスクリプトを実行できます）
RDBのように保存されたプロシージャとして同じ方法で実行させるものと同様です。
前もって、スクリプトを記述しておき、リクエストの一部として後から、名前で呼び出して実行可能です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#960050;background-color:#1e0010">GET</span> <span style="color:#960050;background-color:#1e0010">/_search</span>
{
  <span style="color:#f92672">&#34;query&#34;</span>:{
    <span style="color:#f92672">&#34;filtered&#34;</span>:{
      <span style="color:#f92672">&#34;filter&#34;</span>:{
        <span style="color:#f92672">&#34;script&#34;</span>:{
          <span style="color:#f92672">&#34;script_id&#34;</span>:<span style="color:#e6db74">&#34;your_custom_script&#34;</span>,
          <span style="color:#f92672">&#34;lang&#34;</span>:<span style="color:#e6db74">&#34;groovy&#34;</span>,
          <span style="color:#f92672">&#34;params&#34;</span>:{
            <span style="color:#f92672">&#34;shift&#34;</span>:<span style="color:#ae81ff">3</span>
          }
        }
      }
    }
  }
}
</code></pre></div><p>あまり変わっていないことに気づくでしょう。
<code>script</code>の部分が、前もって記述されたスクリプトの名前<code>script_id</code>に変更されただけです。</p>
<p>Elasticsearchにスクリプトを提供するダイナミックではない方法はインデックスに保存する代わりに、
ディスクにファイルとしてスクリプトを保存することです。
そうすることで、各スクリプトを設定として保存します。
これは、どのようなスクリプト言語に対してもダイナミックスクリプティングをオフにしたまま、
サンドボックス化されないスクリプトを使い続けることができる方法です。</p>
<p>最初のサンプルで、Groovyスクリプトは<code>doc['field1'].value == doc['field2'].value + shift</code>でした。
これを、<code>.groovy</code>拡張子を持ったファイルとして書き出すことができます。</p>
<pre><code>doc['field1'].value == (doc['field2'].value + shift)
</code></pre><p>もし、このファイルに<code>your_custom_script.groovy</code>ちう名前をつけて、
Elasticsearchのすべてのデータノードの<code>config/scripts</code>ディレクトリに保存すると、
Elasticsearchは60秒（elasticsearch.ymlの<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-scripting.html#_automatic_script_reloading"><code>watcher.interval</code>で変更可能</a>）でこのスクリプトを認識し、今後のリクエストに利用できるようにプリコンパイルするでしょう。
そのファイルはElasticsearch実行ユーザによって読み込みができる必要があります。
これをディスクに書き込んだ後、あなたの設定ディレクトリは次のようになっています。</p>
<pre><code>config/
  elasticsearch.yml
  logging.yml
  scripts/
    your_custom_script.groovy
</code></pre><p>これは、各リクエストやインデックスされたスクリプトをスクリプトとして動的に送信しませんが、
信頼された環境にスクリプトを追加することでダイナミックスクリプトとなることを許します。</p>
<h2 id="ディスクに書かれたスクリプトを使用する">ディスクに書かれたスクリプトを使用する</h2>
<p>スクリプトは、ロードされたスクリプトになるまでは、利用できません。
ログファイルに次のようなログが表示されるまではです。</p>
<pre><code>[2015-02-11 11:14:47,066][INFO ][script                   ] [Sergei Kravinoff] compiling script file [/path/to/elasticsearch-1.4.3/config/scripts/your_custom_script.groovy]
</code></pre><p>すべてのElasticsearchのデータノードでスクリプトが読み込まれたら、
それを利用することができます。
利用するために、<code>file</code>（<code>script_id</code>ではありません！）としてスクリプト名を指定します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#960050;background-color:#1e0010">GET</span> <span style="color:#960050;background-color:#1e0010">/_search</span>
{
  <span style="color:#f92672">&#34;query&#34;</span>:{
    <span style="color:#f92672">&#34;filtered&#34;</span>:{
      <span style="color:#f92672">&#34;filter&#34;</span>:{
        <span style="color:#f92672">&#34;script&#34;</span>:{
          <span style="color:#f92672">&#34;file&#34;</span>:<span style="color:#e6db74">&#34;your_custom_script&#34;</span>,
          <span style="color:#f92672">&#34;lang&#34;</span>:<span style="color:#e6db74">&#34;groovy&#34;</span>,
          <span style="color:#f92672">&#34;params&#34;</span>:{
            <span style="color:#f92672">&#34;shift&#34;</span>:<span style="color:#ae81ff">3</span>
          }
        }
      }
    }
  }
}
</code></pre></div><p>Note:<code>lang</code>は必須ではありません。Groovyがデフォルトの言語のためです。
もし、違うスクリプト言語を使いたい、もしくは、デフォルトの言語を（例えば、Lucene Expressionsへ）
変更したい場合、言語が正しいスクリプトを見つけるために提供されている必要があります。
一番良い方法は、アプリケーションが<code>lang</code>パラメータを含んでいることを勧めます。
これは、将来、デフォルトのスクリプト言語が変更されても、問題ないからです。</p>
<h2 id="質問">質問？</h2>
<p>もし、質問があれば、遠慮なくTwitter(<a href="https://twitter.com/elasticsearch">@elasticsearch</a>)で教えて下さい。
また、問題がありましたら、<a href="https://github.com/elasticsearch/elasticsearch/issues">GitHub issues page</a>で報告をお願いします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch　1.4.3および1.3.8リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/02/12/elasticsearch-1-4-3-and-1-3-8-released-ja/</link>
      <pubDate>Thu, 12 Feb 2015 12:39:53 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/02/12/elasticsearch-1-4-3-and-1-3-8-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：elasticsearch 1.4.3 and 1.3.8 released 本日、Lucene 4.10.3をベースにしたElas</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-3-and-1-3-8-released/">elasticsearch 1.4.3 and 1.3.8 released</a></p>
<p>本日、<strong>Lucene 4.10.3</strong>をベースにした<strong>Elasticsearch 1.4.3</strong>と、<strong>セキュリティ</strong>とバグフィックスリリースである、<strong>Elasticsearch 1.3.8</strong>をリリースしました。
ダウンロードおよび変更リストはそれぞれ次のリンクからアクセスできます。</p>
<ul>
<li>最新ステーブルリリース：<a href="http://www.elasticsearch.org/downloads/1-4-3">Elasticsearch 1.4.3</a></li>
<li>1.3.x系バグフィックス：<a href="http://www.elasticsearch.org/downloads/1-3-8">Elasticsearch 1.3.8</a></li>
</ul>
<p>過去のリリースに関するブログ（公式）はこちら。</p>
<ul>
<li>1.4:<a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-2-released/">1.4.2</a>,
<a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-1-released/">1.4.1</a>,
<a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-0-released/">1.4.0</a>, <a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-0-beta-released/">1.4.0.Beta1</a></li>
<li>1.3:<a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-2-released/">1.3.7</a>,
<a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-1-released/">1.3.6</a>,
<a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-0-released/">1.3.5</a>, <a href="http://www.elasticsearch.org/blog/elasticsearch-1-3-4-released/">1.3.4</a>, <a href="http://www.elasticsearch.org/blog/elasticsearch-1-3-3-released/">1.3.3</a>, <a href="http://www.elasticsearch.org/blog/elasticsearch-1-3-2-released/">1.3.2</a>, <a href="http://www.elasticsearch.org/blog/elasticsearch-1-3-1-released/">1.3.1</a>, <a href="http://www.elasticsearch.org/blog/elasticsearch-1-3-0-released/">1.3.0</a>.</li>
</ul>
<p>すべての変更については<a href="http://www.elasticsearch.org/downloads/1-4-3">1.4.3のリリースノート</a>および<a href="http://www.elasticsearch.org/downloads/1-3-8">1.3.8のリリースノート</a>をごらんください。
以下では、セキュリティの問題について紹介します。</p>
<!-- more -->
<h2 id="groovy-scripting-の脆弱性">groovy scripting の脆弱性</h2>
<p>Elasticsearchのバージョン1.3.0から1.3.7および1.4.0から1.4.2で、Groovyスクリプトエンジンに脆弱性が発見されました。
脆弱性は、攻撃者がGroovyスクリプトをサンドボックスを避けて構築でき、
ElasticsearchのJava VMを実行しているユーザとしてシェルコマンドを実行できます。</p>
<p>この問題をCVE-2015-1427として報告済みです。</p>
<p>バージョン1.3.8と1.4.3では、デフォルトで、Groovyに対してのサンドボックスをオフにしました。
結果として、<strong>ダイナミックスクリプトの実行はGroovyに対してもオフとなります。</strong></p>
<p>もし、脆弱性のあるバージョンで実行している場合、v1.3.8かv1.4.3にアップグレードするか、ダイナミックなGroovyスクリプトをクラスタの
すべてのノードに対して次の設定を追加することで、オフにします。</p>
<pre><code>script.groovy.sandbox.enabled: false
</code></pre><p>これは、Groovyのサンドボックスをオフにし、リクエストの一部としてインラインで受け付けるダイナミックなGroovyスクリプトや
特殊な<code>.scripts</code>インデックスに保存されているスクリプトを実行しません。</p>
<p>それまでは、各データノードの<code>config/scripts</code>ディレクトリにファイルとして保存されたGroovyスクリプトは
まだ、利用可能です。詳細の情報については<a href="http://www.elasticsearch.org/blog/running-groovy-scripts-without-dynamic-scripting/">Running scripts without dynamic scripting</a>をごらんください。</p>
<h2 id="future-scripting-plans">future scripting plans</h2>
<p>安全なダイナミックスクリプティング言語としてGroovyを失うことは、Elasticsearchにとって痛手です。
update APIやsearch APIやaggregationsフレームワークの一部としてScriptを使います。
それらは、静的なAPIでは簡単に表現できない、カスタムなトリックをユーザに実行できるようにします。</p>
<p>残念ながら、Groovyチームとこの問題を議論した後、Groovy言語もサンドボックスによってきちんと保護されている
というにはあまりにもダイナミックであるという結論に達しました。
Groovyは、デフォルトでは利用できなくなります。
利用可能なダイナミックスクリプト言語としては<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-scripting.html#_lucene_expressions_scripts">Lucene Expressions言語</a>のみとなります。
Expressionsははやいですが、それらは非常に限定されています。数値のフィールドでのみ実行可能で、ループをサポートしていません。</p>
<p>より強力で（しかし安全な）ミニ言語になるようにExpressionsを拡張することを調査しています。
これは、Scriptユーザが現在持っている最も一般的なユースケースを少なくとも助けるでしょう。
この拡張は長期間のプロジェクトであり、進化には時間がかかるでしょう。</p>
<p>ぜひ、<a href="http://www.elasticsearch.org/downloads/1-4-3">Elasticsearch 1.4.3</a>をダウンロードして、試してみてください。
そして、感想をTwitter(<a href="https://twitter.com/elasticsearch">@elasticsearch</a>)などで教えて下さい。
また、問題がありましたら、<a href="https://github.com/elasticsearch/elasticsearch/issues">GitHub issues page</a>で報告をお願いします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>CROSS 2015で話をしてきました #cross2015</title>
      <link>https://blog.johtani.info/blog/2015/01/29/talk-at-cross2015/</link>
      <pubDate>Thu, 29 Jan 2015 11:59:28 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/01/29/talk-at-cross2015/</guid>
      <description>今年もCROSS参加しました。そして、話もしてきました。 今年は横浜の大さん橋でした。横浜はあんまりこないので、乗り換えでおたおたしてしまいま</description>
      <content:encoded><p>今年もCROSS参加しました。そして、話もしてきました。
今年は横浜の大さん橋でした。横浜はあんまりこないので、乗り換えでおたおたしてしまいましたが。。。</p>

<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20150129/oosanbashi.jpg" />
    </div>
    <a href="/images/entries/20150129/oosanbashi.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<!-- more -->
<p>なかなかいい景色でした。（寒いけど）
「おおさんばし」って読むんですね。「だいさんばし」だと思ってた。。。</p>
<p>以下はいつもの、自分用メモです。</p>
<h2 id="俺はどうしてそのデータストアを選択したのか-銀河と小宇宙を語る会">俺はどうしてそのデータストアを選択したのか 〜銀河と小宇宙を語る会〜</h2>
<p><a href="http://2015.cross-party.com/program/c1">http://2015.cross-party.com/program/c1</a></p>
<p>遅れて入ったので、ちゃんと聴けてないです。</p>
<h4 id="最近注目しているデータストアは">最近注目しているデータストアは？</h4>
<ul>
<li>Postgresql。JSON型が気になってる。</li>
<li>AiroSpike。データ型のあるデータストアが気になってる。</li>
<li>MongoDB。<strike>JSON使いたいなら、これじゃないの？</strike></li>
<li>AWSのAurora。<strike>インスタンスタイプを選ばなくていい</strike>（選ばないといけないらしい）とか、勝手にスケールしてくれるし、MySQL互換。</li>
</ul>
<h2 id="今こそ語るエンジニアの幸せな未来">今こそ語るエンジニアの幸せな未来</h2>
<p><a href="http://2015.cross-party.com/program/x3">http://2015.cross-party.com/program/x3</a></p>
<ul>
<li>「無職初日です。」</li>
<li>Web系の人？とか質問されて、自分が何系かいつもわからなくなるなぁ。</li>
<li>「働きがいは会社が提供するのか、個人が見つけるのか？」
<ul>
<li>個人かなぁ。会社がなにをやってるかにもよる気がするかなぁ。</li>
</ul>
</li>
<li>「辞めると伝えると、やりたいようにやれって言われるw」</li>
<li>リモートできるかできないか。</li>
<li>「働きがい」というキーワードが出てると普通は怪しい会社w</li>
<li>今は、働きやすさを高くしないと人が雇えなくなってきている。</li>
<li>欧米のミドルウェアだと、35歳定年説はない。→日本でもそうじゃないですか？</li>
<li>漫然と進んでるとダメ。→そりゃそうだ。</li>
</ul>
<h2 id="全文検索エンジン群雄割拠あなたが使うべきはどれだ">全文検索エンジン群雄割拠〜あなたが使うべきはどれだ！〜</h2>
<p><a href="http://2015.cross-party.com/program/c4">http://2015.cross-party.com/program/c4</a></p>
<p>スライド：https://speakerdeck.com/johtani/elasticsearchfalseshao-jie-tote-zheng-cross-2015</p>
<p>楽しんでいただけましたでしょうか？
ちょっと話が長くなってしまい、あとの方の時間が少なかった気がしますが。。。</p>
<p>Kibanaのバックエンドとして認識されている人もいたので、検索エンジンですよというのをアピールするいい機会になったので良かったです。
もちろん、Kibanaとの組み合わせも面白いので、少しでも興味をもっていただき、触っていただけたらなぁと。</p>
<p>話をする機会を用意していただいた、<a href="https://twitter.com/yamakatu">やまかつさん</a>、その他のスピーカーのみなさん、ありがとうございました！。</p>
<p>Elasticsearchに関して何か興味質問などありましたら、気軽にコンタクトしてください。Twitterとかブログコメントなどで。</p>
<h2 id="プレモルタイム以降">プレモルタイム以降</h2>
<p>プレモルの写真撮るの忘れてました。。。重要なのに。。。</p>
<p>美味しくプレモルをいただきながら、何人かの方に声をかけていただき、話をすることができました。
こういう時間がとってあるのがいいですよね。
色々なところでElasticsearchを使っていただいているようで、うれしい限りです。
DMMの方とも話ができたし。</p>
<h2 id="まとめ">まとめ</h2>
<p>今年はプレモルを飲みに行くだけかなぁと思っていたのですが、話をする人になってました。（おかしいなぁ）
来年もあれば、きっと参加するかなぁと。ではまた来年！</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20150129/night.jpg" />
    </div>
    <a href="/images/entries/20150129/night.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<p>夜景きれいですね。（端っこに写ってる船は<a href="http://www.asukacruise.co.jp/facility/view/">飛鳥II</a>でした。）</p>
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 2.0系のIssueの紹介</title>
      <link>https://blog.johtani.info/blog/2014/12/25/pickup-elasticsearch-2-0-0-labels/</link>
      <pubDate>Thu, 25 Dec 2014 15:53:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/12/25/pickup-elasticsearch-2-0-0-labels/</guid>
      <description>この記事はElasticsearch Advent Calndar 2014の25日目のエントリです。 あっという間に最終日です。来年につなげるという意味で、Elasti</description>
      <content:encoded><p>この記事は<a href="http://qiita.com/advent-calendar/2014/elasticsearch">Elasticsearch Advent Calndar 2014</a>の25日目のエントリです。</p>
<p>あっという間に最終日です。来年につなげるという意味で、Elasticsearchの2系のIssueをいくつかピックアップして紹介してみます。</p>
<!-- more -->
<p>現在、ElasticsearchのGitHubリポジトリは、大きく3つのブランチで作業しています。
<code>master</code>、<code>1.x</code>、<code>1.4</code>です。<code>master</code>と<code>1.x</code>の大きな違いとしては、<code>master</code>はLuceneの5.x系を採用している点です。</p>
<p>なお、これから紹介するIssueは現在、確定していない項目も含んでいます。実際に2.0がリリースされるタイミングでは
採用されない場合もあります。</p>
<h2 id="upgrade-master-to-lucene-50-snapshot-8347-closed">Upgrade master to lucene 5.0 snapshot #8347 (closed)</h2>
<p><a href="https://github.com/elasticsearch/elasticsearch/pull/8347">https://github.com/elasticsearch/elasticsearch/pull/8347</a></p>
<p>先ほど書きましたが、Luceneの5に対応するためのPRです。
Lucene 5に関してはLuceneのコミッターのMikeさんの<a href="http://blog.mikemccandless.com/2014/11/apache-lucene-500-is-coming.html">ブログ記事</a>も参考になります。</p>
<p>Lucene 5に変更することで、BitSetに関する改善が多く含まれることになります。
メモリの利用量、圧縮などの改善が多く含まれています。
もう1点大事な点としては、Lucene 5系ではLucene 3系のインデックスを読み込むことができなくなる点です。
Luceneの下位互換の範囲は1つ前のメジャーバージョン（5.x系の場合は4.xまでが対象）となっています。</p>
<h2 id="filter-cache-add-a-_cache-auto-option-and-make-it-the-defaultclosed">Filter cache: add a <code>_cache: auto</code> option and make it the default.（closed）</h2>
<p><a href="https://github.com/elasticsearch/elasticsearch/pull/8573">https://github.com/elasticsearch/elasticsearch/pull/8573</a></p>
<p>Filter cacheは、<code>true</code>もしくは<code>false</code>の設定が利用できますが、filterの種類にも依存します。
その辺りの条件を加味しつつ、よしなにCacheをコントロールしてくれます。</p>
<h2 id="remove-andornot-in-favour-of-bool-filter-8960open--discuss">Remove and/or/not in favour of <code>bool</code> filter #8960（open / discuss）</h2>
<p><a href="https://github.com/elasticsearch/elasticsearch/issues/8960">https://github.com/elasticsearch/elasticsearch/issues/8960</a></p>
<p>似ているが少し異なる<code>and</code>、<code>or</code>、<code>not</code>フィルタと<code>bool</code>フィルタが存在しています。
これらをわかりやすくするために、<code>bool</code>フィルタに統一しましょうという話し合いをしています。</p>
<h2 id="input-validation-9059open--discuss">Input validation #9059（open / discuss）</h2>
<p><a href="https://github.com/elasticsearch/elasticsearch/issues/9059">https://github.com/elasticsearch/elasticsearch/issues/9059</a></p>
<p>色々な入力に関するチェックを追加しようというIssueです。
たとえば、ディレクトリ名やファイル名、URLのパスやクエリストリング、フィールドのパスやスクリプトなどです。
Validationがあると、変な設定をして頭をかかえることもなくなるかなぁと。</p>
<h2 id="refactor-analysis-framework-8961open">Refactor analysis framework #8961（open）</h2>
<p><a href="https://github.com/elasticsearch/elasticsearch/issues/8961">https://github.com/elasticsearch/elasticsearch/issues/8961</a></p>
<p>新しくAnalyzerを作った場合に、色々な場所に登録必要があったりします。インデックスレベルとノードレベルです。（Kuromojiプラグインなどが参考になります。）
また、インデックスごとにカスタムのAnalyzerを設定するので、1つのノードに同じAnalyzerを何度も設定しないといけません。
よりシンプルにするために、Analyzerをノード単位で設定しようという提案です。</p>
<h2 id="remove-possibility-for-conflicting-field-definitions-and-ambiguous-field-resolution-8870open">Remove possibility for conflicting field definitions and ambiguous field resolution #8870（open）</h2>
<p><a href="https://github.com/elasticsearch/elasticsearch/issues/8870">https://github.com/elasticsearch/elasticsearch/issues/8870</a></p>
<p>同じインデックスに、異なるtypeで、同じフィールド名があった場合、いろいろと良くないことがあったりします。
たとえば、フィールドのタイプがintegerとstringと異なる場合に、インデックスレベルで検索を行うとうまく検索できなかったりと。
この問題を解消するために、より明確にしようというIssueです。
たとえば、フィールド名を指定するためには、フルパスで記述をするだとか、フィールドマッピングに関してはインデックスレベルで内部で保持をするなど。</p>
<h2 id="validation-of-mappings-request-to-reject-unsupported-fields-7205closed">Validation of mappings request to reject unsupported fields #7205（closed）</h2>
<p><a href="https://github.com/elasticsearch/elasticsearch/issues/7205">https://github.com/elasticsearch/elasticsearch/issues/7205</a></p>
<p>1.xでも取り込まれますが、嬉しい機能なので紹介します。
これまでは、mappingsでスペルミスをした場合（たとえば、field設定で&quot;indexx&quot;といったミス）には、その項目は単に無視されるだけでした。
これが、v1.xでは、エラーに</p>
<h2 id="まとめ">まとめ</h2>
<p>ということで、簡単ですが、v2.0.0に向けたIssueをピックアップして紹介してみました。
上記以外にも多くの改善、提案が2.0に向けて行われています。
興味のある方は、<a href="https://github.com/elasticsearch/elasticsearch/issues?q=is%3Aopen+is%3Aissue+label%3Av2.0.0">v2.0.0</a>ラベルでIssueを検索してみてはいかがでしょうか？</p>
<p>今年もあとわずかとなりました。
今年の2月にElasticsearchの1.0がリリースされ、あっという間に1.4なりました。まだまだ改善しています。</p>
<p>来年もElasticsearchに興味をもっていただければ嬉しいです。
<a href="http://www.elasticon.com/">Elasticsearch初のユーザカンファレンスのサイトもオープン</a>しました。
Elasticsearchに関するいろいろな話が聞ける機会だと思います。登録をお待ちしています。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Marvel 1.3.0リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2014/12/18/marvel-1-3-0-released-ja/</link>
      <pubDate>Thu, 18 Dec 2014 17:06:48 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/12/18/marvel-1-3-0-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：marvel 1.3.0 released 12/17に、Elasticsearch Marvel 1.3.0をリリースしました</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="http://www.elasticsearch.org/blog/marvel-1-3-0-released/">marvel 1.3.0 released</a></p>
<p>12/17に、<strong>Elasticsearch Marvel 1.3.0</strong>をリリースしました。
Marvelの以前のリリースから、Elasticsearchでは様々なことがありました（Elasticsearch 1.4のリリースなど）。
このバージョンでは、モニタリングにクエリキャッシュや新しいcircuit breakerなどのような機能を追加してあります。
Senseのナレッジベースは最新のAPIを含むものに拡張されています。
また、<a href="http://www.elasticsearch.org/overview/shield/">Shield</a>のリリースに向けた準備として、HTTPsのサポートも追加しました。</p>
<p>アップグレードのために、Elasticsearchの全てのノードに最新版のMarvelプラグインをインストールする必要があります。
また、他のJavaプラグインと同様に、Marvelの新バージョンを有効にするために、各ノードを（1台ずつ）リスタートする必要があるでしょう。
アップグレードプロセスについての詳細は、<a href="http://www.elasticsearch.org/guide/en/marvel/current/upgrade.html#upgrade">Marvelドキュメント</a>をごらんください。</p>
<!-- more -->
<p>まとめとして、ここに本リリースに関する改善点をいかにリストアップしておきます。</p>
<h3 id="agent">agent</h3>
<ul>
<li>追加：
<ul>
<li>httpsのサポート</li>
<li>デフォルトのMarvelの設定（以前は常に9200）ではなく、ローカルノードのポートを自動的に検出</li>
</ul>
</li>
<li>改善：
<ul>
<li>marvelインデックステンプレートに関するエラーチェックと耐障害性(それに対するチェックと追加時のチェック)</li>
<li>エラーログに関するくり返しの抑制</li>
<li>URLパラメータによるインデックス名を指定する_bulk exportコマンド。これは、<code>rest.action.multi.allow_explicit_index</code>がfalseに設定されているときに有用</li>
</ul>
</li>
<li>修正：
<ul>
<li>ES 1.4.0のtribe nodeがMarvelのインストール時に初期化されない問題</li>
</ul>
</li>
<li>削除：
<ul>
<li>UIで表示されないoptional shard level statsを除去</li>
</ul>
</li>
</ul>
<h3 id="monitoring-ui">monitoring ui</h3>
<ul>
<li>追加：
<ul>
<li>ES 1.4.0で導入された新しいcircuit breakerを追加</li>
<li>circuit breakerのlimitをグラフにプロット</li>
<li>QueryCacheのグラフを追加</li>
<li>index throttlingのグラフの追加</li>
<li>Index writerとバージョンのmapのメモリ使用量のグラフの追加</li>
</ul>
</li>
<li>修正：
<ul>
<li>Network Transport Bytes Receivedグラフに実際の送信量を表示</li>
<li>Node Statsダッシュボードでいくつかのスレッドプールの不足</li>
</ul>
</li>
</ul>
<h3 id="sense">sense</h3>
<ul>
<li>
<p>追加：</p>
<ul>
<li>mappingsをインデックスでオートコンプリートするしないの設定を可能に</li>
<li>Cluster Reroute API</li>
<li>Search APIのQuery Cacheパラメータ</li>
<li>Analyze API</li>
<li>Validate Query API</li>
<li>Put Percolator API</li>
<li>cluster.routing.allocation.*設定</li>
<li>Function Scoreクエリのweightパラメータ</li>
<li>Flush API</li>
<li>Terms Aggregationのshow_term_doc_count_errorパラメータ</li>
<li>Update API</li>
<li>_geo_distanceソートオプション</li>
<li>Significant Terms aggregationを1.4.0にアップデート</li>
<li>Mapping APIにメタデータフィールドを追加</li>
<li>Get Index API</li>
<li>Scripted Metric Aggregation</li>
<li>simple_query_stringクエリ</li>
<li>More Like Thisクエリを1.4.0にアップデート</li>
<li>has_childクエリ/フィルタのmin_childrenとmax_childrenオプション</li>
<li>terms aggs/significant terms aggsのヒントオプション</li>
<li>Mappings APIのtransform</li>
<li>インデックスされたscriptとtemplate
* Geo Bounds aggregation</li>
<li>Top Hits aggregation</li>
<li>Terms aggregationのcollect_modeオプション</li>
<li>Percentiles Rank aggregation</li>
<li>Disk Threshold Allocator設定</li>
</ul>
</li>
<li>
<p>修正：</p>
<ul>
<li>URLオートコンプリートの挙動（プロトコルとホストのような組み合わせ）</li>
<li>nested typeマッピングのinclude_in_parentとinclude_in_rootの不足</li>
<li>Rangeフィルタでのgt、gte、lt、lte</li>
<li>Existsフィルタのオートコンプリート</li>
<li>Snapshot、Restore APIのリポジトリ設定の時オートコンプリートの失敗</li>
</ul>
<p>いつものように、Elasticsearch Marvelを改善するために、フィードバックをお待ちしています。
<a href="https://groups.google.com/forum/?fromgroups#!forum/elasticsearch">ElasticsearchユーザML</a>や<a href="http://www.twitter.com/elasticsearch">Twitter</a>に質問や意見お送りください。</p>
</li>
</ul>
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 1.4.2および1.3.7リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2014/12/18/elasticsearch-1-4-2-released-ja/</link>
      <pubDate>Thu, 18 Dec 2014 14:26:14 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/12/18/elasticsearch-1-4-2-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：elasticsearch 1.4.3 and 1.3.8 released 本日、Lucene 4.10.3をベースにしたElas</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-3-and-1-3-8-released/">elasticsearch 1.4.3 and 1.3.8 released</a></p>
<p>本日、<strong>Lucene 4.10.3</strong>をベースにした<strong>Elasticsearch 1.4.3</strong>と、<strong>セキュリティ</strong>フィックスとバグフィックスリリースである、<strong>Elasticsearch 1.3.8</strong>をリリースしました。
ダウンロードおよび変更リストはそれぞれ次のリンクからアクセスできます。</p>
<ul>
<li>最新ステーブルリリース：<a href="http://www.elasticsearch.org/downloads/1-4-3">Elasticsearch 1.4.3</a></li>
<li>1.3.x系バグフィックス：<a href="http://www.elasticsearch.org/downloads/1-3-8">Elasticsearch 1.3.8</a></li>
</ul>
<p>過去のリリースに関するブログ（公式）はこちら。</p>
<ul>
<li>1.4:<a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-1-released/">1.4.1</a>,
<a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-0-released/">1.4.0</a>, <a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-0-beta-released/">1.4.0.Beta1</a></li>
<li>1.3:<a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-1-released/">1.3.6</a>,
<a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-0-released/">1.3.5</a>, <a href="http://www.elasticsearch.org/blog/elasticsearch-1-3-4-released/">1.3.4</a>, <a href="http://www.elasticsearch.org/blog/elasticsearch-1-3-3-released/">1.3.3</a>, <a href="http://www.elasticsearch.org/blog/elasticsearch-1-3-2-released/">1.3.2</a>, <a href="http://www.elasticsearch.org/blog/elasticsearch-1-3-1-released/">1.3.1</a>, <a href="http://www.elasticsearch.org/blog/elasticsearch-1-3-0-released/">1.3.0</a>.</li>
</ul>
<p>すべての変更については<a href="http://www.elasticsearch.org/downloads/1-4-2">1.4.2のリリースノート</a>および<a href="http://www.elasticsearch.org/downloads/1-3-7">1.3.7のリリースノート</a>をごらんください。
以下では、重要な変更について紹介します。</p>
<!-- more -->
<h2 id="bug-fixes">bug fixes</h2>
<p>Elasticsearchに対して広範囲にわたってランダムなテストを行っています。以下の問題を見つけ、修正するのに役立っています。</p>
<ul>
<li>プライマリシャードを持つnodeがレプリカシャードをプライマリから復旧している間に、リスタートした場合に、プライマリ上のトランザクションログが削除されデータをロスする(<a href="https://github.com/elasticsearch/elasticsearch/pull/8917">#8917</a>)</li>
<li>scriptインデックスが普及した場合に、ScriptService全体がデッドロック(<a href="https://github.com/elasticsearch/elasticsearch/pull/8901">#8901</a>)</li>
<li>Index Writerのロックを強制的に解放することによるシャードの破損(<a href="https://github.com/elasticsearch/elasticsearch/pull/8892">#8892</a>)</li>
</ul>
<h2 id="パフォーマンス改善">パフォーマンス改善</h2>
<p>複雑な設定をもつ大きめのクラスタをもつユーザは、小さなスケールではわからない性能ボトルネックに直面します。
彼らの報告が次の改善をもたらす助けとなりました。</p>
<ul>
<li>使用可能なディスク空間に基づいてシャードの配置を決定する、disk allocation deciderの速度改善とクラスタリスタート後のリカバリ速度の改善(<a href="https://github.com/elasticsearch/elasticsearch/pull/8803">#8803</a>)</li>
<li>以前よりも高速な共有ファイルシステムでのSnapshot生成(<a href="https://github.com/elasticsearch/elasticsearch/pull/8749">#8749</a>)</li>
<li>不要なクラスタ状態変更の削減とそれによるネットワークトラフィックの削減およびリカバリの速度向上(<a href="https://github.com/elasticsearch/elasticsearch/pull/8933">#8933</a>, <a href="https://github.com/elasticsearch/elasticsearch/pull/8413">#8413</a>)</li>
<li>index stats APIはシャードリカバリによるブロックしない(<a href="https://github.com/elasticsearch/elasticsearch/pull/8910">#8910</a>)</li>
</ul>
<h2 id="試してみてください">試してみてください。</h2>
<p>ぜひ、<a href="http://www.elasticsearch.org/downloads/1-4-2">Elasticsearch 1.4.2</a>をダウンロードして、試してみてください。
そして、感想をTwitter(<a href="https://twitter.com/elasticsearch">@elasticsearch</a>)などで教えて下さい。
また、問題がありましたら、<a href="https://github.com/elasticsearch/elasticsearch/issues">GitHub issues page</a>で報告をお願いします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>JJUG ナイトセミナーでLuceneの簡単な紹介をしてきました。#JJUG</title>
      <link>https://blog.johtani.info/blog/2014/12/17/jjug-night-seminar-dec-2014/</link>
      <pubDate>Wed, 17 Dec 2014 18:41:54 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/12/17/jjug-night-seminar-dec-2014/</guid>
      <description>「【東京】JJUG ナイト・セミナー「機械学習・自然言語処理特集！」12/17（水）開催」でLuceneの話をしてきました。 本当にごく簡単な入</description>
      <content:encoded><p><a href="http://jjug.doorkeeper.jp/events/18378">「【東京】JJUG ナイト・セミナー「機械学習・自然言語処理特集！」12/17（水）開催」</a>でLuceneの話をしてきました。
本当にごく簡単な入門です。
Luceneをさわるきっかけにしてもらえたら嬉しいです。</p>
<p>そのほかにも面白い話が聞けましたので、簡単ですがメモを。</p>
<!-- more -->
<h2 id="jjugの2014年振り返り">JJUGの2014年振り返り</h2>
<ul>
<li>だいたい、毎月ナイトセミナーかCCCを開催</li>
<li>イベント系に、のべ3100名が参加</li>
</ul>
<h2 id="java-でカジュアルにはじめる機械学習">Java でカジュアルにはじめる機械学習</h2>
<h3 id="小宮-篤史さんスマートニュース株式会社">小宮 篤史さん(スマートニュース株式会社)</h3>
<p>スライド：<a href="https://speakerdeck.com/komiya_atsushi/number-jjug-java-dekaziyuarunihazimeruji-jie-xue-xi">#JJUG - Java でカジュアルにはじめる機械学習</a><br>
ブログ：<a href="http://blog.k11i.biz/2014/12/jjug-java.html">#JJUG ナイトセミナー「機械学習・自然言語処理特集！」で Java でカジュアルに機械学習する話をしてきました</a></p>
<ul>
<li>ガチの人は寝ててください。</li>
<li>機械学習でできること
<ul>
<li>分類・識別</li>
<li>予測・回帰</li>
<li>パターンマイニング・アソシエーションルール</li>
<li>クラスタリング</li>
</ul>
</li>
<li>上2つは教師あり学習/下2つは教師なし学習</li>
<li>データとしては、日構造では扱えないので、「特徴量」を抽出して「特徴ベクトル」を作って、処理をするのが機械学習</li>
</ul>
<p>得られた結果の正しさの測定などなど</p>
<ul>
<li>機械学習の実装は辛いので、車輪の再発明をやめましょう！</li>
</ul>
<p>Javaで使える機械学習</p>
<ul>
<li>Weka：とりあえず使ってみるならこれ？</li>
<li>MLlib：Sparkで使われてる</li>
<li>Mahout：オワコン？</li>
<li>SAMOA：Stormの上で利用できる</li>
<li>Jubatus：Javaクライアントあり。</li>
<li>h2o：Deep learningをJavaでやるなら、これ。</li>
<li>ほかにもあったけど、スライド見ていただければ。</li>
</ul>
<p>機械学習をはじめるのに使えるデータセット</p>
<ul>
<li>
<p>UCI Machine learning repository</p>
<ul>
<li>Iris（アヤメデータ）は機械学習界のHello world</li>
</ul>
</li>
<li>
<p>Wekaを使ったサンプルコード</p>
</li>
</ul>
<h2 id="sparkmllibではじめるスケーラブルな機械学習">Spark/MLlibではじめるスケーラブルな機械学習</h2>
<h3 id="猿田-浩輔さん株式会社エヌティティデータ">猿田 浩輔さん(株式会社エヌ・ティ・ティ・データ)</h3>
<p>スライド：（後日、リンクがあれば更新予定）</p>
<p>* Spark+MLlibを語る上で外せない話題</p>
<ul>
<li>
<p>Hadoopとの違い？</p>
</li>
<li>
<p>まずはHadoopの話</p>
</li>
<li>
<p>HadoopによるK-meansのデモ</p>
</li>
<li>
<p>Hadoopの問題点に対するSparkの解決策</p>
</li>
<li>
<p>Spark 1.0系からJava8で書ける</p>
</li>
</ul>
<p>QA：</p>
<p>Q： データをキャッシュできるという話でしたが、キャッシュするということは、ジョブが途中で失敗した場合は最初からやり直しになるのでしょうか？
A： キャッシュしたデータが残っている場合は、途中から再開出来ます。キャッシュしたデータを持ったマシンがこけたら、最初からやり直しです。</p>
<h2 id="luceneと日本語の検索">Luceneと日本語の検索</h2>
<h3 id="自分">自分</h3>
<p>スライド：<a href="https://speakerdeck.com/johtani/lucenetori-ben-yu-falsejian-suo">Luceneと日本語の検索</a>
サンプルのリポジトリ：<a href="https://github.com/johtani/jjug-example">jjug-example</a></p>
<p>自然言語処理にからめて何か話をしてくださいと話を受けていたのですが、自然言語処理については「形態素解析」くらいしか出てこなかったですけど。。。
Luceneがどんなものかを超概要で話をしてみました。少しでもLuceneがどんなものかをわかってもらえたら嬉しいです。</p>
<p>もっと詳しく知りたい方は、スライドにある参考資料などを見ていただければと。</p>
<p>Javaで書くのもいいんですが、もっと簡単に検索したい場合はElasticsearchを使うのが便利ですよ！で締めくくりたかったのですが、発表では失敗してしまいました。。。
Elasticsearchの起動からデータ登録、検索までは<a href="https://speakerdeck.com/johtani/elasticsearch-and-kibana">こちらのスライド</a>を見ていただければ簡単さがわかると思います。</p>
<p>また、Kuromojiを利用した時に、Tokenizerなどが出力するTokenの品詞情報を見たい場合に便利な<a href="https://github.com/johtani/elasticsearch-extended-analyze">Elasticsearch用プラグイン</a>も作っています。
こちらも、Elasticsearchと一緒に使ってみてください。</p>
<h2 id="まとめ">まとめ</h2>
<p>機械学習に関していろんなツールがあるのだなぁと。
懇親会でもちょっと話しましたが、アルゴリズムの選定とか、アルゴリズムに適したデータの作成など、前処理のノウハウとかが大変そうだなぁといつも思います。
機械学習はいつもぼやーっとしか理解してないので。。。</p>
<p><a href="https://www.youtube.com/channel/UCZ5gDYmqI0tOeg-fEkCD2CQ">JJUGさんはYouTubeの動画</a>もあるようなので、過去の面白そうなセミナーも合わせてみてみると面白いと思います。</p>
<p>毎度のことですが、なんでも良いので、発表した後のフィードバックをいただけるとうれしいです。
今後の励みや改善につながるので。</p>
</content:encoded>
    </item>
    
    <item>
      <title>2014年のElasticsearch</title>
      <link>https://blog.johtani.info/blog/2014/12/01/about-elasticsearch-in-2014/</link>
      <pubDate>Mon, 01 Dec 2014 18:05:48 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/12/01/about-elasticsearch-in-2014/</guid>
      <description>早いもので、師走です。今年もあと少しとなりました。ということで、Advent Calendarの季節が始まりました。 この記事はElastics</description>
      <content:encoded><p>早いもので、師走です。今年もあと少しとなりました。ということで、Advent Calendarの季節が始まりました。</p>
<p>この記事は<a href="http://qiita.com/advent-calendar/2014/elasticsearch">Elasticsearch Advent Calndar 2014</a>の1日目のエントリです。</p>
<p>1日目ということで、簡単に今年の変遷を振り返りつつ、今年導入された新機能についてピックアップしてみようかと思います。</p>
<!-- more -->
<h2 id="10リリースlucene-460">1.0リリース(Lucene 4.6.0)</h2>
<p>今年一番の目玉と思いますが、1月にRCが公開されて、1.0.0が2月にリリースされました。
（ElasticSearch Serverの翻訳が昨年末に終わってレビューをしていた段階での発表だったので個人的にはきついタイミングでした）
1.0の主な変更点はこちら。</p>
<h3 id="elasticsearchsが小文字に">Elasticsearch（Sが小文字に）</h3>
<p>1.0からSが小文字になりました。(<a href="https://github.com/elasticsearch/elasticsearch/issues/4634">#4634</a>)
0.90以前のバージョンについては、Sが大文字になっています。
ややこしいですが、今年の3月に出版された黒い<a href="http://www.amazon.co.jp/dp/4048662023/ref=as_sl_pc_tf_lc?tag=johtani-22&amp;camp=243&amp;creative=1615&amp;linkCode=as1&amp;creativeASIN=4048662023&amp;adid=0YAE2J8RE36SX7N3R06Z&amp;&amp;ref-refURL=http%3A%2F%2Fblog.johtani.info%2F">ElasticSearch Server日本語版</a>は原著が0.20で日本語版にするタイミングで0.90に対応しました。
このため、こちらの書籍のタイトルはSが大文字となっています。
（なお、<a href="https://www.packtpub.com/big-data-and-business-intelligence/elasticsearch-server-second-edition">原著の2nd Edition</a>は小文字になっています）</p>
<h3 id="snapshotrestoreの導入とgatewayの廃止">Snapshot/Restoreの導入とGatewayの廃止</h3>
<p>0.90以前のバージョンでは、<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/modules-gateway.html#modules-gateway">gatewayというモジュール</a>で、S3などにインデックスのメタデータなどを保存する機能がありました。
この機能は、0.20からlocal以外はdeprecatedとなりました。</p>
<p>インデックスのバックアップ、リストアのために、1.0で実装されたのが<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-snapshots.html#modules-snapshots">Snapshot/Restore</a>です。
Snapshot/Restoreでは、インデックスごと、もしくはクラスタ全体をリモートにあるリポジトリにスナップショットを取ることが可能となりました。
初期リリースの段階では、共有ファイルシステムのみでしたが、現在は、S3やHDFSなどに保存が可能となっています。</p>
<h3 id="aggregation">Aggregation</h3>
<p>Facetをより強力にしたものです。Facetでは、指定したフィールドの集計のみでした。
データの解析などを行うには、独自で集計する必要がありました。
この機能をより柔軟に行えるように実装したのが<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-aggregations.html">Aggregation</a>です。</p>
<p>たとえば、アクセスログを日毎に集計し、さらに日毎の集計に対して国別の集計やユーザエージェントごとの集計をさらに行うといった感じです。
Facetの場合は、日毎の検索結果に対して個別に集計するのみでしたが、Aggregationを使うことで、1週間の検索結果に対して、
日毎に国別の集計を行うといったことが可能になっっています。</p>
<h3 id="cat-api">cat API</h3>
<p>&ldquo;=^.^=&quot;猫が出てくるAPIです。(違う)</p>
<p>Elasticsearchでは、クラスタの状態などが全てREST APIで取得でき、JSONで結果が帰ってきていました。
JSONはプログラムなどで処理を行う場合は便利ですが、コンソールで確認したり、管理系のツールでメールで通知する場合などは見にくいことがあります。
これを解消したのが<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/cat.html"><code>_cat</code> API</a>です。（<a href="http://www.elasticsearch.org/blog/introducing-cat-api/">公式の紹介ブログはこちら</a>）</p>
<h3 id="circuit-breaker">Circuit Breaker</h3>
<p>OOMが発生しそうなfielddataの読み込みを検知して、事前に防ぐ機構になります。
初期段階ではFielddataに対してのものから実装されました。</p>
<h2 id="11リリースlucene-461">1.1リリース(Lucene 4.6.1)</h2>
<p>3月にリリースされました。Elasticsearchはまだまだ発展しているため、リリースのサイクルが短いのが特徴です。</p>
<p>1.x系では、<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/setup-upgrade.html#setup-upgrade">Rolling Upgrade</a>が導入されました。このため、クラスタ全体を停止することなく、クラスタのアップグレードが可能になりました。</p>
<h3 id="search-templates">search templates</h3>
<p>検索クエリをテンプレートとして登録することができる<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html#search-template">search templates</a>です。
JSONでクエリを記述できるのは便利ですが、毎回組み立てるのは大変かもしれません。
特に、固定のクエリをプログラムから利用するような場合などです。
テンプレートとして登録しておくことで、検索時に値を埋め込むだけで検索ができるようになりました。</p>
<h3 id="aggregationの強化">Aggregationの強化</h3>
<p>Aggregationの種類が増えました。</p>
<ul>
<li><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-aggregations-metrics-cardinality-aggregation.html#search-aggregations-metrics-cardinality-aggregation">cardinality</a>：ユニークユーザ数の集計などが行えるaggregationです。HyperLogLog++アルゴリズムを利用した実装になっています。</li>
<li><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-aggregations-bucket-significantterms-aggregation.html">significant_terms</a>：単語の数による集計ではなく、コレクション全体に対する単語の頻度と、検索結果に対する単語の頻度を計算することで、重要度を計ることができます。</li>
<li><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-aggregations-metrics-percentile-aggregation.html#search-aggregations-metrics-percentile-aggregation">percentiles</a>：パーセンタイル値を計算できます。</li>
</ul>
<h2 id="12リリースlucene-48系">1.2リリース(Lucene 4.8系)</h2>
<h3 id="java-7必須">Java 7必須</h3>
<p>利用しているLuceneがJava 7必須となったためです。また、Java 6のEOLも切れてますし。</p>
<h3 id="dynamic-scriptingがデフォルトオフ">dynamic scriptingがデフォルトオフ</h3>
<p>採用していたMVELがサンドボックス化に対応していないため、危険を回避するためにオフとなりました。</p>
<h3 id="インデキシングとマージング">インデキシングとマージング</h3>
<p>インデキシングとマージ処理に関するさまざまな改善。</p>
<ul>
<li>flushのthreasholdを操作回数ではなく、サイズや時間によるものに変更</li>
<li>デフォルトをConcurrentMergeSchedulerに変更</li>
</ul>
<h2 id="13リリースlucene-490系">1.3リリース(Lucene 4.9.0系)</h2>
<h3 id="セキュリティ関連">セキュリティ関連</h3>
<ul>
<li>JSONPのデフォルトオフ</li>
<li>MVELの非推奨化（1.4で削除）＋<code>script.disable_dynamic</code>のデフォルト値が<code>sandbox</code></li>
</ul>
<h3 id="aggregationの強化-1">aggregationの強化</h3>
<ul>
<li><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-aggregations-metrics-top-hits-aggregation.html#search-aggregations-metrics-top-hits-aggregation">top hits</a>：Field Collapsing/combiningと呼ばれる機能です。たとえば、いくつかのサイトのHTMLを収集して検索機能を提供する場合に、ドメインごとに1件ずつ検索結果に出したい場合などに利用できる機能です。</li>
</ul>
<p>その他にも以下のaggregationが追加されています。</p>
<ul>
<li><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-aggregations-metrics-percentile-rank-aggregation.html">percentile ranks</a></li>
<li><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-aggregations-metrics-geobounds-aggregation.html">geo bounds</a></li>
</ul>
<h3 id="mappingのtransform">mappingのtransform</h3>
<p>Mappingに<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-transform.html#mapping-transform">transform</a>機能が追加されました。
mappingにドキュメントの値を元に、インデキシング時に変換処理を記述できます。
たとえば、特定のフィールドにある値がある場合にだけ、あるフィールドに値を入れるなどといったことが可能になります。</p>
<h3 id="ディスク関連">ディスク関連</h3>
<ul>
<li>disk based shard allocation deciderが導入されました。ノードのディスクの使用率を元に、シャードを配置しても良いかといった決定を行う機構です。</li>
<li>チェックサムによるファイルのチェック（Lucene4.9で導入されたコードへの切り替え）</li>
</ul>
<h2 id="14リリースlucene-410系">1.4リリース(Lucene 4.10系)</h2>
<p>ベータ版が出されるほど、多くの改善が入っています。</p>
<h3 id="resiliency">resiliency</h3>
<ul>
<li><a href="#memory-mgmt">メモリ使用量の低下</a>によるノードの安定性向上
<ul>
<li>DocValues、リクエストごとのcircuit breakerなど</li>
</ul>
</li>
<li>discoveryアルゴリズムの改善による<a href="#cluster-stability">クラスタの安定性</a>向上</li>
<li><a href="#checksums">チェックサム</a>の導入による破損したデータの検知</li>
</ul>
<h3 id="セキュリティ関連-1">セキュリティ関連</h3>
<ul>
<li>CORSをデフォルト無効</li>
<li>Groovyがデフォルトのスクリプト言語に。</li>
</ul>
<h3 id="aggregationの強化-2">Aggregationの強化</h3>
<p>以下のaggregationが追加されています。</p>
<ul>
<li><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/search-aggregations-bucket-filters-aggregation.html#search-aggregations-bucket-filters-aggregation">filter</a>、<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/search-aggregations-bucket-children-aggregation.html#search-aggregations-bucket-children-aggregation">children</a>、<a href="%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88">scripted_metric</a></li>
</ul>
<h3 id="upgrade-api">Upgrade API</h3>
<p>インデックスを最新のバージョンのものにアップグレードするためのAPIです。
Luceneは下位互換を保ってくれているため、古いバージョンのインデックスも読み込むことが可能です。
ただ、最新バージョンで使える機能が制限されていたりということもあります。
クラスタにあるインデックスをアップグレードするのにかかる時間や必要かどうかといったことを取得できる仕組みも提供します。</p>
<p>また、Lucene自体は、1つ前のメジャーバージョン（4.x系だと3.x系まで）までの互換性は提供していますが、
2つ前のメジャーバージョンの互換性がなくなります。
Luceneも5.x系のブランチが作成されており、5系のリリースにより、3系との互換性がなくなります。
5系のリリースに対応する場合にも、こちらのAPIが助けになるかと。</p>
<h3 id="141">1.4.1</h3>
<p>11/27に<a href="http://blog.johtani.info/blog/2014/11/27/elasticsearch-1-4-1-released-ja/">1.4.1がリリース</a>されました。
シャードの配置やparent/child、nestedドキュメントの改善などが行われています。</p>
<h2 id="まとめ">まとめ</h2>
<p>ということで、駆け足で、1月から11月までのElasticsearchの流れを追ってみました。
1.0で大きな機能追加、改善が行われ、その後も活発に開発が行われています。
要望などがあれば、MLで聞いてみたりやGitHubに登録するなどを行っていただければと。</p>
<p>あと、今年から来年にかけての大きなイベントとして、
<a href="http://www.elasticon.com/">Elasticsearch初のユーザカンファレンスのサイトがオープン</a>しました。
Elasticsearchに関するいろいろな話が聞ける機会だと思うので、興味のある方は見ていただければと。</p>
<p>では、また次のAdvent Calendarで！（最終日の予定ですが、空きがあるのでなにか書くかも）</p>
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 1.4.1および1.3.6リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2014/11/27/elasticsearch-1-4-1-released-ja/</link>
      <pubDate>Thu, 27 Nov 2014 11:43:32 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/11/27/elasticsearch-1-4-1-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：elasticsearch 1.4.1 and 1.3.6 released 本日、Lucene 4.10.2をベースにしたElas</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-1-released/">elasticsearch 1.4.1 and 1.3.6 released</a></p>
<p>本日、<strong>Lucene 4.10.2</strong>をベースにした<strong>Elasticsearch 1.4.1</strong>と、バグフィックスリリースである、<strong>Elasticsearch 1.3.6</strong>をリリースしました。
ダウンロードおよび変更リストはそれぞれ次のリンクからアクセスできます。</p>
<ul>
<li>最新ステーブルリリース：<a href="http://www.elasticsearch.org/downloads/1-4-1">Elasticsearch 1.4.1</a></li>
<li>1.3.x系バグフィックス：<a href="http://www.elasticsearch.org/downloads/1-3-6">Elasticsearch 1.3.6</a></li>
</ul>
<p>過去のリリースに関するブログ（公式）はこちら。</p>
<ul>
<li>1.4:<a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-0-released/">1.4.0</a>, <a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-0-beta-released/">1.4.0.Beta1</a></li>
<li>1.3:<a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-0-released/">1.3.5</a>, <a href="http://www.elasticsearch.org/blog/elasticsearch-1-3-4-released/">1.3.4</a>, <a href="http://www.elasticsearch.org/blog/elasticsearch-1-3-3-released/">1.3.3</a>, <a href="http://www.elasticsearch.org/blog/elasticsearch-1-3-2-released/">1.3.2</a>, <a href="http://www.elasticsearch.org/blog/elasticsearch-1-3-1-released/">1.3.1</a>, <a href="http://www.elasticsearch.org/blog/elasticsearch-1-3-0-released/">1.3.0</a>.</li>
</ul>
<p>すべての変更については<a href="http://www.elasticsearch.org/downloads/1-4-1">1.4.1のリリースノート</a>および<a href="http://www.elasticsearch.org/downloads/1-3-6">1.3.6のリリースノート</a>をごらんください。
以下では、重要な変更について紹介します。</p>
<!-- more -->
<h2 id="shard-allocation">shard allocation</h2>
<p>Elasticsearch 1.3.0で、<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/index-modules-allocation.html#disk">disk based shard allocation</a>が
デフォルトで有効になっています。
もし、ノードのディスクの使用量が<code>law</code>で指定された値（85%）を超えた場合、ノードにはシャードが配置されません。
また、<code>high</code>で指定された値（90%）を超えた場合、シャードを他のノードへ移動します。</p>
<p>Elasticsearch 1.4.1では、disk based shard allocationに3つの改良が追加されました。</p>
<ul>
<li>ディスク使用量のチェックはシャードがクラスタに配置されるタイミングでのみ実施していた。現在は60秒ごとに使用量をチェック。(<a href="https://github.com/elasticsearch/elasticsearch/pull/8270">#8270</a>)</li>
<li>ディスクフルメッセージは<code>DEBUG</code>レベルでログに出力されていました。なぜ、新しいシャードが配置されないのかを説明するのが困難でした。現在は<code>WARN</code>レベルで30秒ごとにログに出力されます。(<a href="https://github.com/elasticsearch/elasticsearch/pull/8382">#8382</a>)</li>
<li>以前は、シャードをもう一つのノードへ動かすべきかどうか決めるとき、allocation deciderはノードにあるシャードのサイズを考慮するだけでした。現在は、動かされるシャードのサイズも考慮します。これにより、必要最小限のシャードの移動量となります。(<a href="https://github.com/elasticsearch/elasticsearch/pull/8569">#8569</a>)</li>
</ul>
<h2 id="parentchild-and-nested-documents">parent/child and nested documents</h2>
<p>Elasticsearch 1.4.0で、parent/childとnestedドキュメントに対して（新しいセグメントを開くときに）固定長ビットセットフィルタを構築しキャッシュしました。クエリ、フィルタおよびAggregationを常に速くするためにです。
多くの<code>nested</code>フィールドを持つユーザにとっては、以前のバージョンよりもヒープの使用量が大きくなってしまいました。</p>
<p><code>nested</code> aggregationによって処理されるドキュメントの順序を変更すること(<a href="https://github.com/elasticsearch/elasticsearch/pull/8454">#8454</a>)によって、固定長ビットセットフィルタが子のドキュメントに対して必要でなくなりました。
現在は、親のドキュメント（つまり、nested<strong>ではない</strong>ドキュメント）を表すフィルタのみをキャッシュしています。これにより必要なキャッシュ空間のサイズを減少しました。(<a href="https://github.com/elasticsearch/elasticsearch/pull/8414">#8414</a>、<a href="https://github.com/elasticsearch/elasticsearch/pull/8440">#8440</a>)</p>
<h2 id="date-ranges">date ranges</h2>
<p>2つの日付範囲に関する問題がこのリリースで修正されました。
1つ目は、日付を丸めるかというものです。例えば、<code>timestamp</code>フィールドに1秒の解像度の値があるとします。
<code>{&quot;lt&quot;: &quot;2014/11/26||/d&quot;}</code>という<code>range</code>フィルタは<code>2014/11/26 00:00:00</code>未満のタイムスタンプのデータを結果として返しました。
しかし、<code>lt</code>を<code>lte</code>に変更した場合、<code>2014/11/27 00:00:00</code>以外の値も含めたいです。</p>
<p>以前は、<code>lte</code>は<code>2014/11/27 00:00:00</code>のタイムスタンプも含めてしまっていました。現在は、想定通りの動作をします。(<a href="https://github.com/elasticsearch/elasticsearch/pull/8556">#8556</a>)</p>
<p>2つ目のバグは日付の範囲条件に<code>now()</code>を利用したaliasとpercolatorフィルタです。
<code>now()</code>の値を、フィルタが作成したタイミングで決定していました。フィルタが実行されるたびに更新せずにです。
<a href="https://github.com/elasticsearch/elasticsearch/pull/8534">#8534</a>で、<code>now()</code>はaliasとpercolatorで想定通りの動作をします。</p>
<h2 id="試してみてください">試してみてください。</h2>
<p>ぜひ、<a href="http://www.elasticsearch.org/downloads/1-4-1">Elasticsearch 1.4.1</a>をダウンロードして、試してみてください。
そして、感想をTwitter(<a href="https://twitter.com/elasticsearch">@elasticsearch</a>)などで教えて下さい。
また、問題がありましたら、<a href="https://github.com/elasticsearch/elasticsearch/issues">GitHub issues page</a>で報告をお願いします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>インデックステンプレートとLogstash</title>
      <link>https://blog.johtani.info/blog/2014/11/25/import-apache-accesslog-using-logstash-2/</link>
      <pubDate>Tue, 25 Nov 2014 16:25:46 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/11/25/import-apache-accesslog-using-logstash-2/</guid>
      <description>前回の「Logstashを利用したApacheアクセスログのインポート」の続きです。 前回の記事では、Logstashの設定ファイルについて説</description>
      <content:encoded><p>前回の「<a href="http://blog.johtani.info/blog/2014/11/21/import-apache-accesslog-using-logstash/">Logstashを利用したApacheアクセスログのインポート</a>」の続きです。
前回の記事では、Logstashの設定ファイルについて説明しました。
今回は「Elasticsearchに設定するインデックステンプレート」について説明します。</p>
<!-- more -->
<h2 id="テンプレートの設定">テンプレートの設定</h2>
<p>Elasticsearchでは、登録するデータの特性に合わせてMappingを定義する方がデータを効率良く扱うことができる場合があります。
この場合、通常ですと、インデックス作成時にMappingを指定します。</p>
<p>ただ、今回は、<a href="http://blog.johtani.info/blog/2014/11/21/import-apache-accesslog-using-logstash#output-elasticsearch">インデックス名に「年」を含める形</a>で指定してあります。
「年」はLogstashで処理したデータによって決まります。このため、あらかじめMappingを指定してインデックスを作成するのは難しいです。</p>
<p>このような場合に便利な機能として、「<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-templates.html#indices-templates">インデックステンプレート</a>」があります。</p>
<h3 id="インデックステンプレートとは">インデックステンプレートとは</h3>
<p>実際のテンプレートの説明に入る前に、少しだけ説明を。
インデックステンプレートとは、インデックスが作成されるタイミングで自動的に適用される設定をテンプレートとして登録できる機能のことです。
実際にテンプレートが適用されるかどうかは、インデックス名で判断されます。</p>
<p>例えば、大して重要でもなく、データ量も少ないインデックス用のテンプレートとして、シャード数が1、レプリカ数が0、&quot;_source&quot;を保存しない設定のテンプレートを登録する場合、
次のようになります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">curl -XPUT localhost:<span style="color:#ae81ff">9200</span>/_template/template_1 -d <span style="color:#e6db74">&#39;
</span><span style="color:#e6db74">{
</span><span style="color:#e6db74">  &#34;template&#34; : &#34;te*&#34;,
</span><span style="color:#e6db74">  &#34;settings&#34; : {
</span><span style="color:#e6db74">    &#34;number_of_shards&#34; : 1,
</span><span style="color:#e6db74">    &#34;number_of_replicas&#34; : 0
</span><span style="color:#e6db74">  },
</span><span style="color:#e6db74">  &#34;mappings&#34; : {
</span><span style="color:#e6db74">    &#34;type1&#34; : {
</span><span style="color:#e6db74">      &#34;_source&#34; : { &#34;enabled&#34; : false }
</span><span style="color:#e6db74">    }
</span><span style="color:#e6db74">  }
</span><span style="color:#e6db74">}
</span><span style="color:#e6db74">&#39;</span>
</code></pre></div><p><code>_template</code>がインデックステンプレートを登録するためのエンドポイントです。
<code>template_1</code>がこのテンプレートのIDです。削除などについては、このIDを利用します。</p>
<p>そして、重要なのは、&ldquo;<code>template</code>&quot;の設定です。
&ldquo;<code>template</code>&quot;には、このテンプレートが適用されるべきインデックス名を記載します。
上記サンプルでは<code>te*</code>となっているため、<code>te</code>で始まる名前のインデックスを作成した場合にテンプレートにある設定が適用されます。</p>
<h3 id="今回利用するテンプレート">今回利用するテンプレート</h3>
<p>私がJJUG CCCや第7回Elasticsearch勉強会のKibana4のデモで利用したインデックスのテンプレートは次のものになります。
&ldquo;<code>template</code>&quot;には、<a href="http://blog.johtani.info/blog/2014/11/21/import-apache-accesslog-using-logstash/#output-elasticsearch">前回の記事で紹介したoutput/elasticsearchの設定</a> に合致する<code>new_demo_access_log-*</code>を指定しています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">curl -XPUT localhost:<span style="color:#ae81ff">9200</span>/_template/new_access_log_for_demo -d <span style="color:#e6db74">&#39;
</span><span style="color:#e6db74">{
</span><span style="color:#e6db74">  &#34;template&#34;: &#34;new_demo_access_log-*&#34;,
</span><span style="color:#e6db74">  &#34;settings&#34;: {
</span><span style="color:#e6db74">    &#34;number_of_shards&#34;: &#34;2&#34;,
</span><span style="color:#e6db74">    &#34;number_of_replicas&#34;: &#34;0&#34;
</span><span style="color:#e6db74">  },
</span><span style="color:#e6db74">  &#34;mappings&#34;: {
</span><span style="color:#e6db74">    &#34;_default_&#34;: {
</span><span style="color:#e6db74">      &#34;dynamic_templates&#34;: [
</span><span style="color:#e6db74">        {
</span><span style="color:#e6db74">          &#34;string_template&#34;: {
</span><span style="color:#e6db74">            &#34;mapping&#34;: {
</span><span style="color:#e6db74">              &#34;index&#34;: &#34;not_analyzed&#34;,
</span><span style="color:#e6db74">              &#34;type&#34;: &#34;string&#34;
</span><span style="color:#e6db74">            },
</span><span style="color:#e6db74">            &#34;match_mapping_type&#34;: &#34;string&#34;,
</span><span style="color:#e6db74">            &#34;match&#34;: &#34;*&#34;
</span><span style="color:#e6db74">          }
</span><span style="color:#e6db74">        }
</span><span style="color:#e6db74">      ],
</span><span style="color:#e6db74">      &#34;properties&#34;: {
</span><span style="color:#e6db74">        &#34;path&#34;: {
</span><span style="color:#e6db74">          &#34;type&#34;: &#34;multi_field&#34;,
</span><span style="color:#e6db74">          &#34;fields&#34;: {
</span><span style="color:#e6db74">            &#34;no_analyzed&#34;: {
</span><span style="color:#e6db74">              &#34;index&#34;: &#34;not_analyzed&#34;,
</span><span style="color:#e6db74">              &#34;type&#34;: &#34;string&#34;
</span><span style="color:#e6db74">            },
</span><span style="color:#e6db74">            &#34;analyzed&#34;: {
</span><span style="color:#e6db74">              &#34;index&#34;: &#34;analyzed&#34;,
</span><span style="color:#e6db74">              &#34;type&#34;: &#34;string&#34;
</span><span style="color:#e6db74">            }
</span><span style="color:#e6db74">          }
</span><span style="color:#e6db74">        },
</span><span style="color:#e6db74">        &#34;referer&#34;: {
</span><span style="color:#e6db74">          &#34;type&#34;: &#34;multi_field&#34;,
</span><span style="color:#e6db74">          &#34;fields&#34;: {
</span><span style="color:#e6db74">            &#34;no_analyzed&#34;: {
</span><span style="color:#e6db74">              &#34;index&#34;: &#34;not_analyzed&#34;,
</span><span style="color:#e6db74">              &#34;type&#34;: &#34;string&#34;
</span><span style="color:#e6db74">            },
</span><span style="color:#e6db74">            &#34;analyzed&#34;: {
</span><span style="color:#e6db74">              &#34;index&#34;: &#34;analyzed&#34;,
</span><span style="color:#e6db74">              &#34;type&#34;: &#34;string&#34;
</span><span style="color:#e6db74">            }
</span><span style="color:#e6db74">          }
</span><span style="color:#e6db74">        },
</span><span style="color:#e6db74">        &#34;agent&#34;: {
</span><span style="color:#e6db74">          &#34;type&#34;: &#34;multi_field&#34;,
</span><span style="color:#e6db74">          &#34;fields&#34;: {
</span><span style="color:#e6db74">            &#34;no_analyzed&#34;: {
</span><span style="color:#e6db74">              &#34;index&#34;: &#34;not_analyzed&#34;,
</span><span style="color:#e6db74">              &#34;type&#34;: &#34;string&#34;
</span><span style="color:#e6db74">            },
</span><span style="color:#e6db74">            &#34;analyzed&#34;: {
</span><span style="color:#e6db74">              &#34;index&#34;: &#34;analyzed&#34;,
</span><span style="color:#e6db74">              &#34;type&#34;: &#34;string&#34;
</span><span style="color:#e6db74">            }
</span><span style="color:#e6db74">          }
</span><span style="color:#e6db74">        },
</span><span style="color:#e6db74">        &#34;geoip&#34;: {
</span><span style="color:#e6db74">          &#34;type&#34;: &#34;object&#34;,
</span><span style="color:#e6db74">          &#34;properties&#34;: {
</span><span style="color:#e6db74">            &#34;location&#34;: {
</span><span style="color:#e6db74">              &#34;geohash&#34;: true,
</span><span style="color:#e6db74">              &#34;geohash_precision&#34;: 10,
</span><span style="color:#e6db74">              &#34;type&#34;: &#34;geo_point&#34;,
</span><span style="color:#e6db74">              &#34;lat_lon&#34;: true,
</span><span style="color:#e6db74">              &#34;geohash_prefix&#34;: true
</span><span style="color:#e6db74">            }
</span><span style="color:#e6db74">          }
</span><span style="color:#e6db74">        },
</span><span style="color:#e6db74">        &#34;response&#34;: {
</span><span style="color:#e6db74">          &#34;copy_to&#34;: &#34;response_int&#34;,
</span><span style="color:#e6db74">          &#34;type&#34;: &#34;string&#34;
</span><span style="color:#e6db74">        },
</span><span style="color:#e6db74">        &#34;bytes&#34;: {
</span><span style="color:#e6db74">          &#34;type&#34;: &#34;long&#34;
</span><span style="color:#e6db74">        },
</span><span style="color:#e6db74">        &#34;response_int&#34;: {
</span><span style="color:#e6db74">          &#34;type&#34;: &#34;integer&#34;
</span><span style="color:#e6db74">        }
</span><span style="color:#e6db74">      }
</span><span style="color:#e6db74">    }
</span><span style="color:#e6db74">  }
</span><span style="color:#e6db74">}
</span><span style="color:#e6db74">&#39;</span>
</code></pre></div><h4 id="settings設定">settings設定</h4>
<p>デモ用であり、手元で2台のノードを起動するということもあり、<code>number_of_shards</code>に<code>2</code>を、<code>number_of_replicas</code>に<code>0</code>を指定してあります。</p>
<h4 id="mappings設定">mappings設定</h4>
<h5 id="インデックスのタイプ">インデックスのタイプ</h5>
<p>Mappingsの指定は通常、特定の<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/glossary.html#glossary-type">タイプ</a>を指定します。
今回のデモでは、1種類しかないのですが、タイプ名を特に意識しないために、<code>_default_</code>を使用しました。
この場合、任意のタイプに適用されることとなります。
タイプを指定してMappingの設定を行う場合は<code>_default_</code>の部分に特定のタイプ名を記入します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#66d9ef">&#34;mappings&#34;: </span>{
  <span style="color:#66d9ef">&#34;_default_&#34;: </span>{
    ...
</code></pre></div><h5 id="ダイナミックテンプレート">ダイナミックテンプレート</h5>
<p>次は<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-root-object-type.html#_dynamic_templates">ダイナミックテンプレート</a>です。
インデックステンプレートはインデックスの設定をテンプレート化しました。ダイナミックテンプレートはフィールドに対してテンプレートを設定できます。</p>
<p>以下のダイナミックテンプレートでは、<code>string</code>タイプのフィールドのデフォルト設定を変更しています。
通常、<code>string</code>タイプのフィールドは<code>analyzed</code>となりますが、<code>not_analyzed</code>に変更してあります。
詳しく検索したいフィールドの方が少ないためです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">...
<span style="color:#66d9ef">&#34;dynamic_templates&#34;: </span>[
  {
    <span style="color:#66d9ef">&#34;string_template&#34;: </span>{
      <span style="color:#66d9ef">&#34;mapping&#34;: </span>{
        <span style="color:#66d9ef">&#34;index&#34;: </span><span style="color:#e6db74">&#34;not_analyzed&#34;</span>,
        <span style="color:#66d9ef">&#34;type&#34;: </span><span style="color:#e6db74">&#34;string&#34;</span>
      },
      <span style="color:#66d9ef">&#34;match_mapping_type&#34;: </span><span style="color:#e6db74">&#34;string&#34;</span>,
      <span style="color:#66d9ef">&#34;match&#34;: </span><span style="color:#e6db74">&#34;*&#34;</span>
    }
  }
],
...  
</code></pre></div><h5 id="multi_field指定">multi_field指定</h5>
<p>検索もしたいし、Terms Aggregationでも利用したいフィールドについては、<code>multi_field</code>を利用して、
<code>analyzed</code>と<code>not_analyzed</code>の2種類のフィールドを用意しています。
<code>multi_field</code>設定を用いることで、1つのJSONのデータから、異なる形のフィールドを用意することが可能です。</p>
<p>今回のテンプレートでは、<code>path</code>、<code>referer</code>、<code>agent</code>に<code>multi_field</code>を指定しました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">...
<span style="color:#66d9ef">&#34;path&#34;: </span>{
  <span style="color:#66d9ef">&#34;type&#34;: </span><span style="color:#e6db74">&#34;multi_field&#34;</span>,
  <span style="color:#66d9ef">&#34;fields&#34;: </span>{
    <span style="color:#66d9ef">&#34;no_analyzed&#34;: </span>{
      <span style="color:#66d9ef">&#34;index&#34;: </span><span style="color:#e6db74">&#34;not_analyzed&#34;</span>,
      <span style="color:#66d9ef">&#34;type&#34;: </span><span style="color:#e6db74">&#34;string&#34;</span>
    },
    <span style="color:#66d9ef">&#34;analyzed&#34;: </span>{
      <span style="color:#66d9ef">&#34;index&#34;: </span><span style="color:#e6db74">&#34;analyzed&#34;</span>,
      <span style="color:#66d9ef">&#34;type&#34;: </span><span style="color:#e6db74">&#34;string&#34;</span>
    }
  }
},
...
</code></pre></div><p>例えば、上記の設定の場合、入力のJSONは<code>path</code>というデータのみですが、インデックス上には<code>path.no_analyzed</code>と
<code>path.analyzed</code>というフィールドができあがります。
実際に検索する場合は、<code>path.analyzed:検索したい文字列</code>という形で検索をすることで、いわゆる部分一致のような検索が可能です。
また、完全一致をしたい場合は<code>path.no_analyzed:検索したい文字列</code>という指定になります。
用途を考えると、<code>request</code>も指定したほうが良いかもしれません。</p>
<h5 id="geoip">geoip</h5>
<p><a href="http://blog.johtani.info/blog/2014/11/21/import-apache-accesslog-using-logstash#filter-geoip">Logstashでgeoipデータ</a>を付与していました。
このgeoipのデータをKibana4で利用するために、geoデータとして登録する必要があります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#66d9ef">&#34;geoip&#34;: </span>{
  <span style="color:#66d9ef">&#34;type&#34;: </span><span style="color:#e6db74">&#34;object&#34;</span>,
  <span style="color:#66d9ef">&#34;properties&#34;: </span>{
    <span style="color:#66d9ef">&#34;location&#34;: </span>{
      <span style="color:#66d9ef">&#34;geohash&#34;: </span><span style="color:#66d9ef">true</span>,
      <span style="color:#66d9ef">&#34;geohash_precision&#34;: </span><span style="color:#ae81ff">10</span>,
      <span style="color:#66d9ef">&#34;type&#34;: </span><span style="color:#e6db74">&#34;geo_point&#34;</span>,
      <span style="color:#66d9ef">&#34;lat_lon&#34;: </span><span style="color:#66d9ef">true</span>,
      <span style="color:#66d9ef">&#34;geohash_prefix&#34;: </span><span style="color:#66d9ef">true</span>
    }
  }
},
</code></pre></div><p>上記の設定がgeoデータの指定です。
<code>type</code>に<code>object</code>が指定してありますが、これは、geoipのデータがネストしているためです。
geoipオブジェクトのうち、緯度経度のデータは<code>location</code>に入っているため、こちらに緯度経度関係の設定を指定します。</p>
<ul>
<li><code>&quot;type&quot;: &quot;geo_point&quot;</code>：<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-geo-point-type.html#mapping-geo-point-type"><code>geo_point</code></a>タイプであることを指定</li>
<li><code>&quot;geohash&quot;: true</code>：緯度経度のデータをもとに、geohashの値もインデックス</li>
<li><code>&quot;geohash_precision&quot;: 10</code>：geohashの精度の指定</li>
<li><code>&quot;lat_lon&quot;: true</code>：緯度経度を個別の<code>.lat</code>、<code>.lon</code>というフィールドにもインデックス</li>
<li><code>&quot;geohash_prefix&quot;: true</code>：該当するgeohashのみでなく、その親にあたるgeohashについてもインデックスする</li>
</ul>
<h5 id="responseresponse_intbytes">response、response_int、bytes</h5>
<p>最後は、response、response_int、bytesです。</p>
<p>responseには、HTTPステータスコードが入ります。
文字列としても扱いたいですが、integerとして、Renge Aggregationなどを行いたいので、
response_intというフィールドにも値を入れています。
<code>multi_field</code>でも可能ですが、ここでは、<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-core-types.html#copy-to"><code>copy_to</code></a>を利用しました。
<code>copy_to</code>を用いることで、異なるフィールドに値をコピーすることができます。</p>
<p>bytesについては、longで扱いたいとういう理由だけです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">
<span style="color:#66d9ef">&#34;response&#34;: </span>{
  <span style="color:#66d9ef">&#34;copy_to&#34;: </span><span style="color:#e6db74">&#34;response_int&#34;</span>,
  <span style="color:#66d9ef">&#34;type&#34;: </span><span style="color:#e6db74">&#34;string&#34;</span>
},
<span style="color:#66d9ef">&#34;bytes&#34;: </span>{
  <span style="color:#66d9ef">&#34;type&#34;: </span><span style="color:#e6db74">&#34;long&#34;</span>
},
<span style="color:#66d9ef">&#34;response_int&#34;: </span>{
  <span style="color:#66d9ef">&#34;type&#34;: </span><span style="color:#e6db74">&#34;integer&#34;</span>
}
</code></pre></div><h2 id="まとめ">まとめ</h2>
<p>今回はデモに利用したインデックスてプレートについて説明しました。
前回の、Logstashの設定とこのインデックステンプレートを用いることで、Kibanaで解析するデータの準備ができます。
実際の操作などについては、また次回の記事で説明しようかと思います。</p>
<p>不明な点、誤植などありましたら、コメント欄へお願いします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Logstashを利用したApacheアクセスログのインポート</title>
      <link>https://blog.johtani.info/blog/2014/11/21/import-apache-accesslog-using-logstash/</link>
      <pubDate>Fri, 21 Nov 2014 17:30:39 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/11/21/import-apache-accesslog-using-logstash/</guid>
      <description>JJUG CCCや第7回Elasticsearch勉強会のKibana4のデモにアクセスログを利用しました。 ただ、セッションでは、どうやってElas</description>
      <content:encoded><p>JJUG CCCや第7回Elasticsearch勉強会のKibana4のデモにアクセスログを利用しました。</p>
<p>ただ、セッションでは、どうやってElasticsearchに投入したのかという詳しい話をしていませんでした。
本記事では、データ取り込み時に利用したLogstashの設定ファイルについて説明します。</p>
<!-- more -->
<p>Logstashの設定の説明に入る前に、全体の流れを。
「ApacheアクセスログをKibana4により可視化」です。</p>
<h2 id="材料の準備">材料の準備</h2>
<p>「ApacheアクセスログをKibana4により可視化」に必要な材料は次の通りです。
（今回は起動するところまでいかないので、実際に必要なのは次回以降になります。）</p>
<ul>
<li>Java 7（u55以上を1つ）</li>
<li>Logstash 1.4.2（1つ）</li>
<li>Elasticsearch 1.4.0（1つ）</li>
<li>Kibana4 Beta2（1つ）</li>
<li>Apacheのアクセスログ（適量）</li>
</ul>
<p>Apacheのアクセスログ以外は、公式サイトからダウンロードできます。
それぞれをダウンロードして、起動できるようにしておきましょう。</p>
<p>※1台のマシン上で行う場合は、アクセスログの量を少なめにするなどの対策をとりましょう。
※今回は、1台のマシン（Mac）上で、VMなどを利用せず、それぞれ直接起動するものとします。</p>
<h2 id="可視化の手順と流れ">可視化の手順と流れ</h2>
<p>可視化の流れとしては、</p>
<ol>
<li>Logstashでファイルを読み込み、各種処理（パースしたり、情報を追加したり、切り出したり）</li>
<li>Elasticsearchに保存</li>
<li>Kibanaでグラフを作ったり、検索してみたり</li>
</ol>
<p>です。</p>
<p>今回は、1のLogstashでファイルを読み込んだりする設定ファイルの説明です。</p>
<h3 id="logstashの設定">Logstashの設定</h3>
<h4 id="logstashの基本">Logstashの基本</h4>
<p>まずは、Logstashの設定ですが、簡単にLogstashの説明を。
Logstashは大きく3つのパーツに分かれています。</p>
<ol>
<li>input：データの入力処理</li>
<li>filter：inputで読み込んだデータに対する操作など</li>
<li>output：データの出力処理</li>
</ol>
<p>inputでデータを読み込み（複数可）、filterでデータに対して各種処理を行い、outputでデータを指定されたところに出力（複数可）します。</p>
<h4 id="アクセスログの読み込み設定">アクセスログの読み込み設定</h4>
<p>アクセスログの読み込み処理は大まかに次のようなものとなります。</p>
<ol>
<li>アクセスログを読み込む（input/file）</li>
<li>読み取ったアクセスログを各フィールド（IPアドレス、ユーザエージェントなど）に分割（filter/grok）</li>
<li>日付のパース（filter/date）</li>
<li>クライアントIPアドレスにgeoipの情報を付加（filter/geoip）</li>
<li>リクエストのパスの第1階層の抽出（filter/grok）</li>
<li>ユーザエージェントのパース（filter/useragent）</li>
<li>Elasticsearchへの出力（output/elasticsearch）</li>
</ol>
<p>設定ファイルは次のようなものになります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">input {
  file {
    path <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;/Users/johtani/demo_access_log/*/*.log&#34;</span>
    start_position <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;beginning&#34;</span>
  }
}

filter {
  grok {
    match <span style="color:#f92672">=&gt;</span> { <span style="color:#e6db74">&#34;message&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;%{COMBINEDAPACHELOG}&#34;</span> }
    break_on_match <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">false</span>
    tag_on_failure <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;_message_parse_failure&#34;</span><span style="color:#f92672">]</span>
  }
  date {
    match <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;timestamp&#34;</span>, <span style="color:#e6db74">&#34;dd/MMM/YYYY:HH:mm:ss Z&#34;</span><span style="color:#f92672">]</span>
    locale <span style="color:#f92672">=&gt;</span> en
  }
  geoip {
    source <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;clientip&#34;</span><span style="color:#f92672">]</span>
  }
  grok {
    match <span style="color:#f92672">=&gt;</span> { <span style="color:#e6db74">&#34;request&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;^/%{WORD:first_path}/%{GREEDYDATA}$&#34;</span> }
    tag_on_failure <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;_request_parse_failure&#34;</span><span style="color:#f92672">]</span>
  }
  useragent {
    source <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;agent&#34;</span>
    target <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;useragent&#34;</span>
  }
}

output {
  elasticsearch {
    host <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;localhost&#34;</span>
    index <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;new_demo_access_log-%{year}&#34;</span>
    cluster <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;demo_cluster&#34;</span>
    protocol <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;http&#34;</span>
  }
}
</code></pre></div><h5 id="1-アクセスログを読み込むinputfile">1. アクセスログを読み込む（input/file）</h5>
<p>inputの<a href="http://logstash.net/docs/1.4.2/inputs/file">fileモジュール(a)</a>を使用してアクセスログのファイルを読み込みます。
<code>path</code>でアクセスログのファイルのパスを指定します。
今回利用したアクセスログは<code>demo_access_log/2010/access20100201.log</code>といった日毎のファイルに分割されていたため、
<code>*</code>を利用してファイルのパスを指定しました。
また、今回は既存のファイルの読み込みだけのため、<code>start_position</code>に<code>beginning</code>を指定してあります。
デフォルトでは<code>end</code>が指定されるため、Logstashを起動後に追記されたログから対象になってしまうためです。
その他の設定については、公式ガイドをご覧ください。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">input {
  file { <span style="color:#75715e"># a</span>
    path <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;/Users/johtani/demo_access_log/*/*.log&#34;</span> <span style="color:#75715e"># b</span>
    start_position <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;beginning&#34;</span> <span style="color:#75715e"># c</span>
  }
}
</code></pre></div><blockquote>
<p>Logstashでは、ファイルをどこまで読み込んだかという情報を保持するために、<a href="http://logstash.net/docs/1.4.2/inputs/file#sincedb_path">sincedb</a>を利用しています。
設定変更後に同じファイルを最初から読み込みたい場合などは、こちらのファイルを一旦削除するなどの対応が必要です。</p>
</blockquote>
<p>ちなみに、読み込んだデータは次のようなJSONになっています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#f92672">&#34;message&#34;</span>: <span style="color:#e6db74">&#34;読み込んだアクセスログ&#34;</span>,
  <span style="color:#f92672">&#34;@version&#34;</span>: <span style="color:#e6db74">&#34;1&#34;</span>,
  <span style="color:#f92672">&#34;@timestamp&#34;</span>:<span style="color:#e6db74">&#34;2014-11-21T06:16:21.644Z&#34;</span>,
  <span style="color:#f92672">&#34;host&#34;</span>:<span style="color:#e6db74">&#34;jupiter.local&#34;</span>,
  <span style="color:#f92672">&#34;path&#34;</span>:<span style="color:#e6db74">&#34;/Users/johtani/demo_access_log/2010/access20100201.log&#34;</span>}
<span style="color:#960050;background-color:#1e0010">}</span>
</code></pre></div><p>特に指定がない場合は、<code>message</code>に読み込んだデータが入ってきます。
<code>@timestamp</code>がLogstashが読み込んだ時刻、<code>host</code>はLogstashが動作しているホスト名です。
<code>path</code>はfileモジュールが読み込んだファイルのパスを設定しています。
この後の処理で、どこの項目に対して処理を行うかといったことが重要になるので、</p>
<h5 id="2-読み取ったアクセスログを各フィールドipアドレスユーザエージェントなどに分割filtergrok">2. 読み取ったアクセスログを各フィールド（IPアドレス、ユーザエージェントなど）に分割（filter/grok）</h5>
<p>2.〜6.の処理は、inputで読み込んだ1アクセスログに対する処理となります。</p>
<p>ここでは、<a href="http://logstash.net/docs/1.4.2/filters/grok">grokフィルタ</a>を使用して
Apacheのアクセスログを各フィールドに分割します。
Logastashでは、簡単に使えるようにいくつかの<a href="https://github.com/elasticsearch/logstash/tree/v1.4.2/patterns">パターン</a>が用意されています。
Apacheのログのために、<a href="https://github.com/elasticsearch/logstash/blob/v1.4.2/patterns/grok-patterns#L91"><code>COMBINEDAPACHELOG</code></a>というのが用意されています。
今回はこちらを使用しています。その他にも日付などパターンが用意されているので、試してみてください。</p>
<p><code>message</code>にアクセスログが入っているので、こちらの項目に対して<code>COMBINEDAPACHELOG</code>のパターンを
<code>match</code>で適用してフィールドに抜き出します。
<code>tag_on_failure</code>は、<code>match</code>でパースに失敗した場合に、<code>tag</code>というフィールドに指定した文字列を出力する機能になります。
デフォルトだと<code>_grokparsefailure</code>が付与されますが、ここでは、どの処理で失敗したがを判別するために文字列を変更しています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">filter {
  grok {
    match <span style="color:#f92672">=&gt;</span> { <span style="color:#e6db74">&#34;message&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;%{COMBINEDAPACHELOG}&#34;</span> }
    break_on_match <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">false</span>
    tag_on_failure <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;_message_parse_failure&#34;</span><span style="color:#f92672">]</span>
  }
  <span style="color:#f92672">...</span>
</code></pre></div><p><code>clientip</code>、<code>ident</code>、<code>auth</code>、<code>timestamp</code>、<code>verb</code>、<code>request</code>、<code>httpversion</code>、<code>response</code>、<code>bytes</code>、<code>referrer</code>、<code>agent</code>がgrokフィルタにより抜き出された項目です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#f92672">&#34;message&#34;</span>:<span style="color:#e6db74">&#34;アクセスログ&#34;</span>,
  <span style="color:#f92672">&#34;@version&#34;</span>:<span style="color:#e6db74">&#34;1&#34;</span>,
  <span style="color:#f92672">&#34;@timestamp&#34;</span>:<span style="color:#e6db74">&#34;2014-11-21T07:20:54.387Z&#34;</span>,
  <span style="color:#f92672">&#34;host&#34;</span>:<span style="color:#e6db74">&#34;jupiter.local&#34;</span>,
  <span style="color:#f92672">&#34;path&#34;</span>:<span style="color:#e6db74">&#34;/Users/johtani/demo_access_log/2010/access20100201.log&#34;</span>,
  <span style="color:#f92672">&#34;clientip&#34;</span>:<span style="color:#e6db74">&#34;クライアントのIPアドレス&#34;</span>,
  <span style="color:#f92672">&#34;ident&#34;</span>:<span style="color:#e6db74">&#34;-&#34;</span>,
  <span style="color:#f92672">&#34;auth&#34;</span>:<span style="color:#e6db74">&#34;-&#34;</span>,
  <span style="color:#f92672">&#34;timestamp&#34;</span>:<span style="color:#e6db74">&#34;01/Feb/2010:00:00:26 +0900&#34;</span>,
  <span style="color:#f92672">&#34;verb&#34;</span>:<span style="color:#e6db74">&#34;GET&#34;</span>,
  <span style="color:#f92672">&#34;request&#34;</span>:<span style="color:#e6db74">&#34;/images/favicon.ico&#34;</span>,
  <span style="color:#f92672">&#34;httpversion&#34;</span>:<span style="color:#e6db74">&#34;1.1&#34;</span>,
  <span style="color:#f92672">&#34;response&#34;</span>:<span style="color:#e6db74">&#34;200&#34;</span>,
  <span style="color:#f92672">&#34;bytes&#34;</span>:<span style="color:#e6db74">&#34;318&#34;</span>,
  <span style="color:#f92672">&#34;referrer&#34;</span>:<span style="color:#e6db74">&#34;\&#34;-\&#34;&#34;</span>,
  <span style="color:#f92672">&#34;agent&#34;</span>:<span style="color:#e6db74">&#34;\&#34;Mozilla/5.0 (Windows; U; Windows NT 5.1; ja; rv:1.9.1.7) Gecko/20091221 Firefox/3.5.7 (.NET CLR 3.5.30729)\&#34;&#34;</span>
}
</code></pre></div><h5 id="3-日付のパースfilterdate">3. 日付のパース（filter/date）</h5>
<p>Logstashは特に指定がない場合、inputでデータを取り出した日付が<code>@timestamp</code>となります。
そして、このフィールドが特に指定がない場合は、Elasticsearchのデータの日付となり、Kibanaで利用する日付となります。</p>
<p>リアルタイムにアクセスログを読み込む場合は、読み込んだ日時でもほぼ問題はありませんが、過去データの場合はそうもいきません。
そこで、<a href="http://logstash.net/docs/1.4.2/filters/date"><code>dateフィルタ</code></a>を使用して、<code>@timestamp</code>の値を書き換えます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">date {
  match <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;timestamp&#34;</span>, <span style="color:#e6db74">&#34;dd/MMM/YYYY:HH:mm:ss Z&#34;</span><span style="color:#f92672">]</span>
  locale <span style="color:#f92672">=&gt;</span> en
}
</code></pre></div><p>上記では、<code>timestamp</code>という項目に対して<code>dd/MMM/YYYY:HH:mm:ss Z</code>という日付パターンの場合に値を書き換える設定となります。
なお、日付の月の部分が<code>Feb</code>となっているため、<code>locale</code>に<code>en</code>を指定しています。Logstashが動作するマシンの<code>locale</code>が<code>ja</code>などの場合にパースに失敗するためです。</p>
<h5 id="a-namefilter-geoip4-クライアントipアドレスにgeoipの情報を付加filtergeoipa"><a name="filter-geoip">4. クライアントIPアドレスにgeoipの情報を付加（filter/geoip）</a></h5>
<p>どの国からのアクセスかなどを判別したいので、IPアドレスを元にgeoipを利用してより詳細な情報を付与します。
Logstashでもこの機能が用意されており、簡単に利用ができます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">geoip {
  source <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;clientip&#34;</span><span style="color:#f92672">]</span>
}
</code></pre></div><p>これだけです。対象とするIPアドレスのフィールドを指定しているだけです。
<code>geoip</code>というフィールドが追加され、次のような情報が付与されます。
国名、緯度経度、タイムゾーンなどです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#960050;background-color:#1e0010">...</span>  
  <span style="color:#f92672">&#34;geoip&#34;</span>: {
    <span style="color:#f92672">&#34;ip&#34;</span>: <span style="color:#e6db74">&#34;IPアドレス&#34;</span>,
    <span style="color:#f92672">&#34;country_code2&#34;</span>: <span style="color:#e6db74">&#34;JP&#34;</span>,
    <span style="color:#f92672">&#34;country_code3&#34;</span>: <span style="color:#e6db74">&#34;JPN&#34;</span>,
    <span style="color:#f92672">&#34;country_name&#34;</span>: <span style="color:#e6db74">&#34;Japan&#34;</span>,
    <span style="color:#f92672">&#34;continent_code&#34;</span>: <span style="color:#e6db74">&#34;AS&#34;</span>,
    <span style="color:#f92672">&#34;latitude&#34;</span>: <span style="color:#ae81ff">36</span>,
    <span style="color:#f92672">&#34;longitude&#34;</span>: <span style="color:#ae81ff">138</span>,
    <span style="color:#f92672">&#34;timezone&#34;</span>: <span style="color:#e6db74">&#34;Asia/Tokyo&#34;</span>,
    <span style="color:#f92672">&#34;location&#34;</span>: [
      <span style="color:#ae81ff">138</span>,
      <span style="color:#ae81ff">36</span>
    ]
  }
  <span style="color:#960050;background-color:#1e0010">...</span>
}
</code></pre></div><h5 id="5-リクエストのパスの第1階層の抽出filtergrok">5. リクエストのパスの第1階層の抽出（filter/grok）</h5>
<p>リクエストされたURLは<code>request</code>フィールドにありますが、個別のURLだと、大まかな集計が大変です。
もちろん、クエリで処理することもできますが、Logstashで処理するついでに、第1階層のディレクトリ名を抽出しておくことで、
検索や集計を行いやすくしておきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">grok {
  match <span style="color:#f92672">=&gt;</span> { <span style="color:#e6db74">&#34;request&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;^/%{WORD:first_path}/%{GREEDYDATA}$&#34;</span> }
  tag_on_failure <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;_request_parse_failure&#34;</span><span style="color:#f92672">]</span>
}
</code></pre></div><p>また、grokフィルタの登場です。
今回は、<code>WORD:first_path</code>という記述方法で、<code>WORD</code>パターンにマッチした文字列を<code>first_path</code>というフィールドに展開する指定をしています。</p>
<p>例えば、サイトのスクリプトなどが<code>scripts</code>というディレクトリにある場合は、<code>first_path</code>の値を利用して、
後続のフィルタでログデータを出力しないといった処理にも使えます。</p>
<h5 id="6-ユーザエージェントのパースfilteruseragent">6. ユーザエージェントのパース（filter/useragent）</h5>
<p>Logstashではユーザエージェントの文字列から、いくつかの情報を付与するフィルタも用意されています。
<a href="http://logstash.net/docs/1.4.2/filters/useragent"><code>useragent</code>フィルタです。</a></p>
<pre><code>useragent {
  source =&gt; &quot;agent&quot;
  target =&gt; &quot;useragent&quot;
}
</code></pre><p><code>agent</code>というフィールドにユーザエージェントの文字列があるので、このフィールドに対してフィルタを適用します。
元の文字列も取っておきたいので、<code>useragent</code>という別のフィールドに出力するように指定してあります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#e6db74">&#34;useragent&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> {
  <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Firefox&#34;</span>,
  <span style="color:#f92672">&#34;os&#34;</span>: <span style="color:#e6db74">&#34;Windows XP&#34;</span>,
  <span style="color:#f92672">&#34;os_name&#34;</span>: <span style="color:#e6db74">&#34;Windows XP&#34;</span>,
  <span style="color:#f92672">&#34;device&#34;</span>: <span style="color:#e6db74">&#34;Other&#34;</span>,
  <span style="color:#f92672">&#34;major&#34;</span>: <span style="color:#e6db74">&#34;17&#34;</span>,
  <span style="color:#f92672">&#34;minor&#34;</span>: <span style="color:#e6db74">&#34;0&#34;</span>
}<span style="color:#960050;background-color:#1e0010">,</span>
</code></pre></div><p>このように、OS名やバージョン名などが抽出できます。</p>
<h5 id="a-nameoutput-elasticsearch7-elasticsearchへの出力outputelasticsearcha"><a name="output-elasticsearch">7. Elasticsearchへの出力（output/elasticsearch）</a></h5>
<p>最後は、<a href="http://logstash.net/docs/1.4.2/outputs/elasticsearch">Elasticsearchへのデータの出力設定</a>です。</p>
<p><code>index</code>にて、出力するindex名を指定してあります。
また、年毎のインデックス名にするために<code>%{year}</code>を利用しています。
<a href="http://logstash.net/docs/1.4.2/configuration#sprintf">sprintf format</a>です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">elasticsearch {
  host <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;localhost&#34;</span>
  index <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;new_demo_access_log-%{year}&#34;</span>
  cluster <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;demo_cluster&#34;</span>
  protocol <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;http&#34;</span>
}
</code></pre></div><h2 id="まとめ">まとめ</h2>
<p>ということで、今回はアクセスログをLogstashにて読み込む時の設定について説明してきました。
次回は、実際にLogstashを起動してElasticsearchにデータを登録するところまでを説明します。</p>
<p>JJUG CCCや勉強会のデモに用いたデータは、
Elasticsearchにデータを登録する前にテンプレートも設定してありました。こちらについても、次回説明しようと思います。</p>
<p>不明な点、誤植などありましたら、コメント欄へお願いします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>第7回Elasticsearch勉強会を開催しました。#elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2014/11/19/hold-on-7th-elasticsearch-jp/</link>
      <pubDate>Wed, 19 Nov 2014 11:19:07 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/11/19/hold-on-7th-elasticsearch-jp/</guid>
      <description>第7回Elsticsearch勉強会を開催しました。 スタッフの皆さん、スピーカーの皆さん、開場提供していただいたリクルートテクノロジーズさん</description>
      <content:encoded><p><a href="http://elasticsearch.doorkeeper.jp/events/16837">第7回Elsticsearch勉強会</a>を開催しました。
スタッフの皆さん、スピーカーの皆さん、開場提供していただいた<a href="http://recruit-tech.co.jp">リクルートテクノロジーズさん</a>、ありがとうございました！
次回もよろしくお願いします！参加していただき盛り上げていただいた参加者の皆さんもありがとうございました。</p>
<p>昨日も紹介しましたが、<a href="http://qiita.com/advent-calendar/2014/elasticsearch">Elasticsearch Advent Calendar 2014</a>を用意してみました。まだ、空きがありますので、登録お待ちしております！</p>
<!-- more -->
<p>今回は出足が好調で、早々に180人の枠を超えるという嬉しい事態でした。
最終的な参加人数は130名程度で、懇親会参加者が50名弱といったところです。</p>
<h2 id="kibana4">「Kibana4」</h2>
<h3 id="elasticsearch-inc-jun-ohtani-johtani">Elasticsearch Inc. Jun Ohtani @johtani</h3>
<p>スライド：<a href="https://speakerdeck.com/johtani/kibana4">Kibana4</a></p>
<p>ということで、Kibana4の紹介と、Kibana4のBeta2を利用したデモを行いました。
デモの開始のところで少し環境がうまく動いてなくて手間取ってしまいましたが。。。</p>
<p>発表で1点だけ修正があります。JRubyを選択しているのがElasticsearchのライブラリを使用するためという説明をしましたが、
こちらは、Logstashに関する話でした。Kibana4は現時点では、ElasticsearchへのProxyとしての動作が主なものとなります。Rubyでも動作可能です。
bin/kibanaについてはJavaを使った起動になります。
参考：https://github.com/elasticsearch/kibana/tree/master/src/server</p>
<p>発表でも主張しましたが、ダウンロードして、Elasticsearchを用意すれば簡単に動作させることが可能です。
ぜひ、ローカルで試して見てもらえればと思います。
今回のデモのデータを入れるのに利用したLogstashの設定などについては、ブログで記事を書こうと思います。</p>
<h2 id="niconicoの検索を支えるelasticsearch">niconicoの検索を支えるElasticsearch</h2>
<h3 id="株式会社ドワンゴ-伊藤-祥-さん">株式会社ドワンゴ 伊藤 祥 さん</h3>
<p>スライド：<a href="https://speakerdeck.com/shoito/niconico-elasticsearch">niconicoの検索を支えるElasticsearch</a></p>
<ul>
<li>リアルタイム検索の実現、新しい検索への対応</li>
<li>検索のアーキテクチャとか。</li>
<li>Capistranoでデプロイとかを管理</li>
<li>1.4.1が出たら、クラスタを更新予定</li>
</ul>
<p>ということで、実際に導入した話から、現在の運用の仕方、クラスタのアップグレードなど多岐にわたる内容でおもしろかったです。
遭遇した問題点とかもあったので。
Marvel便利なのでぜひ導入を検討してもらえればw</p>
<h2 id="elasticsearch-at-crowdworks">Elasticsearch at CrowdWorks </h2>
<h3 id="株式会社クラウドワークス-九岡-佑介-さん-mumoshu">株式会社クラウドワークス 九岡 佑介 さん @mumoshu</h3>
<p>スライド：<a href="http://www.slideshare.net/mumoshu/20141118-es">Elasticsearch at CrowdWorks</a></p>
<ul>
<li>会社の紹介</li>
<li>仕事が検索対象</li>
<li>検索時間が1桁減少！</li>
<li>Graceful Degradationで失敗したら、InnoDB FTSで代替：<a href="https://github.com/crowdworks/gracefully">Gracefully</a></li>
<li><a href="http://www.found.no">found.no</a>のサービスを利用</li>
<li>elasticsearch-modelの拡張を作成してOSSとして公開：<a href="https://github.com/crowdworks/elasticsearch-model-extensions">elasticsearch-model-extensions</a></li>
</ul>
<p>Gracefullyで切り替えとかは面白いなと思いました。
検索での利用の話でしたが、他のシーンでも使えそうですよね。
日本にFoundユーザがいるのも初めて知りました。
彼らの開発者ブログも質の良い情報が載っているので、参考になりますよね。</p>
<p>次は、どんなMappingで運用しているのかとか、どういった工夫をしているかといった点を詳しく聞きたいなと思いました。
またお待ちしております。</p>
<h2 id="1分で作るelasticsearchプラグイン">1分で作るElasticsearchプラグイン</h2>
<h3 id="株式会社エヌツーエスエム-菅谷-信介-さん">株式会社エヌツーエスエム 菅谷 信介 さん</h3>
<p>スライド：<a href="http://www.slideshare.net/shinsuke/plugins-ates7">Elasticsearchプラグインの作り方</a></p>
<p>* プラグインの作り方とか。</p>
<ul>
<li>十数個のプラグインの紹介。プラグインはこちらで公開中。<a href="https://github.com/codelibs/">https://github.com/codelibs/</a></li>
<li>実際に、業務で必要なものから作成</li>
<li>まだまだ作りたいものがある</li>
</ul>
<p>コミュニティ還元できるものはPR送ってもらえるとうれしいです。
前よりは体制も増えてるので、PRも目にとまるようになってるはずです。</p>
<p>あとは、使ってみたいと思う方も多数いると思うので、ぜひ、OSSなので、貢献しましょう！
フィードバックがあるだけで、OSS活動やってるものにとってはやる気につながると思いますし。</p>
<h2 id="ltgisとして活用するelasticsearch">LT：GISとして活用するElasticsearch </h2>
<h3 id="船戸-隆さん">船戸 隆さん</h3>
<p>スライド：<a href="https://speakerdeck.com/tfunato/gistositehuo-yong-suruelasticsearch">GISとして活用するElasticsearch </a></p>
<ul>
<li>java-jaからIngressの青（Registance）の勧誘に来られた方w</li>
<li>APIをハックして、情報を取得し、Kibanaで可視化</li>
<li>残念ながら、APIが変更されて見れなくなったらしい。</li>
</ul>
<p>Ingress実際にやったことはないのですが、おもしろそうでした。
発表される方の会社の採用紹介ではなく、Ingressの勧誘をされるとは想定外でしたw</p>
<p>興味のあるデータをKibanaで可視化するのも面白い例だと思うので、活用してもらえればと思います。</p>
<h2 id="その他感想などのブログ">その他、感想などのブログ</h2>
<p>適当に見つけたブログを列挙してあります。これもあるよ！などあれば、教えてください。</p>
<ul>
<li><a href="http://blog.yoslab.com/entry/2014/11/18/203159">勉強会メモ - 第7回elasticsearch勉強会</a></li>
<li><a href="http://qiita.com/t-sato/items/940ccfa9e4a668b91967">第7回elasticsearch勉強会 #elasticsearch #elasticsearchjp</a></li>
</ul>
<h2 id="まとめ">まとめ</h2>
<p>JJUGの時とは違い、Elasticsearch勉強会ではさすがに、企業としてのElasticsearchの知名度が高かったのはありがたいことでした。
自分の発表のために始めた勉強会でもありますが、まだまだ、発表するときは緊張しますし、分かりにくいんじゃないかなぁと思うことも多々あります。
この辺がわかりにくかった、この辺をもっと知りたいなど、フィードバックをお待ちしております。</p>
<p>冒頭にも書きましたが、<a href="http://qiita.com/advent-calendar/2014/elasticsearch">Elasticsearch Advent Calendar 2014</a>の登録をお待ちしております。どんなことでも歓迎なので、Elasticsearch、Kibana、Logstashなどについて書いてもらえるとうれしいです。</p>
<p>次回ももちろん2ヶ月後くらいに行います。 スピーカー募集中ですので、コメント、メール、ツイートなど、コンタクトしていただければと思います。 よろしくお願いいたします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 1.4.0および1.3.5リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2014/11/06/elasticsearch-1-4-0-ja/</link>
      <pubDate>Thu, 06 Nov 2014 01:30:33 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/11/06/elasticsearch-1-4-0-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：elasticsearch-1.4.0 and 1.3.5 released 本日、Lucene 4.10.2をベースにし</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-0-released/">elasticsearch-1.4.0 and 1.3.5 released</a></p>
<p>本日、<strong>Lucene 4.10.2</strong>をベースにした<strong>Elasticsearch 1.4.0</strong>と、バグフィックスリリースである、<strong>Elasticsearch 1.3.5</strong>をリリースしました。
ダウンロードおよび変更リストはそれぞれ次のリンクからアクセスできます。</p>
<ul>
<li>最新ステーブルリリース：<a href="http://www.elasticsearch.org/downloads/1-4-0">Elasticsearch 1.4.0</a></li>
<li>1.3.x系バグフィックス：<a href="http://www.elasticsearch.org/downloads/1-3-5">Elasticsearch 1.3.5</a></li>
</ul>
<p>1.3ブランチに関する過去のリリースについてのブログは次のとおりです：<a href="http://www.elasticsearch.org/blog/elasticsearch-1-3-4-released/">1.3.4</a>, <a href="http://www.elasticsearch.org/blog/elasticsearch-1-3-3-released/">1.3.3</a>, <a href="http://www.elasticsearch.org/blog/elasticsearch-1-3-2-released/">1.3.2</a>, <a href="http://www.elasticsearch.org/blog/elasticsearch-1-3-1-released/">1.3.1</a>, <a href="http://www.elasticsearch.org/blog/elasticsearch-1-3-0-released/">1.3.0</a>.</p>
<!-- more -->
<p>Beta1リリースでも言及しましたが、1.4.0の主なテーマは*resiliency(復元性、弾力性)*です。
Elasticsearchをより安定し信頼性のあるものにし、メモリ管理を改善し、ディスカバリアルゴリズムを改善し、破損したデータの検知を改善しました。
Beta1リリースからのハイライトも含んでいます。</p>
<ul>
<li>Doc values (インデックス時にディスクに保存される<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/fielddata-formats.html#fielddata-formats">fielddata</a>)がヒープ利用率を激減</li>
<li><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/index-modules-fielddata.html#request-circuit-breaker">Request circuit breaker</a>:
メモリを消費しすぎる検索リクエストの中断</li>
<li>Bloom filterの<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/indices-update-settings.html#codec-bloom-load">デフォルト無効</a>、高速なインデキシングのためにもはや必要とされないため。</li>
<li>ノードディスカバリ、シャードリカバリの数多くのバグフィックス及び改善</li>
<li>データ破損の早期検知のためのチェックサムのさらなる利用</li>
<li>GroovyをMVELの代わりに<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/modules-scripting.html#modules-scripting">デフォルトスクリプト言語に</a></li>
<li>CORSを<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/modules-http.html#_settings_2">デフォルト無効</a>に。XSS攻撃防止の為。</li>
<li><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/index-modules-shard-query-cache.html#index-modules-shard-query-cache">クエリキャッシュ</a>、変更されていないシャードからすぐにaggregation結果を返す</li>
<li>新しいAggregation：<code>filter</code>(<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/search-aggregations-bucket-filters-aggregation.html#search-aggregations-bucket-filters-aggregation">ドキュメント</a>)、<code>children</code>(<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/search-aggregations-bucket-children-aggregation.html#search-aggregations-bucket-children-aggregation">ドキュメント</a>)、<code>scripted_metric</code>(<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/search-aggregations-metrics-scripted-metric-aggregation.html#search-aggregations-metrics-scripted-metric-aggregation">ドキュメント</a>)</li>
<li>新しい<code>GET /index</code>API。インデックスのsettings、mappings、warmers、aliasesを1回のリクエストで返却(<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/indices-get-index.html#indices-get-index">ドキュメント</a>)</li>
<li>自動付与ドキュメントIDのためのFlake ID。プライマリキーの探索パフォーマンスの改善。</li>
<li>ドキュメントに変更のない更新によるドキュメントの再インデックスの防止</li>
<li><code>function_score</code>クエリの関数で<code>weight</code>パラメータによる個別の改善を可能に。(<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/query-dsl-function-score-query.html#_weight">ドキュメント</a>)</li>
</ul>
<p>詳細については<a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-0-beta-released/">1.4.0.Beta1のブログ(英語)</a>(<a href="http://blog.johtani.info/blog/2014/10/02/elasticsearch-1-4-0-beta-released-ja/">日本語訳</a>)をご覧ください。</p>
<p>Beta1以降の1.4.0の変更の全てについては、<a href="http://www.elasticsearch.org/downloads/1-4-0">1.4.0 release notes</a>でご覧いただけます。
以下では、2つの主な変更について紹介します。</p>
<h2 id="http-pipelining">HTTP Pipelining</h2>
<p>HTTP pipeliningは複数のリクエストを1回のコネクションで、関連するレスポンスを待つことなく送信することができます。
そして、レスポンスは、受け取ったリクエストと同じ順序で返却されます。
HTTP/1.1の仕様で、pipeliningのサポートが必要です。ElasticsearchはHTTP/1.1であるとしてきましたが、pipeliningはサポートしていませんでした。この問題は.NETユーザで問題を引き起こしました。</p>
<p>現在、HTTP pipeliningは公式にサポート済みで、デフォルトで利用できます。<a href="https://github.com/elasticsearch/elasticsearch/pull/8299">#8299</a>をご覧ください。</p>
<h2 id="upgrade-api">Upgrade API</h2>
<p>Luceneのすべてのリリースではバグフィックスや最適化が提供されます。しかし、多くのユーザは古いバージョンのLuceneで作成されたインデックスを持っており、より最新の改善による利点を利用できないことがあります。
新しい<code>upgrade</code>APIは、あなたのインデックスすべてもしくは一部を最新のLuceneフォーマットに透過的にアップグレードできます。</p>
<p><code>GET _upgrade</code>リクエストは、インデックスのアップグレードが必要かどうかを提示し、アップグレードに必要なセグメントのサイズをリポートすることによって、どのくらいの時間が必要かの目安を提供します。
<code>POST _upgrade</code>コマンドはバックグラウンドでインデックスを最新のLuceneフォーマットに書き換えます。</p>
<p>より詳しい情報は<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/indices-upgrade.html"><code>upgrade</code>APIドキュメント</a>をご覧ください。</p>
<h2 id="試してみてください">試してみてください。</h2>
<p>Beta1リリースを利用し、経験・体験を報告していただいたベータテスターの方々に感謝します。
1.4.0がこれまでの最高のリリースになると確信しています。
ぜひ、<a href="http://www.elasticsearch.org/downloads/1-4-0">Elasticsearch 1.4.0</a>をダウンロードして、試してみてください。
そして、感想をTwitter(<a href="https://twitter.com/elasticsearch">@elasticsearch</a>)などで教えて下さい。
また、問題がありましたら、<a href="https://github.com/elasticsearch/elasticsearch/issues">GitHub issues page</a>で報告をお願いします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>validate APIの利用</title>
      <link>https://blog.johtani.info/blog/2014/10/27/how-to-use-validate-api/</link>
      <pubDate>Mon, 27 Oct 2014 18:42:31 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/10/27/how-to-use-validate-api/</guid>
      <description>久しぶりに翻訳ではないブログを。書こうと思いながらかけてなかったので。。。 今回はvalidate APIの紹介です。 背景 Elasticsear</description>
      <content:encoded><p>久しぶりに翻訳ではないブログを。書こうと思いながらかけてなかったので。。。</p>
<p>今回は<a href="http://www.elasticsearch.org/guide/ep/elasticsearch/reference/current/search-validate.html">validate API</a>の紹介です。</p>
<!-- more -->
<h2 id="背景">背景</h2>
<p>Elasticsearchのクエリは<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl.html">Query DSL</a>というJSONで
クエリを定義できるものを提供しています。
これは、様々な<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-queries.html">クエリ</a>、<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-filters.html">フィルタ</a>を定義するために必要です。</p>
<p>自分の望んでいる条件を記述するために、JSONのネストと格闘することも必要となります。。。
また、クエリ、フィルタには様々なパラメータが用意されています。
これらのパラメータをすべて覚えるのは無理でしょうし、タイプミスなどもありますよね。
タイプミスやカッコのミスマッチなどで格闘して1時間が経過してしまったなどもあると思います。</p>
<p>そんな時に便利なAPIとして用意されているのが<a href="http://www.elasticsearch.org/guide/ep/elasticsearch/reference/current/search-validate.html">validate API</a>です。</p>
<h2 id="利用方法">利用方法</h2>
<p>APIが用意されています。</p>
<pre><code>http://ホスト名:ポート番号/インデックス名/タイプ名/_validate/query
</code></pre><p><code>インデックス名</code>や<code>タイプ名</code>は省略可能ですが、マッピングが異なると思うので、タイプ名まで指定するほうが良いと思います。
上記のAPIに対してクエリを送信するだけです。</p>
<h3 id="クエリの確認">クエリの確認</h3>
<p>たとえば、<a href="https://gist.github.com/johtani/08dee5fb4da62037ef9e">こちらのGist</a>にあるようなマッピングのインデックスに対して
検索クエリを組み立てていて、エラーが出るとします。
※このクエリは<code>match_all</code>のところを<code>match_al</code>と、<code>l</code>が1文字足りないクエリになっています。</p>
<p><em><strong>検索クエリのリクエスト（エラーあり）</strong></em></p>
<pre><code>GET pref_aggs/_search
{
  &quot;query&quot;: {
    &quot;match_al&quot;: {}
  }
}
</code></pre><p><em><strong>実行結果のレスポンス</strong></em></p>
<pre><code>{
   &quot;error&quot;: &quot;SearchPhaseExecutionException[Failed to execute phase [query], all shards failed; shardFailures {[rwkb01chTZq2V7FD0Tlwrw][pref_aggs][0]: SearchParseException[[pref_aggs][0]: from[-1],size[-1]: Parse Failure [Failed to parse source [{\n  \&quot;query\&quot;: {\n    \&quot;match_al\&quot;: { }\n  }\n}\n]]]; nested: QueryParsingException[[pref_aggs] No query registered for [match_al]]; }{[rwkb01chTZq2V7FD0Tlwrw][pref_aggs][1]: SearchParseException[[pref_aggs][1]: from[-1],size[-1]: Parse Failure [Failed to parse source [{\n  \&quot;query\&quot;: {\n    \&quot;match_al\&quot;: { }\n  }\n}\n]]]; nested: QueryParsingException[[pref_aggs] No query registered for [match_al]]; }]&quot;,
   &quot;status&quot;: 400
}
</code></pre><p>とこんなかんじで、エラーが帰っては来るのですが、非常に読みづらいです。</p>
<p>そこで、<code>validate API</code>を利用します。
リクエスト先を<code>/_search</code>から<code>/_validate/query</code>に変更します。</p>
<p><em><strong>validate API</strong></em></p>
<pre><code>GET pref_aggs/_validate/query
{
  &quot;query&quot;: {
    &quot;match_al&quot;: {}
  }
}
</code></pre><p><em><strong>validate APIのレスポンス</strong></em></p>
<pre><code>{
   &quot;valid&quot;: false,
   &quot;_shards&quot;: {
      &quot;total&quot;: 1,
      &quot;successful&quot;: 1,
      &quot;failed&quot;: 0
   }
}
</code></pre><p>すると、非常にシンプルな結果が返ってきます。
<code>&quot;valid&quot;: false</code>となっているため、クエリに問題があることがわかります。</p>
<h3 id="エラーの詳細">エラーの詳細</h3>
<p>問題がある事自体はわかりましたが、エラーの内容も知りたいですよね？
その場合は、<code>explain</code>というパラメータを追加します。
（正しくは<code>explain=true</code>を追加しますが、<code>=true</code>を省略可能です。）</p>
<p><em><strong>validate API(explainあり、クエリ自体は省略)</strong></em></p>
<pre><code>GET pref_aggs/_validate/query?explain
{...}
</code></pre><p><em><strong>validate APIのレスポンス</strong></em></p>
<pre><code>{
   &quot;valid&quot;: false,
   &quot;_shards&quot;: {
      &quot;total&quot;: 1,
      &quot;successful&quot;: 1,
      &quot;failed&quot;: 0
   },
   &quot;explanations&quot;: [
      {
         &quot;index&quot;: &quot;pref_aggs&quot;,
         &quot;valid&quot;: false,
         &quot;error&quot;: &quot;org.elasticsearch.index.query.QueryParsingException: [pref_aggs] No query registered for [match_al]&quot;
      }
   ]
}
</code></pre><p><code>explanations</code>という項目が追加されました。
ここに<code>error</code>という項目として、エラーの詳細が返ってきます。<code>_search</code>の時よりも見やすいですね。
今回のエラーは、<code>match_all</code>が正しいクエリですの、<em><code>match_al</code>というクエリは登録されていないというエラー</em>でした。
では、クエリを修正して実行しましょう。</p>
<p><em><strong>validate API(エラー無し)</strong></em></p>
<pre><code>GET pref_aggs/_validate/query?explain
{
  &quot;query&quot;: {
    &quot;match_all&quot;: {}
  }
}
</code></pre><p><em><strong>validate APIのレスポンス</strong></em></p>
<pre><code>{
   &quot;valid&quot;: true,
   &quot;_shards&quot;: {
      &quot;total&quot;: 1,
      &quot;successful&quot;: 1,
      &quot;failed&quot;: 0
   },
   &quot;explanations&quot;: [
      {
         &quot;index&quot;: &quot;pref_aggs&quot;,
         &quot;valid&quot;: true,
         &quot;explanation&quot;: &quot;ConstantScore(*:*)&quot;
      }
   ]
}
</code></pre><p>今度はクエリに問題はありません。<code>&quot;valid&quot;: true</code>です。
そして、<code>explanations</code>の項目には、<code>error</code>の代わりに<code>explanation</code>という項目が返ってきました。
これが、実際にElasticsearch内部で実行されるクエリになります。</p>
<h3 id="実際のクエリに利用される単語の確認">実際のクエリに利用される単語の確認</h3>
<p>この機能はこの他に、クエリの解析にも利用できます。
思ったとおりに検索にヒットしない場合があって、困ったことはないですか？
フィールドに指定されたアナライザによっては、単語を変形したりするものが存在します。</p>
<p><em><strong>サンプルマッピング</strong></em></p>
<pre><code>PUT /validate_sample
{
  &quot;mappings&quot;: {
    &quot;several_analyzer&quot;: {
      &quot;properties&quot;: {
        &quot;title&quot;: {&quot;type&quot;: &quot;string&quot;},
        &quot;body_ja&quot;: {&quot;type&quot;: &quot;string&quot;, &quot;analyzer&quot;: &quot;kuromoji&quot;},
        &quot;body_en&quot;: {&quot;type&quot;: &quot;string&quot;, &quot;analyzer&quot;: &quot;english&quot;}
      }
    }
  }
}
</code></pre><p>例えば、このように<code>kuromoji</code>、<code>english</code>、デフォルト(<code>standard</code>)アナライザを利用したマッピングがあるとします。
このフィールドに対して<code>powerful</code>という単語で検索したとします。</p>
<p><em><strong>validate API</strong></em></p>
<pre><code>GET /validate_sample/_validate/query?explain
{
  &quot;query&quot;: {
    &quot;multi_match&quot;: {
      &quot;fields&quot;: [&quot;body_en&quot;,&quot;body_ja&quot;,&quot;title&quot;],
      &quot;query&quot;: &quot;powerful&quot;
    }
  }
}
</code></pre><p>この場合、レスポンスは次のとおりです。</p>
<p><em><strong>validate APIのレスポンス</strong></em></p>
<pre><code>{
   &quot;valid&quot;: true,
   &quot;_shards&quot;: {
      &quot;total&quot;: 1,
      &quot;successful&quot;: 1,
      &quot;failed&quot;: 0
   },
   &quot;explanations&quot;: [
      {
         &quot;index&quot;: &quot;validate_sample&quot;,
         &quot;valid&quot;: true,
         &quot;explanation&quot;: &quot;(title:powerful | body_en:power | body_ja:powerful)&quot;
      }
   ]
}
</code></pre><p><code>title</code>、<code>body_ja</code>については入力された単語がそのままクエリとして利用されています。
<code>body_en</code>については、<code>power</code>という単語に変換されて実行されています。
これは、<code>english</code>アナライザがステミングを行った結果がクエリとして利用されるという意味です。
また、<code>powerful</code>を<code>秋葉原</code>といった日本語に変更して実行すると次のようになります。
日本語は<code>standard</code>アナライザなどでは、1文字ずつ区切られてしまうことがわかります。</p>
<p><em><strong>validate APIのレスポンス</strong></em></p>
<pre><code>{
   &quot;valid&quot;: true,
   &quot;_shards&quot;: {
      &quot;total&quot;: 1,
      &quot;successful&quot;: 1,
      &quot;failed&quot;: 0
   },
   &quot;explanations&quot;: [
      {
         &quot;index&quot;: &quot;validate_sample&quot;,
         &quot;valid&quot;: true,
         &quot;explanation&quot;: &quot;((title:秋 title:葉 title:原) | (body_en:秋 body_en:葉 body_en:原) | ((body_ja:秋葉 body_ja:秋葉原) body_ja:原))&quot;
      }
   ]
}
</code></pre><p>このように、クエリの単語がどのような単語に変換されてクエリに利用されているかなども知ることが可能です。</p>
<p>また、クエリを組み立てて、ヒットするはずが、0件となってしまうという場合にも、どのようなクエリが組み立てられているかを確認するという点で、
<code>validate API</code>が役立ちます。
検索がヒットするが、望んだクエリになっていないのでは？という場合は<code>_search API</code>の<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-request-explain.html"><code>explain</code>パラメータ</a>を
利用すれば、クエリの構成がわかるのですが、検索結果が0件の場合はクエリの構成は表示されません。</p>
<h2 id="解決できない問題は">解決できない問題は？</h2>
<p>便利なvalidate APIですが、以下の問題に対しては残念ながら確認できません。</p>
<ul>
<li><code>query</code>以外の項目のvalidate不可
<ul>
<li>たとえば、<code>_search API</code>の<code>size</code>などの項目についてはチェックできないです。</li>
</ul>
</li>
<li>存在しないフィールドの指定
<ul>
<li>上記<code>validate_sample</code>のマッピングの例でクエリに<code>body_eng</code>という存在しないフィールドを指定してもエラーとはなりません。</li>
</ul>
</li>
</ul>
<h2 id="まとめ">まとめ</h2>
<p>書いたクエリがうまく動かない、JSONのタグがおかしいといった場合は、
まずはこの<code>validate API</code>で確認してみるのがオススメです。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Sonatypeのバージョン番号で困ったので</title>
      <link>https://blog.johtani.info/blog/2014/10/15/versioning-of-sonatype/</link>
      <pubDate>Wed, 15 Oct 2014 15:26:08 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/10/15/versioning-of-sonatype/</guid>
      <description>Elasticsearch 1.4.0.Beta1がリリースされました。 個人でelasticsearch-extended-analyzeというプラグインを開発してま</description>
      <content:encoded><p><a href="http://blog.johtani.info/blog/2014/10/02/elasticsearch-1-4-0-beta-released-ja/">Elasticsearch 1.4.0.Beta1がリリース</a>されました。</p>
<p>個人で<a href="https://github.com/johtani/elasticsearch-extended-analyze">elasticsearch-extended-analyze</a>というプラグインを開発してます。
こちらも1.4.0.Beta1に対応するべく作業をしてて、少し戸惑ったことがあったので、メモをば。</p>
<!-- more -->
<p>ここ最近はプラグインのバージョン番号をElasticsearchのバージョン番号と同じものを利用していました。
（プラグインの機能追加をサボってる？？）
その時に、<code>1.4.0.Beta1</code>という番号を指定したのですが、意味不明なエラーに悩まされてしまいまして。</p>
<p>プラグインのリリースでは、以下のコマンドを実行します。</p>
<pre><code>$ mvn release:prepare
$ mvn release:perform
</code></pre><p>最初のコマンド（prepare）で、パッケージングを実施し、Githubにリリースタグを打ったバージョンがpushされます。
次のコマンド（perform）で、パッケージングされたzipファイルがsonatypeのサイトに公開するためにアップロードされます。</p>
<p><code>1.4.0.Beta1</code>というバージョン文字列を利用した場合、prepareは問題なく実行できたのですが、
performで以下の様なエラーが返ってきました。</p>
<pre><code>Return code is: 401, ReasonPhrase: Unauthorized.
</code></pre><p>バージョン番号が<code>1.3.0</code>では特に問題はなかったのですが、、、
結局、バージョン番号を<code>1.4.0-beta1</code>に変更すると問題なくリリースが完了しました。</p>
<p>mike_neckさんと話をしていて、<a href="http://semver.org">Semantic Versioning</a>に関係しているのかなぁという話にはなったのですが、
詳しく調べていません。。。</p>
<p>そのうち調べようかなぁ。。。。</p>
</content:encoded>
    </item>
    
    <item>
      <title>elasticsearch 1.4.0.Beta1のリリース</title>
      <link>https://blog.johtani.info/blog/2014/10/02/elasticsearch-1-4-0-beta-released-ja/</link>
      <pubDate>Thu, 02 Oct 2014 19:14:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/10/02/elasticsearch-1-4-0-beta-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：elasticsearch 1.4.0.beta1 released 本日、Lucene 4.10.1をベースにした、Elast</description>
      <content:encoded><p>※この記事は次のブログを翻訳したものになります。</p>
<p>原文：<a href="http://www.elasticsearch.org/blog/elasticsearch-1-4-0-beta-released/">elasticsearch 1.4.0.beta1 released</a></p>
<p>本日、<em>Lucene 4.10.1</em>をベースにした、<em>Elasticsearch 1.4.0.Beta1</em>をリリースしました。
<a href="http://www.elasticsearch.org/downloads/1-4-0-Beta1">Elasticsearch 1.4.0.Beta1</a>からダウンロードできます。
また、すべての変更点に関してもこちらをご覧ください。</p>
<!-- more -->
<p>1.4.0のテーマは*resiliency(復元性、弾力性)*です。
<em>resiliency</em>とはElasticsearchをより安定し信頼性のあるものにすることを意味します。
すべての機能が正常に機能している場合は信頼することは簡単です。
予想外のことが発生した時に難しくなります：ノードでout of memoryの発生、スローGCや重いI/O、ネットワーク障害、不安定なデータの送信によるノードのパフォーマンス低下など。</p>
<p>本ベータリリースは、resiliencyの主な3つの改善を含んでいます。</p>
<ul>
<li><a href="#memory-mgmt">メモリ使用量の低下</a>によるノードの安定性向上</li>
<li>discoveryアルゴリズムの改善による<a href="#cluster-stability">クラスタの安定性</a>向上</li>
<li><a href="#checksums">チェックサム</a>の導入による破損したデータの検知</li>
</ul>
<p>分散システムは複雑です。
決して想像できないような状況をシミュレーションするために、ランダムなシナリオを作成する広範囲なテストスイートを持っています。
しかし、無数のエッジケース(特殊なケース)があることも認識しています。
1.4.0.Beta1はこれまで私たちが行ってきた改善のすべてを含んでいます。
これらの変更を実際にテストしていただき、<a href="https://github.com/elasticsearch/elasticsearch/issues">何か問題があった場合は私たちに教えてください</a>。</p>
<h2 id="a-namememory-mgmtメモリ管理a"><a name="memory-mgmt">メモリ管理</a></h2>
<p>ヒープ空間は限られたリソースです。
上限を32GBとし、利用可能なRAMの50%をヒープの上限にすることを推奨します。
この上限を超えた場合、JVMは圧縮したポインタを使用することができず、GCが非常に遅くなります。
ノードの不安定性の主な原因は遅いGCです。それは、次のようなことから発生します。</p>
<ul>
<li>メモリプレッシャー</li>
<li>スワップ(参照：<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/setup-configuration.html#setup-configuration-memory">memory settings</a>)</li>
<li>非常に大きなヒープ</li>
</ul>
<p>本リリースは、メモリ管理の改善し、（結果として）ノードの安定性を改善するいくつかの変更を含んでいます。</p>
<h3 id="doc-values">doc values</h3>
<p>メモリの利用の最も大きなものの1つは<strong>fielddata</strong>です
aggregation、ソート、スクリプトがフィールドの値に素早くアクセスするために、フィールドの値をメモリにロードして保持します。
ヒープは貴重なため、1ビットも無駄にしないためにメモリ内のデータは高度な圧縮と最適化を行っています。
これは、ヒープスペース以上のデータをもつまでは、非常によく動作します。
これは、多くのノードを追加することによって常に解決できる問題です。
しかし、CPUやI/Oが限界に達してしまうずっと前に、ヒープ空間の容量に到達します。</p>
<p>最近のリリースは、<strong>doc values</strong>によるサポートがあります。
基本的に、doc valuesはin-memory fielddataと同じ機能を提供します。
doc valuesの提供する利点は、それらが、非常に少量のヒープ空間しか使用しない点です。
doc valuesはメモリからではなく、ディスクから読み込まれます。
ディスクアクセスは遅いですが、doc valuesはカーネルのファイルシステムキャッシュの利点を得られます。
ファイルシステムキャッシュはJVMヒープとはことなり、32GBの制限による束縛がありません。
ヒープからファイルシステムキャッシュにfielddataを移行することによって、より小さなヒープを使うことができます。これは、GCがより早くなり、ノードが更に安定することを意味します。</p>
<p>本リリースより前は、doc valuesはin-memory fielddataよりもかなり遅かったです。
本リリースに含まれる変更は、パフォーマンスをかなり向上させ、in-memory fielddataとほぼ同じくらいの速度になっています。</p>
<p>in-memory fielddataの代わりにdoc valuesを利用するために必要なことは、次のように新しいフィールドをマッピングすることです。</p>
<pre><code>PUT /my_index
{
  &quot;mappings&quot;: {
    &quot;my_type&quot;: {
      &quot;properties&quot;: {
        &quot;timestamp&quot;: {
          &quot;type&quot;:       &quot;date&quot;,
          &quot;doc_values&quot;: true
        }
      }
    }
  }
}
</code></pre><p>このマッピングで、このフィールドに対するfielddataの利用は、メモリにフィールドをロードする代わりに、自動的にディスクからdoc valuesを利用します。
*注意：*現時点で、doc valuesはanalyzedな<code>string</code>フィールドはサポートしていません。</p>
<h3 id="request-circuit-breaker">request circuit breaker</h3>
<p>fielddata circuit breakerはfielddataによって利用されるメモリの上限を制限するために追加され、OOMEの最も大きな原因の1つを防ぎました。
そして、<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/index-modules-fielddata.html#request-circuit-breaker">リクエストレベルのcircuit-breaker</a>を提供するために、コンセプトを拡張しました。
これは、単一のリクエストによって使用されるメモリの上限を制限します。</p>
<h3 id="bloom-filters">bloom filters</h3>
<p><a href="http://en.wikipedia.org/wiki/Bloom_filter">Bloom filters</a> はインデキシング(前のバージョンのドキュメントが存在するかどうかのチェックのため)や、
IDによるドキュメントの検索(ドキュメントを含むセグメントがどれかを決定するため)に関する重要な性能最適化を提供しました。
しかし、もちろんそれらはコスト（メモリ）を必要とします。
現在の改善は、bloom filterの必要性を取り除きました。
現在では、Elasticsearchはまだ、インデックス時にそれらを構築します(実世界の経験がテストシナリオにそぐわない場合に備えて)。
しかし、デフォルトではメモリにはロードされません。
すべてが予定通りに運べば、将来のバージョンで完全にこれらは除去します。</p>
<h2 id="a-namecluster-stabilityクラスタの安定性a"><a name="cluster-stability">クラスタの安定性</a></h2>
<p>クラスタの安定性向上のために私たちができる最も大きなことは、ノードの安定性の向上です。
もし、ノードが安定しておりタイミングよく反応すれば、クラスタが不安定になる可能性が大いに減少します。
私たちは不完全な世界に住んでいます。- 物事は予想外にうまく行きません。クラスタはデータを失うことなくこのような状況から回復できる必要があります。</p>
<p>私たちは、<code>improve_zen</code>ブランチ上で、Elasticsearchの障害からの復旧するための能力の向上に数ヶ月費やしてきました。
まず、複雑なネットワークレベルの障害を繰り返すためのテストを追加しました。
次に、各テストのための修正を追加しました。
そこには、より多くの行うことが存在します。しかし、私たちは、<a href="https://github.com/elasticsearch/elasticsearch/issues/2488">issue #2488</a>(&ldquo;分割が交差している場合、minimum_master_nodesはsplit-brainを防げない&rdquo;)に含まれる、ユーザが経験してきた大部分の問題を私たちは解決しました。</p>
<p>私たちはクラスタのresiliencyを非常に真剣に取り組んでいます。
私たちは、Elasticsearchが何ができるか、その上で何が弱点であるかを理解してほしいと思っています。
これを考慮して、私たちは<a href="http://www.elasticsearch.org/guide/en/elasticsearch/resiliency/current/index.html">Resiliency Status Document</a>を作成しました。
このドキュメントは、私たち(または私たちユーザ)が遭遇したresiliencyの問題の、何が修正済みで、何が修正されないまま残っているかを記録します。
このドキュメントを慎重に読み、あなたのデータを保護するために適切な方法を選択してください。</p>
<h2 id="a-namechecksumsデータ破損の検知a"><a name="checksums">データ破損の検知</a></h2>
<p>ネットワークをまたいだシャードリカバリのチェックサムは、圧縮ライブラリのバグを発見する助けとなりました。
それは、バージョン1.3.2で修正済みです。
それ以来、私たちはElasticsearchのいたるところにチェックサムとチェックサムの確認を追加しました。</p>
<ul>
<li>マージ中に、あるセグメント内すべてのチェックサムの確認(<a href="https://github.com/elasticsearch/elasticsearch/issues/7360">#7360</a>)</li>
<li>インデックス再オープン時に、あるセグメント内の最も小さなファイルの完全な確認と、より大きなファイルの軽量な打ち切りチェック(<a href="https://issues.apache.org/jira/browse/LUCENE-5842">LUCENE-5842</a>)</li>
<li>トランザクションログからイベントを再生するとき、各イベントはチェックサムを確認される(<a href="https://github.com/elasticsearch/elasticsearch/issues/6554">#6554</a>)</li>
<li>シャードのリカバリ中もしくは、スナップショットからのリストア中にElasticsearchはローカルファイルとリモートのコピーが同一であるか確認する必要がある。ファイルの長さとチェックサムのみを使うのは不十分であることが確認された。このため、現在はセグメントのすべてのファイルの同一性を確認(<a href="https://github.com/elasticsearch/elasticsearch/issues/7159">#7159</a>)</li>
</ul>
<h2 id="その他のハイライト">その他のハイライト</h2>
<p><a href="http://www.elasticsearch.org/downloads/1-4-0-Beta1">Elasticsearch 1.4.0.Beta1のchangelog</a>に本リリースの多くの機能、改善、バグフィックスについて読むことができます。
ここでは、特筆すべきいくつかの変更について述べます。</p>
<h3 id="groovyによるmvelの置き換え">groovyによるmvelの置き換え</h3>
<p>Groovyは現在、デフォルトのscripting languageです。
以前のデフォルトはMVELで、古くなってきており、サンドボックス内で実行できないという事実は、セキュリティ問題でした。
Groovyはサンドボックスであり(それは、ボックスの外へは許可が必要)、メンテナンスされており、速いです！
詳しくは<a href="http://www.elasticsearch.org/blog/scripting/">scriptingについてのブログ記事</a>をご覧ください。</p>
<h3 id="デフォルトでcorsはオフ">デフォルトでcorsはオフ</h3>
<p>Elasticsearchのデフォルト設定はクロスサイトスクリプティングに対して脆弱でした。
私たちはデフォルトで<a href="http://en.wikipedia.org/wiki/Cross-origin_resource_sharing">CORS</a>をオフにすることで修正しました。
Elasticsearchにインストールされたサイトプラグインはこれまで同様に機能します。
しかし、CORSを再度オンにすることがない限り、外部のウェブサイトがリモートのクラスタにアクセスすることはできません。
ウェブサイトがあなたのクラスタにアクセス可能に制御できるように、さらに<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/modules-http.html#_settings_2">CORS settings</a>を追加しました。
詳しくは<a href="http://www.elasticsearch.org/community/security">security page</a>をご覧ください。</p>
<h3 id="クエリキャッシュ">クエリキャッシュ</h3>
<p>新しい試験的な<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/index-modules-shard-query-cache.html">shardレベルのクエリキャッシュ</a>は、静的なインデックスのアグリゲーションをほとんど即座に反応できます。
ウエブサイトのアクセスの日毎のページビュー数を見るダッシュボードを持っていると想像してみてください。
これらの数値は古いインデックスでは変更がありません。しかし、アグリゲーションはダッシュボードのリフレッシュのたびに再計算されます。
新しいクエリキャッシュを利用すると、シャードのデータが変更されない限り、アグリゲーションの結果はキャッシュから直接返却されます。
キャッシュから古い結果を決して取得することはありません。それは、常に、キャッシュされていないリクエストと同じ結果を返します。</p>
<h3 id="新しいaggregations">新しいaggregations</h3>
<p>3つの新しいaggregationsがあります。</p>
<ul>
<li>
<p><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/search-aggregations-bucket-filters-aggregation.html"><code>filters</code></a></p>
<ul>
<li>これは<code>filter</code> aggregationの拡張です。複数のバケットを定義し、バケット毎に異なるフィルタを利用できます。</li>
</ul>
</li>
<li>
<p><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/search-aggregations-bucket-children-aggregation.html"><code>children</code></a></p>
<ul>
<li><code>nested</code>アグリゲーションの親子版。<code>children</code> aggは親のドキュメントに属する子のドキュメントを集計できる</li>
</ul>
</li>
<li>
<p><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/search-aggregations-metrics-scripted-metric-aggregation.html"><code>scripted_metric</code></a></p>
<ul>
<li>このaggregationは、データによって計算されたメトリックを完全にコントロールできます。これは、初期化フェーズ、ドキュメント収集フェーズ、shardレベル結合フェーズ、global reduceフェーズを提供します。</li>
</ul>
</li>
</ul>
<h3 id="get-index-api">get /index api</h3>
<p>以前、ある1つのインデックスのaliases、mappings、settings、warmersを取得出来ました。しかし、それらを個別にです。
<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/indices-get-index.html"><code>get-index</code> API</a> はこれらのすべてもしくは一部を、複数もしくはひとつのインデックスに対して一緒に取得できます。
これは、既存のインデックスと同一もしくはほぼ同一であるインデックスを作成したいときに非常に役に立ちます。</p>
<h3 id="登録と更新">登録と更新</h3>
<p>ドキュメントの登録と更新にいくつかの改善があります。</p>
<ul>
<li>現在、ドキュメントIDの自動生成のために<a href="http://boundary.com/blog/2012/01/12/flake-a-decentralized-k-ordered-unique-id-generator-in-erlang">Flake ID</a>を使用しています。これは、プライマリキー探索時に素晴らしい性能向上を提供します。</li>
<li><code>detect_noop</code>に<code>true</code>を設定すると、ドキュメントに変更を与えない更新が軽量になります。この設定を有効にすると、<code>_source</code>フィールドのコンテンツを変更する更新リクエストだけ、ドキュメントの新しいバージョンを書き込みます。</li>
<li>更新はスクリプトから完全に操作できます。以前は、スクリプトはドキュメントがすでに存在しているときだけ実行可能で、それ以外は、<code>upsert</code>ドキュメントで登録しました。<code>script_upsert</code>パラメータでスクリプトから直接ドキュメントの作成が操作できます。</li>
</ul>
<h3 id="function-score">function score</h3>
<p>すでに非常に便利な<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/query-dsl-function-score-query.html"><code>function_score</code>クエリ</a>が、新しく<code>weight</code>パラメータをサポートします。
これは、それぞれの指定された関数の影響をチューニングするのに使われます。
これは、人気度よりも更新日時により重みをかけたり、地理情報よりも価格により重みをかけるといったことを可能にします。
また、<code>random_score</code>機能はセグメントマージによる影響を受けません。これにより、より一貫した順序が提供されます。</p>
<h2 id="試してみてください">試してみてください。</h2>
<p>ぜひ、<a href="http://www.elasticsearch.org/downloads/1-4-0-Beta1">Elasticsearch 1.4.0.Beta1</a>をダウンロードして、試してみてください。
そして、感想をTwitter(<a href="https://twitter.com/elasticsearch">@elasticsearch</a>)などで教えて下さい。
また、問題がありましたら、<a href="https://github.com/elasticsearch/elasticsearch/issues">GitHub issues page</a>で報告をお願いします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>第6回Elasticsearch勉強会を開催しました。#elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2014/09/17/hold-on-6th-elasticsearch-jp/</link>
      <pubDate>Wed, 17 Sep 2014 13:22:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/09/17/hold-on-6th-elasticsearch-jp/</guid>
      <description>第6回Elsticsearch勉強会を開催しました。 スタッフの皆さん、スピーカーの皆さん、開場提供していただいたリクルートテクノロジーズさん</description>
      <content:encoded><p><a href="http://elasticsearch.doorkeeper.jp/events/13917">第6回Elsticsearch勉強会</a>を開催しました。
スタッフの皆さん、スピーカーの皆さん、開場提供していただいた<a href="http://recruit-tech.co.jp">リクルートテクノロジーズさん</a>、ありがとうございました！
次回もよろしくお願いします！参加していただき盛り上げていただいた参加者の皆さんもありがとうございました。
今回は、スタッフが私を含めて3，4名ということで、ドタバタしてしまってスミマセンでした。</p>
<!-- more -->
<p>今回はキャンセルが多く、最終的には90人弱の参加となりましたが、今回も多数の方にお集まりいただきありがとうございました。
同じ日に他の勉強会もあった影響でしょうか？</p>
<h2 id="aggregationあれこれelasticsearch-inc-jun-ohtani-johtani">「Aggregationあれこれ」Elasticsearch Inc. Jun Ohtani @johtani</h2>
<p>スライド：<a href="https://speakerdeck.com/johtani/aggregationarekore">Aggregationあれこれ</a></p>
<ul>
<li>ちょっと長かったですかね。。。</li>
<li>Aggregationの概要、内部動作、種類などを簡単に紹介してみました。</li>
<li>個々のAggregationもいろいろなオプションなどがあるので、色々と試してみていただければと思います。</li>
<li>アニメーション入りのスライドになってましたが、UpしてあるスライドはPDF版になります。</li>
</ul>
<h2 id="秒間3万の広告配信ログをelasticsearchでリアルタイム集計してきた戦いの記録-株式会社サイバーエージェント山田直行さんsatully">「秒間3万の広告配信ログをElasticSearchでリアルタイム集計してきた戦いの記録」 株式会社サイバーエージェント　山田直行さん　@satully</h2>
<p>スライド：<a href="http://www.slideshare.net/Satully/elasticsearch-study6threaltime20140916">秒間3万の広告配信ログをElasticSearchでリアルタイム集計してきた戦いの記録</a></p>
<ul>
<li>ディスプレイ広告配信DSPの話</li>
<li>システム: Fluentd、S3、Elasticsearch、Redis、MySQL</li>
<li>7月に秒間3万〜4万のリクエストをさばいている。</li>
<li>なぜElasticsearchを選んだのか、今の構成など</li>
<li>実際に苦労された点なども交えて話していただき面白かったです。</li>
<li>7月時点のお話ということで、現時点ではまた違う構成っぽかったので、また話を聞きたいなぁ。</li>
</ul>
<h2 id="elasticsearch-日本語スキーマレス環境構築とついでに多言語対応ナレッジワークス株式会社木戸国彦さん-9215">「Elasticsearch 日本語スキーマレス環境構築と、ついでに多言語対応」ナレッジワークス株式会社　木戸国彦さん @9215</h2>
<p>スライド：<a href="https://speakerdeck.com/kunihikokido/elasticsearch-ri-ben-yu-sukimaresuhuan-jing-gou-zhu-to-tuideniduo-yan-yu-dui-ying">Elasticsearch 日本語スキーマレス環境構築と、ついでに多言語対応</a></p>
<ul>
<li>Dynamic TemplateやIndex Templateの説明</li>
<li>日本語や多言語化するときのMappingのサンプルになりそうなものがゴロゴロ紹介されてました。</li>
<li>いくつかの例があって、後で見直したいなと。</li>
<li>途中で出てきた、fielddata（インデックスに入っている単語区切りのデータ）を見るのに使ってたクエリは<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-request-fielddata-fields.html">field data fields</a>だったかな。</li>
</ul>
<h2 id="elasticsearchソースコードを読みはじめてみたfurandon_pig-さん">「elasticsearchソースコードを読みはじめてみた」@furandon_pig さん</h2>
<p>スライド：<a href="http://www.slideshare.net/furandon_pig/elasticsearch-39175134">elasticsearchソースコードを読みはじめてみた</a></p>
<ul>
<li>リクエストを受けて検索してる部分から読むといいって言われたらしいが、起動スクリプトから読み始めてみた。</li>
<li>時間かかりそうｗ</li>
<li>ただ、人がどんな感じでソースを読んだり理解してるかがわかりやすかったので面白かったです。</li>
<li>定期的に続きを聞いてみたいです。</li>
</ul>
<h2 id="lt">LT</h2>
<h3 id="reroute-apiを使用してシャード配置を制御する-株式会社富士通ソフトウェアテクノロジーズ-滝田聖己さん-pisatoshi">「reroute APIを使用してシャード配置を制御する」 株式会社富士通ソフトウェアテクノロジーズ 滝田聖己さん @pisatoshi</h3>
<p>スライド：<a href="https://speakerdeck.com/pisatoshi/elasticsearch-rerouteapiwoshi-tutasiyadopei-zhi-falsezhi-yu">reroute APIを使用してシャード配置を制御する</a></p>
<ul>
<li>シャードの再配置が自動で行われるので、それをオフにしないと、せっかく移動しても無駄になることがというあるあるネタ</li>
<li>Bonsaiロゴを作成するLT</li>
<li>実際にいくら掛かったのかが知りたかった。</li>
</ul>
<h3 id="検索のダウンタイム0でバックアップからindexをリストアする方法株式会社ドワンゴモバイル-西田和史さん">「検索のダウンタイム0でバックアップからIndexをリストアする方法」株式会社ドワンゴモバイル 西田和史さん</h3>
<p>スライド：<a href="http://www.slideshare.net/kbigwheel/0index-39143333">検索のダウンタイム0でバックアップからIndexをリストアする方法</a></p>
<ul>
<li>擬似無停止のやりかた。</li>
<li>aliasを活用して、かつ、Restoreで再構築するという方法。</li>
<li>aliasまで一緒にリストアされるので注意が必要っていうのは、実際にやってみたからわかることという感じですね。</li>
</ul>
<h2 id="その他感想などのブログ">その他、感想などのブログ</h2>
<p>適当に見つけたブログを列挙してあります。これもあるよ！などあれば、教えてください。</p>
<ul>
<li><a href="http://s-wool.blog.jp/archives/1009404632.html">第6回elasticsearch勉強会に行ってきましたのでそのメモ</a></li>
<li><a href="http://arika.hateblo.jp/entry/2014/09/17/100921">elasticsearch 勉強会 第6回</a></li>
</ul>
<h3 id="まとめ">まとめ</h3>
<p>今回も、ためになる話がいっぱい聞けたかなと。
個人的な印象としては、いつものメンバーよりも新しい方が多かった印象です。
また、ほとんどの方が、Elasticsearchをご存知でした。
そこそこ知名度は上がってきているようで嬉しい限りです。（東京以外での知名度なども知りたいかなと。）</p>
<p>あと、懇親会の部屋の案内が遅くなってしまってスミマセンでした。
さすがにスタッフ3名はきつかったです。。。</p>
<p>19時半開始にしてみましたが、懇親会の時間がやはり短めになってしまうなぁという印象でした。</p>
<p>次回ももちろん2ヶ月後くらいに行います。
スピーカー募集中ですので、コメント、メール、ツイートなど、コンタクトしていただければと思います。
よろしくお願いいたします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearchのインデキシングに関するパフォーマンス検討</title>
      <link>https://blog.johtani.info/blog/2014/09/09/performance-considerations-for-elasticsearch-indexing/</link>
      <pubDate>Tue, 09 Sep 2014 17:11:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/09/09/performance-considerations-for-elasticsearch-indexing/</guid>
      <description>Elasticsearchのインデキシングに関するパフォーマンス検討 原文：performance considerations for elasticsearch indexing Elasticsearchユーザは様</description>
      <content:encoded><p>Elasticsearchのインデキシングに関するパフォーマンス検討</p>
<p>原文：<a href="http://www.elasticsearch.org/blog/performance-considerations-elasticsearch-indexing/">performance considerations for elasticsearch indexing</a></p>
<p>Elasticsearchユーザは様々な楽しいユースケースを持っています。小さなログを追加することから、Webスケールの大きなドキュメントの集合をインデキシングするようなことまでです。また、インデキシングのスループットを最大化することが重要で一般的な目標となります。
「典型的な」アプリケーションに対して良いデフォルト値を設定するようにしていますが、次のちょっとした簡単なベストプラクティスによってインデキシングのパフォーマンスをすぐに改善することができます。それらについて記述します。</p>
<!-- more -->
<p>第一に、制御できないならば、巨大なJavaヒープを使用しない：必要なサイズ（マシンの持つRAMの半分以下）のheapだけを設定しましょう。Elasticsearchの利用方法のために必要な全体量を設定します。これは、OSにIOキャッシュを制御するためのRAMを残すことを意味します。OSが<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/setup-configuration.html">javaプロセスをスワップアウト</a>していないことも確認しましょう。</p>
<p>最新バージョン（<a href="http://www.elasticsearch.org/downloads/1-3-2/">現時点では1.3.2</a>）のElasticsearchにアップグレードしましょう：多数のインデキシングに関連する問題点が最新リリースで修正されています。</p>
<p>詳細に入る前に警告：ここで述べるすべての情報は現時点での最新（<a href="http://www.elasticsearch.org/downloads/1-3-2/">1.3.2</a>）の情報です。しかし、Elasticsearchの更新は日々行われています。この情報をあなたが見た時点では最新ではなく、正確ではなくなっているかもしれません。自信がない場合は<a href="http://www.elasticsearch.org/community">ユーザメーリングリスト</a>で質問してください。</p>
<p>クラスタのインデキシングスループットをチューニングする場合、<a href="http://www.elasticsearch.org/overview/marvel">Marvel</a>は非常に有用なツールです：ここで述べている各設定を継続的に試し、変更の影響がクラスタの挙動をどのように変更されたかを簡単に可視化することが可能です。</p>
<h2 id="クライアントサイド">クライアントサイド</h2>
<p><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-bulk.html">bulk API</a>を常に使いましょう。1リクエストで複数のドキュメントをインデキシングでき、各バルクリクエストで送るのに良いドキュメント数を試しましょう。最適なサイズは多くの要因に依存しますが、最適サイズからずれるならば多すぎるよりも少なすぎる方が良いでしょう。クライアントサイドのスレッドで並列にbulkリクエストを使うか、個別の非同期リクエストを使ってください。</p>
<p>インデキシングが遅いと結論付ける前に、クラスタのハードウェアの性能を引き出せているかを確認して下さい：すべてのノードでCPUやIOが溢れていないかを確認するために<code>iostat</code>や<code>top</code>、<code>ps</code>といったツールを使いましょう。もし、溢れていなければ、より多くの並列なリクエストが必要です。しかし、javaクライアントからの<code>EsRejectedExecutionException</code>や、RESTリクエストのHTTPレスポンスとして<code>TOO_MANY_REQUESTS (429)</code>が返ってきた場合は並列リクエストを多く送りすぎています。もし<a href="http://www.elasticsearch.org/overview/marvel">Marvel</a>を利用しているなら、<a href="http://www.elasticsearch.org/guide/en/marvel/current/#_node_amp_index_statistics">Node Statistics Dashboard</a>の<code>THREAD POOLS - BULK</code>にリジェクトされた数が表示されます。bulkスレッドプールサイズ（デフォルト値はコア数）を増やすのは得策ではありません。インデキシングスループットを減少させるでしょう。クライアントサイドの並列度を下げるか、ノードを増やすのが良い選択です。</p>
<p>ここでは、1シャードに対してインデキシングスループットを最大化する設定に注目します。1つのLuceneインデックスのドキュメントの容量を測定するために、単一ノード（単一シャード、レプリカなし）で最初にテストをして最適化し、クラスタ全体にスケールする前にチューニングを繰り返します。これはまた、インデキシングスループットの要件を見つけるために、クラスタ全体にどのくらいのノードが必要かをラフに見積もるためのベースラインを与えてくれます。</p>
<p>単一シャードが十分機能したら、Elasticsearchのスケーラビリティの最大の利点や、クラスタでの複数ノードによるレプリカ数やシャード数の増加の利点が得られます。</p>
<p>結論を導き出す前に、ある程度の時間（60分）くらいクラスタ全体の性能を計測しましょう。このテストは、巨大なマージ、GCサイクル、シャードの移動、OSのIOキャッシュ、予期しないスワップの可能性などのイベントのライフサイクルをカバーできます。</p>
<h2 id="ストレージデバイス">ストレージデバイス</h2>
<p>当然ながらインデックスを保存するストレージデバイスはインデキシングの性能に多大な影響を及ぼします：</p>
<ul>
<li>SSDを利用する：これらは最も速いHDDよりも速いです。ランダムアクセスのための消費電力が低いだけでなく、シーケンシャルIOアクセスも高いです。また、同時に発生するインデキシング、マージや検索のための並列的なIOも高速です。</li>
<li>インデックスをリモートマウントされたファイルシステム（例：<a href="http://en.wikipedia.org/wiki/Network_File_System">NFS</a>や<a href="http://en.wikipedia.org/wiki/Server_Message_Block">SMB/CIFS</a>）上に配置しない：代わりにローカルストレージを使う</li>
<li>仮想化されたストレージ（Amazonの<a href="http://aws.amazon.com/ebs/">Elastic Block Storage</a>など）に注意：仮想化されたストレージはElasticsearchで十分に動作します。また、十分早く簡単に用意できることから魅力的です。しかし、残念なことに、ローカルストレージと比較すると本質的に遅いです。最近の非公式なテストでは、<a href="http://aws.amazon.com/ebs/details/#PIOPS">最高の性能を持つプロビジョニングされたIOPSのSSDオプションのEBS</a>でさえ、ローカルインスタンスにあるSSDよりも遅いです。ローカルインスタンスにあるSSDは物理マシン上のすべての仮想マシンから共有されてアクセスされます。もし他の仮想マシンが急にIOが集中した場合に不可解なスローダウンとなることがあることを覚えておいてください。</li>
<li>複数のSSDを<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/setup-dir-layout.html">複数の<code>path.data</code>ディレクトリ</a>にインデックスをストライピング（<a href="http://en.wikipedia.org/wiki/RAID_0#RAID_0">RAID0</a>のように）：2つは同様で、ファイルブロックレベルでストライピングする代わりに、個別にインデックスファイルレベルでElasticsearchの&quot;stripes&quot;となります。これらのアプローチは、いづれかのSSDの故障によりインデックスが壊れるという、1シャードが故障する(IO性能を高速化することとトレードオフ)というリスクを増加させることに注意してください。これは、一般的に行うのに良いトレードオフです：単一シャードで最大のパフォーマンスを最適化し、異なるノード間でレプリカを追加すると、ノードの故障への冗長化ができます。また、<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-snapshots.html">snapshotやrestore</a>を使って保険のためにインデックスのバックアップを取ることもできます。</li>
</ul>
<h2 id="セグメントとマージ">セグメントとマージ</h2>
<p>新しくインデキシングされたドキュメントは最初にLuceneの<code>IndexWriter</code>によってRAMに保存されます。RAMバッファがいっぱいになった時もしくは、Elasticsearchがflushもしくはrefreshを実行した時など定期的にこれらのドキュメントはディスクに新しいセグメントとして書き込まれます。最後に、セグメントが多くなった時に、<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/index-modules-merge.html">Merge PolicyとSucheduler</a>によってそれらがマージされます。このプロセスは連続的に生じます：マージされたセグメントはより大きなセグメントとなり、小さなマージが幾つか実行され、また、大きなセグメントにマージされます。これらがどのように動作するかを<a href="http://blog.mikemccandless.com/2011/02/visualizing-lucenes-segment-merges.html">わかりやすく可視化したブログはこちら</a>です。</p>
<p>マージ、特に大きなマージは非常に時間がかかります。これは、通常は問題ありません。そのようなマージはレアで全体のインデックスのコストと比べればささいなものです。しかし、マージすることがインデキシングについていけない場合、インデックスに非常に多くのセグメントがあるような深刻な問題を防ぐために、Elasticsearchはやってくるインデキシングリクエストを単一スレッド(1.2以降)に制限します。</p>
<p>もし、INFOレベルのログメッセージに<code>now throttling indexing</code>と表示されていたり、<a href="http://www.elasticsearch.org/guide/en/marvel/current">Marvel</a>でのセグメント数が増加しているを見た場合、マージが遅れているとわかります。Marvelは<a href="http://www.elasticsearch.org/guide/en/marvel/current/#_node_amp_index_statistics">Index Statistics dashboard</a>の<code>MANAGEMENT EXTENDED</code>の部分にセグメント数をプロットしており、それは、非常にゆっくりと指数対数的に増加しており、大きなマージが終了したところがのこぎりの歯のような形で見て取れます。</p>

<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="http://www.elasticsearch.org/content/uploads/2014/09/segmentCounts.png" />
    </div>
    <a href="http://www.elasticsearch.org/content/uploads/2014/09/segmentCounts.png" itemprop="contentUrl"></a>
      <figcaption align="center"><h4>セグメント数</h4>
      </figcaption>
  </figure>
</div>

<p>なぜマージが遅れるのでしょう？デフォルトでElasticsearchはすべてのマージの書き込みのバイト数をわずか20MB/secに制限しています。スピニングディスク（HDD）に対して、これはマージによって典型的なドライブのIOキャパシティを飽和させず、並列に検索を十分に実行させることを保証します。しかし、もし、インデキシング中に検索をしない場合や、検索性能がインデキシングのスループットよりも重要でない場合、インデックスの保存にSSDを使用している場合などは、<code>index.store.throttle.type</code>に<code>none</code>を設定して、マージの速度制限を無効化するべきです（詳細は<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/index-modules-store.html">こちら</a>をご覧ください）。なおバージョン1.2以前には<a href="https://github.com/elasticsearch/elasticsearch/issues/6018">期待以上のマージIO制限の発生</a>といったバグが存在します。アップグレードを！</p>
<p>もし、不幸にもスピニングディスク（それはSSDと同等の並列なIOを扱えません）をまだ使っている場合、<code>index.merge.scheduler.max_thread_count</code>に<code>1</code>を設定しなければなりません。そうでない場合は、（SSDを支持する）デフォルト値が多くのマージを同時に実行させるでしょう。</p>
<p>活発に更新が行われているインデックスで<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-optimize.html"><code>optimize</code></a>を実行しないでください。それは、非常にコストの高い操作(すべてのセグメントをマージ)です。しかし、もし、インデックスにドキュメントを追加が終わった直後はオプティマイズのタイミングとしては良いタイミングです。それは、検索時のリソースを減らすからです。例えば、時間ベースのインデックスを持っており、新しいインデックスに日々のログを追加している場合、過去の日付のインデックスをオプティマイズするのは良い考えです。特に、ノードが多くの日付のインデックスを持っている場合です。</p>
<p>更にチューニングするための設定：</p>
<ul>
<li>実際に必要のないフィールドをオフにする。例えば<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-all-field.html"><code>_all</code>フィールドをオフ</a>。また、保持したいフィールドでは、<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-core-types.html"><code>indexed</code>か<code>stored</code>かを検討する</a>。</li>
<li>もし、<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-source-field.html"><code>_source</code>フィールドをオフ</a>にしたくなるかもしれないが、インデキシングコストは小さい(保存するだけで、インデキシングしない)、また、それは、将来の更新や、前のインデックスを再インデキシングするために非常に価値があり、それはディスク使用率の懸念事項がない限り、オフにする価値はあまりない。それは、ディスクが比較的安価であるので価値がない。</li>
<li>もし、インデックスされたドキュメントの検索までの遅延を許容できるなら、<code>index.refresh_interval</code>を<code>30s</code>に増やすか、<code>-1</code>を設定して、オフにする。これは、巨大なセグメントをフラッシュし、マージのプレッシャーを減らすことができる。</li>
<li><a href="http://www.elasticsearch.org/downloads/1-3-2/">Elasticsearch 1.3.2</a>(稀に、フラッシュ時に過度のRAMを使用するという<a href="https://github.com/elasticsearch/elasticsearch/issues/6443">問題</a>を<a href="https://github.com/elasticsearch/elasticsearch/issues/6379">修正した</a>)にアップグレードすることで、<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/index-modules-translog.html"><code>index.translog.flush_threshold_size</code></a>をデフォルト(200mb)から1gbに増加し、インデックスファイルのfsyncの頻度を減らす。
Marvelに<a href="http://www.elasticsearch.org/guide/en/marvel/current/#_node_amp_index_statistics"><code>Index Statistics dashboard</code></a>の<code>MANAGEMENT</code>にフラッシュの頻度がプロットされている。</li>
</ul>
<h2 id="インデックスバッファサイズ">インデックスバッファサイズ</h2>
<p>巨大なインデックスを構築中はレプリカ数を0にし、あとから、レプリカを有効にする。レプリカが0ということは、データを失った(ステータスがred)時に冗長性がないので、ノードの故障に注意すること。もし、<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-optimize.html"><code>optimize</code></a>(ドキュメントの追加をすることがないので)を計画するなら、インデキシングが終わったあとで、レプリカを作成する前に実行するのが良いでしょう。レプリカはオプティマイズされたセグメントをコピーするだけになります。詳細は<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-update-settings.html">インデックス設定更新</a>を参照。</p>
<p>もし、ノードがヘビーなインデキシングを行っているだけなら、アクティブなシャードのインデキシングバッファに多くてい512MBを<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-indices.html">indices.memory.index_buffer_size</a>に与えてください。(超えてもインデキシングのパフォーマンスは一般的には改善されません。)Elasticsearchはその設定(Javaヒープのパーセンテージもしくはバイト数)を受けて、min_index_buffer_sizeとmax_index_buffer_sizeの値を前提にノードのアクティブシャードに均等に割り当てます；大きな値はLuceneが最初のセグメントをより大きくし、将来的なマージのプレッシャーを減らすことを意味します。</p>
<p>デフォルトは10%で、それで十分です；例えば、もし、5つのアクティブなシャードがノードにあり、ヒープが25GBの場合、各シャードは25GBの10%の1/5=512MB（すでに最大値）を持っています。ヘビーなインデキシングのあと、この設定をデフォルトに下げましょう。検索時のデータ構造のために十分なRAMを確保するために。この設定はまだ動的な設定変更はできません。<a href="https://github.com/elasticsearch/elasticsearch/issues/7045">Issueがここに</a>あります。</p>
<p>インデックスバッファによって現在利用されているバイト数は1.3.0の<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-stats.html">indices stats API</a>に追加されています。<code>indices.segments.index_writer_memory</code>の値を見ることができます。これはMarvelではまだプロットされていませんが、将来のバージョンで追加される予定です。しかし、自分でグラフに追加することもできます。(Marvelはデータは収集しています)</p>
<p>1.4.0では、<a href="https://github.com/elasticsearch/elasticsearch/issues/7440"><code>indices.segments.index_writer_max_memory</code></a>として、<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-stats.html">indices stats API</a>にアクティブシャードにどのくらいのRAMバッファが割り当てられているかも表示されます。これらの値はインデックスのシャード事の値として見ることができ、<code>http://host:9200/&lt;indexName&gt;/_stats?level=shards</code>を使ってみることができます；これは、全シャードに対する合計と、各シャードごとのstatsを返すでしょう。</p>
<h2 id="オートidの利用もしくは良いidの利用">オートIDの利用もしくは良いIDの利用</h2>
<p>もし、ドキュメントの<code>ID</code>がなんでも良い場合、<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-index_.html#_automatic_id_generation%22">Elasticsearchで採番すること</a>ができます：これは、(1.2以降)ドキュメントIDをバージョンを探さずに保存できるように<a href="https://github.com/elasticsearch/elasticsearch/pull/5917">最適化</a>され、Elasticsearchの<a href="http://benchmarks.elasticsearch.org/">日毎のベンチマーク</a>で異なるパフォーマンスを見ることができます。(<code>Fast</code>と<code>FastUpdate</code>のグラフを比較)</p>
<p>もし、IDを自身が持っていて、自分の支配下で<a href="http://blog.mikemccandless.com/2014/05/choosing-fast-unique-identifier-uuid.html">Luceneに対して素早く選ぼうとしている</a>なら、1.3.2にアップグレードしましょう、IDのルックアップが<a href="https://github.com/elasticsearch/elasticsearch/issues/6212">さらにオプティマイズ</a>されています。Javaの<a href="http://docs.oracle.com/javase/7/docs/api/java/util/UUID.html">UUID.randomUUID()</a>はやめましょう。それは、セグメントに対してどのようにIDを割り当てるかという予測やパターン性がないため、最悪のケースで<a href="http://blog.mikemccandless.com/2014/05/choosing-fast-unique-identifier-uuid.html">セグメントごとのシーク</a>が発生します。</p>
<p><a href="http://boundary.com/blog/2012/01/12/flake-a-decentralized-k-ordered-unique-id-generator-in-erlang/">Flake IDs</a>を利用した時の<a href="http://www.elasticsearch.org/overview/marvel">Marvel</a>によるインデックス性能の違い：</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="http://www.elasticsearch.org/content/uploads/2014/09/flakeIDsPerf.png" />
    </div>
    <a href="http://www.elasticsearch.org/content/uploads/2014/09/flakeIDsPerf.png" itemprop="contentUrl"></a>
      <figcaption align="center"><h4>flakeIDsPerf</h4>
      </figcaption>
  </figure>
</div>

<p>ランダムUUIDを利用した場合：</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="http://www.elasticsearch.org/content/uploads/2014/09/uuidsPerf.png" />
    </div>
    <a href="http://www.elasticsearch.org/content/uploads/2014/09/uuidsPerf.png" itemprop="contentUrl"></a>
      <figcaption align="center"><h4>uuidsPerf</h4>
      </figcaption>
  </figure>
</div>

<p>次の1.4.0では、ElasticsearchのID自動採番を<a href="https://github.com/elasticsearch/elasticsearch/issues/5941">UUIDからFlake IDに変更</a>します。</p>
<p>もし、Luceneのローレベル操作がインデックスに対してなにをやっているかについて興味があるなら、<a href="https://github.com/elasticsearch/elasticsearch/issues/5891"><code>lucene.iw</code>をTRACEログレベルで出力できるように</a>してみましょう(1.2から利用可能)。これは、多くの出力がありますが、Luceneの<code>IndexWriter</code>レベルで何が起きているかを理解するのに非常に役に立ちます。出力は非常にローレベルです：<a href="http://www.elasticsearch.org/guide/en/marvel/current">Marvel</a>がインデックスに何が起きているかをよりリアルタイムにグラフを描画してくれます。</p>
<h2 id="スケールアウト">スケールアウト</h2>
<p>我々は、単一シャード(Luceneインデックス)性能のチューニングに注目してきました。しかし、一旦それに満足できたならば、Elasticsearchはクラスタ全体にわたってインデキシングや検索を簡単にスケールアウトすることに長けています。シャード数(デフォルトでは5)を増やすのは可能です。それは、マシン全体に対して並列度、巨大なインデックスのサイズ、検索時のレイテンシの低下など得ることができます。また、レプリカを1位上にすることは、ハードウェア故障に対する冗長性を持つことを意味します。</p>
<p>最後に、このドキュメントを見ても問題解決しない場合は<a href="http://www.elasticsearch.org/community">コミュニティに参加</a>しましょう。例えば、<a href="https://groups.google.com/forum/?fromgroups#!forum/elasticsearch">ElasticsearchのユーザML</a>に投稿するなど。おそらく、修正すべきエキサイティングなバグがあるでしょう。(パッチも常に歓迎です！)</p>
</content:encoded>
    </item>
    
    <item>
      <title>サーバ/インフラエンジニア養成読本 ログ収集~可視化編 を手伝いました</title>
      <link>https://blog.johtani.info/blog/2014/08/04/release-magazine-book-of-log-aggs-and-viz/</link>
      <pubDate>Mon, 04 Aug 2014 21:54:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/08/04/release-magazine-book-of-log-aggs-and-viz/</guid>
      <description>懲りずにまた、執筆してみました。みなさん「買って」から感想をいただけるとうれしいです！ 本書について 共著者の方々のブログが詳しいので、そちらを</description>
      <content:encoded><p>懲りずにまた、執筆してみました。みなさん「買って」から感想をいただけるとうれしいです！</p>
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&nou=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=johtani-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4774169838" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
<!-- more -->
<h2 id="本書について">本書について</h2>
<p>共著者の方々のブログが詳しいので、そちらを読んでもらいつつ。
実際にログを収集して解析されている方々と一緒に書かせていただくことで色々と勉強させていただいています。</p>
<h3 id="共著者の方々のブログ">共著者の方々のブログ</h3>
<ul>
<li><a href="https://twitter.com/suzu_v">@suzu_v</a>さん：<a href="http://suzuken.hatenablog.jp/entry/2014/07/18/084555">サーバ/インフラエンジニア養成読本 ログ収集~可視化編 を書きました</a></li>
<li><a href="https://twitter.com/yoshi_ken">@yoshi_ken</a>さん：<a href="http://y-ken.hatenablog.com/entry/published-elasticsearch-fluentd-kibana-book">ログ収集や可視化で話題のFluentd、Elasticsearch、Kibanaを徹底解説したムック本が発売となります</a></li>
<li><a href="https://twitter.com/harukasan">@harukasan</a>さん：<a href="http://blog.harukasan.jp/entry/2014/07/18/180351">書きました: サーバ/インフラエンジニア養成読本 ログ収集~可視化編</a></li>
</ul>
<h3 id="どの辺を書いたの">どの辺を書いたの？</h3>
<p>「特集３：Elasticsearch入門」（なんか、入門ばっかりだなぁ）を書かせていただきました。
データストア入門ということで、ほんとうに簡単な他のデータストアを説明し、Elasticsearchってどんなものかを単語の説明をしつつ紹介してみました。</p>
<p>Elasticsearch自体は多くの機能を持っており、それ単体で分厚い書籍がかけるので、ログ検索に関係ありそうな部分をピックアップしてみました。
あとは、運用時に気をつける点や便利なツール（Curatorなど）の紹介をしています。</p>
<p>また、Hadoopと合わせて利用してみたい、すでにHadoopにあるデータも活用してみたいという話もありそうだということで、<a href="https://github.com/elasticsearch/elasticsearch-hadoop">elasticsearch-hadoop</a>についても簡単ですが紹介してあります。</p>
<h2 id="その他感想">その他感想</h2>
<p>個人的に、忙しい時期<a href="http://blog.johtani.info/blog/2014/07/01/join-elasticsearch/">（参考記事）</a>だったので、あんまり力になれてないので大変申し訳なく思っています。。。
ただ、素晴らしい出来（カラーでKibanaの解説が日本語で読めたり、Fluentdの逆引きのリストがあったり、ログを貯めて可視化する意義を説明してあったり）です。</p>
<p>ぜひ、読んだ感想をいただければと！</p>
</content:encoded>
    </item>
    
    <item>
      <title>プロキシ環境でのpluginコマンドの実行</title>
      <link>https://blog.johtani.info/blog/2014/08/01/plugin-using-under-proxy-env/</link>
      <pubDate>Fri, 01 Aug 2014 15:24:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/08/01/plugin-using-under-proxy-env/</guid>
      <description>Proxy環境で働いている方も結構いると思います。 Twitter上で、Elasticsearchのpluginコマンドでプラグインがインスト</description>
      <content:encoded><p>Proxy環境で働いている方も結構いると思います。
Twitter上で、Elasticsearchのpluginコマンドでプラグインがインストールできなくて困っている方がいたので、
調べてみたのでメモしておきます。</p>
<!-- more -->
<h2 id="プラグインコマンド">プラグインコマンド</h2>
<p>Elasticsearchでは、プラグインという形でいくつかの便利な機能が公開されています。
<a href="https://github.com/elasticsearch/elasticsearch-analysis-kuromoji">形態素解析ライブラリのKuromoji</a>を使うためのプラグインや、<a href="https://github.com/lmenezes/elasticsearch-kopf">クラスタの管理がGUIで可能なkopf</a>プラグインなどがあります。
公式、サードパーティいろいろです。</p>
<p>これらのプラグインをElasticsearchにインストールする場合、以下のコマンドを実行すれば
自動的にダウンロードして<code>plugins</code>ディレクトリにインストールしてくれます。</p>
<pre><code>./bin/plugin -i elasticsearch/elasticsearch-analysis-kuromoji/2.3.0
</code></pre><p>ここで、<code>elasticsearch/elasticsearch-analysis-kuromoji/2.3.0</code>がプラグインのパスになります（例では、<code>提供元/プラグイン名/プラグインバージョン</code>となっています。）。</p>
<p>この<code>plugin</code>コマンドがダウンロード元にアクセスに行くのですが、プロキシ環境だとプロキシの設定が必要になります。</p>
<h2 id="プロキシの指定maclinuxとwindowsでの違い">プロキシの指定（Mac/LinuxとWindowsでの違い）</h2>
<h3 id="maclinuxshコマンド">Mac/Linux(shコマンド)</h3>
<p><a href="http://blog.johtani.info/blog/2013/09/03/ja-wikipedia-with-kuromoji/">以前の記事</a>でプロキシのポート番号などの指定方法を
以下のように説明していました。
（※昔の記事のため、kuromojiプラグインのバージョンが古いです）</p>
<p>ElasticsearchのpluginコマンドはJavaで実装されています。（org.elasticsearch.common.http.client.HttpDownloadHelper）
プラグインのダウンロードには、java.net.URL.openConnection()から取得URLConnectionを使用しています。</p>
<p>ですので、pluginのインストールを行う際に、Proxy環境にある場合は以下のようにコマンドを実行します。</p>
<pre><code>./bin/plugin -DproxyPort=ポート番号 -DproxyHost=ホスト名 -i elasticsearch/elasticsearch-analysis-kuromoji/1.5.0
</code></pre><p>LinuxやMacの環境であれば、こちらのコマンドでプロキシの指定が可能です。
ただし、Windows環境ではうまくいきません。</p>
<p>Elasticsearchは、環境の違いにより、ダウンロードするファイルが異なります。
Windows環境の方は、zipファイルをダウンロードしてもらうようになっています。
elasticsearchコマンドおよびpluginコマンドがbat形式で提供されているのがzipファイルとなるからです。</p>
<h3 id="windowsbatコマンド">Windows(batコマンド)</h3>
<p>Windows環境では次のように指定します。</p>
<pre><code>set JAVA_OPTS=&quot;-DproxyHost=ホスト名 -DproxyPort=ポート番号&quot;
bin\plugin -i elasticsearch/elasticsearch-analysis-kuromoji/2.3.0
</code></pre><p>コマンドの実装方法が少し異なるために、このようになっています。</p>
<h2 id="まとめ">まとめ</h2>
<p>プロキシ環境で利用される場合は、プラグインコマンドは上記のように実行していただければと。</p>
<p>公式ガイドには、これらの情報を追記するPRを送る予定です。
また、WindowsのコマンドでもMac/Linuxと同様にできたほうがいい気がするので、Issueをあげようと思います。</p>
<p>不明点などあれば、コメントいただければと。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 1.3.1 リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2014/07/29/elasticsearch-1-3-1-release/</link>
      <pubDate>Tue, 29 Jul 2014 12:22:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/07/29/elasticsearch-1-3-1-release/</guid>
      <description>原文：Elasticsearch 1.3.1 Releasedを日本語に翻訳したものです。 バグフィックス版のElasticsearch 1.3.1をリリー</description>
      <content:encoded><p><a href="http://www.elasticsearch.org/blog/elasticsearch-1-3-1-released/">原文：Elasticsearch 1.3.1 Released</a>を日本語に翻訳したものです。</p>
<p>バグフィックス版のElasticsearch 1.3.1をリリースしました。
ダウンロードおよび変更履歴は<a href="http://www.elasticsearch.org/downloads/1-3-1/">Elasticsearch 1.3.1</a>からお願いいたします。</p>
<!-- more -->
<p>このリリースはインデックスリカバリ時の後方互換性バグ（<a href="https://github.com/elasticsearch/elasticsearch/pull/7055">#7055</a>）への対応です。
このバグは<strong>データの欠損は起こりません。</strong> Elasticsearch 1.3.1へアップグレードすることで問題を回避できます。
このバグは、以下のElasticsearchのバージョンで作成されたセグメントを含むインデックスを1.3.0へアップグレードしようとすると発生します。</p>
<ul>
<li>Elasticsearch 0.90.7</li>
<li>Elasticsearch 0.90.2</li>
<li>Elasticsearch 0.90.0以前のバージョン</li>
</ul>
<p>このバグは、これらの古いインデックスをレプリカからリカバリできなくします。
これらのバージョンのセグメントを持つインデックスが、レプリカは可能ですが、
ステータスがYellowのままGreenに決してなりません。
ログには次のようなExceptionが発生します。</p>
<blockquote>
<p>IllegalArgumentException[No enum constant org.apache.lucene.util.Version.x.x.x]</p>
</blockquote>
<p>Luceneの特定のバージョンではLuceneのマイナーバージョンを含んでおらず、誤ったバージョン番号がセグメントに記録されました。
<a href="https://issues.apache.org/jira/browse/LUCENE-5850">LUCENE-5850</a>のチケットがこの問題に対処するためにオープンされています。
この問題は我々の後方互換テストで見つかるべき問題ですが、Luceneで不足しているため発見されませんでした。
テストスイートは今後の可能性のために改良されます。</p>
<p>このリリースはその他に、Aggregationのマイナーバグフィックスも含まれています。
詳細は<a href="http://www.elasticsearch.org/downloads/1-3-1/">リリースノート</a>をご覧ください</p>
<p><a href="http://www.elasticsearch.org/downloads/1-3-1/">Elasticsearch 1.3.1</a>をダウンロードし、試してください。
もし問題を見つけた場合は<a href="https://github.com/elasticsearch/elasticsearch/issues">GitHubのIssues</a>へご報告をお願いいたします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Curator 1.2および1.1について</title>
      <link>https://blog.johtani.info/blog/2014/07/28/curator-2-0-and-1-1/</link>
      <pubDate>Mon, 28 Jul 2014 14:19:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/07/28/curator-2-0-and-1-1/</guid>
      <description>Curatorの1.2.0がリリースされました。 前回のCuratorの記事が古くなってしまった（1.1.0からコマンドのI/Fが変更された）</description>
      <content:encoded><p><a href="http://www.elasticsearch.org/blog/curator-1-2-0-released/">Curatorの1.2.0がリリース</a>されました。</p>
<p><a href="http://blog.johtani.info/blog/2014/01/24/curator-tending-your-time-series-indices-in-japanese/">前回のCuratorの記事</a>が古くなってしまった（1.1.0からコマンドのI/Fが変更された）ので
1.1.0および1.2.0に関する記事を翻訳しておきます。</p>
<p>ちなみに、<a href="https://github.com/elasticsearch/curator/">Curator</a>とは、Elasticsearchに時系列のインデックス（例：LogstashやFluentdでログを保存）を保存している場合にそれらのインデックスを管理（削除したり、クローズしたり）するための便利なツールです。
Curatorの概要については、<a href="https://github.com/elasticsearch/curator/">GitHubリポジトリ</a>か<a href="http://blog.johtani.info/blog/2014/01/24/curator-tending-your-time-series-indices-in-japanese/">前回の記事</a>をご覧ください。</p>
<!-- more -->
<h1 id="curator-110リリース-20140613公開a-namecurator_v110">Curator 1.1.0リリース (2014/06/13公開)<a name="curator_v110"/></h1>
<p>元記事：<a href="http://www.elasticsearch.org/blog/elasticsearch-curator-version-1-1-0-released/">elasticsearch curator - version 1.1.0 released</a></p>
<p>Elasticsearch 1.0.0がリリースされ、新しい機能、Snapshot &amp; Restoreが利用できるようになりました。
Snapshotはある時点でのインデックスの写真を撮るように、バックアップを作成することができます。
1.0.0が発表されてすぐに、この機能に関するリクエストが寄せられるようになりました。
「Curatorにスナップショットを追加して！」もしくは「いつCuratorでスナップショットが使えるようになる？」といった感じです。
これがあなたの要望なら、それはついに叶えられました。しかも他の追加機能も一緒にです。</p>
<h2 id="新機能">新機能</h2>
<p>Curatorの新機能は以下のとおりです。</p>
<ul>
<li>新CLI構造</li>
<li>スナップショット(Snapshot)</li>
<li>エイリアス(Aliases)</li>
<li>パターンによる除外インデックス指定</li>
<li>配置ルーティング(Allocation Routing)</li>
<li>インデックスとスナップショットの表示</li>
<li>リポジトリ管理(個別のスクリプトによる)</li>
<li><a href="https://github.com/elasticsearch/curator/wiki">ドキュメントWiki</a></li>
</ul>
<h3 id="新コマンドライン構造">新コマンドライン構造</h3>
<p><strong>注意</strong>：コマンドライン構造の変更とは、Curator 1.1.0以前のcron記述が動作しないことを意味します。Curator 1.1.0にアップグレードする場合はコマンドも修正が必要となるので注意してください。</p>
<p>シンプルにするために、<em>commands</em>という概念を追加しました。
また、ヘルプの出力もわかりやすくなっています。
前のバージョンと同じタスクをCuratorは実行できますが、異なるフォーマットを用いるようになりました。</p>
<p>旧コマンド：</p>
<pre><code>curator -d 30
</code></pre><p>新コマンド：</p>
<pre><code>curator delete --older-than 30
</code></pre><p>コマンドは、フラグとは異なりハイフンを前に付けないことに注意してください。
また、似たような名前のフラグがあることに気をつけてください。
例えば、<code>--older-than</code>フラグは多くのコマンドに利用できます。
指定される値は各ケースにおいて同一です。「指定された数よりも古いインデックス」となります。</p>
<p>新しいコマンドのリストは次のとおりです。</p>
<ul>
<li>alias</li>
<li>allocation</li>
<li>bloom</li>
<li>close</li>
<li>delete</li>
<li>optimize</li>
<li>show</li>
<li>snapshot</li>
</ul>
<p>コマンドのヘルプは次のコマンドで表示されます。</p>
<pre><code>curator [COMMAND] --help
</code></pre><p>コマンドに関係あるフラグがすべて表示されます。</p>
<h3 id="スナップショットsnapshots">スナップショット(snapshots)</h3>
<p><code>snapshot</code>コマンドで、存在しているリポジトリにインデックスのスナップショットを保存することができます。</p>
<p>Curatorはインデックス毎に1つのスナップショットを作成し、インデックスから名前をつけます。
例えば、インデックスの名前が<code>logstash-2014.06.10</code>の場合、スナップショットの名前は<code>logstash-2014.06.10</code>となります。
指定した条件を元に、シーケンシャルに、1つずつインデックスのスナップショットを作成していきます。</p>
<pre><code>curator snapshot --older-than 20 --repository REPOSITORY_NAME
</code></pre><p>このコマンドは、20日以上古いインデックスすべてのスナップショットを作成し、<code>REPOSITORY_NAME</code>で指定されたリポジトリに保存します。</p>
<p><code>es_repo_mgr</code>と呼ばれるリポジトリ作成を支援するスクリプトがCuratorには含まれています。
ファイルシステムおよびS3タイプのリポジトリ両方の作成を支援します。</p>
<p>さらに、古いインデックスのスナップショットを取ることができることに加えて、Curatorは最新のインデックスをアップロードする方法も提供します。
これは、<a href="http://www.elasticsearch.org/overview/marvel/">Elasticsearch Marvel</a>のインデックスをアップロードするときに便利です。
トラブルシューティングを目的として、パフォーマンスデータを他の人に見せる場合などです。</p>
<pre><code>curator snapshot --most-recent 3 --prefix .marvel- --repository REPOSITORY_NAME
</code></pre><p>このコマンドでは、最新の3つのMarvelインデックスのスナップショットを指定されたリポジトリに保存できます。</p>
<h3 id="エイリアスaliases">エイリアス(aliases)</h3>
<p>Curatorはすでに存在するエイリアスにインデックスを追加することも、削除することもできるようになりました。
ただし、エイリアスがすでに存在している必要があります。エイリアスの作成はできません。</p>
<p><code>last_week</code>という前の一週間のインデックスのエイリアスを保持していること想像してください。
この場合、次の2つのコマンドを利用することで、エイリアスを管理できます。</p>
<pre><code>curator alias --alias-older-than 7 --alias last_week
curator alias --unalias-older-than 14 --alias last_week
</code></pre><p>新しく作られたインデックスが<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-templates.html#indices-templates">インデックステンプレート</a>によって
自動的にエイリアスの一部となるようにElasticsearchに設定しておくと、さらに便利です。
この場合、新しいインデックスが自動的に<code>this_week</code>というエイリアスの一部になるようにしてあれば、以下のコマンドのみとなります。</p>
<pre><code>curator alias --unalias-older-than 7 --alias this_week
</code></pre><p><code>this_week</code>と<code>last_week</code>のエイリアスのアップデートを保持できます。</p>
<h3 id="パターンによる除外exclude-pattern">パターンによる除外(exclude pattern)</h3>
<p>時には、指定したインデックスを操作から除外したくなる場合もあるでしょう。
ここまでは、プレフィックスや日付によって選択されたインデックスのみを対象にしてきました。
そこで、<code>--exclude-pattern</code>オプションです。これは、指定したインデックスを除いて処理を行うことができます。</p>
<p><code>logstash-2014.06.11</code>というインデックスを決して削除したくないとします。
この場合、次のコマンドのようになります。</p>
<pre><code>curator delete --older-than 15 --exclude-pattern 2014.06.11
</code></pre><p>Curatorはデフォルトで<code>logstash-</code>というプレフィックスにマッチしますが、<code>2014.06.11</code>というインデックスは対象外となります。</p>
<h3 id="配置ルーティングallocation-routing">配置ルーティング(allocation routing)</h3>
<p>Elasticsearchはノードにタグを付けることができます。
これらのタグはインデックスやシャードをクラスタのどこに配置するかをコントロールするために役立ちます。
一般的なユースケースだと、高性能なSSDドライブを持ったノードをインデキシングのために、ハードディスクを持った性能の低いマシンは検索頻度が低い古いインデックスを配置するといった場合です。
この場合、HDDノードには、<code>elasticsearch.yml</code>に<code>node.tag: hdd</code>、SSDノードには<code>node.tag: ssd</code>と設定されているべきです。
Curatorはこの時、インデックスをタグに基づいてオフピークの時間帯に再配置させることができます。</p>
<p>コマンド：</p>
<pre><code>curator allocation --older-than 2 --rule tag=hdd
</code></pre><p><code>index.routing.allocation.require.tag=hdd</code>という設定が２日よりも古いインデックスに適用されます。
これは、インデックスのシャードが<code>node.tag: hdd</code>というノードに再配置される必要があると、Elasticsearchに伝えます。</p>
<h3 id="インデックスとスナップショットの表示show-indices-and-snapshots">インデックスとスナップショットの表示(show indices and snapshots)</h3>
<p>これは、単にあなたの持っているインデックスやスナップショットがどんなものかを表示します。</p>
<pre><code>curator show --show-indices
</code></pre><p>これは、デフォルトプレフィックスの<code>logstash-</code>にマッチするすべてのインデックスを表示します。</p>
<pre><code>curator show --show-snapshots --repository REPOSITORY_NAME
</code></pre><p>これは、指定されたリポジトリにある、デフォルトプレフィックスの<code>logstash-</code>にマッチするすべてのスナップショットを表示します。</p>
<h3 id="リポジトリ管理repository-management">リポジトリ管理(repository management)</h3>
<p>前に説明したとおり、<code>es_repo_mgr</code>と呼ばれるヘルパースクリプトをCuratorは含んでいます。
現時点では、<code>fs</code>と<code>s3</code>タイプをサポートしています。
リポジトリを作る前に利用したいタイプのドキュメントを読むようにしてください。
例えば、<code>fs</code>タイプのリポジトリを各ノードで使う場合は、同じ共有ファイルシステムに、同じパスでアクセスできなければなりません。
パスの指定は<code>--location</code>です。</p>
<p><code>fs</code>タイプリポジトリの作成</p>
<pre><code>es_repo_mgr create_fs --location '/tmp/REPOSITORY_LOCATION' --repository REPOSITORY_NAME
</code></pre><p>削除</p>
<pre><code>es_repo_mgr delete --repository REPOSITORY_NAME
</code></pre><h3 id="ドキュメントwiki">ドキュメントWiki</h3>
<p><a href="https://github.com/elasticsearch/curator/wiki">Curatorのドキュメント</a>が更新され、オンラインにWiki形式でだれでも更新できるようになっています。
コマンドやフラグのより詳細の情報はこちらで見つけることができます。また、もし、興味があれば、ドキュメントを追加することもできます。</p>
<h2 id="インストールと更新">インストールと更新</h2>
<p>Curator 1.1.0は<a href="https://pypi.python.org/pypi?%3Aaction=pkg_edit&amp;name=elasticsearch-curator">PyPi</a>リポジトリにあります。
インストールは以下のとおりです。</p>
<pre><code>pip install elasticsearch-curator
</code></pre><p>バージョン1.0.0からアップグレードする場合は以下のとおりです。</p>
<pre><code>pip uninstall elasticsearch-curator
pip install elasticsearch-curator
</code></pre><p>バージョン1.0.0よりも古いバージョンからのアップグレードは以下のとおりです。</p>
<pre><code>pip uninstall elasticsearch-curator
pip uninstall elasticsearch
pip install elasticsearch-curator
</code></pre><p><code>pip uninstall elasticsearch</code>で、古いパイションモジュールをを削除します。
適切なバージョンが依存関係により再インストールされます。</p>
<h2 id="まとめ">まとめ</h2>
<p>Curatorの新機能は素晴らしいです！このリリースは大きな改善です。
もし、トラブルや足りないものを見つけた場合は<a href="http://github.com/elasticsearch/curator/issues">GitHub Issue</a>に報告してください。
また、Curatorが便利だと思ったら、私たちに伝えてください。<code>#elasticsearch</code>タグを付けてツイートしてください！</p>
<p>Curatorはまだ、始まったばかりです。Curator 2.0のロードマップを作業中です。ここまで読んでいただきありがとうございます。
Happy Curating!</p>
<hr>
<h1 id="curator-120リリース20140724">Curator 1.2.0リリース(2014/07/24)</h1>
<p>元記事：<a href="http://www.elasticsearch.org/blog/curator-1-2-0-released/">curator 1.2.0 released</a></p>
<p><a href="#curator_v110">Curator v1.1.0</a>のリリースから、数週間が経ちました。
私たちは、Curator 1.2.0をリリースしました。</p>
<h2 id="新機能new-features">新機能(new features)</h2>
<ul>
<li>ユーザ指定の日付パターン：長い間リクエストされていた機能</li>
<li>ウィークリーインデックスのサポート：これも長い間リクエストされていた機能</li>
<li>複数の<a href="https://github.com/elasticsearch/curator/wiki/Logformat">ログフォーマット</a>オプション：Logstashフォーマットが利用可能</li>
</ul>
<p>これらの変更は<a href="https://github.com/elasticsearch/curator/wiki">Curatorドキュメント</a>にも記載されています。</p>
<h2 id="更新updates">更新(updates)</h2>
<ul>
<li>ログ出力の整理：デフォルトのログ出力を整理しました。デバッグログはすべて表示されます。</li>
<li>ドライランのログ出力の詳細化：テスト実行時に何が起きたかをわかりやすくしました。</li>
</ul>
<h2 id="日付パターンと--timestringdate-patterns-and---timestring">日付パターンと<code>--timestring</code>(date patterns and &ndash;timestring)</h2>
<p>前のリリースで、セパレータ文字を利用して、インデックス名のエレメントを分離することで、日付を計算しました。
この設計の決定は、プログラムが管理するために設計されたLogstashのインデックスを使うのには簡単でした。
しかし、Curatorは時系列インデックス管理に成長しています。これは、異なる命名規則のインデックスを意味しています。</p>
<p>また、インターバルによって、日付の計算が必要になる場合もあります。
<code>--time-unit</code>オプションが残っており、<code>weeks</code>という単位を指定することもできます。
デフォルトの<code>--timestring</code>オプションは、以前のコマンドと同様の動作をしなければなりません。次のようになります。</p>
<table>
<thead>
<tr>
<th>Time Unit</th>
<th>Timestring</th>
</tr>
</thead>
<tbody>
<tr>
<td>days</td>
<td><code>%Y.%m.%d</code></td>
</tr>
<tr>
<td>hours</td>
<td><code>%Y.%m.%d.%H</code></td>
</tr>
<tr>
<td>weeks</td>
<td><code>%Y.%W</code></td>
</tr>
</tbody>
</table>
<p>これが意味するものは、もし、単位に<code>hours</code>をした場合、<code>--timestring</code>を指定しなかった場合は<code>%Y.%m.%d.%H</code>となります。
これは、<a href="https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior">Pythonのstrftimeフォーマット</a>で&quot;年.月.日.時&quot;を意味します。
同様に、<code>weeks</code>を単位に指定した場合、Curatorはデフォルトの<code>--timestring</code>は<code>%Y.%W</code>となります。</p>
<p>この機能は、日付の間にセパレーター文字のないインデックスでも機能します。
例えば、<code>production-20140724</code>のような日時インデックスがある場合、2日よりも古いインデックスに対する<a href="https://github.com/elasticsearch/curator/wiki/Disable-Bloom-Filter-Cache">ブルームフィルタっキャッシュのオフ</a>のコマンドは次のようになります。</p>
<pre><code>curator bloom --prefix production- --older-than 2 --timestring %Y%m%d
</code></pre><p>この例で、デフォルトの単位は<code>days</code>であることに注意してください。<code>hourly-2014072414</code>のような時間インデックスの場合は次のようになります。</p>
<pre><code>curator bloom --prefix hourly- --older-than 2 --time-unit hours --timestring %Y%m%d%H
</code></pre><h2 id="--separatorの置き換え"><code>--separator</code>の置き換え</h2>
<p>もし、Curatorの前のバージョンでカスタムセパレータ文字を利用していた場合、次のように変更すべきです。
前のコマンドで<code>cerberus-2014-07-24</code>のようなインデックスがある場合、コマンドを<code>--separator -</code>の用に置き換える必要があります。
新しいコマンドは次のとおりです。</p>
<pre><code>curator delete --prefix cerberus- --older-than 30 --timestring %Y-%m-%d
</code></pre><p>年(<code>％Y</code>)と月(<code>%m</code>)と日('%d&rsquo;)の間にセパレータ文字を置くだけです。</p>
<p>これは、また、Curatorで以前は不可能であったことをできるようにもします。
異なるセパレータ文字の混在です。
<code>logs-2014.07.24-14</code>というようなインデックスを処理するときに<code>--timestring</code>は<code>%Y.%m.%d-%H</code>のようになります.</p>
<p><code>--timestring</code>の詳細は<a href="https://github.com/elasticsearch/curator/wiki/Timestring">Curatorのドキュメント</a>をご覧ください。</p>
<h2 id="フィードバック">フィードバック</h2>
<p>これらの新しい機能はユーザのコメントやリクエストから来ています。もし、機能のリクエストやバグを発見したら、<a href="https://github.com/elasticsearch/curator/issues">こちら</a>まで連絡してください。</p>
<p>また、Twitterでもお待ちしています。私たちのTwitter IDは<code>@elasticsearch</code>です。</p>
<p>Happy Curating!</p>
</content:encoded>
    </item>
    
    <item>
      <title>第5回Elasticsearch勉強会を開催しました。#elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2014/07/19/hold-on-5th-elasticsearch-jp/</link>
      <pubDate>Sat, 19 Jul 2014 21:52:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/07/19/hold-on-5th-elasticsearch-jp/</guid>
      <description>第5回Elasticsearch勉強会を開催しました。 遅くなってしまいましたが、まとめてみました。 今回は、Elasticsearchに入って</description>
      <content:encoded><p><a href="http://elasticsearch.doorkeeper.jp/events/12028">第5回Elasticsearch勉強会</a>を開催しました。
遅くなってしまいましたが、まとめてみました。</p>
<p>今回は、Elasticsearchに入って初の勉強会でした。タイミングが良いことに、Honza、Igor、Shayの3名がトレーニングのために
来日していたため、特別回ということにして、話をしてもらいました。</p>
<p>そして、<a href="http://samuraism.com/">サムライズム</a>の<a href="https://twitter.com/yusuke">@yusuke</a>さんにテキスト翻訳してもらいました。
早くて正確なタイピング＋翻訳、本当にありがとうございました。</p>
<p>開場提供していただいた<a href="http://recruit-tech.co.jp">リクルートテクノロジーズさん</a>、ありがとうございました！
次回もよろしくお願いします！
参加していただき盛り上げていただいた参加者の皆さんもありがとうございました。</p>
<blockquote class="twitter-tweet" lang="ja"><p>amazing turnout to the elasticsearch at Tokyo <a href="https://twitter.com/hashtag/elasticsearchjp?src=hash">#elasticsearchjp</a> <a href="http://t.co/Aa88eVf5dF">pic.twitter.com/Aa88eVf5dF</a></p>&mdash; Shay Banon (@kimchy) <a href="https://twitter.com/kimchy/statuses/488686274375843841">2014, 7月 14</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<!-- more -->
<p>動画があとで、アップされる予定です。お楽しみに。</p>
<h2 id="honzas-talk">Honza&rsquo;s talk</h2>
<ul>
<li>djangoの開発者！であり、ElasticsearchのPythonクライアント、Curatorの開発者</li>
<li>Python Clientを利用しながら、ライブコーディングのような形で説明する方法が新鮮</li>
<li>Aggregationの便利さについての説明</li>
<li>Python Clientがクエリを組み立てるのにすごく便利そうだった</li>
<li>Pythonユーザが結構いたので助かりましたｗ</li>
</ul>
<h2 id="igors-talk">Igor&rsquo;s talk</h2>
<p>スライド：<a href="https://speakerdeck.com/imotov/elasticsearch-data">elasticsearch data/</a></p>
<ul>
<li>Snapshot/Restoreの開発などを行っている開発者</li>
<li>Elasticsearchのデータ、ディレクトリ構造に関するお話</li>
<li>シャードの話から、ディレクトリ構造、メタデータに関する説明</li>
<li>transaction logの挙動の説明</li>
<li>検索のフェーズの説明</li>
</ul>
<p>Igorは、実は私がElasticsearch社の人とコンタクトがとれた最初の人だと思います。
第1回Elasticsearch勉強会が開催する当日に帰国されるという不運だったのですが、1年越しでトークしてもらえました！</p>
<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/johtani">@johtani</a> I am so bummed! I am leaving Tokyo Thursday morning.</p>&mdash; Igor Motov (@imotov) <a href="https://twitter.com/imotov/statuses/372340973121986560">2013, 8月 27</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<h2 id="qa">QA</h2>
<p>ShayをメインにいくつかのQAをしてもらいました。
NetflixなどのMeetupの動画で見てたのですが、こんな形で日本でも実現できるとは。</p>
<ul>
<li>Q: なんで、ファイルデスクリプタの設定を大きくするの？
<ul>
<li>A: Luceneのインデックスは複数のセグメントから構成されている。メモリに作られたあと、ファイルにfsyncされる。</li>
</ul>
</li>
<li>Q: KibanaでAggregation使いたいんだけど？
<ul>
<li>A: Kibana 4で対応するよ！異なるフィールドの値を1つのグラフにすることも出来るよ！</li>
</ul>
</li>
<li>Q: なんでElasticsearch作ったの？
<ul>
<li>A: 暇だったからｗ奥さんのレシピ検索を作ってみようと思って作り始めて、Luceneを触って感動して。。。検索すげー、Compassってのを触ってこれもすごいと思いつつ、もっとLucene活用できるんじゃないかということでElasticsearch作ったんだ。奥さんのレシピ検索？まだ完成してないよｗ</li>
</ul>
</li>
<li>Q: 2000くらいスナップショット撮ったらパフォーマンスが悪くなっててなんで？
<ul>
<li>A: 差分でスナップショットを作るんだけど、差分の計算に昔のスナップショットを見るので、定期的に新しくしたほうがいい。もし、気になることがあったらIssue上げたりMLに投げてくれるとうれしい。<br>
（あとでちょっと聞いたけど、古いスナップショットを消すのも有効っぽい。差分でスナップショットを作るけど、昔のを消した場合は、新しいスナップショットが利用しているファイルは残る仕組みになっているから。）</li>
</ul>
</li>
<li>Q: Relevancyのチューニングってどうすればいい？ドキュメントが少なくない？
<ul>
<li>A: ドキュメンテーションは頑張ってるので、応援してねｗあとは、<a href="http://www.elasticsearch.org/guide/en/elasticsearch/guide/current/index.html">definitive guide</a>も参考になるよ。スコアはfunction_scoreクエリがすごいのでいろいろ使ってね。MVELをGroovyに帰る予定。性能もだけど、サンドボックス的な意味もあります。</li>
</ul>
</li>
<li>Q: 次のVisionは？現時点は検索だけど。（最後の質問がとてもナイスで、助かりましたｗ私がしたほうがいい気がするｗｗ）
<ul>
<li>A: 今後はアナリティクスのプラットフォームに向かってる。Aggregationとかね。メモリ効率よくしたりしてるよ。あとは、Field-collapsionも実装中だよ。あと、マシンラーニングとかもね。データを探索するための機能を色々作ってくよ。障害性にも。チェックサム機能をLuceneに入れて、ESにも入れていく予定。Zenの機能も改善している。</li>
</ul>
</li>
</ul>
<h2 id="まとめ">まとめ</h2>
<p>今週は、トレーニングがあったり、いろいろな打ち合わせがあったりと、テンパってたので至らない点が多かったかもしれないですが。。。
楽しんでいただけと思います。
数日、Shay、Honza、Igorと行動を共にして、本当に情熱のあるチームでユーザのことを気にかけているなと感じることができました。
少しでもその片鱗を勉強会で感じてもらえたんじゃないかと。特に、QAでのShayによる情熱が伝わったんじゃないかと。</p>
<p>懇親会でも数人の方から、日本語のサポートを望んでいるという声も頂きました。
興味のある方は私までコンタクトいただければと。</p>
<p>あと、@yusukeさんのテキスト翻訳が素晴らしくて、参加してもらった方たちも絶賛してました。
次回も英語スピーカーの場合に助けてもらえると嬉しいです（私もそこまで出来るように頑張ります）</p>
<h2 id="その他のブログ">その他のブログ</h2>
<p>ブログ記事ありがとうございます！</p>
<ul>
<li><a href="http://arika.hateblo.jp/entry/2014/07/15/011241">第5回elasticsearch勉強会にいってきました - はやさがたりない。</a></li>
<li><a href="http://blog.yoslab.com/entry/2014/07/15/073000">感想戦：aggrigation から見える検索エンジンの次 - 第5回 Elasticsearch勉強会 - よしだのブログ</a></li>
<li><a href="http://uchimanajet7.hatenablog.com/entry/2014/07/15/114632">「第5回elasticsearch勉強会 #elasticsearch #elasticsearchjp」（2014年07月14日）の参加メモ - uchimanajet7のメモ</a></li>
</ul>
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch server 2nd editionのファーストインプレッション</title>
      <link>https://blog.johtani.info/blog/2014/06/16/first-impression-elasticsearch-server-2nd-edition/</link>
      <pubDate>Mon, 16 Jun 2014 17:47:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/06/16/first-impression-elasticsearch-server-2nd-edition/</guid>
      <description>Elasticsearch server 2nd editionが発売されています。 私が翻訳したのは前のバージョンですが。。。 まずは、目次を元にどのくらい変わってるかを見てみました。 （</description>
      <content:encoded><p><a href="http://bit.ly/1kbu5Xd">Elasticsearch server 2nd edition</a>が発売されています。</p>
<p>私が翻訳したのは前のバージョンですが。。。
まずは、目次を元にどのくらい変わってるかを見てみました。
（全部まだ読んでなくて。。。）</p>
<!-- more -->
<h2 id="1章-getting-started-with-the-elasticsearch-cluster">1章 Getting Started with the Elasticsearch Cluster</h2>
<p>冒頭に、全文検索とは、転置インデックスとはどんなものか、
Luceneの簡単なアーキテクチャの仕組みについて説明が追加されています。
検索の仕組みを知らない人が読んでもわかりやすくなっています。</p>
<p>インストール方法なども少し追記されています。
バージョニングと簡単なデータ登録と検索方法についてもここで触れられています。
検索結果の構造の説明もちょっとあります。
まず簡単に触ってみるというところまでが1章でまとめられた感じです。</p>
<h2 id="2章-indexing-your-data">2章 Indexing Your Data</h2>
<p>新しく、切りだされた形です。
前のバージョンでは1章で説明されていた、Mapping周りが切りだされています。
シャードやレプリカの説明もこちらです。</p>
<p>IPアドレスタイプ（IPv4のみ）と<code>token_count</code>タイプの説明も追加されてます。
similarityやpostingsフォーマットなどは新しく追記されています。
また、メタフィールドと呼ばれる<code>_type</code>などはこちらに移動しているようです。
マージ処理などの説明も追記されています。このあたりは、<a href="http://www.packtpub.com/mastering-elasticsearch-querying-and-data-handling/book">Mastering ElasticSearch</a>に
記載されているものが移植された感じでしょうか。</p>
<h2 id="3章-searching-your-data">3章 Searching Your Data</h2>
<p>前のバージョンでは2章だった章です。
クエリについては1.0で追加された<code>simple_query_string</code>などが追記されています。
<code>constant_score</code>や<code>dismax</code>などもです。</p>
<p>また、前のバージョンの3章で説明されていたハイライトや8章で触れられていた<code>validate API</code>についても
移動しています。</p>
<h2 id="4章-extending-your-index-structure">4章 Extending Your Index Structure</h2>
<p>前のバージョンの3章で触れられていた、データの構造に関する部分がこの章になります。
親子や配列、ネスト等のデータのインデックスや検索の方法です。</p>
<h2 id="5章-make-your-search-better">5章 Make Your Search Better</h2>
<p>スクリプティングや言語判定などの仕組みが記載されています。
また、ブーストについても同様です。Synonymについてもここです。
スパンクエリについては省略されたのかな？</p>
<h2 id="6章-beyond-full-text-searching">6章 Beyond Full-text Searching</h2>
<p>1.0の目玉機能の一つであるAggregationの説明から始まります。
その後、ファセットやPercolatorについてです。メモリに関する注意点もありそうです。
また、Geoについての説明がこちらに移動されていました。
<code>scroll API</code>についてもこちらで説明されています。</p>
<h2 id="7章-elasticsearch-cluster-in-detail">7章 Elasticsearch Cluster in Detail</h2>
<p>前の7章で記載されていたElasticsearchの分散の仕組み（Node Discovery）についての記載があります。
また、1.0で追加された<code>circuit breaker</code>やスレッドプール、インデックスのリフレッシュレートなど、<a href="http://www.packtpub.com/elasticsearch-server-second-edition/book">Mastering ElasticSearch</a>の
内容も追記されている気がします。</p>
<p>インデックスやマッピングのテンプレート機能についてもここで説明があるみたいです。</p>
<h2 id="8章-administrating-your-cluster">8章 Administrating Your Cluster</h2>
<p>1.0で追加された<code>snapshot/restore</code>の説明から始まります。
あとは、前のバージョンの7章で説明されていたクラスタ管理用のAPIについての説明です。
いくつか（例えば<code>cat API</code>）、1.0で追加されています。</p>
<p>また、シャードのリバランスの話も追加されているようです。
エイリアスやプラグインの話はこちらに移動してるみたいです。</p>
<h2 id="感想">感想</h2>
<p>ということで、とりあえず、駆け足で目次ベースで違いを見てみました。
<a href="http://www.packtpub.com/elasticsearch-server-second-edition/book">Mastering ElasticSearch</a>での
知見がフィードバックされ、しかも1.0（すでに1.3が出そうな勢いですが。。。）にバージョンアップされた内容になっています。
冒頭がわかりやすくなっているので、検索をやったことのない方にもおすすめな書籍になった気がします。
英語が苦にならなければ、おすすめの一冊だと思います。</p>
<p>来月から読み進めるつもりなので、また、面白い内容があったら感想を書いていこうと思います。
（また翻訳できるといいかもなー）</p>
</content:encoded>
    </item>
    
    <item>
      <title>最新インフラエンジニア技術勉強に参加しました。</title>
      <link>https://blog.johtani.info/blog/2014/05/23/attending-drecom-infra-study/</link>
      <pubDate>Fri, 23 May 2014 19:18:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/05/23/attending-drecom-infra-study/</guid>
      <description>今月2回目の目黒で、初のドリコムさんです。 「最新インフラエンジニア技術勉強～Fluentd, Elasticsearch,Chefの実践実例～</description>
      <content:encoded><p>今月2回目の目黒で、初のドリコムさんです。
「<a href="http://drecom-study.doorkeeper.jp/events/11137">最新インフラエンジニア技術勉強～Fluentd, Elasticsearch,Chefの実践実例～</a>」に参加してきました。
もちろん、Elasticsearchってキーワードがあったからです。</p>
<p>ざっくりメモです。</p>
<!-- more -->
<h2 id="ドリコムのinfrastructure-as-codeひらしーさん">ドリコムのInfrastructure as Code/ひらしーさん</h2>
<ul>
<li>CM：jojoss、トレクル、など</li>
<li>サーバ300台、クラウド○○台。月30〜50台の割合で増加中。</li>
<li>少人数でいかに回すか。</li>
</ul>
<h4 id="chef">Chef</h4>
<ul>
<li>Rubyが書ける人が多いから。</li>
</ul>
<h4 id="serverspec">serverspec</h4>
<ul>
<li>テストだよと。</li>
</ul>
<p>すみません、色々と聞き逃しました。。。</p>
<h2 id="winning-the-metrics-battlemickeyさん">Winning the metrics battle/mickeyさん</h2>
<ul>
<li>Graphiteとかを触っている。</li>
<li>1300台超えたら、色々大変だった。</li>
</ul>
<h4 id="失敗談">失敗談</h4>
<ul>
<li>Cactiを利用して、色々と運用が大変だった。DCが別なのでProxyとか。</li>
</ul>
<h4 id="成功例現行システム">成功例？現行システム？</h4>
<ul>
<li>最大値、平均値、最小値などをプロット</li>
<li>collectdを収集、送信に採用して、独自で開発？</li>
<li>受信して保存するのに、Graphite（carbon-relay、carbon-cache、DRBD、graphite-web）ってなってる。</li>
<li>1300台程度のサーバから、5分間隔で、問題ない。</li>
<li>Graphite良いツールだよ。</li>
</ul>
<p>Q：過去データはどのくらい？
A：5分間隔で1年分。</p>
<p>Q：移動平均とかを使ったグラフとか時間かかりませんか？100台だと
A：100台でもほとんど時間はかからない。</p>
<h2 id="fluentd-プラグイン開発講座外山-寛さん">Fluentd プラグイン開発講座/外山 寛さん</h2>
<ul>
<li>Fluentdプラグインを作ることができると威力倍増</li>
<li>Elasticsearchの勉強会の話までしてくれました！</li>
<li>勉強会スペース貸出しています。</li>
<li>未公開だけど、sedueのプラグインもあるらしい。</li>
<li>CHUNKとBUFFERとか覚えときましょう</li>
<li>プラグインの作り方的なのがなかった気がしたので、今回の発表です。</li>
<li>gem作らなくてもディレクトリにおけば使えるよと。</li>
<li>td-agent使ってる人が大多数だよね。（fluentdを素で使ってる人は会場にはいなかった）</li>
<li>エンジニア募集中</li>
</ul>
<p>Q：エラー処理どうしてますか？
A：今は、スルーしています</p>
<p>Q：単体テストの書き方は？
A：人によってバラバラみたいですね。</p>
<h2 id="mysqlと組み合わせて始める全文検索エンジンelasticsearchyoshi_ken">MySQLと組み合わせて始める全文検索エンジン「elasticsearch」/yoshi_ken</h2>
<p>スライド：http://www.slideshare.net/y-ken/introduce-elasticsearch-mysql-importer</p>
<ul>
<li>
<p>Elasticsearch歴は1年位です。</p>
</li>
<li>
<p>MySQLを使っていて、モダンな検索がほしいですよね？ね？</p>
</li>
<li>
<p>サジェスト、ファセット、位置情報、ネスト検索などなど。</p>
</li>
<li>
<p>GoogleトレンドだとSolrに迫る勢いと。</p>
</li>
<li>
<p>実データを用いて、手軽にElasticsearchと連携。</p>
</li>
<li>
<p>BinaryLogではなく、SQLの結果を同意する方式。yamabiko</p>
</li>
<li>
<p>今日は、新しいものを公開します。</p>
<ul>
<li><a href="https://github.com/y-ken/elasticsearch_mysql_importer">bulk import file generator as well as nested document from MySQL for elasticsearch bulk api</a></li>
</ul>
</li>
<li>
<p><a href="http://purchases.elasticsearch.com/class/elasticsearch/core-elasticsearch/tokyo/2014-05-20">東京トレーニング</a></p>
</li>
<li>
<p>Elasticsearch本については、右にあるリンクをクリックしてくれるとうれしいなぁ。</p>
</li>
</ul>
</content:encoded>
    </item>
    
    <item>
      <title>Aggregations - ファセットよりも柔軟な集計</title>
      <link>https://blog.johtani.info/blog/2014/05/07/aggregation-example/</link>
      <pubDate>Wed, 07 May 2014 18:57:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/05/07/aggregation-example/</guid>
      <description>こんなツイートを見つけたので、Aggregationのサンプルでも書こうかなと。（前から書こうと思ってたんですが。。。） @elasticsearch Hi, Would you please tell me the way to</description>
      <content:encoded><p>こんなツイートを見つけたので、Aggregationのサンプルでも書こうかなと。（前から書こうと思ってたんですが。。。）</p>
<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/elasticsearch">@elasticsearch</a> Hi, Would you please tell me the way to do &quot;Pivot Faceting&quot; like Solr-4.0 in elasticsearch-1.1.1 or prior version? Thank you.</p>&mdash; Y.Kentaro (@yoshi_ken) <a href="https://twitter.com/yoshi_ken/statuses/462073860062322688">2014, 5月 2</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>ちなみに、Aggregationは1.0.0から導入された機能なので、ElasticSearch Server日本語版には掲載されていない機能になります。（ごめんなさい）</p>
<!-- more -->
<p><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-aggregations.html">公式ガイドのAggregationsのページ</a>はこちらになりますが、実例があったほうがいいかなと。</p>
<p><a href="http://twitter.com/yoshi_ken">@yoshi_ken</a> さんから実例のサンプルの指定もいただいたので、ブログを書くのが非常に楽です。ありがとうございます。</p>
<h2 id="問題">問題</h2>
<p><a href="https://gist.github.com/y-ken/40d99c3a137247ba8eac">元ネタ（gist）</a></p>
<p>次のような不動産系のデータがあるとします。</p>
<ul>
<li>id</li>
<li>物件名</li>
<li>都道府県（東京、神奈川、&hellip;..）</li>
<li>物件種別（賃貸、売買、&hellip;..）</li>
</ul>
<p>この時、都道府県別に、物件種別ごとの件数を取得したいという趣旨です。</p>
<ul>
<li>東京
<ul>
<li>賃貸: xxx件</li>
<li>売買: yyy件</li>
</ul>
</li>
<li>神奈川
<ul>
<li>賃貸: xxx件</li>
<li>売買: yyy件 &hellip;</li>
</ul>
</li>
</ul>
<p>これを、Elasticsearchでどうやって取得するかという問題です。</p>
<h2 id="インデックスとデータの登録">インデックスとデータの登録</h2>
<p>まずは、インデックスを作ります。
あくまでもサンプルなので、全部not_analyzedにしてますが、そのへんは適宜変更してください。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#960050;background-color:#1e0010">create</span> <span style="color:#960050;background-color:#1e0010">index</span>
<span style="color:#960050;background-color:#1e0010">PUT</span> <span style="color:#960050;background-color:#1e0010">/pref_aggs</span>
{
  <span style="color:#f92672">&#34;settings&#34;</span>: {
    <span style="color:#f92672">&#34;number_of_shards&#34;</span>: <span style="color:#ae81ff">2</span>
  },
  <span style="color:#f92672">&#34;mappings&#34;</span>: {
    <span style="color:#f92672">&#34;japan&#34;</span> : {
      <span style="color:#f92672">&#34;_id&#34;</span> : {
        <span style="color:#f92672">&#34;path&#34;</span> : <span style="color:#e6db74">&#34;id&#34;</span>
      },
      <span style="color:#f92672">&#34;properties&#34;</span>: {
        <span style="color:#f92672">&#34;id&#34;</span>: {<span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>, <span style="color:#f92672">&#34;index&#34;</span>: <span style="color:#e6db74">&#34;not_analyzed&#34;</span>},
        <span style="color:#f92672">&#34;name&#34;</span>: {<span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>, <span style="color:#f92672">&#34;index&#34;</span>: <span style="color:#e6db74">&#34;not_analyzed&#34;</span>},
        <span style="color:#f92672">&#34;pref&#34;</span>: {<span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>, <span style="color:#f92672">&#34;index&#34;</span>: <span style="color:#e6db74">&#34;not_analyzed&#34;</span>},
        <span style="color:#f92672">&#34;type&#34;</span>: {<span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>, <span style="color:#f92672">&#34;index&#34;</span>: <span style="color:#e6db74">&#34;not_analyzed&#34;</span>}
      }
    }
  }
}
</code></pre></div><p><code>_id</code>を使用して、データ登録時に<code>id</code>フィールドにある文字列をそのままIDとして登録できるように指定してあります。</p>
<p>登録するデータは次のようなものを適当に100件程度作ってりました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{<span style="color:#f92672">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;id0&#34;</span>, <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;name0&#34;</span>, <span style="color:#f92672">&#34;pref&#34;</span>: <span style="color:#e6db74">&#34;01_北海道&#34;</span>, <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;売買&#34;</span>}
{<span style="color:#f92672">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;id1&#34;</span>, <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;name1&#34;</span>, <span style="color:#f92672">&#34;pref&#34;</span>: <span style="color:#e6db74">&#34;09_栃木県&#34;</span>, <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;売買&#34;</span>}
{<span style="color:#f92672">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;id2&#34;</span>, <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;name2&#34;</span>, <span style="color:#f92672">&#34;pref&#34;</span>: <span style="color:#e6db74">&#34;38_愛媛県&#34;</span>, <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;賃貸&#34;</span>}
{<span style="color:#f92672">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;id3&#34;</span>, <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;name3&#34;</span>, <span style="color:#f92672">&#34;pref&#34;</span>: <span style="color:#e6db74">&#34;40_福岡県&#34;</span>, <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;賃貸&#34;</span>}
{<span style="color:#f92672">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;id4&#34;</span>, <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;name4&#34;</span>, <span style="color:#f92672">&#34;pref&#34;</span>: <span style="color:#e6db74">&#34;35_山口県&#34;</span>, <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;売買&#34;</span>}
{<span style="color:#f92672">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;id5&#34;</span>, <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;name5&#34;</span>, <span style="color:#f92672">&#34;pref&#34;</span>: <span style="color:#e6db74">&#34;12_千葉県&#34;</span>, <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;賃貸&#34;</span>}
<span style="color:#960050;background-color:#1e0010">...</span>
</code></pre></div><p>データの登録には、前に紹介した方法「<a href="http://blog.johtani.info/blog/2014/04/24/usage-stream2es/">stream2esと複数データの登録</a>」を用いました。</p>
<h2 id="ファセット">ファセット</h2>
<p>このようなデータがある場合に、まず思いつくのはファセットによる取得です。
いささか強引ですが。。。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#960050;background-color:#1e0010">GET</span> <span style="color:#960050;background-color:#1e0010">/pref_aggs/japan/_search</span>
{
  <span style="color:#f92672">&#34;size&#34;</span>: <span style="color:#ae81ff">0</span>,
  <span style="color:#f92672">&#34;query&#34;</span>: {
    <span style="color:#f92672">&#34;match_all&#34;</span>: {}
  },
  <span style="color:#f92672">&#34;facets&#34;</span>: {
    <span style="color:#f92672">&#34;type_賃貸&#34;</span>: {
      <span style="color:#f92672">&#34;terms&#34;</span>: {
        <span style="color:#f92672">&#34;order&#34;</span>: <span style="color:#e6db74">&#34;term&#34;</span>,
        <span style="color:#f92672">&#34;field&#34;</span>: <span style="color:#e6db74">&#34;pref&#34;</span>,
        <span style="color:#f92672">&#34;size&#34;</span>: <span style="color:#ae81ff">50</span>
      }, <span style="color:#f92672">&#34;facet_filter&#34;</span>: {<span style="color:#f92672">&#34;term&#34;</span>: {<span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;賃貸&#34;</span> }}
    },
    <span style="color:#f92672">&#34;type_売買&#34;</span>: {
      <span style="color:#f92672">&#34;terms&#34;</span>: {
        <span style="color:#f92672">&#34;order&#34;</span>: <span style="color:#e6db74">&#34;term&#34;</span>,
        <span style="color:#f92672">&#34;field&#34;</span>: <span style="color:#e6db74">&#34;pref&#34;</span>,
        <span style="color:#f92672">&#34;size&#34;</span>: <span style="color:#ae81ff">50</span>
      }, <span style="color:#f92672">&#34;facet_filter&#34;</span>: {<span style="color:#f92672">&#34;term&#34;</span>: {<span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;売買&#34;</span> }}
    }

  }
}
</code></pre></div><p><code>facet_filter</code>を使用して、<code>type</code>フィールドによる個別の絞込を行っています。
あとは、<code>pref</code>フィールドのファセットを取得すれば、出力は次のようになります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
   <span style="color:#f92672">&#34;took&#34;</span>: <span style="color:#ae81ff">6</span>,
   <span style="color:#f92672">&#34;timed_out&#34;</span>: <span style="color:#66d9ef">false</span>,
   <span style="color:#f92672">&#34;_shards&#34;</span>: {
      <span style="color:#f92672">&#34;total&#34;</span>: <span style="color:#ae81ff">2</span>,
      <span style="color:#f92672">&#34;successful&#34;</span>: <span style="color:#ae81ff">2</span>,
      <span style="color:#f92672">&#34;failed&#34;</span>: <span style="color:#ae81ff">0</span>
   },
   <span style="color:#f92672">&#34;hits&#34;</span>: {
      <span style="color:#f92672">&#34;total&#34;</span>: <span style="color:#ae81ff">100</span>,
      <span style="color:#f92672">&#34;max_score&#34;</span>: <span style="color:#ae81ff">0</span>,
      <span style="color:#f92672">&#34;hits&#34;</span>: []
   },
   <span style="color:#f92672">&#34;facets&#34;</span>: {
      <span style="color:#f92672">&#34;type_賃貸&#34;</span>: {
         <span style="color:#f92672">&#34;_type&#34;</span>: <span style="color:#e6db74">&#34;terms&#34;</span>,
         <span style="color:#f92672">&#34;missing&#34;</span>: <span style="color:#ae81ff">0</span>,
         <span style="color:#f92672">&#34;total&#34;</span>: <span style="color:#ae81ff">52</span>,
         <span style="color:#f92672">&#34;other&#34;</span>: <span style="color:#ae81ff">0</span>,
         <span style="color:#f92672">&#34;terms&#34;</span>: [
            {
               <span style="color:#f92672">&#34;term&#34;</span>: <span style="color:#e6db74">&#34;00_北海道&#34;</span>,
               <span style="color:#f92672">&#34;count&#34;</span>: <span style="color:#ae81ff">1</span>
            },
            {
               <span style="color:#f92672">&#34;term&#34;</span>: <span style="color:#e6db74">&#34;01_青森県&#34;</span>,
               <span style="color:#f92672">&#34;count&#34;</span>: <span style="color:#ae81ff">2</span>
            },
            {
               <span style="color:#f92672">&#34;term&#34;</span>: <span style="color:#e6db74">&#34;03_宮城県&#34;</span>,
               <span style="color:#f92672">&#34;count&#34;</span>: <span style="color:#ae81ff">3</span>
            },
            <span style="color:#960050;background-color:#1e0010">...</span>
      <span style="color:#960050;background-color:#1e0010">}</span>,
      <span style="color:#e6db74">&#34;type_売買&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> {
         <span style="color:#f92672">&#34;_type&#34;</span>: <span style="color:#e6db74">&#34;terms&#34;</span>,
         <span style="color:#f92672">&#34;missing&#34;</span>: <span style="color:#ae81ff">0</span>,
         <span style="color:#f92672">&#34;total&#34;</span>: <span style="color:#ae81ff">48</span>,
         <span style="color:#f92672">&#34;other&#34;</span>: <span style="color:#ae81ff">0</span>,
         <span style="color:#f92672">&#34;terms&#34;</span>: [
            {
               <span style="color:#f92672">&#34;term&#34;</span>: <span style="color:#e6db74">&#34;00_北海道&#34;</span>,
               <span style="color:#f92672">&#34;count&#34;</span>: <span style="color:#ae81ff">2</span>
            },
            {
               <span style="color:#f92672">&#34;term&#34;</span>: <span style="color:#e6db74">&#34;02_岩手県&#34;</span>,
               <span style="color:#f92672">&#34;count&#34;</span>: <span style="color:#ae81ff">1</span>
            },
            {
               <span style="color:#f92672">&#34;term&#34;</span>: <span style="color:#e6db74">&#34;04_秋田県&#34;</span>,
               <span style="color:#f92672">&#34;count&#34;</span>: <span style="color:#ae81ff">1</span>
            },
            <span style="color:#960050;background-color:#1e0010">...</span>
<span style="color:#960050;background-color:#1e0010">}</span>
</code></pre></div><p>望んでいた形式とは少し異なりますが、<code>facet_filter</code>する回数を少なくするため、
ファセットは都道府県のフィールドを指定したためです。
アプリで頑張って入れ替えてください。。。</p>
<p>この場合、&lsquo;type'の個数がわかっているので、頑張ってこのような記述ができました。
ただ、<code>type</code>が増えた時にアプリの修正とかが必要になりますよね。</p>
<h2 id="aggregations">Aggregations</h2>
<p>ということで、Aggregationsの出番です。
ファセットよりも柔軟に、検索結果に対していろいろな集計が行える機能になります。
一見に如かずということで、クエリを紹介します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#960050;background-color:#1e0010">GET</span> <span style="color:#960050;background-color:#1e0010">/pref_aggs/japan/_search</span>
{
  <span style="color:#f92672">&#34;size&#34;</span>: <span style="color:#ae81ff">0</span>,
  <span style="color:#f92672">&#34;query&#34;</span>: {
    <span style="color:#f92672">&#34;match_all&#34;</span>: {}
  },
  <span style="color:#f92672">&#34;aggs&#34;</span>: {
    <span style="color:#f92672">&#34;pref&#34;</span>: {
      <span style="color:#f92672">&#34;terms&#34;</span>: {
        <span style="color:#f92672">&#34;order&#34;</span>: {
          <span style="color:#f92672">&#34;_term&#34;</span>: <span style="color:#e6db74">&#34;asc&#34;</span>
        },
        <span style="color:#f92672">&#34;field&#34;</span>: <span style="color:#e6db74">&#34;pref&#34;</span>,
        <span style="color:#f92672">&#34;size&#34;</span>: <span style="color:#ae81ff">50</span>
      },
      <span style="color:#f92672">&#34;aggs&#34;</span>: {
        <span style="color:#f92672">&#34;type&#34;</span>: {
          <span style="color:#f92672">&#34;terms&#34;</span>: {
            <span style="color:#f92672">&#34;field&#34;</span>: <span style="color:#e6db74">&#34;type&#34;</span>,
            <span style="color:#f92672">&#34;size&#34;</span>: <span style="color:#ae81ff">10</span>
          }
        }
      }
    }
  }
}
</code></pre></div><p>ファセットよりもシンプルですし、<code>賃貸</code>といったような値を指定していません。
<code>aggs</code>というのが<code>aggregations</code>機能を指定している部分になります。
検索結果は次のように出力されます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
   <span style="color:#f92672">&#34;took&#34;</span>: <span style="color:#ae81ff">4</span>,
   <span style="color:#f92672">&#34;timed_out&#34;</span>: <span style="color:#66d9ef">false</span>,
   <span style="color:#f92672">&#34;_shards&#34;</span>: {
      <span style="color:#f92672">&#34;total&#34;</span>: <span style="color:#ae81ff">2</span>,
      <span style="color:#f92672">&#34;successful&#34;</span>: <span style="color:#ae81ff">2</span>,
      <span style="color:#f92672">&#34;failed&#34;</span>: <span style="color:#ae81ff">0</span>
   },
   <span style="color:#f92672">&#34;hits&#34;</span>: {
      <span style="color:#f92672">&#34;total&#34;</span>: <span style="color:#ae81ff">100</span>,
      <span style="color:#f92672">&#34;max_score&#34;</span>: <span style="color:#ae81ff">0</span>,
      <span style="color:#f92672">&#34;hits&#34;</span>: []
   },
   <span style="color:#f92672">&#34;aggregations&#34;</span>: {
      <span style="color:#f92672">&#34;pref&#34;</span>: {
         <span style="color:#f92672">&#34;buckets&#34;</span>: [
            {
               <span style="color:#f92672">&#34;key&#34;</span>: <span style="color:#e6db74">&#34;00_北海道&#34;</span>,
               <span style="color:#f92672">&#34;doc_count&#34;</span>: <span style="color:#ae81ff">3</span>,
               <span style="color:#f92672">&#34;type&#34;</span>: {
                  <span style="color:#f92672">&#34;buckets&#34;</span>: [
                     {
                        <span style="color:#f92672">&#34;key&#34;</span>: <span style="color:#e6db74">&#34;売買&#34;</span>,
                        <span style="color:#f92672">&#34;doc_count&#34;</span>: <span style="color:#ae81ff">2</span>
                     },
                     {
                        <span style="color:#f92672">&#34;key&#34;</span>: <span style="color:#e6db74">&#34;賃貸&#34;</span>,
                        <span style="color:#f92672">&#34;doc_count&#34;</span>: <span style="color:#ae81ff">1</span>
                     }
                  ]
               }
            },
            {
               <span style="color:#f92672">&#34;key&#34;</span>: <span style="color:#e6db74">&#34;01_青森県&#34;</span>,
               <span style="color:#f92672">&#34;doc_count&#34;</span>: <span style="color:#ae81ff">2</span>,
               <span style="color:#f92672">&#34;type&#34;</span>: {
                  <span style="color:#f92672">&#34;buckets&#34;</span>: [
                     {
                        <span style="color:#f92672">&#34;key&#34;</span>: <span style="color:#e6db74">&#34;賃貸&#34;</span>,
                        <span style="color:#f92672">&#34;doc_count&#34;</span>: <span style="color:#ae81ff">2</span>
                     }
                  ]
               }
            },
            <span style="color:#960050;background-color:#1e0010">...</span>
</code></pre></div><p>Aggregationsの結果は、望んでいた通りの出力になっています。</p>
<p>クエリの構成を見てみましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#e6db74">&#34;aggs&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> {
  <span style="color:#f92672">&#34;pref&#34;</span>: { <span style="color:#960050;background-color:#1e0010">#1</span>
    <span style="color:#f92672">&#34;terms&#34;</span>: {
      <span style="color:#f92672">&#34;order&#34;</span>: {
        <span style="color:#f92672">&#34;_term&#34;</span>: <span style="color:#e6db74">&#34;asc&#34;</span>
      },
      <span style="color:#f92672">&#34;field&#34;</span>: <span style="color:#e6db74">&#34;pref&#34;</span>,
      <span style="color:#f92672">&#34;size&#34;</span>: <span style="color:#ae81ff">50</span>
    },
    <span style="color:#f92672">&#34;aggs&#34;</span>: {  <span style="color:#960050;background-color:#1e0010">#2</span>
      <span style="color:#f92672">&#34;type&#34;</span>: {
        <span style="color:#f92672">&#34;terms&#34;</span>: {
          <span style="color:#f92672">&#34;field&#34;</span>: <span style="color:#e6db74">&#34;type&#34;</span>,
          <span style="color:#f92672">&#34;size&#34;</span>: <span style="color:#ae81ff">10</span>
        }
      }
    }
  }
}
</code></pre></div><p>最初の#1の<code>pref</code>は出力を扱いやすくするためにつけているラベルになります。好きな名前をつけることが可能です。
次の<code>terms</code>がAggregationのタイプ（どのような集計をして欲しいか）になります。
今回は、<code>pref</code>フィールドにある単語(term)毎に、集計をしたいので、<code>terms</code>を指定します。
その他にどんなタイプがあるかは、<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-aggregations.html">公式ガイド</a>をご覧ください。</p>
<p>次に、さらに<code>type</code>フィールドで集計したいので、#2の部分で後続のAggregationを指定しています。
都道府県同様、<code>type</code>フィールドにある単語毎に集計するために、<code>terms</code>を指定します。</p>
<p>これで、先ほどのような結果が出力できます。
ちなみに、さらに<code>type</code>の中に他の種別で集計したいという場合は、さらに<code>aggs</code>を追加していけばOKです。</p>
<p>Aggregationは非常に柔軟な集計を可能にする機能です。ただし、検索結果に対して集計処理を行っているため、
メモリやCPUなどのリソースを消費するので注意が必要です。</p>
<p>Aggregationの説明については、<a href="https://www.found.no/foundation/elasticsearch-aggregations/">こちらのFound.noのブログ（英語）</a>がわかりやすかったので参考にしてみてください。</p>
<h2 id="まとめ">まとめ</h2>
<p>非常に簡単ですが、Aggregationsについて紹介しました。
その他にもAggregationsでできることがあるので、後日別のサンプルを用意して説明しようかと思います。</p>
<p>100件のデータやここまでの操作については、<a href="https://gist.github.com/johtani/08dee5fb4da62037ef9e">gist</a>にあるので、興味がある方はご覧いただければと。
stream2esの操作以外は、<a href="http://blog.johtani.info/blog/2014/01/29/simple-introduction-and-first-impression-es-marvel/">Marvelに付属のsense</a>を利用しています。</p>
</content:encoded>
    </item>
    
    <item>
      <title>elasticsearch-kopfの紹介（aliases画面）</title>
      <link>https://blog.johtani.info/blog/2014/05/04/intro-elasticsearch-kopf-alias-percolator/</link>
      <pubDate>Sun, 04 May 2014 01:01:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/05/04/intro-elasticsearch-kopf-alias-percolator/</guid>
      <description>今日はelasticsearch-kopfのAnalysis画面の紹介です。 （簡単なところから。。。その３） ちょっとあいだが開いてしまいまし</description>
      <content:encoded><p>今日はelasticsearch-kopfのAnalysis画面の紹介です。</p>
<p>（簡単なところから。。。その３）</p>
<!-- more -->
<p>ちょっとあいだが開いてしまいましたが、再開です。
メニューの<code>aliases</code>を選択すると、次のような画面が表示されます。</p>

<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20140504/kopf-aliases.jpg" />
    </div>
    <a href="/images/entries/20140504/kopf-aliases.jpg" itemprop="contentUrl"></a>
      <figcaption align="center"><h4>Aliases画面</h4>
      </figcaption>
  </figure>
</div>

<p>Elasticsearchの<code>alias</code>を画面で確認できます。</p>
<p>エイリアスは、インデックスに別名をつけることができるElasticsearchの機能です。
１エイリアス＝１インデックスでも良いですが、１エイリアスに対して複数のエイリアスを付与することもできます。
この機能を利用することで、次のようなことが可能となります。</p>
<ul>
<li>インデックスの切り替えをアプリ側に意識させずに実施（アプリはエイリアス名に対して検索すればOKなので）</li>
<li>直近１週間のログを検索するためのエイリアスの作成（複数のインデックスを１つのエイリアスに割り当て可能）</li>
<li>特定のルーティングによる検索（特定のデータに対する検索だけに絞るためにfilterを指定する）</li>
</ul>
<p>エイリアスについて詳しく知りたい方は<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-aliases.html">公式ガイド</a>をご覧いただくのが良いかと。</p>
<p>画面は非常にわかりやすい作りになっているので、特に説明必要ないんですよね。。。</p>
</content:encoded>
    </item>
    
    <item>
      <title>stream2esと複数データの登録</title>
      <link>https://blog.johtani.info/blog/2014/04/24/usage-stream2es/</link>
      <pubDate>Thu, 24 Apr 2014 21:11:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/04/24/usage-stream2es/</guid>
      <description>kopfの記事の続きも書く必要があるんだけど、こんなツイートを見つけてしまったので。。。 ElasticsearchのBulk APIの仕様、J</description>
      <content:encoded><p>kopfの記事の続きも書く必要があるんだけど、こんなツイートを見つけてしまったので。。。</p>
<blockquote class="twitter-tweet" lang="ja"><p>ElasticsearchのBulk APIの仕様、JSONファイルをいい感じに加工して置かなければならないしハマりどころ多い。 <a href="http://t.co/hmfycqZlqk">http://t.co/hmfycqZlqk</a></p>&mdash; Kenta Suzuki (@suzu_v) <a href="https://twitter.com/suzu_v/statuses/459216999592124416">2014, 4月 24</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>前に思いついたけど、放ったらかしにしてた疑問が再浮上してきたので、せっかくだから調べてみようかなと。</p>
<!-- more -->
<p>複数JSONデータがある場合にもっと楽にデータを入れる方法ないかなぁと思って、これかな？というのがあったのですが、
そのまま手を動かさずに放置してたので、一念発起してブログ書いてます。</p>
<h2 id="bulk-apiって">Bulk APIって？</h2>
<p>ElasticsearchはURLにアクセスしてデータを登録できます。
基本的には次のように1件毎の登録になります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#960050;background-color:#1e0010">$</span> <span style="color:#960050;background-color:#1e0010">curl</span> <span style="color:#960050;background-color:#1e0010">-XPUT</span> <span style="color:#960050;background-color:#1e0010">http://localhost:</span><span style="color:#ae81ff">9200</span><span style="color:#960050;background-color:#1e0010">/bookshop/books/</span><span style="color:#ae81ff">1</span> <span style="color:#960050;background-color:#1e0010">-d</span>
<span style="color:#960050;background-color:#1e0010">&#39;</span>
{
  <span style="color:#f92672">&#34;book_id&#34;</span> : <span style="color:#ae81ff">1</span>,
  <span style="color:#f92672">&#34;title&#34;</span> : <span style="color:#e6db74">&#34;ElasticSearch Server Japanese Edition&#34;</span>,
  <span style="color:#f92672">&#34;price&#34;</span> : <span style="color:#ae81ff">3024</span>,
  <span style="color:#f92672">&#34;publisher&#34;</span> : <span style="color:#e6db74">&#34;KADOKAWA&#34;</span>
}<span style="color:#960050;background-color:#1e0010">&#39;</span>
</code></pre></div><p>これでもいいのですが、大量のデータを登録するときは、Elasticsearch側での効率が悪いです。
そこで、Elasticsearchは大量データを登録するために<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-bulk.html#docs-bulk">Bulk API</a>というものを用意しています。</p>
<p>これは、次のような形式のJSONを作ってデータを登録します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{ <span style="color:#f92672">&#34;index&#34;</span> : { <span style="color:#f92672">&#34;_index&#34;</span> : <span style="color:#e6db74">&#34;bookshop&#34;</span>, <span style="color:#f92672">&#34;_type&#34;</span> : <span style="color:#e6db74">&#34;books&#34;</span>, <span style="color:#f92672">&#34;_id&#34;</span> : <span style="color:#e6db74">&#34;1&#34;</span> } }
{ <span style="color:#f92672">&#34;book_id&#34;</span> : <span style="color:#ae81ff">1</span>, <span style="color:#f92672">&#34;title&#34;</span> : <span style="color:#e6db74">&#34;ElasticSearch Server Japanese Edition&#34;</span>, <span style="color:#f92672">&#34;price&#34;</span> : <span style="color:#ae81ff">3024</span>, <span style="color:#f92672">&#34;publisher&#34;</span> : <span style="color:#e6db74">&#34;KADOKAWA&#34;</span>}
{ <span style="color:#f92672">&#34;index&#34;</span> : { <span style="color:#f92672">&#34;_index&#34;</span> : <span style="color:#e6db74">&#34;bookshop&#34;</span>, <span style="color:#f92672">&#34;_type&#34;</span> : <span style="color:#e6db74">&#34;books&#34;</span>, <span style="color:#f92672">&#34;_id&#34;</span> : <span style="color:#e6db74">&#34;2&#34;</span> } }
{ <span style="color:#f92672">&#34;book_id&#34;</span> : <span style="color:#ae81ff">2</span>, <span style="color:#f92672">&#34;title&#34;</span> : <span style="color:#e6db74">&#34;Introduction of Apache Solr&#34;</span>, <span style="color:#f92672">&#34;price&#34;</span> : <span style="color:#ae81ff">3888</span>, <span style="color:#f92672">&#34;publisher&#34;</span> : <span style="color:#e6db74">&#34;gihyo&#34;</span>}
</code></pre></div><p>これは、次のような構成になっています。</p>
<pre><code>コマンド
データ
コマンド
データ
...
</code></pre><p>これで効率よくデータが登録できるのですが、このようなJSONデータを別途作って上げる必要が出てきます。
結局、複数のJSONがあるのに、特殊なJSONを生成しないといけないということでプログラム書いて実行することになります。
これだと、Elasticsearchへのアクセスをプログラムで書くのとあまり大差がないかもしれません。</p>
<h2 id="stream2es">stream2es</h2>
<p>もっとお手軽に複数のJSONを登録できないかな？と目をつけていたのが、<a href="https://github.com/elasticsearch/stream2es">stream2es</a>です。</p>
<h3 id="どんなもの">どんなもの？</h3>
<p>Clojureで作られた、Elasticsearchにデータを流し込むためのツールです。
Java 7がインストールされていれば、ダウンロードしてくれば動作せることができます。</p>
<h3 id="インストール">インストール</h3>
<p>公式ページに載っている方法そのままです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ curl -O download.elasticsearch.org/stream2es/stream2es; chmod +x stream2es
</code></pre></div><p>実行したディレクトリにコマンドがコピーされます。
あとは、コマンドを実行すればOKです。</p>
<h3 id="実行">実行</h3>
<p>データは次のような形式で<code>sample.json</code>に保存してあるとします。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{ <span style="color:#f92672">&#34;book_id&#34;</span> : <span style="color:#ae81ff">1</span>, <span style="color:#f92672">&#34;title&#34;</span> : <span style="color:#e6db74">&#34;ElasticSearch Server Japanese Edition&#34;</span>, <span style="color:#f92672">&#34;price&#34;</span> : <span style="color:#ae81ff">3024</span>, <span style="color:#f92672">&#34;publisher&#34;</span> : <span style="color:#e6db74">&#34;KADOKAWA&#34;</span>}
{ <span style="color:#f92672">&#34;book_id&#34;</span> : <span style="color:#ae81ff">2</span>, <span style="color:#f92672">&#34;title&#34;</span> : <span style="color:#e6db74">&#34;Introduction of Apache Solr&#34;</span>, <span style="color:#f92672">&#34;price&#34;</span> : <span style="color:#ae81ff">3888</span>, <span style="color:#f92672">&#34;publisher&#34;</span> : <span style="color:#e6db74">&#34;gihyo&#34;</span>}
</code></pre></div><p>先ほどの<code>Bulk API</code>で利用したJSONよりも、スッキリしていますね。
1行1ドキュメント1JSONです。</p>
<p>あとは、次のコマンドを実行するだけです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ ./stream2es stdin --target http://localhost:9200/bookshop/books &lt; sample.json
</code></pre></div><p>ファイルをstream2esに流し込んで、stream2esが1行ずつパースして、Elasticsearchに投げ込んでくれます。</p>
<p>登録されたデータは次のようになります。
IDは自動で付与されています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
   <span style="color:#f92672">&#34;_index&#34;</span>: <span style="color:#e6db74">&#34;bookstore&#34;</span>,
   <span style="color:#f92672">&#34;_type&#34;</span>: <span style="color:#e6db74">&#34;books&#34;</span>,
   <span style="color:#f92672">&#34;_id&#34;</span>: <span style="color:#e6db74">&#34;0Hvy4IJCRkKrvGb4Dgam_w&#34;</span>,
   <span style="color:#f92672">&#34;_version&#34;</span>: <span style="color:#ae81ff">1</span>,
   <span style="color:#f92672">&#34;found&#34;</span>: <span style="color:#66d9ef">true</span>,
   <span style="color:#f92672">&#34;_source&#34;</span>: {
      <span style="color:#f92672">&#34;book_id&#34;</span>: <span style="color:#ae81ff">1</span>,
      <span style="color:#f92672">&#34;title&#34;</span>: <span style="color:#e6db74">&#34;ElasticSearch Server Japanese Edition&#34;</span>,
      <span style="color:#f92672">&#34;price&#34;</span>: <span style="color:#ae81ff">3024</span>,
      <span style="color:#f92672">&#34;publisher&#34;</span>: <span style="color:#e6db74">&#34;KADOKAWA&#34;</span>
   }
}<span style="color:#960050;background-color:#1e0010">,</span>
{
   <span style="color:#f92672">&#34;_index&#34;</span>: <span style="color:#e6db74">&#34;bookstore&#34;</span>,
   <span style="color:#f92672">&#34;_type&#34;</span>: <span style="color:#e6db74">&#34;books&#34;</span>,
   <span style="color:#f92672">&#34;_id&#34;</span>: <span style="color:#e6db74">&#34;b9M6TooFQzGYyJeix_t_WA&#34;</span>,
   <span style="color:#f92672">&#34;_version&#34;</span>: <span style="color:#ae81ff">1</span>,
   <span style="color:#f92672">&#34;found&#34;</span>: <span style="color:#66d9ef">true</span>,
   <span style="color:#f92672">&#34;_source&#34;</span>: {
      <span style="color:#f92672">&#34;book_id&#34;</span>: <span style="color:#ae81ff">2</span>,
      <span style="color:#f92672">&#34;title&#34;</span>: <span style="color:#e6db74">&#34;Introduction of Apache Solr&#34;</span>,
      <span style="color:#f92672">&#34;price&#34;</span>: <span style="color:#ae81ff">3888</span>,
      <span style="color:#f92672">&#34;publisher&#34;</span>: <span style="color:#e6db74">&#34;gihyo&#34;</span>
   }
}
</code></pre></div><p>せっかく、<code>book_id</code>があるんだし、<code>_id</code>をインデックスの設定に指定します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ curl -XDELETE http://localhost:9200/bookshop
$ curl -XPUT http://localhost:9200/bookshop -d <span style="color:#e6db74">&#39;
</span><span style="color:#e6db74">{
</span><span style="color:#e6db74">  &#34;mappings&#34;: {
</span><span style="color:#e6db74">    &#34;books&#34; : {
</span><span style="color:#e6db74">      &#34;_id&#34; : {
</span><span style="color:#e6db74">        &#34;path&#34;: &#34;book_id&#34;
</span><span style="color:#e6db74">      }
</span><span style="color:#e6db74">    }
</span><span style="color:#e6db74">  }
</span><span style="color:#e6db74">}&#39;</span>
</code></pre></div><p>あとは、登録すれば<code>book_id</code>が<code>_id</code>に採用されます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
   <span style="color:#f92672">&#34;_index&#34;</span>: <span style="color:#e6db74">&#34;bookshop&#34;</span>,
   <span style="color:#f92672">&#34;_type&#34;</span>: <span style="color:#e6db74">&#34;books&#34;</span>,
   <span style="color:#f92672">&#34;_id&#34;</span>: <span style="color:#e6db74">&#34;1&#34;</span>,
   <span style="color:#f92672">&#34;_version&#34;</span>: <span style="color:#ae81ff">1</span>,
   <span style="color:#f92672">&#34;found&#34;</span>: <span style="color:#66d9ef">true</span>,
   <span style="color:#f92672">&#34;_source&#34;</span>: {
      <span style="color:#f92672">&#34;book_id&#34;</span>: <span style="color:#ae81ff">1</span>,
      <span style="color:#f92672">&#34;title&#34;</span>: <span style="color:#e6db74">&#34;ElasticSearch Server Japanese Edition&#34;</span>,
      <span style="color:#f92672">&#34;price&#34;</span>: <span style="color:#ae81ff">3024</span>,
      <span style="color:#f92672">&#34;publisher&#34;</span>: <span style="color:#e6db74">&#34;KADOKAWA&#34;</span>
   }
}<span style="color:#960050;background-color:#1e0010">,</span>
{
   <span style="color:#f92672">&#34;_index&#34;</span>: <span style="color:#e6db74">&#34;bookshop&#34;</span>,
   <span style="color:#f92672">&#34;_type&#34;</span>: <span style="color:#e6db74">&#34;books&#34;</span>,
   <span style="color:#f92672">&#34;_id&#34;</span>: <span style="color:#e6db74">&#34;2&#34;</span>,
   <span style="color:#f92672">&#34;_version&#34;</span>: <span style="color:#ae81ff">1</span>,
   <span style="color:#f92672">&#34;found&#34;</span>: <span style="color:#66d9ef">true</span>,
   <span style="color:#f92672">&#34;_source&#34;</span>: {
      <span style="color:#f92672">&#34;book_id&#34;</span>: <span style="color:#ae81ff">2</span>,
      <span style="color:#f92672">&#34;title&#34;</span>: <span style="color:#e6db74">&#34;Introduction of Apache Solr&#34;</span>,
      <span style="color:#f92672">&#34;price&#34;</span>: <span style="color:#ae81ff">3888</span>,
      <span style="color:#f92672">&#34;publisher&#34;</span>: <span style="color:#e6db74">&#34;gihyo&#34;</span>
   }
}
</code></pre></div><h3 id="複数ファイル">複数ファイル</h3>
<p>ディレクトリに複数のJSONファイルが有った場合は、次のようなコマンドでOK</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cat sample_data/*.json |./stream2es stdin --target http://localhost:9200/bookshop/books
</code></pre></div><p>まぁ、<code>cat</code>して流してるだけですが。。。</p>
<h3 id="ダメだったケース">ダメだったケース</h3>
<ul>
<li>
<p>JSONが複数行になっているようなデータだとエラーが出てしまいました。<br>
（<code>jq</code>コマンドで1行に整形したりできるかなぁ？）</p>
</li>
<li>
<p>また、1行に2つのJSONが書いてある場合は、1つ目のJSONをパースしたら、そこでおしまいみたいで、その後に記述されたデータは登録されませんでした。</p>
</li>
</ul>
<h3 id="インデックスがない場合">インデックスがない場合</h3>
<p>stream2esで登録するインデックスがElasticsearchに存在しない場合、stream2esがインデックスを作成してくれるのですが、
この時、シャード数などはstream2es内部に記述があるので注意が必要です。
以下がその設定です。</p>
<ul>
<li>index.number_of_shards : 2</li>
<li>index.number_of_replicas : 0</li>
<li>index.refresh_interval : 5s</li>
</ul>
<h2 id="課題">課題？</h2>
<p>内部的にはおそらく、<code>Bulk</code>でデータを登録していると思うのですが、まだよくわかっていません。
Clojureが読めないので、せっかくだから、Clojureの勉強も兼ねてちょっとソースを読んでみようかなと思います。
それほど量があるわけでもないので。</p>
<p>あとは、その他にWikipediaのデータやTwitterのデータ登録、
ElasticsearchからデータをScrollで読み出しつつ、別のElasticsearchに流しこむといったこともできそうなので、そちらも試してみようかと。
他にもオプションがいくつかありそうです。</p>
<p>今回は2件ほどでしたが、大量データを流し込んだ時にどうなるか（stream2esが悲鳴を上げるのか、Elasticsearchで詰まることがあったらどうなるか）なども
気になるので、なんか適当なデータで試してみるのもいいかなぁと。
（ということで、だれか、いろいろ試してみてもらえると楽できるなぁ。）</p>
</content:encoded>
    </item>
    
    <item>
      <title>第4回Elasticsearch勉強会を開催しました。#elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2014/04/21/hold-on-4th-elasticsearch-jp/</link>
      <pubDate>Mon, 21 Apr 2014 19:44:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/04/21/hold-on-4th-elasticsearch-jp/</guid>
      <description>第4回Elsticsearch勉強会を開催しました。 今回から、遅刻厳禁にしてみました。 それほど困った人もいないと思うので、次回からも遅刻厳禁</description>
      <content:encoded><p><a href="http://elasticsearch.doorkeeper.jp/events/8865">第4回Elsticsearch勉強会</a>を開催しました。
今回から、遅刻厳禁にしてみました。
それほど困った人もいないと思うので、次回からも遅刻厳禁で。</p>
<p>ということで、今回も多数の方にお集まりいただきありがとうございました。</p>
<p>スタッフの皆さん、スピーカーの皆さん、プレゼント用に書籍を用意してくれたKADOKAWAさん、開場提供していただいた<a href="http://recruit-tech.co.jp">リクルートテクノロジーズさん</a>、ありがとうございました！
次回もよろしくお願いします！
参加していただき盛り上げていただいた参加者の皆さんもありがとうございました。</p>
<p>さて、ブログですが司会業とかやってたので、あんまり書けてないけど。。。</p>
<!-- more -->
<p>134番までチケットがはけていたので＋スタッフで140〜150名くらいの参加者だったのではないかと思います。
懇親会まで残っていただいた方々も片付けなどありがとうございました。</p>
<p>さて、感想とか補足です。</p>
<h2 id="アナライズ処理の仕組みとクエリdsl株式会社シーマーク大谷純johtani">「アナライズ処理の仕組みとクエリDSL」株式会社シーマーク　大谷　純　@johtani</h2>
<p>スライド：<a href="/images/entries/20140421/Introduction_analysis_and_query_dsl_for_print.pdf">アナライズ処理の仕組みとクエリDSL</a>※スライドはPDFです。</p>
<p>プラグイン：<a href="https://github.com/johtani/elasticsearch-extended-analyze">elasticsearch-extended-analyze</a><br>
プラグインの紹介記事：<a href="http://blog.johtani.info/blog/2013/10/25/developing-es-extended-analyze-plugin/">http://blog.johtani.info/blog/2013/10/25/developing-es-extended-analyze-plugin/</a></p>
<p>Marvel：<a href="http://www.elasticsearch.com/marvel/">http://www.elasticsearch.com/marvel/</a></p>
<p>日本語版メーリングリスト：<a href="https://groups.google.com/forum/#!forum/elasticsearch-jp">https://groups.google.com/forum/#!forum/elasticsearch-jp</a></p>
<p>なんか、宣伝（本＋プラグイン）ばっかりですみません。
「プラグインの紹介記事」に簡単な使い方が書いてあります。が、情報が古いので、Elasticsearchのバージョンに合わせたバージョンを使ってください。</p>
<p>まだまだ発表に慣れてないので、頑張ろ。</p>
<p>アンケート取ってみましたが、ログ検索と全文検索と半々くらいで興味がある人がいるみたいでした。
あと、有料トレーニングは人気ないっすね。。。</p>
<h2 id="elasticsearch-hadoopを使ってごにょごにょしてみる-株式会社マーズフラッグ-rd部やまかつ-さんyamakatu">「elasticsearch-hadoopを使ってごにょごにょしてみる」 株式会社マーズフラッグ R&amp;D部　やまかつ さん　@yamakatu</h2>
<p>スライド：<a href="http://www.slideshare.net/yamakatu/elasticsearchhadoop">elasticsearch-hadoopを使ってごにょごにょしてみる</a></p>
<p>elasticsearch-hadoop：<a href="https://github.com/elasticsearch/elasticsearch-hadoop">https://github.com/elasticsearch/elasticsearch-hadoop</a></p>
<p>QAとして、Elasticsearchにプライマリデータを保存するのは的な話が出てました。
ESにのみデータを入れるのは個人的には考えたことないかなぁ。
どうしても、ElasticsearchのWriteが遅いんじゃないかという懸念事項を持ってる人がいるなぁと。（実際ツラいという話もちらほら）</p>
<p>お腹痛い中の発表ありがとうございました。。。
次回はMapRの方に紹介してもらえそう（交渉中）なので楽しみです。やまかつさんの続きも聞きたいなぁ。</p>
<h2 id="couchbaseとelasticsearchが手を結んだら株式会社アットウェア-佐竹雅央さん-madgaoh-河村康爾さん-ijokarumawak">「CouchbaseとElasticsearchが手を結んだら」株式会社アットウェア 佐竹雅央さん @madgaoh 河村康爾さん @ijokarumawak</h2>
<p>スライド：<a href="http://www.slideshare.net/masahirosatake/elasticsearch-couchbaseelasticsearch">CouchbaseとElasticsearchが手を結んだら</a></p>
<p>CouchbaseのElasticsearchに関するページ：<a href="http://docs.couchbase.com/couchbase-elastic-search/">http://docs.couchbase.com/couchbase-elastic-search/</a></p>
<p>Couchbaseに入れたら、自動的にElasticsearchにもデータを入れてくれる。
デモがあるの、いいっすね。</p>
<p>最新版はmasterを落としてきてビルドしないとダメらしい。確かに、上のページには0.90.5って書かれてる。
ここでも、やはり、Elasticsearchが詰まった時にどうするの？みたいな話が出てました。
CouchbaseのXDCRだと、後ろが詰まってる時によしなに？データを流すのを制御してくれるってのがあるみたいですが、
Elasticsearchだと悲鳴を上げているのがわかりにくいと。</p>
<p>あと、Elasticsearchがインデキシングでキューを取りこぼしているのがログからわかりにくいってのも出てました。
（なにか、分かる方法があるかとかも調べてみようかなぁ。）</p>
<p><em>自分の宿題：Transportプラグインって何かについて調べてブログに書くこと。</em></p>
<h2 id="elasticsearch-at-wantedlyタイトルあってるか不安wantedly-inc-内田誠悟さん-spesnova">「Elasticsearch at Wantedly」（タイトルあってるか不安）　Wantedly, Inc 内田誠悟さん @spesnova</h2>
<p>スライド：<a href="http://speakerdeck.com/spesnova/elasticsearch-at-wantedly-inc">Elasticsearch at Wantedly</a></p>
<p>参考文献：<a href="http://code46.hatenablog.com/entry/2014/01/21/115620">Elasticsearchチュートリアル</a></p>
<p>参考文献：<a href="https://speakerdeck.com/dadoonet/elasticsearch-workshop">Elasticsearch Workshop</a></p>
<p>参考文献：<a href="https://github.com/elasticsearch/elasticsearch-rails">elasticsearch-rails</a></p>
<p>Wantedlyでどうやって使ってるのか。
あと、オートコンプリートでも使ってます。（この話は次回聞けるといいなぁｗ）</p>
<p>データ数は少ないので、参考にまだならないかも。</p>
<p>公式のサイト見難いですよねと。
ペンギン先生のブログが素晴らしかった！
マッピングすごいｗ</p>
<p>最後は、苦労して作ってもらったautocompleteの資料は放ったらかしにして、質疑応答してもらいました。
辞書とか、検索漏れとかの話は今後の課題っぽかったですね。</p>
<p>「Elasticsearchのみに決めてました！」ってセリフがカッコ良かったｗ</p>
<p>アクセスコントロール周りのノウハウもブログで共有してくれそうなので楽しみにしています！</p>
<p>あと、「tireがretire」の話が出てましたが（この発表だっけ？）参考文献にあげてある、elasticsearch-railsが今は本流なんじゃないかなぁ？</p>
<h2 id="lt">LT</h2>
<p>###「ElasticsearchのScripting」株式会社富士通ソフトウェアテクノロジーズ 滝田聖己さん @pisatoshi</p>
<p>スライド：<a href="https://speakerdeck.com/pisatoshi/elasticsearchdescripting">ElasticsearchのScripting</a></p>
<p>参考文献：<a href="https://github.com/imotov/elasticsearch-native-script-example">elasticsearch-native-script-example</a></p>
<p>色々とScriptがあるという話を説明してもらい感謝です。
もちろん、ElasticSearchServerにも書いてあるので、そちらも参考にしてください！</p>
<h3 id="elasticsearch-向け多言語解析プラグインベイシステクノロジー株式会社-江口天さん">「Elasticsearch 向け多言語解析プラグイン」ベイシス・テクノロジー株式会社 江口天さん</h3>
<p>スライド：<a href="http://www.slideshare.net/basistech/4-21-elasticsearch-meetup">Elasticsearch 向け多言語解析プラグイン</a></p>
<p>参考文献：<a href="http://www.basistech.jp/elasticsearch/">Elasticsearchで使えるRosette基本言語解析モジュール</a></p>
<p>参考文献：<a href="http://blog.johtani.info/blog/2013/09/23/intro-elasticsearch-inquisitor/">Elasticsearch-inquisitorプラグインの紹介</a></p>
<p>ベイシステクノロジさんが提供しているRosetteをElasticsearchで活用できるモジュールみたいです。
いまなら、無料で体験できるみたいなので、どんなものか触ってみると面白いかもしれません。</p>
<p>あと、デモで使用されていたプラグインについて、私が昔に書いた記事があるので、興味のある方は参考にしていただければと。
このプラグインはクエリがどのように内部でLuceneのクエリになっているか、どのフィールドでどうトークンが生成されるか？
といったものが見ることができるプラグインになっています。</p>
<h2 id="関連ブログ">関連ブログ</h2>
<p>適当に見つけたブログを列挙してあります。これもあるよ！などあれば、教えてください。</p>
<ul>
<li>
<p><a href="http://blog.yoslab.com/entry/2014/04/21/200601">勉強会メモ - 第4回elasticsearch勉強会 2014/04/21</a></p>
</li>
<li>
<p><a href="http://togetter.com/li/657879">togetter 第4回elasticsearch勉強会 #elasticsearchjp</a></p>
</li>
<li>
<p><a href="http://dev.classmethod.jp/server-side/4th-elasticsearchjp/">参加レポート:第4回elasticsearch勉強会 #elasticsearchjp</a></p>
</li>
<li>
<p><a href="http://qiita.com/maaru/items/0f82600dbc305715b23d">第4回elasticsearch勉強会に参加しました</a></p>
</li>
</ul>
<h2 id="まとめ">まとめ</h2>
<p>しつこいくらい宣伝してしまいましたが、「ElasticSearch Server日本語版」よろしくお願いします！</p>
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=johtani-22&o=9&p=8&l=as1&asins=4048662023&nou=1&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
<p>今回も楽しい話が聞けました。メモがちょっと少ないんですが。。。</p>
<p>次回は6末を目処に、MapRの方などと調整して開催しようと思います。
聞きたい話とか、発表したい方とかあれば、連絡くださいー！</p>
</content:encoded>
    </item>
    
    <item>
      <title>elasticsearch-kopfの紹介（analysis画面）</title>
      <link>https://blog.johtani.info/blog/2014/04/09/intro-elasticsearch-kopf-analysis/</link>
      <pubDate>Wed, 09 Apr 2014 11:41:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/04/09/intro-elasticsearch-kopf-analysis/</guid>
      <description>今日はelasticsearch-kopfのAnalysis画面の紹介です。 （簡単なところから。。。その２） メニューのanalysisを選択</description>
      <content:encoded><p>今日はelasticsearch-kopfのAnalysis画面の紹介です。</p>
<p>（簡単なところから。。。その２）</p>
<!-- more -->
<p>メニューの<code>analysis</code>を選択すると、次のような画面が表示されます。</p>

<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20140409/kopf-analysis.jpg" />
    </div>
    <a href="/images/entries/20140409/kopf-analysis.jpg" itemprop="contentUrl"></a>
      <figcaption align="center"><h4>Analysis画面</h4>
      </figcaption>
  </figure>
</div>

<p>Elasticsearchの<code>_analyze</code> APIを画面で確認できます。
画面で動作の確認ができるのは嬉しいですよね。</p>
<ol>
<li>入力文字列：入力となるドキュメントに含まれる文字列や検索キーワードを入力</li>
<li>フィールドの指定：対象とするインデックス名、タイプ名、フィールド名を選択</li>
<li>analyze：ボタンを押す</li>
<li>トークナイズされた結果：入力文字列がどのようなトークンに分割されるか
<ul>
<li>start、end：入力文字列中の文字列の位置</li>
<li>pos：トークンの位置</li>
</ul>
</li>
</ol>
<p>という形でElasticsearchが指定されたフィールドで入力文字をどのようにトークナイズしたかを確認することができます。</p>
<p>Elasticsearchは内部でこのトークナイズされた単語を元に転置インデックスを作成し、検索に利用します。
ですので、特定のデータが検索に上手くヒットしないときに、この画面でデータの文字列をトークナイズしてみるといった用途に使えます。</p>
<p>フィールドの設定がどのようにして入力文字列をトークンにしているかといった点については、今度のElasticsearch勉強会で話す予定です。</p>
<p>フィールドの設定を利用する以外に、アナライザを指定してどのようにトークナイズされるかを見ることもできます。
「ANALYZE BYANALYZER」をクリックすると利用できます。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20140409/kopf-analysis-analyzer.jpg" />
    </div>
    <a href="/images/entries/20140409/kopf-analysis-analyzer.jpg" itemprop="contentUrl"></a>
      <figcaption align="center"><h4>ANALYZE BY ANALYZER</h4>
      </figcaption>
  </figure>
</div>

<p>トークナイズしたい文字列を入力し、インデックス名と、インデックスに設定されているアナライザ名を選択してanalyzeボタンを押すと
結果が表示されます。
（例では、kuromojiアナライザを利用して出力になっています。また、出力結果のposの表示位置がFIELD TYPEの時と違うのが少し気になりました。）</p>
<p>ただ、残念ながら、インデックスのマッピングで指定したアナライザしか利用できないみたいなので、
どのアナライザがどんな挙動かを調べたい場合は、以前紹介した<a href="http://blog.johtani.info/blog/2013/09/23/intro-elasticsearch-inquisitor/">elasticsearch-inquisitor</a>を
利用したほうが良さそうです。</p>
<p>ということで、今日はanalysis画面の説明でした。</p>
</content:encoded>
    </item>
    
    <item>
      <title>elasticsearch-kopfの紹介（rest画面）</title>
      <link>https://blog.johtani.info/blog/2014/04/07/intro-elasticsearch-kopf-rest/</link>
      <pubDate>Mon, 07 Apr 2014 11:24:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/04/07/intro-elasticsearch-kopf-rest/</guid>
      <description>今日はelasticsearch-kopfのREST画面の紹介です。 （簡単なところから。。。） メニューのrestを選択すると、次のような画面</description>
      <content:encoded><p>今日はelasticsearch-kopfのREST画面の紹介です。</p>
<p>（簡単なところから。。。）</p>
<!-- more -->
<p>メニューの<code>rest</code>を選択すると、次のような画面が表示されます。</p>
<p>Elasticsearch自体が、さまざまな操作をRESTでできる仕組みになっています。
検索にも利用しますが、それ以外の設定などにつてもリクエストを送ればOKです。</p>
<p>ですので、リクエストや設定を自分で組み立てて送ることができる画面が用意されているととても便利です。
（もちろん、curlコマンドでもいいのですが、画面があると便利ですよね）</p>

<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20140407/kopf-rest.jpg" />
    </div>
    <a href="/images/entries/20140407/kopf-rest.jpg" itemprop="contentUrl"></a>
      <figcaption align="center"><h4>REST画面</h4>
      </figcaption>
  </figure>
</div>

<h2 id="history">History</h2>
<p>履歴表示画面です。
これまで、kopfのrest画面を利用して送信したリクエストが一覧で表示されます。</p>
<p><code>History</code>という文字をクリックすることで、表示/非表示の切り替えが可能です。（最初は非表示）
マウスオーバーすると、リクエストボディがポップアップで表示されます。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20140407/kopf-history.jpg" />
    </div>
    <a href="/images/entries/20140407/kopf-history.jpg" itemprop="contentUrl"></a>
      <figcaption align="center"><h4>History</h4>
      </figcaption>
  </figure>
</div>

<p>履歴にあるURLはクリック可能で、クリックすると実行されます。
履歴は<code>localStorage</code>に保存されるみたいです。（ブラウザの仕様？あんまり詳しくないので。。。）
たぶん、30件が上限かと（ソースで確認しただけ）</p>
<h2 id="url">URL</h2>
<p>rest画面でリクエストを送信する先のURLを指定します。
メソッドは右側のSELECTで選択可能です。</p>
<p>リクエストパラメータも指定が可能です。</p>
<h2 id="リクエストボディ">リクエストボディ</h2>
<p>検索や設定のJSONを記述するところです。
一応、JSON的にエラーがある場合は行数の左側にバツ印が出てきておかしなところもわかるようになっています。</p>
<p>インデントなどは行ってくれますが、senseみたいな補完などはないので、少し辛いところです。</p>
<h2 id="レスポンス">レスポンス</h2>
<p>送信したリクエストに対するレスポンスが返ってきます。
インデントされた状態で表示されるので読みやすいかと。
また、入れ子になっているJSONについては、閉じたり開いたりすることも可能です。
（開始のカッコの右側に<code>-</code>が表示されていて、クリックすると閉じることができます。閉じると<code>+</code>に変わります）</p>
<p>簡単ですが、rest画面の説明でした。
KOPFを使っていて、ちょっとしたクエリを送ったりするのには便利だと思います。</p>
<p>複雑な検索クエリなどについては、やはりsenseを使うのが良いかと思いますが。。。</p>
</content:encoded>
    </item>
    
    <item>
      <title>elasticsearch-kopfの紹介（概要）</title>
      <link>https://blog.johtani.info/blog/2014/04/05/intro-elasticsearch-kopf-1/</link>
      <pubDate>Sat, 05 Apr 2014 23:18:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/04/05/intro-elasticsearch-kopf-1/</guid>
      <description>なんだか、ドタバタしてて久しぶりの更新です。 ベルリンの旅行記みたいなのも書きたいのですが、まずはこちらかと。 elasticsearch-ko</description>
      <content:encoded><p>なんだか、ドタバタしてて久しぶりの更新です。
ベルリンの旅行記みたいなのも書きたいのですが、まずはこちらかと。</p>
<p><a href="https://github.com/lmenezes/elasticsearch-kopf">elasticsearch-kopf</a>プラグインの紹介です。</p>
<p>今回は概要の説明だけになります。機能が結構多いので。</p>
<!-- more -->
<h2 id="elasticsearch-kopfとは">elasticsearch-kopfとは？</h2>
<p><code>_site</code>プラグインの一つで、クラスタ管理用のプラグインになります。
<code>head</code>プラグインや<code>HQ</code>プラグインと同様です。</p>

<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20140405/kopf.jpg" />
    </div>
    <a href="/images/entries/20140405/kopf.jpg" itemprop="contentUrl"></a>
      <figcaption align="center"><h4>プラグインの画面</h4>
      </figcaption>
  </figure>
</div>

<p>このようにシンプルな画面で、スッキリとしています。
緑を基調にした画面構成はElasticsearchの緑色を意識してるんでしょうか？</p>
<p>上記の画像に簡単なコメントを入れてあります。</p>
<h3 id="メニュー">メニュー</h3>
<ul>
<li>KOPF：KOPF自体の設定（接続先とリフレッシュインターバルの変更）</li>
<li>cluster：クラスタ管理、情報（デフォルト表示画面）</li>
<li>rest：RESTリクエスト送信、結果表示画面</li>
<li>aliases：エイリアス管理</li>
<li>analysis：<code>analysis API</code></li>
<li>percolator：パーコレータ管理</li>
<li>warmup：ウォームアップクエリ管理</li>
</ul>
<p>上記のようなメニューです。各メニューについては、今後のブログで少しずつ紹介しようかと。
このメニューの色が、クラスタの状態も表しています。ステータスがYELLOWなら黄色、REDなら赤色に変わります。</p>
<h3 id="インデックス">インデックス</h3>
<p>インデックスは列として表示されます。先ほどの画像では、2つのインデックスが表示されている状態です。
インデックス毎に、シャードも表示されます。これは、各ノードがどのシャードを保持しているかという情報です。
色の濃いシャードがプライマリでしょう。
インデックス名やシャードの箱はクリックできるようになっていて、それぞれの情報がJSONで表示されます。
その他にもドキュメント数、サイズなども表示されます。
インデックスの各種操作（closeやdeleteなど）もここからメニューが表示されます。（これも次回詳しく）</p>
<h3 id="ノード">ノード</h3>
<p>ノードの情報が行として表示されます。ノードが増えると下に追加されていきます。
<code>node1</code>というのが、ノード名です。（ヒーローの名前とかが出てくるやつです。）</p>
<p>その他に、IPアドレス、ポート番号、負荷、ヒープサイズなども表示されています。
電源ボタンはノードのシャットダウンを行うためのボタンです。（確認用のダイアログが表示される）</p>
<h3 id="その他">その他</h3>
<p>その他に、クラスタの概要として、ノード数、インデックス数、シャード数、ドキュメント数なども表示されます。
インデックスの作成などは、アイコンから操作が可能です。
大規模なクラスタを管理している場合、検索ボックスを利用することで、インデックス名やノード名による絞込もできるようになっています。</p>
<h2 id="感想">感想</h2>
<p>シンプルな構成の画面で、個人的には<code>head</code>よりも好きな画面です。
<code>HQ</code>よりもシャードの分散具合がわかりやすいので、今後はこのプラグインを利用していこうと考えています。</p>
<p>まずは、簡単な紹介です。今後、各画面についてもう少し説明をブログに書いていこうかと考えています。
待てない方は、触ってみてもらうのが良いかと。
もちろん、続きを書いてもらってもいいですよ！！</p>
</content:encoded>
    </item>
    
    <item>
      <title>ElasticSearch Server日本語版（電子版も）が発売されました</title>
      <link>https://blog.johtani.info/blog/2014/03/25/release-elasticsearch-server-ja-ebook/</link>
      <pubDate>Tue, 25 Mar 2014 13:43:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/03/25/release-elasticsearch-server-ja-ebook/</guid>
      <description>先日、「ElasticSearch Serverを翻訳しました」という記事を書きました。 この中で電子版も出ますよと書いていましたが、電子版も発</description>
      <content:encoded><p>先日、「<a href="http://blog.johtani.info/blog/2014/03/03/release-elasticsearch-server-japanese-edition/">ElasticSearch Serverを翻訳しました</a>」という記事を書きました。</p>
<p>この中で電子版も出ますよと書いていましたが、電子版も発売されたので、再告知も兼ねてブログを書いています。</p>
<p>なお、最近よく「ElasticsearchのSは小文字」とツイートしていますが、本書は原著のタイトルが「ElasticSearch Server」となっているため、Sは大文字になっています。原著が出版された時期にはまだSが小文字に統一されていなかったためです。</p>

<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" style="max-width:300">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20140325/ess.jpg" />
    </div>
    <a href="/images/entries/20140325/ess.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<!-- more -->
<p>紙の書籍はすでに書店に並んでいたり、Amazonでも発送されているようです。</p>
<p>私自身が電子書籍が場所を取らなくて好きというのもあり、電子版も出版していただけるようにお願いしていました。</p>
<p>電子版についてはAmazonでKindle版、達人出版会からEPUBとPDFが購入可能です。</p>
<ul>
<li><a href="http://tatsu-zine.com/books/elasticsearch-server">達人出版会のElasitcSearch Serverのページ</a></li>
<li><a href="http://www.amazon.co.jp/gp/product/B00J4KDYZU/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=B00J4KDYZU&linkCode=as2&tag=johtani-22">AmazonのKindle版ページ</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=johtani-22&l=as2&o=9&a=B00J4KDYZU" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>
<p>こちらのリンク（Amazonはアフィリンク）を参考にしていただければと。</p>
<p>書籍の写真入りツイートしたら、原著者の方からレスを頂きました。</p>
<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/johtani">@johtani</a> Thanks for the great work out there :)</p>&mdash; Rafał Kuć (@kucrafal) <a href="https://twitter.com/kucrafal/statuses/447668482587779072">2014, 3月 23</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>また、原著者のサイトでも紹介してもらいました（結構うれしい）。
私が窓口をやっていた関係で、私の名前しか入っていませんが。。。
編集者と翻訳者の方々のお陰で良い本が出版できたと思っています。</p>
<blockquote class="twitter-tweet" lang="ja"><p>Thanks for sharing! / ElasticSearch Server book in Japanese | ElasticSearch Server Book Blog <a href="http://t.co/fhCP1vVBd3">http://t.co/fhCP1vVBd3</a></p>&mdash; Jun Ohtani (@johtani) <a href="https://twitter.com/johtani/statuses/448098766457815040">2014, 3月 24</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>ということで、Elasticsearchの導入の手助けになればと。
感想（賛否問わず）など、あればコメント、ツイート、ブログなど書いていただければうれしいです。
（その際に、連絡してもらえるとさらにうれしいです）</p>
</content:encoded>
    </item>
    
    <item>
      <title>GOTO Night elasticsearchに参加しました</title>
      <link>https://blog.johtani.info/blog/2014/03/18/attend-goto-night-elasticsearch/</link>
      <pubDate>Tue, 18 Mar 2014 23:11:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/03/18/attend-goto-night-elasticsearch/</guid>
      <description>GOTO Night elasticsearchに参加しました。 初の海外の勉強会です（海外自体が初だし）。 ベルリンにあるWoogaという会社で開催された勉強会</description>
      <content:encoded><p><a href="https://secure.trifork.com/berlin-2014/freeevent/index.jsp?eventOID=6151">GOTO Night elasticsearch</a>に参加しました。
初の海外の勉強会です（海外自体が初だし）。</p>
<p>ベルリンにあるWoogaという会社で開催された勉強会です。</p>

<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" style="max-width:300">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20140318/goto_night_elasticsearch.jpg" />
    </div>
    <a href="/images/entries/20140318/goto_night_elasticsearch.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<!-- more  -->
<blockquote class="twitter-tweet" lang="ja"><p>Full house at the <a href="https://twitter.com/search?q=%23gotonight&amp;src=hash">#gotonight</a> about <a href="https://twitter.com/elasticsearch">@elasticsearch</a> in the auditorium of <a href="https://twitter.com/wooga">@wooga</a> <a href="http://t.co/r2Vx2aMcEn">pic.twitter.com/r2Vx2aMcEn</a></p>&mdash; GOTO Berlin (@GOTOber) <a href="https://twitter.com/GOTOber/statuses/445987339924684801">2014, 3月 18</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>会場はこんな感じで、とってもおしゃれです。（なんか、写ってますね、最前列にｗ）
ベルリンの古い建物をリノベーションしたオフィスみたいで、そこにこういったひな壇を用意して発表するスペースにしているみたいです。</p>
<p>内容としては、Elasticsearch1.0の新機能の話として、<code>snapshot/restore</code>、<code>cat</code>、<code>aggregation</code>などの話題でした。簡単にどういったものかの説明です。</p>
<p>一人目の発表が終わったら、ブレイクタイムとして上のフロアに用意されている軽食＋ドリンクで軽く交流の時間が用意されていました。
ベーグルなどのサンドイッチとハイネケンやクラブマテ？と呼ばれるチープなレッドブルとかが飲めました。</p>
<p>ちょっと食べて談笑したあとに、次はLogstashとKibanaのお話でした。Logstashってどんなもの？という話がメインで、Kibanaは簡単な紹介という感じでしょうか。最後に、ライブデモがありました。
Kibanaを使ったライブデモはインパクトがあるなというのが感想です。
フィールド名の補完をしてくれたりと便利な機能が操作をしているところでわかるので。</p>
<p>Youtubeなどでも見てても思っていた感想ですが、こちらの勉強会は質問が結構出てきます。
今日参加した勉強会も質疑応答が結構されてました。</p>
<p>elasticsearchの方たちと少しだけ話しをできたので、かなり興奮気味でブログを書いています（ミーハー）。</p>
<p>ただ、やっぱり英語のヒアリングがまだまだだなぁとも実感出来ました。
場数踏むしかないと思うので少しずつ耳にしてなれるしかないかなぁと。
はぁ、ちゃんと高校とか大学の頃に単語を覚えとくんだったと軽く後悔。</p>
<p>こんなツイートもしてもらって、興奮気味です。明日早起きしないといけないので寝ないといけないのにｗ</p>
<blockquote class="twitter-tweet" lang="ja"><p>Meeting <a href="https://twitter.com/johtani">@johtani</a> finally in <a href="https://twitter.com/search?q=%23berlin&amp;src=hash">#berlin</a> watching <a href="https://twitter.com/spinscale">@spinscale</a> talking about <a href="https://twitter.com/search?q=%23elasticsearch&amp;src=hash">#elasticsearch</a></p>&mdash; Simon Willnauer (@s1m0nw) <a href="https://twitter.com/s1m0nw/statuses/446001849750269952">2014, 3月 18</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
</content:encoded>
    </item>
    
    <item>
      <title>いつも入れているElasticsearchのプラグイン</title>
      <link>https://blog.johtani.info/blog/2014/03/11/es-plugin-installed-to-my-env/</link>
      <pubDate>Tue, 11 Mar 2014 14:23:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/03/11/es-plugin-installed-to-my-env/</guid>
      <description>elasticsearchに、このへん入れるときっと幸せになれるはず・たぶん。&amp;#10;elasticsearch/elasticsearc</description>
      <content:encoded><blockquote class="twitter-tweet" lang="ja"><p>elasticsearchに、このへん入れるときっと幸せになれるはず・たぶん。&#10;elasticsearch/elasticsearch-analysis-kuromoji/1.6.0&#10;oyrusso/elasticsearch-HQ&#10;mobz/elasticsearch-head</p>&mdash; toshi_miura (@toshi_miura) <a href="https://twitter.com/toshi_miura/statuses/441230280041304066">2014, 3月 5</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>こんなツイートを見かけたので、普段入れてるプラグインを簡単に紹介してみようかと。</p>
<!-- more -->
<p>ローカルの環境に普段入れているプラグインの紹介です。
ちゃんとクラスタを管理しているというよりは、最新版の動作などを確認するための環境になります。なので、ちょっと視点が異なるかもしれませんが参考になればと。</p>
<h2 id="elasticsearch-analysis-kuromoji">elasticsearch-analysis-kuromoji</h2>
<p>URL : <a href="https://github.com/elasticsearch/elasticsearch-analysis-kuromoji">elasticsearch-analysis-kuromoji</a></p>
<p>Kuromojiという日本語形態素解析のTokenizerなどを使えるようにするためのプラグインです。
今度、発売される<a href="http://www.amazon.co.jp/dp/4048662023?tag=johtani-22&amp;camp=243&amp;creative=1615&amp;linkCode=as1&amp;creativeASIN=4048662023&amp;adid=072DC31D3GTPZCBQ6TYW&amp;&amp;ref-refURL=http%3A%2F%2Fblog.johtani.info%2Fblog%2F2014%2F03%2F03%2Frelease-elasticsearch-server-japanese-edition%2F">「ElasticSearch Server」日本語版</a>には付録として、利用方法を執筆しました。参考にしていただければと。
READMEにもサンプルは掲載されてるので、こちらを参考にするのもありですが。</p>
<h2 id="elasticsearch-extended-analyze">elasticsearch-extended-analyze</h2>
<p>URL : <a href="https://github.com/johtani/elasticsearch-extended-analyze">elasticsearch-extended-analyze</a></p>
<p>私が開発しているプラグインです。
Elasticsearchには<code>analyze</code>というAPIが用意されています。
文章を渡すと指定した<code>analyzer</code>などでどのような単語に区切られるかがわかるAPIです。</p>
<p>ただ、<code>analyzer</code>の内部では<code>char filter</code>、<code>tokenizer</code>、<code>token filter</code>という個別のパーツがそれぞれ入力された文字列に対して処理を実施します。
この過程が<code>analyze</code> APIではわかりません。
それをわかるようにしてみたのが<code>elasticsearch-extended-analyze</code>プラグインになります。</p>
<p>詳細については<a href="http://blog.johtani.info/blog/2013/10/25/developing-es-extended-analyze-plugin/">過去の記事</a>を見ていただければと。
画面があると便利だよなぁと思いつつ、作ってない。。。</p>
<h2 id="polyfractalelasticsearch-inquisitor">polyfractal/elasticsearch-inquisitor</h2>
<p>URL : <a href="https://github.com/polyfractal/elasticsearch-inquisitor">elasticsearch-inquisitor</a></p>
<p>クエリのデバッグとかに便利なプラグイン。</p>
<p>こちらも詳細は<a href="http://blog.johtani.info/blog/2013/09/23/intro-elasticsearch-inquisitor/">過去の記事</a>を見ていただければと。</p>
<h2 id="mobzelasticsearch-head">mobz/elasticsearch-head</h2>
<p>URL : <a href="http://mobz.github.io/elasticsearch-head/">elasticsearch-head</a></p>
<p>クラスタ管理に便利なプラグインです。クラスタに存在するノードに対してインデックスのデータ（シャード）がどこに配置されているかなどが一目瞭然になる便利なプラグインです。
プライマリシャードやレプリカなどもわかります。
インデックスの削除もできるし、クエリを投げることもできるし、全部入りな感じのプラグインです。</p>
<p>私個人は、シャードの配置を見るのに主に利用しています。クエリを投げたりインデックスを消したりするのには殆ど使っていません。</p>
<h2 id="royrussoelasticsearch-hq">royrusso/elasticsearch-HQ</h2>
<p>URL : <a href="https://github.com/royrusso/elasticsearch-HQ">elasticsearch-HQ</a></p>
<p>これも管理系のプラグインです。こっちのほうが個人的にスッキリしていて好きなプラグインです。
インデックスの管理やノードの停止などはこちらを主に使用しています。
あくまでもローカルの簡易クラスタを管理する目的というのもあります。</p>
<h2 id="polyfractalelasticsearch-segmentspy">polyfractal/elasticsearch-segmentspy</h2>
<p>URL : <a href="https://github.com/polyfractal/elasticsearch-segmentspy">elasticsearch-segmentspy</a></p>
<p>こちらはモニタリングでしょうか。
ElasticSearch Serverで紹介されていたのが主な理由で、入れてますがあんまり見てないかも。
インデックスのSegment単位の情報が見ることが可能です。
あと、ちょっと更新されてない感じがしますね。</p>
<h2 id="elasticsearchmarvel">elasticsearch/marvel</h2>
<p>Elasticsearch社から提供されている、モニタリングなどに使えるプラグインです。
開発環境では無償提供という感じです。
渡しの場合、モニタリング目的ではなく、senseと呼ばれるクエリの補完をしてくれるツールの目的のために使用しています。
モニタリング部分を停止する方法とかないかなぁ。</p>
<p>詳細については<a href="http://blog.johtani.info/blog/2014/01/29/simple-introduction-and-first-impression-es-marvel/">過去の記事</a>を参考にしていただければと。</p>
<h2 id="まとめ">まとめ？</h2>
<p>ということで、簡単にローカルに入っているプラグインの紹介でした。
他にもいっぱいあるので、おすすめがあれば、教えてもらえると助かります。</p>
</content:encoded>
    </item>
    
    <item>
      <title>ElasticSearch Serverを翻訳しました</title>
      <link>https://blog.johtani.info/blog/2014/03/03/release-elasticsearch-server-japanese-edition/</link>
      <pubDate>Mon, 03 Mar 2014 17:55:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/03/03/release-elasticsearch-server-japanese-edition/</guid>
      <description>第3回Elasticsearch勉強会で、軽く触れていましたが、ElasticSearch Server日本語版が発売されます。 ツイートなども</description>
      <content:encoded><p>第3回Elasticsearch勉強会で、軽く触れていましたが、<a href="http://www.amazon.co.jp/dp/4048662023?tag=johtani-22&amp;camp=243&amp;creative=1615&amp;linkCode=as1&amp;creativeASIN=4048662023&amp;adid=1X58V7098G3T1N2ZTW61&amp;&amp;ref-refURL=http%3A%2F%2Fblog.johtani.info%2F">ElasticSearch Server日本語版</a>が発売されます。
ツイートなどもちらほらとして頂いているみたいで嬉しい限りです。</p>
<p>本書は、私自身、初の翻訳本となります。</p>
<p><strong>なお、ElasticSearchはAWSのサービスではなく、全文検索・解析サーバのOSSです</strong></p>
<!-- more -->
<h2 id="内容概要">内容、概要</h2>
<p>PacktPublishingから発売されている<a href="http://www.packtpub.com/elasticsearch-server-for-fast-scalable-flexible-search-solution/book">ElasticSearch Server</a>の日本語版となります。
以下の点が、原著とは異なる点になっています。</p>
<ul>
<li>0.90.xに対応（原著は0.20）</li>
<li>Kibana、Kuromojiに関して追記</li>
<li>もちろん日本語</li>
</ul>
<p>残念ながら、つい最近、Elasticsearchについては1.0がリリースされました。
1.0で追加された機能（SnapshotやRestore、Aggregatorなど）については触れていませんが、Elasticsearchの機能を網羅的にカバーした良書となっています。
どんな機能があるのか、どんなプラグインがあるのか、どういったことに使えるのかなど、幅広くまとめられた本になっていますので、
Elasticsearchに興味がある方はぜひ読んでいただければと思います。</p>
<p>また、現段階では予定ですが電子版の出版も予定されています。電子版が気になる方は、少しお待ちいただければと。</p>
<h4 id="elasticsearchelasticsearch">ElasticSearch？Elasticsearch？</h4>
<p>1.0.0がリリースされた現在は、Elasticsearch（SearchのSは小文字）が正式な名称となっています。
ただ、原著が発売された当初（2013年2月時点）では、まだSは小文字と大文字が混在した状況でした（コミットログなどを見るとわかります。）
このため、日本語版でもElasticSearchという表記に統一してあります。</p>
<h2 id="翻訳に関して">翻訳に関して</h2>
<p>初の翻訳書ということもあり、大変でした。英語に精通しているわけではないので（むしろ苦手）。。。
他の翻訳者の方々には大変助けていただきましたし、勉強になりました。
また、監修社である<a href="http://recruit-tech.co.jp">リクルートテクノロジーズ</a>にも色々とサポートしていただき、感謝の限りです。
（Elasticsearch勉強会の開場提供にも協力して頂いています。）</p>
<p>わかりにくい日本語となっている部分などありましたら、ご指摘いただければ今後の参考にさせていただきます。
英語やElasticsearchについて、学ぶという目的もあって、本書の翻訳を買って出たのが本音です。</p>
<h3 id="翻訳作業について">翻訳作業について</h3>
<p>Githubのリポジトリを編集の方に用意してもらい、翻訳原稿を管理、校正していきました。
Github自体をあまり触っていなかったので、作業をしながらGithubも覚えられ一石二鳥でした。
Issueやプルリクエストによる校正、チェックも便利ですね。
他の原稿を書くようなことがあれば、またこの経験を活かしていきたいなと。
（翻訳の進め方や原稿のチェックなどについてはまた後日何か書こうかと。）</p>
<h3 id="原著について">原著について</h3>
<p>原著のサイトが用意されています。
<a href="http://elasticsearchserverbook.com/elasticsearch-server-errata/">http://elasticsearchserverbook.com/elasticsearch-server-errata/</a></p>
<p>原著を翻訳するにあたって見つけた、誤植などを報告し、掲載して頂いています。
原著をお持ちの場合はこちらも参考にしていただければと思います。</p>
<h3 id="ご購入はこちらから">ご購入はこちらから</h3>
<p>ということで、簡単ですが書籍の紹介（というより宣伝！？）でした。
Elasticsearchに関する何かしらの助けになる書籍であれば嬉しい限りです。</p>
<p>「ElasticSearch Server日本語版」をよろしくお願いします。
（もちろん、購入は下のリンクからですよね！）</p>
<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=johtani-22&o=9&p=8&l=as1&asins=4048662023&nou=1&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</content:encoded>
    </item>
    
    <item>
      <title>Nested Objectのフィールドの奇妙な動作</title>
      <link>https://blog.johtani.info/blog/2014/02/24/strange-behavior-of-field-in-nested-obj/</link>
      <pubDate>Mon, 24 Feb 2014 17:52:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/02/24/strange-behavior-of-field-in-nested-obj/</guid>
      <description>今年初の「突撃！隣のElasticsearch」ということで、Wantedlyさんにおじゃましました。 ※写真を自分でも撮ったのですが、画像が</description>
      <content:encoded><p>今年初の「突撃！隣のElasticsearch」ということで、Wantedlyさんにおじゃましました。</p>

<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" style="max-width:300">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20140224/wantedly.jpg" />
    </div>
    <a href="/images/entries/20140224/wantedly.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<p>※写真を自分でも撮ったのですが、画像が壊れてたので、一緒に行ったペンギン先生の写真を拝借しました。</p>
<p>第3回のElasticsearch勉強会を開催中にES使ってるってツイートを見つけたので、アタックかけて遊びに行きました。
交渉に快諾いただきありがとうございました！</p>
<!-- more -->
<p>WantedlyさんがどのようにElasticsearchを使用されているかは<strike><strong>きっと、ブログを書いてくれる</strong>と思うので期待しておくとして、</strike>書いてくれました！！ <a href="http://engineer.wantedly.com/2014/02/25/elasticsearch-at-wantedly-1.html">「実践！Elasticsearch」</a>
そこで、<code>nested</code>でハイライトがなんかうまくいかないって話があったので、ちょっと調べてみました。
<em>（※まだ、調査中です）</em></p>
<h2 id="前提条件">前提条件</h2>
<p>再現する手順はgistにあります。（Senseに貼り付ければ動作します。ただし、elasticsearch-analysis-kuromojiが必要です。）https://gist.github.com/johtani/9184287</p>
<p><strong>なお、このマッピングやデータはWantedlyさんとは全く関係ありません。</strong></p>
<p><code>nested</code>フィールド内部のデータに対して、検索しハイライトしようとするとうまく動作しないという状況です。
マッピングは以下のとおり。</p>
<pre><code>  &quot;books&quot; : {
    &quot;properties&quot;: {
      &quot;book&quot; : {
        &quot;type&quot;: &quot;nested&quot;,
        &quot;properties&quot;: {
          &quot;title&quot; : { &quot;type&quot;: &quot;string&quot;, &quot;analyzer&quot;: &quot;kuromoji&quot;, &quot;store&quot;: &quot;no&quot;},
          &quot;contents&quot; : {&quot;type&quot;: &quot;string&quot;, &quot;analyzer&quot;: &quot;kuromoji&quot;, &quot;store&quot;: &quot;yes&quot;}
        }
      }
    }
  }
}
</code></pre><p>このマッピングの特徴は以下のとおり。</p>
<ul>
<li><code>_source</code>は保存される（デフォルト値）</li>
<li><code>book</code>が<code>nested</code>なオブジェクト</li>
<li><code>title</code>は<code>store : no</code></li>
<li><code>contents</code>は<code>store : yes</code></li>
</ul>
<p>動作の挙動をわかりやすくするため、<code>title</code>と<code>contents</code>の<code>store</code>属性に違いを持たせてあります。</p>
<h2 id="問題点">問題点</h2>
<p><code>nested</code>クエリを使って、検索した時にハイライトが返ってきません。
次のクエリを実行するとわかります。</p>
<pre><code>
GET /bookstore/books/_search
{
  &quot;_source&quot; : [&quot;book.title&quot;,&quot;book.contents&quot;],
  &quot;fields&quot;: [
    &quot;book.title&quot;,
    &quot;book.contents&quot;
  ], 
  &quot;query&quot;: {
    &quot;nested&quot;: {
      &quot;path&quot;: &quot;book&quot;,
      &quot;query&quot;: {
        &quot;query_string&quot; : {
          &quot;query&quot; : &quot;Solr&quot;,
          &quot;fields&quot; : [&quot;book.title&quot;, &quot;book.contents&quot;]
        }
      }
    }
  },
  &quot;highlight&quot;: {
    &quot;pre_tags&quot;: [&quot;&lt;b&gt;&quot;], 
    &quot;post_tags&quot;: [&quot;&lt;/b&gt;&quot;],
    &quot;fields&quot;: {
      &quot;*&quot;: {}
    }
  }
}
</code></pre><p>結果はこちら。
ハイライトがありません。</p>
<pre><code>{
   &quot;took&quot;: 3,
   &quot;timed_out&quot;: false,
   &quot;_shards&quot;: {
      &quot;total&quot;: 5,
      &quot;successful&quot;: 5,
      &quot;failed&quot;: 0
   },
   &quot;hits&quot;: {
      &quot;total&quot;: 1,
      &quot;max_score&quot;: 0.5,
      &quot;hits&quot;: [
         {
            &quot;_index&quot;: &quot;bookstore&quot;,
            &quot;_type&quot;: &quot;books&quot;,
            &quot;_id&quot;: &quot;1&quot;,
            &quot;_score&quot;: 0.5,
            &quot;_source&quot;: {
               &quot;book&quot;: {
                  &quot;title&quot;: &quot;Apache Solr入門&quot;,
                  &quot;contents&quot;: &quot;Apache Solrについて日本語で書かれた唯一の書籍です。SolrはLuceneをコアにした検索サーバです。&quot;
               }
            }
         }
      ]
   }
}
</code></pre><p>次に、ハイライトが帰ってくるパターン。
<code>nested</code>クエリではなく、<code>_all</code>を対象としたクエリを投げます。</p>
<pre><code>{
  &quot;_source&quot; : [&quot;book.title&quot;,&quot;book.contents&quot;],
  &quot;fields&quot;: [
    &quot;book.title&quot;,
    &quot;book.contents&quot;
  ], 
  &quot;query&quot;: {
    &quot;query_string&quot; : {
      &quot;query&quot; : &quot;Solr&quot;,
      &quot;fields&quot;: [
        &quot;_all&quot;
      ]
    }
  },
  &quot;highlight&quot;: {
    &quot;pre_tags&quot;: [&quot;&lt;b&gt;&quot;], 
    &quot;post_tags&quot;: [&quot;&lt;/b&gt;&quot;], 
    &quot;fields&quot;: {
      &quot;book.title&quot; : {},
      &quot;book.contents&quot;: {}
    }
  }
}
</code></pre><p>この場合の結果は次の通り。</p>
<pre><code>{
   &quot;took&quot;: 2,
   &quot;timed_out&quot;: false,
   &quot;_shards&quot;: {
      &quot;total&quot;: 5,
      &quot;successful&quot;: 5,
      &quot;failed&quot;: 0
   },
   &quot;hits&quot;: {
      &quot;total&quot;: 1,
      &quot;max_score&quot;: 0.27063292,
      &quot;hits&quot;: [
         {
            &quot;_index&quot;: &quot;bookstore&quot;,
            &quot;_type&quot;: &quot;books&quot;,
            &quot;_id&quot;: &quot;1&quot;,
            &quot;_score&quot;: 0.27063292,
            &quot;_source&quot;: {
               &quot;book&quot;: {
                  &quot;title&quot;: &quot;Apache Solr入門&quot;,
                  &quot;contents&quot;: &quot;Apache Solrについて日本語で書かれた唯一の書籍です。SolrはLuceneをコアにした検索サーバです。&quot;
               }
            },
            &quot;highlight&quot;: {
               &quot;book.title&quot;: [
                  &quot;Apache &lt;b&gt;Solr&lt;/b&gt;入門&quot;
               ]
            }
         }
      ]
   }
}
</code></pre><p>ハイライトが返ってきています。</p>
<h2 id="考察原因は未特定">考察（原因は未特定）</h2>
<p>残念ながら、まだ調査してません。
まずは、現象が理解できたというだけです。
問題点が実は２つありそうです。</p>
<h3 id="問題点１nestedクエリの場合にハイライトされない">問題点１：<code>nested</code>クエリの場合に、ハイライトされない。</h3>
<p><code>nested</code>クエリではハイライトが動作していないようです。
想像ですが、検索に利用されたクエリで指定されているフィールドをハイライタ（ハイライトを実行するモジュール）が認識できてないのではないかと。
なぜ認識できていないのかという点を調査する必要がありそうです。</p>
<h4 id="考察試してみたパターン">考察（試してみたパターン）</h4>
<p><code>nested</code>ではないクエリで、ハイライトが動作しているのですが、<code>      &quot;book.title&quot; : {&quot;require_field_match&quot; : true},</code>にした場合は、ハイライトが返ってこないです。
このオプションは、検索対象のフィールドでマッチした文字列だけがハイライトされるオプションになります。
したがって、<code>book.title</code>フィールドに対する検索で<code>Solr</code>という文字を検索していないことになります。
<code>_all</code>に対するクエリであるためです。
このため、例えば、<code>title</code>だけを検索対象にしたのに、<code>contents</code>に<code>Solr</code>という文字が入っていてもハイライトされてしまうという状況が発生します。</p>
<h3 id="問題点２-store--yesのデータがハイライトできない">問題点２ <code>store : yes</code>のデータがハイライトできない。</h3>
<p>GithubにIssueをあげました。https://github.com/elasticsearch/elasticsearch/issues/5245 （2014/02/25追記）</p>
<p><code>nested</code>オブジェクトにあるデータのうち、<code>store : no</code>のものだけがハイライト結果として返ってきました。</p>
<h4 id="考察">考察</h4>
<p>なぜ、<code>store : yes</code>のデータがハイライトされないかを調べるために、<code>fields</code>パラメータをリクエストに追加してみました。</p>
<pre><code>{
  &quot;_source&quot; : [&quot;book.title&quot;,&quot;book.contents&quot;],
  &quot;fields&quot;: [
    &quot;book.title&quot;,
    &quot;book.contents&quot;
  ], 
...
}
</code></pre><p>すると、<code>fields</code>の戻り値は次のとおりです。</p>
<pre><code>...
            &quot;fields&quot;: {
               &quot;book.title&quot;: [
                  &quot;Apache Solr入門&quot;
               ]
            },
...
</code></pre><p>このことから、<code>store : no</code>のデータの場合、<code>_source</code>から値を取得して返却しているというのがわかります。
ハイライトがされない原因も、<code>fields</code>で値が取れていないのも同じ原因であると思われます。
なぜなら、ハイライトは、保存された文字列を内部で取り出し利用して、ハイライトタグを埋め込むという動作をするためです。</p>
<h2 id="参考">参考？</h2>
<p>これらの問題点についてですが、次のIssueが関係あるかもしれません。</p>
<p><a href="https://github.com/elasticsearch/elasticsearch/issues/3022">Return matching nested inner objects per hit #3022</a></p>
<h2 id="今後">今後？</h2>
<p>残念ながら、現時点では、問題点がどんなものかというのを理解しただけとなります。
デバッグしたりソースを追っかけたりして何が問題なのかを調べて行ってみようかなぁと。</p>
<p>なにか、気づいたことなどあればコメントしてもらえると助かります。</p>
</content:encoded>
    </item>
    
    <item>
      <title>第3回elasticsearch勉強会を開催しました！ #elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2014/02/08/hold-3rd-elasticsaerch-meetup-in-tokyo/</link>
      <pubDate>Sat, 08 Feb 2014 00:42:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/02/08/hold-3rd-elasticsaerch-meetup-in-tokyo/</guid>
      <description>今回はたまたま日本にいたElasticsearchの人をスペシャルゲストに呼べたので、大満足ですｗ 英語の通訳とかちゃんと勉強しないとなぁ。。</description>
      <content:encoded><p>今回はたまたま日本にいたElasticsearchの人をスペシャルゲストに呼べたので、大満足ですｗ
英語の通訳とかちゃんと勉強しないとなぁ。。。</p>
<p>とりあえず、てきとーなメモですが、残しておきます。
参加者数は130人＋スタッフ＋リクルートテクノロジーズ社内の人。という感じでした。アンケート集計はもう少々おまちを。</p>
<!-- more -->
<p>スライドがそろったら、また、更新すると思いますが、第一報という感じで公開しておきます。
懇親会にも50名も参加していただけて、非常に楽しかったです。
話ができてない方が多数いるかもしれませんが、次回以降、声をかけていただければと。
（物覚え悪いんで、あれですが。。。）
盛り上がってきてて楽しいなぁ。
スタッフの人達の練度も上がってきてるので、すごく楽ができてます。</p>
<p>至らない点とかあれば、こちらにコメントしてもらったりしていただければと。</p>
<h2 id="geohashing-with-elasticsearch">Geohashing with Elasticsearch</h2>
<h3 id="florian-schilling-elasticsearch-inc">Florian Schilling, Elasticsearch Inc,</h3>
<p>スライド：https://speakerdeck.com/chilling/tokyo-es-study-session-iii-geohashes</p>
<ul>
<li>自己紹介
<ul>
<li>Geoのスタッフ</li>
</ul>
</li>
<li>Elsticsearchの概要
<ul>
<li>転置イデックスやREST APIなどの説明
マイクの調子が良くなくて申し訳なかったっす。。。</li>
</ul>
</li>
</ul>
<p>平賀さん、通訳ありがとう！
Solr本もよろしくお願いします！！</p>
<h2 id="awsで構築するsharding">AWSで構築するsharding</h2>
<h3 id="株式会社イプロス外山寛さんtoyama0919">株式会社イプロス　外山　寛さん　@toyama0919</h3>
<p>スライド：http://toyama0919.bitbucket.org/elasticsearch.html</p>
<ul>
<li>AWS対応の話</li>
<li>ルーティングが重要だよ。（宣伝ありがとうございますｗ）</li>
<li>type指定しないとルーティングできない。（内部でtypeも使ってハッシュ値取ってたかなぁ？）</li>
<li>苦労話とかいくつか。</li>
<li>tireはre-tire&hellip;</li>
</ul>
<h2 id="実サービスでのelasticsearch設定使用例仮">実サービスでのElasticsearch設定・使用例（仮）</h2>
<h3 id="株式会社じげん多田-雅斗さんtady_jp">株式会社じげん　多田 雅斗さん　@tady_jp</h3>
<p>スライド：https://speakerdeck.com/tadyjp/tesutoqu-dong-jian-suo-falsesusume-at-tady-jp</p>
<ul>
<li>検索とは的な話がわかりやすい。</li>
<li>全文検索のお話。ログ検索じゃないよと。</li>
<li>書籍ないですよねー（ふふふ）</li>
<li>specで検索条件記述しといて、ってのいいですよね。絶対必要だと思う</li>
</ul>
<p>Mapping変更した時にテストやり直す方法とかどうしてますか？
特にフレームワークは使ってないです。</p>
<h2 id="mysqlユーザ視点での小さく始めるelasticsearch">MySQLユーザ視点での、小さく始めるElasticsearch</h2>
<h3 id="株式会社リブセンス-吉田-健太郎さん-yoshi_ken">株式会社リブセンス 吉田 健太郎さん @yoshi_ken</h3>
<p>スライド：http://www.slideshare.net/y-ken/introducing-elasticsearch-for-mysql-users</p>
<ul>
<li>やっぱりkuromoji便利だよね</li>
<li>MySQLとかと連携したい。</li>
<li>river-pluginもいまいち安定しない</li>
<li>なので、<a href="https://github.com/y-ken/yamabiko">Yamabiko</a>作ってみました。</li>
<li>Geo検索とKuromojiの話をしてくれました。（作者とか開発者がいるってのを狙ってたのかすごいなぁ。）</li>
<li>Mappingとかはちゃんと指定したほうがいろいろいいですよ。</li>
</ul>
<h2 id="nodejsdynamodbelasticsearchで全社基盤を作った話">nodeJS+DynamoDB＋Elasticsearchで全社基盤を作った話</h2>
<h3 id="株式会社リクルートテクノロジーズ-相野谷-直樹さん-naokiainoya">株式会社リクルートテクノロジーズ 相野谷 直樹さん @naokiainoya</h3>
<p>スライド：http://www.slideshare.net/recruitcojp/elasticsearchnodejsdynamodb-7</p>
<ul>
<li>ちょっと変わった使い方のElasticsearchで面白いです。</li>
<li>Scroll/Scanについては、Solrでもない機能なので、そういう意味でもElasticsearchなのかもしれないですね。</li>
</ul>
<h2 id="参加していただいた方々のブログ">参加していただいた方々のブログ</h2>
<ul>
<li>
<p>第3回elasticsearch勉強会 [2014/02/07(Fri.)]に参加してきました - ほわいとぼーど<br>
<a href="http://a3no.hatenablog.com/entry/2014/02/09/022405">http://a3no.hatenablog.com/entry/2014/02/09/022405</a></p>
</li>
<li>
<p>第 3 回 elasticsearch 勉強会に行ってきた - ようへいの日々精進<br>
<a href="http://inokara.hateblo.jp/entry/2014/02/07/233057">http://inokara.hateblo.jp/entry/2014/02/07/233057</a></p>
</li>
<li>
<p><a href="http://www.smokeymonkey.net/2014/02/3elasticsearch.html">http://www.smokeymonkey.net/2014/02/3elasticsearch.html</a></p>
</li>
<li>
<p>第3回elasticsearch勉強会でトークしました #elasticsearchjp<br>
<a href="http://y-ken.hatenablog.com/entry/elasticsearch-meetup-vol3">http://y-ken.hatenablog.com/entry/elasticsearch-meetup-vol3</a></p>
</li>
<li>
<p>第3回elasticsearch勉強会にいってきました #elasticsearchjp<br>
<a href="http://blog.livedoor.jp/ashibuya0128/archives/52058766.html">http://blog.livedoor.jp/ashibuya0128/archives/52058766.html</a></p>
</li>
</ul>
</content:encoded>
    </item>
    
    <item>
      <title>すずけんさんのメモを元にVagrantでElasticsearchクラスタを起動してみた</title>
      <link>https://blog.johtani.info/blog/2014/02/06/es-cluster-start-using-vagrant-and-puppet/</link>
      <pubDate>Thu, 06 Feb 2014 23:09:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/02/06/es-cluster-start-using-vagrant-and-puppet/</guid>
      <description>すずけんさんがVagrant+puppet使って、VM起動してElasticsearchのクラスタを組んでる記事を書いているのを見て、試して</description>
      <content:encoded><p>すずけんさんがVagrant+puppet使って、VM起動してElasticsearchのクラスタを組んでる記事を書いているのを見て、試してみたくなりました。
ということで、VagrantとかPuppetなに？くらいの私ですが、クラスタを起動するところまで行ったので、その時のメモを残しておきます。</p>
<!-- more -->
<h2 id="元記事とか参考">元記事とか参考</h2>
<ul>
<li><a href="http://suzuken.hatenablog.jp/entry/2014/02/04/215959">Vagrant環境にpuppet moduleを利用してさくっとelasticsearchをインストールする</a></li>
<li><a href="http://suzuken.hatenablog.jp/entry/2014/02/05/232543">Vagrant環境にpuppetを利用してさくっとelasticsearchのclusterを作成する</a></li>
<li><a href="https://github.com/elasticsearch/puppet-elasticsearch">puppet-elasticsearch</a></li>
</ul>
<h2 id="なんとなくの理解">なんとなくの理解</h2>
<p>VagrantやPuppetについては、何度か勉強会で話を聞いてはいたのですが、
想像していたレベルだったので良い機会でした。
今のところの認識はこんな感じです。</p>
<h3 id="vagrant">Vagrant</h3>
<p>VMを起動したり、VM周りの設定をあれこれできるツール。
VMのネットワーク設定や、インスタンス名？などを指定できる。</p>
<h3 id="puppet">Puppet</h3>
<p>起動後のVM（VMとは限らないか。）のゲストOS側の設定周りやアプリのインストールなどを
実行できるツール。</p>
<h2 id="詰まった箇所">詰まった箇所</h2>
<p>すずけんさんのブログを元に作業をしましたが、自分がVagrantやPuppetに疎いため、以下の部分で躓いたので、備忘録のために残しておきました。</p>
<h3 id="その１puppetのファイルの場所">その１：Puppetのファイルの場所</h3>
<p><code>search01.vm.local</code>のVMを設定（というか、elasticsearchのインストール？）するときに、<code>manifests/search.app</code>と<code>roles/search/manifests/init.pp</code>ファイルが必要で作成します。</p>
<p>このファイルの配置場所は<code>/vagrant</code>配下に作成する必要がありました。
<code>ssh search01.vm.local</code>でVMにログインした場合は<code>/home/vagrant</code>にログインしており、この場所でファイルを作ってもPuppetがエラーを吐いたためです。</p>
<p><strong>と思ったのですが</strong>、あれ？これひょっとしてVagrantfileがあるところにディレクトリとファイル作ると勝手にVMにコピーしてくれるんですか？destroyして、upしたら、ファイルが勝手にコピーされてる。ひょっとして、<code>/vagrant</code>ってディレクトリはVagrantfileがあるディレクトリを共有してたりするのかな？そのうち、Vagrantについても調べてみようかな。</p>
<h3 id="その２ネットワーク周り">その２：ネットワーク周り</h3>
<pre><code>curl http://192.168.10.114:9200/
</code></pre><p>をホストOSから実行してみましたがうまく行きませんでした。。。
ネットワーク周りの設定だと思うんですが。
少なくとも「sshによるログイン」「ping」コマンドの応答は返ってきてます。</p>
<p>また、VM内でcurlコマンドを実行したらレスポンスが返ってきました。</p>
<p>なんで？ってツイートしたら各所から「iptables」という単語が飛んできて、
service止めたら大正解でした。まぁ、そうですよね。基本ですよね。。。</p>
<p>ということで、Puppetがよくわかっていませんが、ググって変更してみました。</p>
<p><code>manifests/search.app</code>に以下を追加</p>
<pre><code>include iptables
</code></pre><p><code>roles/iptables/manifests/init.pp</code></p>
<pre><code>class iptables {
  service { 'iptables':
    enable =&gt; false,
    ensure =&gt; stopped,
  }
}
</code></pre><p>iptablesを停止するmanifests？です（良くないことなんですが、よくわかってない）。</p>
<p>ということで、ローカルで1個のVM起動して、elasticsearchにアクセスできることは確認できました。</p>
<p>と、書いてるそばから、元記事が修正されてしまいましたｗ</p>
<h2 id="クラスタ編変更点">クラスタ編（変更点）</h2>
<p>クラスタを組むときに、追加でプラグインを入れたので<code>roles/search/manifests/init.pp</code>は次のようにしました。</p>
<pre><code>class search {
  class { 'elasticsearch':
    package_url =&gt; 'https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-1.0.0.RC2.noarch.rpm',
    java_install =&gt; true,
    config =&gt; {
      'cluster' =&gt; {
        'name' =&gt; 'test-es-cluster'
      },
      'network.host' =&gt; '_eth1:ipv4_',,
      'marvel.agent.exporter.es.hosts' =&gt; ['192.168.10.114:9200','192.168.10.115:9200']
    }
  }

  elasticsearch::plugin{'elasticsearch/marvel/latest':
    module_dir =&gt; 'marvel'
  }

  elasticsearch::plugin{'mobz/elasticsearch-head':
    module_dir =&gt; 'head'
  }

  elasticsearch::plugin{'royrusso/elasticsearch-HQ':
    module_dir =&gt; 'HQ'
  }

  elasticsearch::plugin{'elasticsearch/elasticsearch-analysis-kuromoji/2.0.0.RC1':
    module_dir =&gt; 'analysis-kuromoji'
  }

  elasticsearch::plugin{'info.johtani/elasticsearch-extended-analyze/1.0.0.RC1':
    module_dir =&gt; 'extended-analyze'
  }

  elasticsearch::plugin{'polyfractal/elasticsearch-inquisitor':
    module_dir =&gt; 'inquisitor'
  }
}
</code></pre><p>とりあえず、今日はクラスタ組んでMarvelやプラグインの動作確認でおしまいです。</p>
<h2 id="疑問点">疑問点</h2>
<p>いくつか疑問点が。試してみてもないんでなんとも言えませんが。気が向いたら、調べて追記するかも。</p>
<ul>
<li><code>:private_network</code>はVirtualBox内で完結する（Macから外には影響しない）ネットワークが構築される？たぶん、VagrantというよりはVM、仮想化周りの知識なんだろうけど</li>
<li>どこから再開可能？elasticsearch.ymlの設定を書き換えた場合に、最後のコマンドだけ実行するとちゃんとやりなしてくれたりするのかな？</li>
<li>VMのディスク増やすのもVagrantでできるんかな？まぁ、できると思うけど。</li>
<li><code>:forwarded_port</code>のauto_correctとかわかってない。</li>
<li>JVMをSunのJVMでかつ、7u25に変更したいのだがどうしたものか？(現時点での推奨バージョン)</li>
</ul>
<h2 id="感想">感想</h2>
<p>Vagrantって便利ですね。あれ？って思ったら、destroyして、やり直すのがすごく簡単です。
元記事があるので、なんとなくですが、構成とかどうすればいいかがわかるのは本当に助かりました。
これで、あれこれと検証する環境が簡単に構築できることがわかったので、色々と楽できるかも。ありがとうございます、すずけんさん！</p>
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch Marvelの紹介と第一印象</title>
      <link>https://blog.johtani.info/blog/2014/01/29/simple-introduction-and-first-impression-es-marvel/</link>
      <pubDate>Wed, 29 Jan 2014 17:14:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/01/29/simple-introduction-and-first-impression-es-marvel/</guid>
      <description>昨晩、Elasticsearchから初のプロダクトとなるMarvelがリリースされました。ということで、さっそく触ってみて、簡単な紹介と感想</description>
      <content:encoded><p>昨晩、Elasticsearchから初のプロダクトとなるMarvelがリリースされました。ということで、さっそく触ってみて、簡単な紹介と感想を書いてみました。</p>
<!-- more -->
<h2 id="marvelって">Marvelって？</h2>
<p>Elasticsearch社が初のプロダクトとしてリリースした、Elasticsearchクラスタモニタリングツールです。
次のような特徴があります。</p>
<ul>
<li>plugin形式で提供</li>
<li>GUIがKibana
<ul>
<li>メトリックスはElasticsearchに保存</li>
</ul>
</li>
<li>SenseがChrome以外でも使える</li>
</ul>
<p>プロダクション環境で利用する場合は有料ですが、開発用途では無料で利用できます。
現時点(2014/01/29)では、<code>0.90.9</code>以上のバージョン(1.0.0.RC1含む)で利用が可能です。</p>
<h2 id="なにができるの">なにができるの？</h2>
<p>Elasticsearchクラスタに関するメトリックスを保存、可視化できるプロダクトです。
ドキュメント数やJVMの状況、クラスタの状態など、いろいろなメトリックスが保存されます。</p>
<p>保存先は、別のElasticsearchクラスタにすることも可能です。
お試しでインストールして見る場合は、同一クラスタにサービスに利用するインデックスとMarvel用のメトリックス保存先インデックスを入れても良いです。</p>
<p>ただ、プロダクション環境では、Marvel用インデックスはあくまでもモニタリングに使用するため、サービスのクラスタへの影響を最小にしたくなります。</p>
<p>このような場合、Marvelのプラグインの設定を変更することで、メトリックス送信用のエージェントとして動作させることができます。</p>
<p>詳しくは、Marvelのドキュメントにある<a href="http://www.elasticsearch.org/guide/en/marvel/current/#_installing_a_secondary_monitoring_cluster">installing a secondary monitoring cluster</a>を御覧ください。</p>
<blockquote>
<p><del>1/29 16時時点で、上記ドキュメントのエージェントの送信先の設定に関する部分に誤記がありました。</del>
<del>おそらく、<a href="http://www.elasticsearch.org/guide/en/marvel/current/#_statistics_exporting">configuration options</a>の記述が正だと思います。</del>
もう、なおってました。(1/30朝時点)</p>
</blockquote>
<h2 id="キャプチャいろいろ">キャプチャいろいろ</h2>
<p>日本語WikipediaのデータをRiverで登録しながら各画面の動作などを見てみました。</p>
<h4 id="marvel-overview">Marvel Overview</h4>
<p>日本語WikipediaをRiverで登録してる途中。Loadが高くなってることなどがわかります。</p>

<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20140129/Marvel_Overview_indexing_wikipedia_river.jpg" />
    </div>
    <a href="/images/entries/20140129/Marvel_Overview_indexing_wikipedia_river.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<h4 id="overview-クラスタの状態が変化">Overview (クラスタの状態が変化)</h4>
<p>クラスタの状態が変化したところに、タグが付くみたいです。
ここでは、ノードの一つを停止、起動しました。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20140129/tgged_event.jpg" />
    </div>
    <a href="/images/entries/20140129/tgged_event.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<p>インデックス終了後に、クラスタを再起動してしまい、クラスタ内のシャードの再配置が実行されてしまったため、クラスタの状態がYellowになってしまうとこんな感じ。ちょっとわかりにくいです。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20140129/cluster_yellow.jpg" />
    </div>
    <a href="/images/entries/20140129/cluster_yellow.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<h4 id="sense">Sense</h4>
<p>Chromeプラグインとしてリリースされていたクエリ実行コンソールがMarvelのサイトプラグインとして提供されています。これがあるだけで、Elasticsearchへのクエリの実行が格段に効率良くなります。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20140129/Marvel_sense.jpg" />
    </div>
    <a href="/images/entries/20140129/Marvel_sense.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<h4 id="index-statistics">Index Statistics</h4>
<p>インデックスに関する情報のグラフが見れるページです。ドキュメント数の他に、容量やリクエスト数なども見れます。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20140129/Marvel_Index_Statistics.jpg" />
    </div>
    <a href="/images/entries/20140129/Marvel_Index_Statistics.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<p>インデックス終了後のグラフはこんな感じ。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20140129/after_twice_indexing_ja_wikipedia.jpg" />
    </div>
    <a href="/images/entries/20140129/after_twice_indexing_ja_wikipedia.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<p>インデックス終了後のOverviewはこんなかんじです。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20140129/after_indexing_ja_wikipedia.jpg" />
    </div>
    <a href="/images/entries/20140129/after_indexing_ja_wikipedia.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<h4 id="cluster-pulse">Cluster Pulse</h4>
<p>クラスタで発生したイベントとイベントの詳細を見ることができるページです。各種インデックスがYELLOWからGREENに変わっていっているのがmessageで分かります。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20140129/after_reboot_cluster_pulse.jpg" />
    </div>
    <a href="/images/entries/20140129/after_reboot_cluster_pulse.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<p>すべて再配置が終わったらGREENになりました。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20140129/finish_recovering_all_indices.jpg" />
    </div>
    <a href="/images/entries/20140129/finish_recovering_all_indices.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<h4 id="node-statistics">Node Statistics</h4>
<p>各ノードに関する情報を見ることができる画面です。
ノードごとにグラフの色を分けることもできます。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20140129/two_node_in_nodes_stats.jpg" />
    </div>
    <a href="/images/entries/20140129/two_node_in_nodes_stats.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<h4 id="その他">その他</h4>
<p>Marvelプラグインにブラウザから接続できなくなるとこんなメッセージが出ました。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20140129/connect_error.jpg" />
    </div>
    <a href="/images/entries/20140129/connect_error.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<p>参考までに、<a href="https://github.com/mobz/elasticsearch-head">elasticsearch-head</a>の画面も。こちらのほうが、シャードの再配置中であるのがひと目で分かります。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20140129/elasticsearch-head.jpg" />
    </div>
    <a href="/images/entries/20140129/elasticsearch-head.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<h2 id="感想">感想</h2>
<p>綺麗です。まぁ、Kibanaが綺麗ですから。
クラスタ内で発生したイベントが時系列で保存されるため、あとからどんなことが発生したのかといった原因の追求などには非常に役に立ちそうです。</p>
<p>ただ、インデックスの状態や状況（クラスタ再起動やノード追加時にshard再配置などが実行されている状況とか）はelasticsearch-headのほうがわかりやすかったです。
インデックス単位でのStatusがMarvelの画面ではわからないため、shard再配置が完了したかどうかなどのタイミングがわかりにくかったです。</p>
<p>ある程度、多くのノードを利用したクラスタを利用する場合に、モニタリングツールとして利用するのは便利なのではないでしょうか？
時系列でログやイベントが保存されるので、ノードが追加されたり外れたりといった状況があとからでも追跡可能なのが便利です。</p>
<h2 id="疑問点">疑問点</h2>
<p>インデックスの情報などは、5s毎にMarvelのインデックスに保存されているようです。ただ、GUI上では5分毎のデータしか表示されません。
どうやって変更するんだろう？</p>
<p>また、Marvelのクラスタへの接続が切れた時のデータはどうなるのか？という部分も気になります。Marvelのクラスタを更新している時や、ネットワークが遮断されてしまった場合のデータがどうなるのかという点です。</p>
<h2 id="疑問点への回答20140130追記">疑問点への回答(2014/01/30追記)</h2>
<p>疑問点に対して中の人から回答を頂いたので、追記です。</p>
<ul>
<li>Q：GUI上で5分毎のデータしか表示されないんですが？
<ul>
<li>A：ブラウザの負荷を高くしないようにするために、1つのグラフに20のプロットしてるだけです。ズームしたりすると、もっと細かなデータが見れますよ。</li>
</ul>
</li>
<li>Q：Marvelのクラスタへの接続が切れた時のデータはどうなるんだろう？
<ul>
<li>A：接続が切れた場合は、ローカルに保存されるけどデータは無視されます。接続が戻ると、戻った後のデータは記録されていきます。将来的には改善するかも。</li>
</ul>
</li>
</ul>
<p>ちなみに、昨日試してた環境が、足元Linux環境（監視対象のクラスタ）＋手元Mac環境（Marvelモニタリングデータ格納クラスタ）という環境でした。
確かに、出社してから、手元Mac環境を起動すると、データが流れてくるようになりました。
ただ、監視対象のクラスタでは、socket timeoutのログがずっと出てましたが。</p>
<h2 id="参考文献">参考文献</h2>
<ul>
<li><a href="http://www.elasticsearch.com/blog/introducing-elasticsearch-marvel-native-monitoring-deployments/">リリースブログ</a></li>
<li><a href="http://www.elasticsearch.com/marvel">プロダクトページ</a></li>
<li><a href="http://www.elasticsearch.org/guide/en/marvel/current/">ドキュメント</a></li>
</ul>
</content:encoded>
    </item>
    
    <item>
      <title>Curator: 時系列インデックスの管理(日本語訳)</title>
      <link>https://blog.johtani.info/blog/2014/01/24/curator-tending-your-time-series-indices-in-japanese/</link>
      <pubDate>Fri, 24 Jan 2014 14:48:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/01/24/curator-tending-your-time-series-indices-in-japanese/</guid>
      <description>Elasticsearchのcuratorのブログ記事を読んで、日本語でツイートしたところ、Aaron Mildensteinさんから日本語（</description>
      <content:encoded><p>Elasticsearchのcuratorの<a href="http://www.elasticsearch.org/blog/curator-tending-your-time-series-indices/">ブログ記事</a>を読んで、日本語でツイートしたところ、Aaron Mildensteinさんから日本語（ローマ字）で返信を頂きました。
せっかくなので、ブログ記事を翻訳してもいいかを尋ねたところ、快くOKを頂いたので、翻訳してみました。参考になればと。（誤訳など見つけたらコメントください。）</p>
<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/johtani">@johtani</a> Kore no hou ga ii. Nihongo de no Curator RT, arigatou gozaimasu! <a href="https://twitter.com/search?q=%23elasticsearch&amp;src=hash">#elasticsearch</a> <a href="https://twitter.com/search?q=%23curator&amp;src=hash">#curator</a> <a href="https://twitter.com/search?q=%23logstash&amp;src=hash">#logstash</a></p>&mdash; Aaron Mildenstein (@theuntergeek) <a href="https://twitter.com/theuntergeek/statuses/426009968513277952">2014, 1月 22</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<!-- more -->
<h2 id="curator-時系列インデックスの管理">curator: 時系列インデックスの管理</h2>
<p>原文：<a href="http://www.elasticsearch.org/blog/curator-tending-your-time-series-indices/">curator: tending your time-series indices</a></p>
<h2 id="背景">背景</h2>
<p>数年前、Elasticsearch、Logstash、Kibana(ELK)を管理し、ここ30日よりも古いインデックスを自動的に削除する方法を必要としていました。
APIドキュメントを読み、#logstashや#elasticsearchのIRCチャネルのコミュニティの助けを借りて、簡単なスクリプトとcronを用意するのが簡単であることを知りました。</p>
<pre><code>curl -XDELETE 'localhost:9200/logstash-2014.01.01?pretty'
</code></pre><p>もちろん、これも動作しますが、日付を生成するのがめんどくさいのでもっとエレガントな方法が欲しかったです。</p>
<h2 id="最初に">最初に</h2>
<p>pythonでスクリプトを書き始めました。特定の日数のインデックスを管理するだけのコマンドラインクリーナーを書いてコミュニティにシェアしました。他の人が、新しい機能を追加してくれました。私は、古いインデックスをoptimizeすることができる他のスクリプトも書きました。これは、シャードごとにnセグメント以上存在しないように各シャードのセグメントをマージすることです。これらのスクリプトで1つになるようにマージしたりエンハンスし、古いインデックスを管理する助けになるツールです。</p>
<h2 id="curatorの紹介">curatorの紹介</h2>
<p>Curatorで可能なインデックスオペレーション</p>
<ul>
<li>削除（日付もしくは、トータル容量による制限）</li>
<li>インデックスのクローズ(Close)</li>
<li>bloom filter cacheの無効化</li>
<li>Optimize(LuceneのforceMerge)</li>
</ul>
<h2 id="curatorのインストール">curatorのインストール</h2>
<p>この記事を書いている時点で、Curator は0.5.1がリリースされ、0.90.10に対応しています。Curatorはまた、Elasticsearchの1.0(現在はRC1)へも対応しています。各リリースへの互換性の保証のためのテストも行っています。</p>
<p>現時点では、gitリポジトリで配布しています。近い将来、pipによるインストール可能なパッケージにする予定です。利用することを恐れないでください。もし、pythonとpipがあなたのマシンにインストールされていれば、次のようにインストールは簡単です。</p>
<pre><code>git clone https://github.com/elasticsearch/curator.git
pip install -r requirements.txt
</code></pre><p>インストール後の確認は次のコマンドです。</p>
<pre><code>$ ./curator.py -v
curator.py 0.5.1
</code></pre><h3 id="利用方法とサンプル">利用方法とサンプル</h3>
<p>サンプルを示す前に、<a href="#arguments">オプションを見ておくとよいでしょう</a>。このリストは長いですが（この記事の最後に含まれています）、どのようなことがコントロールできるかを説明しています。デフォルトがどうなっているかに注意してください。もし、デフォルト値で良い場合は、フラグを指定する必要はありません。</p>
<p>では、簡単なサンプルを見ながら、CuratorがELKスタックをどうやって管理するかを見て行きましょう。</p>
<h3 id="削除delete">削除(delete)</h3>
<p>90日以上のインデックスを保存したくないとしましょう。コマンドは次のようになります。</p>
<pre><code>$ curator.py --host my-elasticsearch -d 90
</code></pre><p><code>-d</code>で日数を指定しているだけです。簡単でしょ？</p>
<h4 id="容量による削除delete-by-space">容量による削除(delete by space)</h4>
<p>これは、指定したギガバイト数を超えたインデックスを場合に(最も古いものから)削除を行う特殊なケースです。</p>
<pre><code>$ curator.py --host my-elasticsearch -C space -g 10024
</code></pre><p><code>-C</code>でspaceによるcurationであること、<code>-g</code>でギガバイト数(10024、10TB)であることを指定しているのがわかります。<code>-g</code>は1.5や0.5という数値を指定できます。</p>
<p><em>その他のCuratorオプションは<code>space</code>による削除と組み合わせて使用できないことに注意してください。</em></p>
<h3 id="クローズclose">クローズ(close)</h3>
<p><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-open-close.html">Open/Close Index API</a>により、インデックスをクローズすることができます。</p>
<blockquote>
<p>open/close index APIを利用すると、インデックスをクローズしたり、あとでオープンしたりすることができます。クローズされたインデックスはクラスタのオーバヘッドにほとんどならず(メタデータの管理を除く)、読み書き操作の妨げにもなりません。クローズされたインデックスは、リカバリプロセス時に、オープンされます。</p>
</blockquote>
<p>インデックスをクローズすることは、存在はするが検索できないという意味です。何が便利なのでしょう？</p>
<p>90日のインデックスを保存する義務があるが、検索は過去30日のインデックスを対象にする以外は稀であるような場合を想像してください。このような状況で、価値のあるリソース(ヒープスペースなど)を節約するためにインデックスをクローズすることができます。これは、クラスタに検索やインデキシングのためのメモリを与えることができることを意味します。そして、もし、クローズしたインデックスのデータが必要になったら、APIを呼び出してインデックスをオープンすれば検索できます。</p>
<p><em>このような場合、今オープンしているインデックスが再び、クローズされないように、一時的にCuratorのスケジュール実行をオフにしておくのが懸命です。</em></p>
<pre><code>$ curator.py --host my-elasticsearch -c 30 -d 90
</code></pre><p>先ほど説明した例の実行方法です。これは、30日よりも古いインデックスはクローズし、90日より古いインデックスを削除します。本当に簡単でしょ？</p>
<h3 id="bloom-filterの無効化">bloom filterの無効化</h3>
<p><a href="https://github.com/elasticsearch/elasticsearch/issues/4525">これは、0.90.9以降のバージョンで利用可能な機能です。(リンク先はIssue #4525)</a></p>
<p>心配しないでください。このスクリプトは操作を行う前に、elasticsearchが利用可能なバージョンであるかをチェックします。</p>
<p>bloom filterとは何でしょう？なぜ、無効化したくなるのでしょう？</p>
<p>bloom filterはインデキシング操作を高速化するためにリソースを割り当てられます。時系列データで、インデキシングしている間もこれは有用です。インデックスは2日後には、日付が変わると新しいデータはおそらくインデックスされません。そのインデックスにはもはや必要のないリソースをbloom filterはまだ持っています。Curatorはこれらのリソースを開放することができます！</p>
<pre><code>$ curator.py --host my-elasticsearch -b 2 -c 30 -d 90
</code></pre><p>これで、bloom filterのリソースは少なくとも2日(1にもできます)よりも古いインデックスについては利用せず、30日より古いインデックスはクローズし、90より古いインデックスは削除します。</p>
<h3 id="optimizeというよりもforcemerge">optimizeというよりもforcemerge</h3>
<p>コマンドの説明をする前に、<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-optimize.html">Elasticsearch APIのoptimize</a>を見ることは、生きているインデックスや&quot;cold&quot;インデックス(インデキシングがアクティブではないという意味)に実行する必要があるということを理解するために重要です。実際、<a href="http://blog.trifork.com/2011/11/21/simon-says-optimize-is-bad-for-you/">optimizeはLuceneではforceMergeと名前が変えられ</a>、インデックスを改善するためにoptimizeを呼び出す必要はなくなりました。Elasticsearchのセグメントをマージすることは利点がありますが、coldインデックス全てに対してoptimizeを開始する前に、コストを理解する必要があります。</p>
<p>forceMerge操作はインデックスにある各シャードのセグメントの数を少なくします。各セグメントはオーバヘッドがあるため、セグメントが多いということは、より多くのリソースを使うという意味です。良さそうですね？リソースが少ない？</p>
<p>それは、可能ですが、merge操作を実行するには多くのディスクやネットワークI/Oが必要で、ディスクやクラスタの通常の書き込み操作に悪影響を及ぼします。もし、これが必要なら私のアドバイスを良く考えてください。(数％ほど)検索を速くし、リソースの使用量も減らすことができます。また、管理しているセグメント数が小さくなるということは、クラスタのリカバリを速くすることにもなります。1つのインデックスをoptimizeするためにはおそらく1時間以上の時間がかかります。「使用する前に目立たない場所で試してください」というクリーニングボトル(訳注：洗剤とか漂白剤かな？)の注意書きと同様に、ディスクI/Oが低い時にテストし、もし操作とリソースがあなたのクラスタのユースケースにあっているかを見てください。デフォルトでは、シャードごとに2つのセグメントにマージしますが、<code>--max_num_segments</code>フラグで変更可能です。</p>
<p>ここまでのサンプルは次のようなコマンドになります。</p>
<pre><code>$ curator.py --host my-elasticsearch -b 2 -o 2 -c 30 -d 90
</code></pre><p>これで、bloom filterは2日より古いインデックスでは向こうにし、2日より古いインデックスは&quot;optimize&quot;し、30日より古いインデックスはクローズし、90日より古いインデックスは削除されます。</p>
<h3 id="操作の順序">操作の順序</h3>
<p>スクリプトは操作が衝突するのを防ぐために次の順序で実行されます。なぜ、クローズされたインデックスはoptimizeしないのでしょう？なぜ、削除予定のインデックスはクローズされないのでしょう？</p>
<ol>
<li>Delete (by space or time)</li>
<li>Close</li>
<li>Disable bloom filters</li>
<li>Optimize</li>
</ol>
<h3 id="使用の検討">使用の検討</h3>
<p>最後の例で、3つの操作を1つのコマンドで実行していますが、それらが連続ですべて実行されるのを望んでいないかもしれません。</p>
<pre><code>$ curator.py --host my-elasticsearch -b 2 -o 2 -c 30 -d 90
</code></pre><p>これは、次の操作と同様です。</p>
<pre><code>$ curator.py --host my-elasticsearch -d 90
$ curator.py --host my-elasticsearch -c 30
$ curator.py --host my-elasticsearch -b 2
$ curator.py --host my-elasticsearch -o 2
</code></pre><p>これらのコマンドを異なる時間に実行したり、異なるその他のオプション(特に、optimize実行で<code>--timeout 3600</code>を追加したり)を指定して実行するのは簡単です。</p>
<p>また、デフォルトの<code>logstash-</code>とは異なるプレフィックスのインデックスを持っているかもしれません。</p>
<pre><code>$ curator.py --host my-elasticsearch --prefix logstash- -d 30
$ curator.py --host my-elasticsearch --prefix othername- -d 30
</code></pre><h2 id="最後に">最後に</h2>
<p>Curatorは時系列インデックスの保存ポリシーを管理するのに役立ちます。豊富な設定オプションがインデックスを管理することを簡単にします。クラスタに存在するノードの数に関係なく。<a href="https://github.com/elasticsearch/curator">https://github.com/elasticsearch/curator</a>へのフィードバックやコントリビューションをお待ちしています！</p>
<h4 id="a-namearguments参考全引数とオプション"><a name="arguments">参考(全引数とオプション)</h4>
<pre><code>$ curator.py -h
usage: curator.py [-h] [-v] [--host HOST] [--port PORT] [-t TIMEOUT]
                  [-p PREFIX] [-s SEPARATOR] [-C CURATION_STYLE]
                  [-T TIME_UNIT] [-d DELETE_OLDER] [-c CLOSE_OLDER]
                  [-b BLOOM_OLDER] [-g DISK_SPACE]
                  [--max_num_segments MAX_NUM_SEGMENTS] [-o OPTIMIZE] [-n]
                  [-D] [-l LOG_FILE]

Curator for Elasticsearch indices. Can delete (by space or time), close,
disable bloom filters and optimize (forceMerge) your indices.

optional arguments:
  -h, --help            show this help message and exit
  -v, --version         show program version number and exit
  --host HOST           Elasticsearch host. Default: localhost
  --port PORT           Elasticsearch port. Default: 9200
  -t TIMEOUT, --timeout TIMEOUT
                        Elasticsearch timeout. Default: 30
  -p PREFIX, --prefix PREFIX
                        Prefix for the indices. Indices that do not have this
                        prefix are skipped. Default: logstash-
  -s SEPARATOR, --separator SEPARATOR
                        Time unit separator. Default: .
  -C CURATION_STYLE, --curation-style CURATION_STYLE
                        Curate indices by [time, space] Default: time
  -T TIME_UNIT, --time-unit TIME_UNIT
                        Unit of time to reckon by: [days, hours] Default: days
  -d DELETE_OLDER, --delete DELETE_OLDER
                        Delete indices older than n TIME_UNITs.
  -c CLOSE_OLDER, --close CLOSE_OLDER
                        Close indices older than n TIME_UNITs.
  -b BLOOM_OLDER, --bloom BLOOM_OLDER
                        Disable bloom filter for indices older than n
                        TIME_UNITs.
  -g DISK_SPACE, --disk-space DISK_SPACE
                        Delete indices beyond n GIGABYTES.
  --max_num_segments MAX_NUM_SEGMENTS
                        Maximum number of segments, post-optimize. Default: 2
  -o OPTIMIZE, --optimize OPTIMIZE
                        Optimize (Lucene forceMerge) indices older than n
                        TIME_UNITs. Must increase timeout to stay connected
                        throughout optimize operation, recommend no less than
                        3600.
  -n, --dry-run         If true, does not perform any changes to the
                        Elasticsearch indices.
  -D, --debug           Debug mode
  -l LOG_FILE, --logfile LOG_FILE
                        log file
</code></pre></content:encoded>
    </item>
    
    <item>
      <title>Extended-Analyze 1.0.0RC1をリリースしました</title>
      <link>https://blog.johtani.info/blog/2014/01/22/release-extended-plugin-for-1-0-0rc1/</link>
      <pubDate>Wed, 22 Jan 2014 00:16:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/01/22/release-extended-plugin-for-1-0-0rc1/</guid>
      <description>あけましておめでとうございます。今年もSolrやElasticsearchについて色々と頑張っていく所存です。 とまぁ、お決まりの挨拶はおいて</description>
      <content:encoded><p>あけましておめでとうございます。今年もSolrやElasticsearchについて色々と頑張っていく所存です。
とまぁ、お決まりの挨拶はおいておいてと。(もう、新年も22日ですが。。。)</p>
<p>Elasticsearchの1.0.0RC1がリリースされました。
ということで、私が作っている<a href="https://github.com/johtani/elasticsearch-extended-analyze">Extended-Analyzeプラグイン</a>も1.0.0RC1向けに修正してリリースしました。</p>
<!-- more -->
<h2 id="100rc1向けに修正したこと">1.0.0RC1向けに修正したこと</h2>
<p>コミットログを見てもらえば、いいのですが、ロジック自体は変更しなくても良かったです。</p>
<p>ただ、正式に、Elasticsearchのつづりが決定したようで、クラス名が「ElasticSearchほげほげ」から、「Elasticsearchほげほげ」と、SearchのSが小文字になりっています。
この影響で、例外クラスなどの名称を幾つか変更しました。
また、バージョン番号を1.0.0RC1とし、0.x系をElasticsearchの0.90系向けのバージョンにしていく予定です。</p>
<p>今後は、UIを追加したいと思っているので、Elasticsearchのバージョン番号とはずれてくるとは思いますが。。。</p>
<h2 id="elasticsearch-100rc1を利用してみて">Elasticsearch 1.0.0RC1を利用してみて</h2>
<p>1点だけですが。
これまでは、<code>-f</code>オプションを指定すると、デーモンではない動作で起動できていました。（デフォルトがデーモン起動）</p>
<p>これが、1.0.0から（0.90の最新もかな？詳しく見ていない）デフォルトの挙動が変更され、デーモン起動ではなくなりました。
代わりに、<code>-d</code>オプションを指定することで、デーモン起動ができるようになりました。</p>
<p>これで、手元でうっかりデーモン起動することがなくなって、ひと安心です。（他の人は困るかもしれないけど）</p>
<h2 id="ということで">ということで</h2>
<p>1.0.0RC1が出たので、少しずつ1.0系で追加されたAPIや機能について、ブログで紹介していけたらと思います。</p>
<p>こんなこと調べてよ？、これわかんないんだけど？などありましたら、コメントいただければと。
気が向いたら記事を書くので。</p>
<p>あと、<a href="https://github.com/johtani/elasticsearch-extended-analyze">Extended-Analyzeプラグイン</a>の感想などもお待ちしています！</p>
<p>今年もよろしくお願いします！</p>
</content:encoded>
    </item>
    
    <item>
      <title>Elasticsearch 0.90.8がリリースされました＆注意点（2013/12/20追記）</title>
      <link>https://blog.johtani.info/blog/2013/12/20/release-elasticsearch-0-90-8/</link>
      <pubDate>Fri, 20 Dec 2013 16:24:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/12/20/release-elasticsearch-0-90-8/</guid>
      <description>昨夜、Elasticsearchの0.90.8がリリースされました。 リリースされた内容などについては、本家のブログ「0.90.8 releas</description>
      <content:encoded><p>昨夜、Elasticsearchの0.90.8がリリースされました。</p>
<p>リリースされた内容などについては、本家のブログ「<a href="http://www.elasticsearch.org/blog/0-90-8-released/">0.90.8 released</a>」をご覧いただくこととして。
1点注意したほうが良い点があります。</p>
<!-- more -->
<p><a href="https://github.com/elasticsearch/elasticsearch-analysis-kuromoji">elasticsearch-analysis-kuromoji</a>を利用している場合は、0.90.8に対応したバージョンがリリースされるのを待つ必要があります。</p>
<p>elasticsearch 0.90.8はLuceneのバージョンが4.6.0に変更されています。
Lucene 4.6.0では、TokenStreamというTokenizerのI/Fに変更があり、Tokenizerの実装を変更する必要があります。</p>
<p>現時点（2013年12月19日現在）のelasticsearch-analysis-kuromojiの1.6.0にはlucene-analyzers-kuromoji-4.5.1.jarが含まれており、この部分でI/Fが異なるためエラーが発生してしまいます。
プラグインをインストールする時点ではエラーは発生せず、実際にKuromojiのTokenizerやAnalyzerを利用するタイミングでエラーが出ます。
以下、0.90.8にanalysis-kuromojiの1.6.0をインストールした状態で<code>_analyze</code>を実行した時のエラー。</p>
<pre><code>curl -XPOST 'localhost:9200/_analyze?tokenizer=kuromoji_tokenizer&amp;filters=kuromoji_baseform&amp;pretty' -d '寿司が美味しかった'
{
  &quot;error&quot; : &quot;IllegalStateException[TokenStream contract violation: reset()/close() call missing, reset() called multiple times, or subclass does not call super.reset(). Please see Javadocs of TokenStream class for more information about the correct consuming workflow.]&quot;,
  &quot;status&quot; : 500
}
</code></pre><p>ということで、1.7.0がリリースされるのを待つか、自分で<code>mvn package</code>してビルドする必要があります。
他にも独自でTokenizerなどを造られている方は注意が必要かと。</p>
<p>たぶん、すぐにリリースされるんじゃないかなぁと。</p>
<p><strong>2013/12/20追記</strong></p>
<p>とりあえず、masterブランチが0.90.8に変更されたみたいです。(と書いてるそばから、1.7.0がリリースされました)
ということで、0.90.8では1.7.0を使うとエラーが出ないです。
（あと、踊り字対応のcharfilterも追加されたみたいです）</p>
</content:encoded>
    </item>
    
    <item>
      <title>elasticsearch-extended-analyzeプラグインをMavenとSonatypeにリリース</title>
      <link>https://blog.johtani.info/blog/2013/12/17/release-es-extended-analyze-plugin-to-maven-and-sonatype/</link>
      <pubDate>Tue, 17 Dec 2013 12:11:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/12/17/release-es-extended-analyze-plugin-to-maven-and-sonatype/</guid>
      <description>ども。 プラグインのインストールに長いURL入れるの辛いですよね？ね？ ということで、MavenでリリースしてMaven Repositoryから</description>
      <content:encoded><p>ども。
プラグインのインストールに長いURL入れるの辛いですよね？ね？</p>
<p>ということで、MavenでリリースしてMaven Repositoryからダウンロードできるようにしてみました。</p>
<!-- more -->
<p>流れとしては</p>
<ol>
<li>Sonatypeにリリースできるように申請する</li>
<li>Sonatypeにリリースする</li>
<li>SonatypeからMavenにSyncしてもらう</li>
</ol>
<p>という流れです。</p>
<p>Sonatypeにリリースするための方法はイケメンの人(@yusuke)がブログに簡単ですが残してくれてました。
あと、こちらの@vvakameさんのブログも参考にしながら作業しました。</p>
<ul>
<li><a href="http://samuraism.jp/diary/2012/05/03/1336047480000.html">【最新版】Maven Central Repository へのライブラリ登録方法 #maven</a></li>
<li><a href="http://d.hatena.ne.jp/vvakame/20120507#1336411831">JsonPullParser が Maven Central Repository に入るようです</a></li>
</ul>
<p>pom.xmlについては、プラグインのpom.xmlを参考にしてもらえればと。
1.の作業が終わったら、リリースを実行します。</p>
<p>この時、<code>&lt;scm&gt;</code>タグにgithubの情報が記載されているため（？）、githubにタグを打つ作業もmavenコマンドがやってくれるみたいです。</p>
<pre><code>mvn release:prepare
</code></pre><p>を実行すると、リリースするバージョンやタグ名などを聞いてくれます。
それらに答えると、pom.xmlにバージョンを指定してcommit&amp;pushしてくれ、タグも打ってくれます。（なんて便利）</p>
<p>その後、<code>release:perform</code>にてSonatypeへのリリースが完了します。
あとは、Sonatypeの画面で作業したら、Mavenのリポジトリにそのうち同期してくれます。</p>
<p>ということで、次のコマンドを実行すればプラグインがインストールできるようになりました。0.6.0と0.7.0の違いは実装には差異はありません。リリース方法が変更されただけということになります。</p>
<pre><code>bin/plugin -i info.johtani/elasticsearch-extended-analyze/0.7.0
</code></pre><p>これで少しは活用してもらえるようになるかなぁ？
（どのくらいの人が使ってくれてるのかは不明。。。）</p>
</content:encoded>
    </item>
    
    <item>
      <title>elasticsearch-extended-analyzeを公開？</title>
      <link>https://blog.johtani.info/blog/2013/11/14/release-elasticsearch-extended-analyze-0-dot-5/</link>
      <pubDate>Thu, 14 Nov 2013 17:55:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/11/14/release-elasticsearch-extended-analyze-0-dot-5/</guid>
      <description>どーも。以前の記事で開発中としていたプラグインですが、とりあえず、pluginコマンドでインストール出来る形にしてみました。 インストールなど</description>
      <content:encoded><p>どーも。以前の記事で開発中としていたプラグインですが、とりあえず、pluginコマンドでインストール出来る形にしてみました。</p>
<p>インストールなどについては、<a href="https://github.com/johtani/elasticsearch-extended-analyze">READMEに記載した</a>のでそちらを参照してもらうことにして、試行錯誤した話をメモとして残しておきます。</p>
<!-- more -->
<p>プラグインの開発はしいてたのですが、やっぱりpluginコマンドでインストール出来ないと使ってもらえないよなということで、勉強会も終わったのでちょっと調べてました。</p>
<h2 id="プラグインコマンド">プラグインコマンド</h2>
<p>コマンドが用意されてますが、実態はJavaで実装されてて、通常はこんなかんじでプラグインをインストールします。</p>
<pre><code>./bin/plugin -i elasticsearch/elasticsearch-analysis-kuromoji/1.6.0
</code></pre><p>この「<code>elasticsearch/elasticsearch-analysis-kuromoji/1.6.0</code>」という文字列ですが、「<code>ユーザ名/リポジトリ名/バージョン</code>」という意味になります。</p>
<p>で、ダウンロードするURLは以下のものの中から選ばれます。</p>
<ul>
<li>elasticsearch.orgのダウンロード用サイト</li>
<li>search.maven.org</li>
<li>oss.sonatype.org</li>
<li>Githubのarchive</li>
</ul>
<p>これらのサイトに先ほどのユーザ名、リポジトリ名、バージョンを利用したURLを組み立てて、ダウンロードしてくれるという仕組みになっています。</p>
<p>elasticsearch.orgについては、本家の人しかアップロードできないと思うので、なし。<br>
maven、sonatypeについては、Mavenのリポジトリにリリースする必要があるんじゃないかなと。
で、昔<strike>調べて</strike>ググって途中で挫折したんですが、挫折してます。手順が結構手間で。。。
（参考記事：<a href="http://samuraism.jp/diary/2012/05/03/1336047480000.html">【最新版】Maven Central Repository へのライブラリ登録方法 #maven</a>）</p>
<p>ということで、Githubにアップしたらなんとかなるんじゃん？ということで色々と調査して試してみました。（結果はイマイチなんですが。。。）</p>
<h2 id="その１mvn-releaseprepare">その１：mvn release:prepare</h2>
<p>せっかくGithubだし、せっかくMavenなんだしなんか、pom.xmlに便利な設定したらコマンド一発でリリースできるんじゃない？という甘い気持ちで<strike>調査した</strike>ググったらそれっぽい記事が見つかりました。
「<a href="http://www.kanasansoft.com/weblab/2009/11/integration_between_maven_and_github.html">MavenとGitHubの連携</a>」って記事です。<br>
で、pom.xmlの設定にも他のプラグインを真似してコピペしたものに<code>&lt;scm&gt;</code>ってタグがあったなぁと。このコマンドでついでにGithubにアップロードできるんじゃないの？ということで、試してみました。</p>
<pre><code>mvn release:prepare
</code></pre><p>このコマンドを叩くと、記事にあるとおりにいくつか質問をされます。
タグについては、<code>プロジェクト名-バージョン番号</code>という文字列がデフォルトだと指定されているので、<code>v0.5</code>と変更して実施してみると、Githubのreleaseにv0.5ってのができてるじゃないですか。<br>
※<code>plugin</code>コマンドはGithubを見に行く時に次のファイルをダウンロードしに行きます。</p>
<pre><code>https://github.com/ユーザ名/リポジトリ名/archive/vバージョン名.zip
</code></pre><p>やった！と思い、早速pluginコマンドを実行してみましたが、エラーが出ました。。。</p>
<pre><code>Trying https://github.com/johtani/elasticsearch-extended-analyze/archive/v0.5.zip...
Downloading ...DONE
Installed johtani/elasticsearch-extended-analyze/0.5 into /Users/johtani/projects/tmp/ess_env/second_node/elasticsearch-0.90.7/plugins/extended-analyze
Usage:
    -u, --url     [plugin location]   : Set exact URL to download the plugin from
...省略...

Message:
   Error while installing plugin, reason: IllegalArgumentException: Plugin installation assumed to be site plugin, but contains source code, aborting installation.
</code></pre><p>あらら、なんで？と。<br>
で、実際にgithubにアップされてたzipファイルをダウンロードしてみたら、githubのリポジトリにあるディレクトリ構成がそのまま入ってるじゃないですか。。。
そうですか、そうですよね。prepareだし、タグ打ってzipにかためてくれるだけなんですねと。。。</p>
<p>おそらく、siteプラグイン<em>だけ</em>の場合はこの方法でpluginコマンド叩けばOKなんでしょうが、私がダウンロードしてもらいたいのは.jarファイルが入ったzipファイルなんです。</p>
<p>ということで、断念しました。（タグ消したりをgitコマンドで叩いて綺麗にし直すとか虚しい作業をしてました）</p>
<h2 id="その２githubcomのwebでリリース">その２：github.comのWebでリリース</h2>
<p>おとなしく、Sonatypeのサイトにアップロードする方向でがんばればいいんですが、とりあえず使えるようにするのが先だと思い、
github.comのページでアップロードしてしまおうと。</p>
<p>「release」というタブをクリックすると、画面からアップロードできるようになります。<br>
zipファイルを作ってアップロードしました。（zipファイル自体は<code>mvn package</code>コマンドを実行したら<code>target/release</code>というディレクトリに作成されてる）</p>
<p>これで行けるだろということで、またpluginコマンドを実行すると</p>
<pre><code>Trying https://github.com/johtani/elasticsearch-extended-analyze/archive/v0.5.zip...
Downloading ...DONE
Installed johtani/elasticsearch-extended-analyze/0.5 into /Users/johtani/projects/tmp/ess_env/second_node/elasticsearch-0.90.7/plugins/extended-analyze
Usage:
    -u, --url     [plugin location]   : Set exact URL to download the plugin from
...省略...

Message:
   Error while installing plugin, reason: IllegalArgumentException: Plugin installation assumed to be site plugin, but contains source code, aborting installation.
</code></pre><p>あれ？同じエラー？なんで？jar入りのzipファイルアップロードしたのに？？？</p>
<p>と。で、<code>https://github.com/johtani/elasticsearch-extended-analyze/releases</code>にreleaseのページができてたので見てみると、あら。
アップロードしたファイルについては次のようなURLになってるじゃないですか。</p>
<pre><code>https://github.com/johtani/elasticsearch-extended-analyze/releases/download/v0.5/v0.5.zip
</code></pre><p>で、よく見ると「Source code(zip)」というボタンもあるぞ？このリンクは？</p>
<pre><code>https://github.com/johtani/elasticsearch-extended-analyze/archive/v0.5.zip
</code></pre><p>。。。あぁ。そうですか。そういうことですか。理解してない私が悪いんですねと。</p>
<h2 id="結論">結論？</h2>
<p>ということで、とりあえず、releaseにjar入りファイルはアップロードできた（手動で）ので
<code>-u</code>オプションで直接URL指定すればインストールできるだろ！と諦めました。
いい勉強になりました。。。</p>
<p>README見ていただくとインストール方法が分かりますが、長いです。。。</p>
<p>時間をとって本腰入れてSonatypeにMavenコマンドでアップロードできるようにしようかな。。。</p>
</content:encoded>
    </item>
    
    <item>
      <title>第2回elasticsearch勉強会を開催しました！ #elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2013/11/12/elasticsearch-japan-user-meetup-no2/</link>
      <pubDate>Tue, 12 Nov 2013 18:16:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/11/12/elasticsearch-japan-user-meetup-no2/</guid>
      <description>第2回を開催しました！ すごい、140人くらいくらいの参加登録者（参加者は１００人ちょっと！）がいて、びっくりです。 ステキな会場を提供していた</description>
      <content:encoded><p>第2回を開催しました！
すごい、140人くらいくらいの参加登録者（参加者は１００人ちょっと！）がいて、びっくりです。
ステキな会場を提供していただいた、<a href="http://recruit-tech.co.jp/recruitment/">リクルートテクノロジーズ</a>さん、運営していただいた方々、スピーカーの皆さん、参加者の皆さん本当にありがとうございました。
今回も素敵な看板ありがとうございます。</p>

<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" style="max-width:300">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20131112/es_signboard.jpg" />
    </div>
    <a href="/images/entries/20131112/es_signboard.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<p>今回もしっかり楽しめたので、次回も頑張ります！</p>
<p>今回は、<a href="https://groups.google.com/forum/#!forum/elasticsearch-jp">elasticsearch-jp</a>MLの紹介とかをできたのでよかったかなぁと。
ぜひ、活用してください！どんな質問でもいいので。</p>
<p>あと、スライドに入ってた例の本もよろしくです。</p>
<!-- more -->
<p>ということで、懇親会も盛り上がったし楽しかったです。
今後も場の提供＋自分の勉強のトリガーとして、開催していくので、ご協力お願いします！
聞きたい話など、MLや@ツイートしていただければと。</p>
<h2 id="elasticsearchのrouting機能株式会社シーマーク大谷純johtani">elasticsearchのRouting機能：株式会社シーマーク　大谷　純　（@johtani）</h2>
<p>スライド：<a href="/images/entries/20131112/About_es_routing.pdf">Routing機能</a>※スライドはPDFです。</p>
<p>ド緊張で、大した発表ではなかったですが。。。
どちらかと言うとSolr本の紹介だったかもなぁ。スミマセン。</p>
<p>※スライドが一部文字が消えてるので、作りなおすかも。</p>
<h2 id="elasticsearchを使ったbaas基盤の開発仮株式会社富士通ソフトウェアテクノロジーズ-滝田聖己さんpisatoshi">ElasticSearchを使ったBaaS基盤の開発(仮)：株式会社富士通ソフトウェアテクノロジーズ 滝田聖己さん（@pisatoshi）</h2>
<p>スライド：<a href="https://speakerdeck.com/pisatoshi/elasticsearch-trial-and-error">https://speakerdeck.com/pisatoshi/elasticsearch-trial-and-error</a></p>
<p>本日はお越しいただきありがとうございました！しかも静岡から！今後もよろしくお願い致します。</p>
<ul>
<li>
<p>EnchantMoonでシステム構成ｗ</p>
</li>
<li>
<p>0.17.0から利用されていると。（スゴイ）</p>
</li>
<li>
<p>プライマリのデータストア！ただし、登録元データはMySQLにもある。</p>
</li>
<li>
<p>階層も深く、大きめのドキュメント。</p>
</li>
<li>
<p>レプリカ１、インデックスのバックアップも取ってないと。。。</p>
</li>
<li>
<p>ルーティングの機能</p>
</li>
<li>
<p>DynamicMappingの問題点</p>
</li>
<li>
<p>マッピング定義が肥大、型がコンフリクト。。。苦労しっぱなし</p>
</li>
<li>
<p>データ登録は１台にして、１台で一気に登録してから再配置</p>
</li>
<li>
<p>実際に運用とかされてるので、いろんなノウハウがまだまだありそう！</p>
</li>
</ul>
<h2 id="kibana入門水戸祐介さんy_310">Kibana入門：水戸祐介さん（@y_310）</h2>
<p>スライド：<a href="https://speakerdeck.com/y310/kibanaru-men">https://speakerdeck.com/y310/kibanaru-men</a></p>
<p>（やっぱりru-menになってるｗ）</p>
<p>実は、押しかけて話してもらうように説得したのでした。今後もよろしくです。</p>
<ul>
<li>COOKPADの方によるKibanaのお話。</li>
<li>Kibanaの利点とかなんで？とか。</li>
<li>画面構成の説明から</li>
<li>ダッシュボードは必ず保存して！リロードしたら悲しい思いをしてしまうので。</li>
<li>sparkline便利そうだなぁ。ほんとに、データサイエンティスト系のツールを目指してるのかな</li>
<li>一通り、ダッシュボードに配置できるパネルの説明してもらえたのですごく参考になりました！</li>
<li>Tips周りが役に立ちそう。not_analyzedは重要ですよね。</li>
</ul>
<h2 id="lt">LT</h2>
<h3 id="データ集計用ダッシュボードブラウザとしても使えるelasticsearchkibana-v3を利用する際の運用ノウハウ紹介株式会社リブセンス-ykentaro-さん-yoshi_ken-さん">「データ集計用ダッシュボードブラウザとしても使えるElasticSearch＋Kibana v3を利用する際の運用ノウハウ紹介」：株式会社リブセンス Y.Kentaro さん (@yoshi_ken) さん</h3>
<p>スライド：<a href="http://www.slideshare.net/y-ken/elasticsearch-kibnana-fluentd-management-tips">http://www.slideshare.net/y-ken/elasticsearch-kibnana-fluentd-management-tips</a></p>
<ul>
<li>Kibanaの紹介とかFluentdの紹介。</li>
<li>Tips満載すばらしい。</li>
<li>JDBC riverは0.90.6ではうまく動かないので、気をつけてと。</li>
</ul>
<h3 id="fluentd-as-a-kibanarepeatedly-さん">「Fluentd as a Kibana」：@repeatedly さん</h3>
<p>スライド(gist)？：<a href="https://gist.github.com/repeatedly/7427856">https://gist.github.com/repeatedly/7427856</a></p>
<p>Kibanaがfluentdの中で動くと！？</p>
<h3 id="authプラグインでアクセスコントロール株式会社エヌツーエスエム-菅谷信介さん-shinsuke_sugaya">「Authプラグインでアクセスコントロール」：株式会社エヌツーエスエム 菅谷信介さん (@shinsuke_sugaya)</h3>
<p>スライド：<a href="http://www.slideshare.net/shinsuke/es-auth-plugin">http://www.slideshare.net/shinsuke/es-auth-plugin</a></p>
<p>API毎？インデックスごと？にアクセス制御ができるプラグイン</p>
</content:encoded>
    </item>
    
    <item>
      <title>elasticsearch-extended-analyzeの改良</title>
      <link>https://blog.johtani.info/blog/2013/11/04/improve-output-extended-analyze/</link>
      <pubDate>Mon, 04 Nov 2013 22:12:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/11/04/improve-output-extended-analyze/</guid>
      <description>開発中ですと書きました、elasticsearch-extended-analyzeですが、改良しました。 改良と変更は以下のとおりです。 ソー</description>
      <content:encoded><p><a href="/blog/2013/10/25/developing-es-extended-analyze-plugin/">開発中です</a>と書きました、<a href="https://github.com/johtani/elasticsearch-extended-analyze">elasticsearch-extended-analyze</a>ですが、改良しました。</p>
<!-- more -->
<p>改良と変更は以下のとおりです。</p>
<ul>
<li>ソースのパッケージを<code>org.elasticsearch</code>から<code>info.johtani</code>に。MLで気になったので質問したら、変えたほうがいいよとのこと。ダウンロード化については、もう少々お待ちを。</li>
<li>出力形式を変更。可能な限りCharFilter、Tokenizer、TokenFilterそれぞれが出力する内容を返すようにしました。
<ul>
<li>ただし、既存のAnalyzer（JapaneseAnalyzerクラスとか）に関しては、現時点では出力しません。CharFilterなどを取得するI/Fが見えないためです。（改良できるかの調査は未着手）</li>
</ul>
</li>
</ul>
<p>現時点でできてないのは以下の項目</p>
<ul>
<li>pluginコマンドでインストール</li>
<li>出力したいAttributeの指定</li>
<li>TokenizeChainで変更されたTokenの追跡（現状はどのTokenがStopFilterで消されたかなどが不明）</li>
<li>画面の用意（簡単に確認できる画面）</li>
</ul>
<p>ということで、README.mdに出力サンプルは貼り付けてるので、興味のある方は試してみてください。
不明点などあれば、コメントかIssueかツイートでも。</p>
</content:encoded>
    </item>
    
    <item>
      <title>elasticsearch-extended-analyzeプラグインを開発中</title>
      <link>https://blog.johtani.info/blog/2013/10/25/developing-es-extended-analyze-plugin/</link>
      <pubDate>Fri, 25 Oct 2013 19:06:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/10/25/developing-es-extended-analyze-plugin/</guid>
      <description>お久しぶりです。 気づいたらまた、結構ブログを書いてなかったです。。。 今回は、今開発しているElasticsearchのプラグインに関するお話</description>
      <content:encoded><p>お久しぶりです。
気づいたらまた、結構ブログを書いてなかったです。。。</p>
<p>今回は、今開発しているElasticsearchのプラグインに関するお話です。</p>
<p>いやぁ、名前決めるの難しいですね。これで英語的に合ってるか不安ですが、<a href="https://github.com/johtani/elasticsearch-extended-analyze">elasticsearch-extended-analyze</a>というプラグインを作っています。</p>
<!-- more -->
<h2 id="どんなもの">どんなもの？</h2>
<p>Solrの管理画面のanalysisに相当する機能が欲しくて作り始めました。</p>
<p>Elasticsearchには<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-analyze.html">analyze API</a>というAPI（名前あってるのかなぁ?）が存在します。<br>
これは、文字列を投げると、指定したアナライザやトークナイザでどのようなトークンに分割されるかを調べることができるAPIです。</p>
<p>例えば、<a href="https://github.com/elasticsearch/elasticsearch-analysis-kuromoji">elasticsearch-analysis-kuromoji</a>をインストールしたElasticsearchに対して、以下のcurlコマンドを実行します。</p>
<pre><code>curl -XPOST 'localhost:9200/_analyze?tokenizer=kuromoji_tokenizer&amp;filters=kuromoji_baseform&amp;pretty' -d '寿司が美味しい'
</code></pre><p>すると、トークナイズされた結果が次のようなJSONで返ってきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#f92672">&#34;tokens&#34;</span> : [ {
    <span style="color:#f92672">&#34;token&#34;</span> : <span style="color:#e6db74">&#34;寿司&#34;</span>,
    <span style="color:#f92672">&#34;start_offset&#34;</span> : <span style="color:#ae81ff">0</span>,
    <span style="color:#f92672">&#34;end_offset&#34;</span> : <span style="color:#ae81ff">2</span>,
    <span style="color:#f92672">&#34;type&#34;</span> : <span style="color:#e6db74">&#34;word&#34;</span>,
    <span style="color:#f92672">&#34;position&#34;</span> : <span style="color:#ae81ff">1</span>
  }, {
    <span style="color:#f92672">&#34;token&#34;</span> : <span style="color:#e6db74">&#34;が&#34;</span>,
    <span style="color:#f92672">&#34;start_offset&#34;</span> : <span style="color:#ae81ff">2</span>,
    <span style="color:#f92672">&#34;end_offset&#34;</span> : <span style="color:#ae81ff">3</span>,
    <span style="color:#f92672">&#34;type&#34;</span> : <span style="color:#e6db74">&#34;word&#34;</span>,
    <span style="color:#f92672">&#34;position&#34;</span> : <span style="color:#ae81ff">2</span>
  }, {
    <span style="color:#f92672">&#34;token&#34;</span> : <span style="color:#e6db74">&#34;美味しい&#34;</span>,
    <span style="color:#f92672">&#34;start_offset&#34;</span> : <span style="color:#ae81ff">3</span>,
    <span style="color:#f92672">&#34;end_offset&#34;</span> : <span style="color:#ae81ff">7</span>,
    <span style="color:#f92672">&#34;type&#34;</span> : <span style="color:#e6db74">&#34;word&#34;</span>,
    <span style="color:#f92672">&#34;position&#34;</span> : <span style="color:#ae81ff">3</span>
  } ]
}
</code></pre></div><p>トークナイズの結果がわかるのは嬉しいのですが、どんな品詞なのかといったKuromoji固有のTokenの属性情報がなくなってしまいます。</p>
<p>Solrでは、こんな画面が用意されていて、品詞情報とかが出力されます。あとは、各TokenFilterでどのトークンがなくなっているかなどもわかるようになっています。</p>

<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20131025/solr_admin_analysis.jpg" />
    </div>
    <a href="/images/entries/20131025/solr_admin_analysis.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<p>これって結構役立つと思うんですよ。
ということで、Pluginも作ってみたかったので、いい機会だから作ってみようかと。</p>
<h2 id="出力サンプル">出力サンプル</h2>
<p>まずは、その他のAttribute（品詞とか）を表示するところを実装してみました。</p>
<pre><code>curl -XPOST 'localhost:9200/_extended_analyze?tokenizer=kuromoji_tokenizer&amp;filters=kuromoji_baseform&amp;pretty' -d '寿司が美味しい'
</code></pre><p>先ほどとほぼ一緒のcurlコマンドを実行します。違う点は**「_analyze」**が**「_extended_analyze」**となっている点です。<br>
で、実行結果はこんな感じです。（長いですがそのまま載せてます。続きの文章がしたにあります。）</p>
<pre><code>{
  &quot;tokens&quot; : [ {
    &quot;token&quot; : &quot;寿司&quot;,
    &quot;start_offset&quot; : 0,
    &quot;end_offset&quot; : 2,
    &quot;type&quot; : &quot;word&quot;,
    &quot;position&quot; : 1,
    &quot;extended_attributes&quot; : [ {
      &quot;org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute#bytes&quot; : &quot;[e5 af bf e5 8f b8]&quot;
    }, {
      &quot;org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute#positionLength&quot; : 1
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.BaseFormAttribute#baseForm&quot; : null
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.PartOfSpeechAttribute#partOfSpeech&quot; : &quot;名詞-一般&quot;
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.PartOfSpeechAttribute#partOfSpeech (en)&quot; : &quot;noun-common&quot;
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.ReadingAttribute#reading&quot; : &quot;スシ&quot;
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.ReadingAttribute#reading (en)&quot; : &quot;sushi&quot;
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.ReadingAttribute#pronunciation&quot; : &quot;スシ&quot;
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.ReadingAttribute#pronunciation (en)&quot; : &quot;sushi&quot;
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.InflectionAttribute#inflectionType&quot; : null
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.InflectionAttribute#inflectionType (en)&quot; : null
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.InflectionAttribute#inflectionForm&quot; : null
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.InflectionAttribute#inflectionForm (en)&quot; : null
    }, {
      &quot;org.apache.lucene.analysis.tokenattributes.KeywordAttribute#keyword&quot; : false
    } ]
  }, {
    &quot;token&quot; : &quot;が&quot;,
    &quot;start_offset&quot; : 2,
    &quot;end_offset&quot; : 3,
    &quot;type&quot; : &quot;word&quot;,
    &quot;position&quot; : 2,
    &quot;extended_attributes&quot; : [ {
      &quot;org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute#bytes&quot; : &quot;[e3 81 8c]&quot;
    }, {
      &quot;org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute#positionLength&quot; : 1
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.BaseFormAttribute#baseForm&quot; : null
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.PartOfSpeechAttribute#partOfSpeech&quot; : &quot;助詞-格助詞-一般&quot;
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.PartOfSpeechAttribute#partOfSpeech (en)&quot; : &quot;particle-case-misc&quot;
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.ReadingAttribute#reading&quot; : &quot;ガ&quot;
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.ReadingAttribute#reading (en)&quot; : &quot;ga&quot;
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.ReadingAttribute#pronunciation&quot; : &quot;ガ&quot;
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.ReadingAttribute#pronunciation (en)&quot; : &quot;ga&quot;
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.InflectionAttribute#inflectionType&quot; : null
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.InflectionAttribute#inflectionType (en)&quot; : null
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.InflectionAttribute#inflectionForm&quot; : null
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.InflectionAttribute#inflectionForm (en)&quot; : null
    }, {
      &quot;org.apache.lucene.analysis.tokenattributes.KeywordAttribute#keyword&quot; : false
    } ]
  }, {
    &quot;token&quot; : &quot;美味しい&quot;,
    &quot;start_offset&quot; : 3,
    &quot;end_offset&quot; : 7,
    &quot;type&quot; : &quot;word&quot;,
    &quot;position&quot; : 3,
    &quot;extended_attributes&quot; : [ {
      &quot;org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute#bytes&quot; : &quot;[e7 be 8e e5 91 b3 e3 81 97 e3 81 84]&quot;
    }, {
      &quot;org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute#positionLength&quot; : 1
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.BaseFormAttribute#baseForm&quot; : null
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.PartOfSpeechAttribute#partOfSpeech&quot; : &quot;形容詞-自立&quot;
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.PartOfSpeechAttribute#partOfSpeech (en)&quot; : &quot;adjective-main&quot;
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.ReadingAttribute#reading&quot; : &quot;オイシイ&quot;
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.ReadingAttribute#reading (en)&quot; : &quot;oishii&quot;
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.ReadingAttribute#pronunciation&quot; : &quot;オイシイ&quot;
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.ReadingAttribute#pronunciation (en)&quot; : &quot;oishii&quot;
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.InflectionAttribute#inflectionType&quot; : &quot;形容詞・イ段&quot;
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.InflectionAttribute#inflectionType (en)&quot; : &quot;adj-group-i&quot;
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.InflectionAttribute#inflectionForm&quot; : &quot;基本形&quot;
    }, {
      &quot;org.apache.lucene.analysis.ja.tokenattributes.InflectionAttribute#inflectionForm (en)&quot; : &quot;base&quot;
    }, {
      &quot;org.apache.lucene.analysis.tokenattributes.KeywordAttribute#keyword&quot; : false
    } ]
  } ]
}
</code></pre><p>先ほどの結果に**「extended_attributes」**という配列のオブジェクトが追加された形になっています。
ちょっと長くなってしまいましたが。。。</p>
<p>Solrの処理を真似して作ったので大したことはやってないんですが、少しは便利になるかもなぁと。</p>
<p>現時点では、最終的な結果しか取得できないですが、今後は次のような機能を作っていこうかと思っています。
できるかどうかは、やってみてって感じですが。</p>
<ul>
<li>pluginコマンドでインストール
<ul>
<li>pom.xmlはありますが、まだMavenとかに登録はされていません。ですので、<code>mvn package</code>してからjarファイルをpluginsフォルダに配置しないといけません。pluginコマンドでインストールできるともっと使ってもらえるはず？</li>
</ul>
</li>
<li>出力したいAttributeの指定
<ul>
<li>リクエストパラメータで、出力したいAttribute名を指定するとか。</li>
</ul>
</li>
<li>出力形式の変更
<ul>
<li>今は、Solrの真似をしていますが、せっかくJSONだったりするので、もう少し検討しようかと（同じAttributeの異なる値も1オブジェクトとして出力されてる）</li>
</ul>
</li>
<li>TokenizeChainの出力
<ul>
<li>Solr同様、CharFilter、Tokenizer、TokenFilterが動作して、最終的なTokenがインデックスに登録されます。ですので、各処理の直後のTokenがどうなっているかもわかったほうが嬉しいと思うので、それらも取得できるようにしたいなぁと</li>
</ul>
</li>
<li>画面の用意
<ul>
<li>せっかくプラグインなんだし、画面で見れると嬉しいかなと。これは当分先になっちゃうと思いますが、Webページで確認できるような画面を作ると確認しやすくなるかなぁと。上記対応が終わってから取替かかると思いますが。</li>
</ul>
</li>
</ul>
<p>とりあえず、思いつくのはこんなかんじです。</p>
<p>Elasticsearchの_analyze APIを真似しただけのコードだし、テストも実装もまだまだですが、とりあえず公開してみました。</p>
<p>要望などあれば、コメント、Issue、ツイート（もちろん、テストコードなども！）なんでも受け付けてますので、お気軽に。</p>
</content:encoded>
    </item>
    
    <item>
      <title>elasticsearch-inquisitorプラグインの紹介</title>
      <link>https://blog.johtani.info/blog/2013/09/23/intro-elasticsearch-inquisitor/</link>
      <pubDate>Mon, 23 Sep 2013 12:27:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/09/23/intro-elasticsearch-inquisitor/</guid>
      <description>今日は、ElasticSearchのMLで見つけたelasticsearch-inquisitorプラグインの紹介です。 ElasticSea</description>
      <content:encoded><p>今日は、ElasticSearchのMLで見つけた<a href="https://github.com/polyfractal/elasticsearch-inquisitor">elasticsearch-inquisitor</a>プラグインの紹介です。</p>
<p>ElasticSearchはREST API形式で簡単にコマンドラインからいろいろな処理を実行できて便利ですが、
GUIがあったほうが楽なこともまた事実です。
今回紹介する、inquisitorプラグインもSiteプラグイン（Webブラウザでアクセスできるプラグイン）の1つです。
（ただし、ローカルにインストールしてローカルのElasticSearchにしか接続できませんが。。。）</p>
<!-- more -->
<h2 id="インストール">インストール</h2>
<p>プラグインですので、以下のコマンドでインストールが出来ます。インストール後はElasticSearchの再起動が必要です。</p>
<pre><code>bin/plugin -install polyfractal/elasticsearch-inquisitor
</code></pre><p>ElasticSearch再起動後に、以下のURLにアクセスすればOKです。
※ローカルでのみ動作可能なプラグインです。（内部で呼び出しているJSにlocalhostと記載があるため）</p>
<pre><code>http://localhost:9200/_plugin/inquisitor/#/
</code></pre><h2 id="何ができるの">何ができるの？</h2>
<p>自分の書いたQueryが正しく動作するかや、Analyzerによって文章がどのように、Term（Token）に分割されるかといった挙動をWebブラウザ上で確認することができます。用意されている画面は「Queries」「Analyzers」「Tokenizers」の3種類です。</p>
<h3 id="queries">Queries</h3>
<p>クエリの確認、実行が可能な画面です。</p>

<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20130923/queries_sample.jpg" />
    </div>
    <a href="/images/entries/20130923/queries_sample.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<p>「Index」「Type」はプルダウンになっており、現在ElasticSearchに存在しているものが選択可能です。
その下のテキストエリアがクエリを入力する画面です。</p>
<p>クエリを入力していると、入力しているクエリがValidかどうかをクエリのコンソール部分（右側上部）に表示してくれます。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20130923/query_error.jpg" />
    </div>
    <a href="/images/entries/20130923/query_error.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<p>少し残念なことに、Tabを押すと、フォームのフォーカスが切り替わってしまうので、クエリを入力するのがちょっと面倒です。。。（私は通常の検索には、<a href="https://chrome.google.com/webstore/detail/sense/doinijnbnggojdlcjifpdckfokbbfpbo">ChromeプラグインのSense</a>というものを利用してます。）</p>
<p>クエリに問題がない場合は、「Query」ボタンを押すことで実際の検索が実行されます。
この時、画面真ん中のブルーのテーブル（内部で実行されるクエリ）の部分に、QueryがElasticSearch内部で解釈されたあとの、Luceneで実行されるレベルのクエリに変換されたクエリが表示されます。</p>
<p>これが便利です。JSONで記述したり、色々なタイプのクエリがElasticSearchでは実行できますが、望んだ形に単語が区切られているかなどを確認することができるため、非常に便利です。</p>
<p>ElasticSearchのQuery DSLでは<a href="http://www.elasticsearch.org/guide/reference/api/search/explain/">explain</a>をtrueにすることで、ヒットしたドキュメントのスコア計算に用いられた単語などがわかるのですが、そもそもヒットしないクエリの場合は、explainでは単語の区切られ方などがわかりません。</p>
<p>その場合に、このプラグインで確認すると、想定と違う単語の区切られ方やクエリの造られ方がわかるかと思います。</p>
<h3 id="analyzers">Analyzers</h3>
<p>Analyzerによる文章のアナライズ結果の確認が出来る画面です。
ElasticSearchやSolrにあまり詳しくない場合、どんなAnalyzerが文章をどのように単語に区切って、転置インデックスのキーワードとして利用しているかがわからないと思います。</p>
<p>このAnalyzerが文章をどのように単語に区切っているかを確認することができるのがAnalyzers画面です。
こんなかんじの画面になります。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20130923/analyzers_sample.jpg" />
    </div>
    <a href="/images/entries/20130923/analyzers_sample.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<p>一番上のテキストエリアが文章を入力する場所です。
文章を入力していくと、その下のテーブルの「Analyzed Text」の部分が変化していくのが分かります。
このグレーの単語が転置インデックスのキーワードとなります。</p>
<p>予め用意されているAnalyzer以外に、用意されているTokenzier＋Filterの組み合わせも簡単ですが確認可能です。（Tokenizer、Filtersとあるテーブル）
ただし、ここまでのどちらも細かな設定は画面上ではできません（Filterの細かな引数の指定など）</p>
<p>一番下の部分が、ElasticSearchに存在しているインデックスごとに定義されたAnalyzerやフィールドを元にした解析結果を表示することができる領域です。</p>
<p>自分でマッピングを記述してフィールド定義したものの動作確認や、インデックスを適当に作ったけど、うまくヒットしない場合など、ここで、単語の区切れ方を確認することで、検索になぜヒットしないのかといった問題のヒントを得ることができると思います。</p>
<p>Analyzerによっては、インデックス対象の文字として扱わない文字があったりしますので。
先ほどのQueries画面のLuceneに投げられる直前のクエリと、Analyzersでの単語の区切られ方を確認することで、検索がうまくヒットしていないことが判明すると思います。</p>
<h3 id="tokenizers">Tokenizers</h3>
<p>最後はTokenizers画面です。Analyzersとほぼ同様ですが、ちがいは、デフォルトで用意されているTokenizerの挙動の確認ができるというだけになります。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20130923/tokenizers_sample.jpg" />
    </div>
    <a href="/images/entries/20130923/tokenizers_sample.jpg" itemprop="contentUrl"></a>
  </figure>
</div>

<p>簡単な確認ならここで可能かと。</p>
<h2 id="注意点は">注意点は？</h2>
<p>まだ開発途中のようで、つぎの部分が課題かと。</p>
<ul>
<li>ローカルでのみ実行可能</li>
<li>Queries画面の結果の「Explain Result」リンクが未実装</li>
<li>Queries画面のクエリ入力が使いにくい（タブが打てないので）</li>
<li>カスタム登録のAnalyzersはインデックスを用意しないと確認できない。（Kuromojiのプラグインを登録しただけでは確認できなかった）</li>
<li>細かな設定のフィールドも用意しないと、Analyzers画面では利用できない</li>
</ul>
<h2 id="まとめ">まとめ</h2>
<p>ということで、Inquisitor（読みがわからない）プラグインの簡単な説明でした。
検索にうまくヒットしないという理由は大体の場合、
クエリに入力した文字列が単語に区切られたものと、登録したデータが単語に区切られたものが異なるために検索にヒットしないというものです。</p>
<p>そのクエリ、データの単語の区切られ方を確認するのに役に立つプラグインじゃないでしょうか。</p>
<p>ちなみに、このプラグイン自体はHTML＋JSで作成されており、実際にはElasticSearchが持っているREST APIをキックしているだけになります。
ですので、Web画面なんか要らないという方は、このプラグインが実際に送信しているリクエストを参考にするとcurlコマンドでどういったリクエストを投げればいいかというのがわかると思います。</p>
<p>私は軟弱者なので画面があったほうがいいですが。</p>
</content:encoded>
    </item>
    
    <item>
      <title>elasticsearch-river-wikipediaの疑問点</title>
      <link>https://blog.johtani.info/blog/2013/09/12/question-river-wikipedia/</link>
      <pubDate>Thu, 12 Sep 2013 02:38:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/09/12/question-river-wikipedia/</guid>
      <description>river-wikipediaの前々回の記事で書きましたが、bulk_sizeに関連して登録件数がやけにきりが良いのが気になると書いていまし</description>
      <content:encoded><p><a href="/blog/2013/08/23/index-wikipedia-ja-to-elasticsearch/">river-wikipediaの前々回の記事</a>で書きましたが、bulk_sizeに関連して登録件数がやけにきりが良いのが気になると書いていました。</p>
<p>で、Riverの仕組みを勉强がてら、<a href="https://github.com/elasticsearch/elasticsearch-river-wikipedia">elasticsearch-river-wikipedia</a>のソース（1.2.0）を読んでみました。</p>
<!-- more -->
<h2 id="riverの作り">Riverの作り</h2>
<p>Riverはorg.elasticsearch.river.Riverというinterfaceを実装することで作らています。
ただ、Riverがinterfaceとなっていますが、o.e.river.AbstractRiverComponentというクラスを継承して作られています。</p>
<p>AbstractRiverComponentにはRiverの名前や設定などが用意されています。
ま、ここはそれほど重要じゃないので、軽く流してと。</p>
<p>Riverの設定関連は実装したRiverクラス（ここでは、WikipediaRiverクラス）のコンストラクタで、設定値の読み取りなどの記述を記載します。
このコンストラクタが、<code>_river/hogehoge/_meta</code>をPUTした時のJSONを元にElasticSearchから呼ばれて、Riverのインスタンスが作成されます。（たぶん、<a href="https://github.com/elasticsearch/elasticsearch/blob/master/src/main/java/org/elasticsearch/river/RiversService.java">このへんがその処理</a>だと思う。。。このあたりはまた今度）</p>
<p>実際のRiverの処理はWikipediaRiverクラスのstart()メソッド内部に記述されています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">    <span style="color:#a6e22e">@Override</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">start</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
        logger<span style="color:#f92672">.</span><span style="color:#a6e22e">info</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;starting wikipedia stream&#34;</span><span style="color:#f92672">);</span>
        <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
<span style="color:#960050;background-color:#1e0010">①</span>            client<span style="color:#f92672">.</span><span style="color:#a6e22e">admin</span><span style="color:#f92672">().</span><span style="color:#a6e22e">indices</span><span style="color:#f92672">().</span><span style="color:#a6e22e">prepareCreate</span><span style="color:#f92672">(</span>indexName<span style="color:#f92672">).</span><span style="color:#a6e22e">execute</span><span style="color:#f92672">().</span><span style="color:#a6e22e">actionGet</span><span style="color:#f92672">();</span>
        <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>Exception e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>ExceptionsHelper<span style="color:#f92672">.</span><span style="color:#a6e22e">unwrapCause</span><span style="color:#f92672">(</span>e<span style="color:#f92672">)</span> <span style="color:#66d9ef">instanceof</span> IndexAlreadyExistsException<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                <span style="color:#75715e">// that&#39;s fine
</span><span style="color:#75715e"></span>            <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>ExceptionsHelper<span style="color:#f92672">.</span><span style="color:#a6e22e">unwrapCause</span><span style="color:#f92672">(</span>e<span style="color:#f92672">)</span> <span style="color:#66d9ef">instanceof</span> ClusterBlockException<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                <span style="color:#75715e">// ok, not recovered yet..., lets start indexing and hope we recover by the first bulk
</span><span style="color:#75715e"></span>                <span style="color:#75715e">// TODO: a smarter logic can be to register for cluster event listener here, and only start sampling when the block is removed...
</span><span style="color:#75715e"></span>            <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
                logger<span style="color:#f92672">.</span><span style="color:#a6e22e">warn</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;failed to create index [{}], disabling river...&#34;</span><span style="color:#f92672">,</span> e<span style="color:#f92672">,</span> indexName<span style="color:#f92672">);</span>
                <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">}</span>
<span style="color:#960050;background-color:#1e0010">②</span>        currentRequest <span style="color:#f92672">=</span> client<span style="color:#f92672">.</span><span style="color:#a6e22e">prepareBulk</span><span style="color:#f92672">();</span>
<span style="color:#960050;background-color:#1e0010">③</span>        WikiXMLParser parser <span style="color:#f92672">=</span> WikiXMLParserFactory<span style="color:#f92672">.</span><span style="color:#a6e22e">getSAXParser</span><span style="color:#f92672">(</span>url<span style="color:#f92672">);</span>
        <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
<span style="color:#960050;background-color:#1e0010">④</span>            parser<span style="color:#f92672">.</span><span style="color:#a6e22e">setPageCallback</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> PageCallback<span style="color:#f92672">());</span>
        <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>Exception e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            logger<span style="color:#f92672">.</span><span style="color:#a6e22e">error</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;failed to create parser&#34;</span><span style="color:#f92672">,</span> e<span style="color:#f92672">);</span>
            <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>
        <span style="color:#f92672">}</span>
<span style="color:#960050;background-color:#1e0010">⑤</span>        thread <span style="color:#f92672">=</span> EsExecutors<span style="color:#f92672">.</span><span style="color:#a6e22e">daemonThreadFactory</span><span style="color:#f92672">(</span>settings<span style="color:#f92672">.</span><span style="color:#a6e22e">globalSettings</span><span style="color:#f92672">(),</span> <span style="color:#e6db74">&#34;wikipedia_slurper&#34;</span><span style="color:#f92672">).</span><span style="color:#a6e22e">newThread</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> Parser<span style="color:#f92672">(</span>parser<span style="color:#f92672">));</span>
        thread<span style="color:#f92672">.</span><span style="color:#a6e22e">start</span><span style="color:#f92672">();</span>
    <span style="color:#f92672">}</span>
</code></pre></div><p>内部では</p>
<ol>
<li>インデックスの作成</li>
<li>バルクアップデート用クライアントの設定</li>
<li>WikiXMLのパーサの初期化</li>
<li>ページごとにキックされるコールバック処理の登録</li>
<li>デーモンスレッドの起動と起動</li>
</ol>
<p>といった処理の流れになっています。</p>
<p>で、このスレッドの起動後は、4.で用意したparser.parse()処理がグルグル回ります。</p>
<p>1ページがパースされるたびに、<code>WikipediaRiver.PageCallback</code>クラスの<a href="https://github.com/elasticsearch/elasticsearch-river-wikipedia/blob/master/src/main/java/org/elasticsearch/river/wikipedia/WikipediaRiver.java#L166"><code>proess()</code>メソッド</a>が呼ばれます。
このメソッドの最後で、<a href="https://github.com/elasticsearch/elasticsearch-river-wikipedia/blob/master/src/main/java/org/elasticsearch/river/wikipedia/WikipediaRiver.java#L198"><code>processBulkIfNeeded()</code>メソッド</a>が呼ばれています。ここで、実際にパースしたページをインデックスに登録する処理が実行されます。</p>
<p><a href="https://github.com/elasticsearch/elasticsearch-river-wikipedia/blob/master/src/main/java/org/elasticsearch/river/wikipedia/WikipediaRiver.java#L205">このメソッドの1行目</a>が鍵でした。
bulkSize以上の件数がバルクのリクエストに貯まった時だけ、実際にインデックスに登録する処理が実行されます。
このため、スレッドが回っている間は、bulkSize以上のデータが貯まらないと、インデックスへの登録は行われないわけです。</p>
<p>次に、このスレッドを止めるには、前々回書いたように、_riverにPUTした、Riverの設定をDELETEするしかありません。（あとは、ElasticSearchを停止するとかでしょうか。）</p>
<p>で、DELETEが実行される呼ばれるのが、<code>WikipediaRiver</code>クラスの<a href="https://github.com/elasticsearch/elasticsearch-river-wikipedia/blob/master/src/main/java/org/elasticsearch/river/wikipedia/WikipediaRiver.java#L135"><code>close()</code>メソッド</a>です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">
    <span style="color:#a6e22e">@Override</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">close</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
        logger<span style="color:#f92672">.</span><span style="color:#a6e22e">info</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;closing wikipedia river&#34;</span><span style="color:#f92672">);</span>
        closed <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>thread <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            thread<span style="color:#f92672">.</span><span style="color:#a6e22e">interrupt</span><span style="color:#f92672">();</span>
        <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>
</code></pre></div><p>見ていただくと分かりますが、スレッド止めて終了です。</p>
<h3 id="問題点は">問題点は？</h3>
<p>ということで、</p>
<ul>
<li>WikipediaのXMLを読み込んでもRiverは停止しない</li>
<li>Riverの停止を行ってもスレッドが止められるだけ。</li>
<li>bulkSize以下の件数が<code>currentRequest</code>に残っているけど、破棄される</li>
</ul>
<p>とまぁ、こんな流れになっているので、最後の端数のドキュメントがインデックスに登録されないようです。
（まだ、ちゃんと確認してないんですが、備忘録のため先に書いちゃいました。。。）</p>
<p>じゃあ、全部うまく登録するにはどうしたもんかなぁと。
いまのところ思いついたのはこんな感じです。
他にいい案があったら教えて下さい。</p>
<ul>
<li>案１：close()処理の中で、スレッド停止後に、<code>currentRequest</code>に貯まっているデータをインデックスに登録しちゃう</li>
<li>案２：bulkSize以外に、定期的（指定された時間）で登録処理を実行してしまう。</li>
</ul>
<p>簡単なのでとりあえず、案１を実装してみるかなぁと。
（さっさとコード書けよって話ですね。。。スミマセン）
その前にMLで質問ですかねぇ、英語で。</p>
<p>WikipediaのRiverをざっと眺めてみた感じですが、わかりやすい作りだなぁと。
他のRiverがどうなってるかをちゃんと見てませんが、他にもbulkSize指定をするRiverの場合は、このように件数がbulkSizeに満たない状態ではデータが登録されないといったことがあるかもしれません。</p>
<p>ElasticSearchのソースを読み始める取っ掛かりとしては面白いかと思いますので、興味ある方は読んで作ってみるといいかもしれません。（私は読んだだけですがｗ）</p>
<h2 id="追記20130913-2100">追記（2013/09/13 21:00）</h2>
<p>MLで質問してみました。とりあえず、案1を。</p>
<p><a href="https://groups.google.com/forum/#!topic/elasticsearch/hqU-LF5aTy4">river-wikipedia does not index all pages</a></p>
<p>他のRiverでは対応してるしバグだね、Issue上げてとのことで、あげときました。
ついでにプルリクも出せばいいんでしょうが、プルリクまだやったことないヘタレです。。。</p>
<p>あと、案2についても同じトピックで質問してます。
どうやら、BulkProcessorにその機能があるよと。
<code>flushinterval</code>というプロパティがありそうです。どうやって設定して、どうやって動くのかとか見てないので、
調査してブログorLTかな。</p>
<p><a href="http://www.elasticsearch.org/guide/reference/api/bulk-udp/">bulk udp</a>にはその値を設定できそうなのがあるんだよなぁ。</p>
<h2 id="追記その２20130916-2350">追記その２（2013/09/16 23:50）</h2>
<p>さっそく<a href="https://github.com/elasticsearch/elasticsearch-river-wikipedia/commit/3719ac5cd3cd5f0e4e57edaa72f5d4ca0b45ca5d">修正版がコミット(コミットログ)</a>されてました。
結構変わってます。BulkProcessorに<code>flush_interval</code>の設定をすれば、よしなにやってくれる仕組みがすでに実装されているようです。
<code>bulkSize</code>についても同様に、BulkProcessorに設定すれば良いようです。
Riverの仕組みが結構スッキリしています。
もともと実装されていた、bulkSizeごとの処理も消されています。
確かに、BulkProcessorの仕組みとして実装されている方がしっくりきますね。</p>
<p>ということで、考える暇もなくコミットされてしまいました。
こうやって質問しつつ、少しずつソースを読んでいこうかなと思ってるとこです。</p>
</content:encoded>
    </item>
    
    <item>
      <title>日本語Wikipediaをインデクシング（Kuromojiバージョン）</title>
      <link>https://blog.johtani.info/blog/2013/09/03/ja-wikipedia-with-kuromoji/</link>
      <pubDate>Tue, 03 Sep 2013 01:15:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/09/03/ja-wikipedia-with-kuromoji/</guid>
      <description>前々回紹介した、日本語Wikipediaのデータをインデックス登録する記事の続きです。 今回は、Kuromojiのアナライザを利用してインデッ</description>
      <content:encoded><p><a href="/blog/2013/08/23/index-wikipedia-ja-to-elasticsearch">前々回紹介した、日本語Wikipediaのデータをインデックス登録する記事</a>の続きです。</p>
<!-- more -->
<p>今回は、Kuromojiのアナライザを利用してインデックス登録してみます。</p>
<h2 id="余談proxy環境でのプラグインインストール">余談（Proxy環境でのプラグインインストール）</h2>
<p>ElasticSearchのpluginコマンドはJavaで実装されています。（<a href="https://github.com/elasticsearch/elasticsearch/blob/master/src/main/java/org/elasticsearch/plugins/PluginManager.java#L315">org.elasticsearch.plugins.PluginManager</a>）
プラグインのダウンロードには、java.net.URL.openConnection()から取得URLConnectionを使用しています。</p>
<p>ですので、pluginのインストールを行う際に、Proxy環境にある場合は以下のようにコマンドを実行します。</p>
<pre><code>./bin/plugin -DproxyPort=ポート番号 -DproxyHost=ホスト名 -i elasticsearch/elasticsearch-analysis-kuromoji/1.5.0
</code></pre><h2 id="elasticsearch-analysis-kuromojiのインストール">elasticsearch-analysis-kuromojiのインストール</h2>
<p>WikipediaのデータをKuromojiを使って、形態素解析ベースの転置インデックスを作成していきます。
まずは、Kuromojiを利用するために、<a href="https://github.com/elasticsearch/elasticsearch-analysis-kuromoji">Analysisプラグイン</a>のインストールです。
ElasticSearchのバージョンに対応したプラグインのバージョンがあります。（プラグインのページに対応したバージョンの記載あり）
今回はElasticSearchの0.90.3を利用しているため、1.5.0をインストールします。</p>
<pre><code>./bin/plugin -i elasticsearch/elasticsearch-analysis-kuromoji/1.5.0
</code></pre><p>インストール後は再起動しておきます。
なお、Kuromojiを利用して、Wikipediaのデータを登録するばあい、デフォルトの設定では、ヒープが足りなくなるおそれがあります。
ElasticSearchの起動時に以下のオプションを指定して、最大ヒープサイズを2Gとしておきます。</p>
<pre><code>export ES_HEAP_SIZE=2g;./bin/elasticsearch
</code></pre><h2 id="indexの作成デフォルトでkuromojiのanalyzerを利用する">Indexの作成（デフォルトでKuromojiのAnalyzerを利用する）</h2>
<p>Wikipediaのデータを登録する際に、Kuromojiのアナライザを利用したいのが今回の趣旨でした。
一番ラクな方法として、Wikipediaデータのインデックスの設定として、デフォルトのアナライザをKuromojiにしてしまいます。
（きちんと設計する場合は、必要に応じてフィールドごとに指定しましょう）</p>
<pre><code>curl -XPUT 'localhost:9200/ja-wikipedia-kuromoji' -d '{
    &quot;settings&quot;: {
        &quot;analysis&quot;: {
            &quot;analyzer&quot;: {
                &quot;default&quot; : {
                    &quot;type&quot; : &quot;kuromoji&quot;
                }
            }
        }
    }
}'
</code></pre><p>これでkuromojiのアナライザがデフォルトで利用される形となります。
あとは、Riverを起動して登録するだけです。</p>
<h2 id="riverの実行">Riverの実行</h2>
<p>前回と一緒です。
インデックス名（<strong>_river/&lt;インデックス名&gt;/_meta</strong>）だけは、先ほど作成した「<code>ja-wikipedia-kuromoji</code>」に変更してください。</p>
<pre><code>curl -XPUT localhost:9200/_river/ja-wikipedia-kuromoji/_meta -d '
{
    &quot;type&quot; : &quot;wikipedia&quot;,
    &quot;wikipedia&quot; : {
        &quot;url&quot; : &quot;file:/home/johtani/src/jawiki-latest-pages-articles.xml&quot;
    },
    &quot;index&quot; : {
        &quot;bulk_size&quot; : 10000
    }
}'
</code></pre><p>あとは、インデックスされるのを待つだけです。</p>
<h2 id="データ量とか">データ量とか</h2>
<p>5.8gbになりました。Kuromojiを利用したため、形態素解析により単語にきちんとトークないずされた結果でしょう。
Uni-gramだと、転置インデックスのボキャブラリも単語に対してヒットするドキュメント数も大きくなるため、
インデックスサイズも大きくなっているのかと。</p>
<p>検索クエリのサンプルなどはまた後日。（夜遅いので。。。）</p>
</content:encoded>
    </item>
    
    <item>
      <title>第1回ElasticSearch勉強会を開催しました！ #elasticsearchjp</title>
      <link>https://blog.johtani.info/blog/2013/08/30/hold-first-elasticsearch-meetup-in-japan/</link>
      <pubDate>Fri, 30 Aug 2013 02:42:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/08/30/hold-first-elasticsearch-meetup-in-japan/</guid>
      <description>ElasticSearch勉強会 第1回を主催しました。 昨年のpyfesでなんちゃって資料で喋って、1年たちました。 ElasticSearch</description>
      <content:encoded><p>ElasticSearch勉強会 第1回を主催しました。
昨年のpyfesでなんちゃって資料で喋って、1年たちました。</p>
<p>ElasticSearchの書籍（英語）も出てきて、今年はElasticSearchが面白くなりそうだし、使ってる人たちから話も聞きたいなぁということで、主催しました。</p>
<!-- more -->
<p>思った以上に興味のある方がいらっしゃったようで、100人応募のところ、チケットがすぐ完売してしまうほど。。。
しかも、当日もほぼ満員ということで、大変な盛況ぶりでした。</p>
<p>スピーカーの皆様、参加された皆様、会場を提供していただいた<a href="http://recruit-tech.co.jp">リクルートテクノロジーズ</a>さん、ありがとうございました！（たぶん、90人くらいいらっしゃってたかと。）</p>
<p>こんなステキな案内板も用意してもらいました。スタッフのみなさんありがとうございます！

<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" style="max-width:300">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20130830/es_signboard.jpg" />
    </div>
    <a href="/images/entries/20130830/es_signboard.jpg" itemprop="contentUrl"></a>
  </figure>
</div>
</p>
<p><a href="http://togetter.com/li/556140">トゥギャっても頂きました</a>。まとめていただいてありがとうございます！</p>
<p>自分の発表や個々の発表に関する感想は以下のメモに。</p>
<h2 id="elasticsearch入門-johtani">ElasticSearch入門 @johtani</h2>
<p>スライド：<a href="/images/entries/20130830/IntroductionES20130829.pdf">ElasticSearch入門</a>※スライドはPDFです。</p>
<ul>
<li>緊張しまくりでわかりにくかったですかね。。。</li>
<li>とりあえず、AWSのサービスじゃないってのだけでも覚えて帰っていただければ満足です。</li>
<li>途中で見せた<a href="https://chrome.google.com/webstore/detail/sense/doinijnbnggojdlcjifpdckfokbbfpbo">ChromeプラグインのSense</a></li>
<li>わからなかった点や質問、ご意見などは、当ブログのコメント、私宛の＠ツイート、なんでもいいので、反応ください。なんでもいいので反応があると、今後の励みになりますので！</li>
<li>ということで、発表でも言いましたが、わからないことがアレば、<a href="http://twitter.com/johtani">@johtani</a>まで投げてもらえれば、「知らない」「ブログのネタにします」「ソレはこんなかんじですかねぇ？（テキトー）」みたいに答えると思います。</li>
<li>Elasticsearch in Actionは帰宅中に、4章追加されたよというメールが届きました。</li>
</ul>
<h4 id="宿題">宿題</h4>
<ul>
<li>クラスタへのノードの追加の処理方法とか、シャーディングの実装とか。</li>
</ul>
<h2 id="elasticsearchプラグイン入門--mocksolrpluginでsolrと入れ替えてみよう-菅谷さん">elasticsearchプラグイン入門 ～ mocksolrpluginでSolrと入れ替えてみよう 菅谷さん</h2>
<p>スライド：<a href="http://www.slideshare.net/shinsuke/es-study1">elasticsearchプラグイン入門</a>　slideshare</p>
<ul>
<li>プラグイン構成とか（公式でまとまってるの見つけられないので助かります。）</li>
<li>作る上でのポイントうれしいです。
<ul>
<li>パッケージ名変えられるとか、つらい。。。</li>
</ul>
</li>
<li>Solr APIプラグインについて（Solrの振りしてくれる便利なヤツ）</li>
</ul>
<h3 id="感想">感想</h3>
<p>まだ、プラグインを書いたことがないのですが、ちゃんとプラグインはどういう構成で書くんですよというまとまった資料って本家のサイトにもない気がしています。
なので、スライドが公開されたらすごく役に立つかと。
そのまえに、何かプラグイン書いてみます。。。</p>
<h2 id="debugging-and-testing-es-systems-chris-birchallさん">Debugging and testing ES systems Chris Birchallさん</h2>
<p>スライド：<a href="http://www.slideshare.net/cb372/debugging-and-testing-es-systems">Debugging and testing ES systems</a>　slideshare</p>
<ul>
<li>テストの方法とか便利なお話（最後のほうしか聞いてなかったですが。。。。）</li>
<li>クエリのデバッグは色々とやらないと、なんでヒットしないのってよくあるので。とくに形態素解析を利用した検索の場合、短い文章（クエリ）と長い文章（ドキュメント）で切れ目が変わってうまくヒットしないとかありますよね。</li>
<li>最後に少しだけ話しましたが、n-gramとKuromojiを組み合わせてOR検索とかすると良い場合があります。
<ul>
<li>インデックスが大きくなったり、OR検索なので遅くなったりというデメリットもありますが。</li>
</ul>
</li>
</ul>
<h3 id="感想-1">感想</h3>
<p>実際に使われているノウハウを元に話をしていただいたので助かりました。
最初に席を外してたのですが、戻ってきて日本語で普通に発表されててほんとにびっくりしましたｗ
テスト用プラグインがあるのとかは知らなかったです。
あと、使われてたIDEが<a href="http://samuraism.com/products/jetbrains/intellij-idea">IntelliJ IDEA</a>でしたね！私も使ってます！</p>
<h2 id="ニコニコ動画データセット-25億件を検索可能にしてみよう-penguinana_">ニコニコ動画データセット 25億件を検索可能にしてみよう @PENGUINANA_</h2>
<p>スライド：<a href="http://www.slideshare.net/penguinana/ss-25714442">ニコニコ動画を検索可能にしてみよう</a>　slideshare</p>
<ul>
<li>kibana@cookpadのお話</li>
<li>どういう挙動するかをやってみればいいじゃんってことで、やってみるのカッコイイ！</li>
<li><a href="http://goo.gl/FYtO5T">http://goo.gl/FYtO5T</a></li>
<li>bigdeskとか。プラグインいろいろ。</li>
</ul>
<h3 id="感想-2">感想</h3>
<p>さすがです、ペンギン先生。大きなデータセットつかって、構築した環境に関する数値も書かれてる資料ができて素晴らしすぎです。
思った以上にサクサク動いてて、4hでインデクシングできるのもすごいなぁと。
私も見習ってこのくらいがサクッとできるようになりたい。。。
あと、発表後にムチャぶりしましたが、次回はぜひ検索側の性能とかも話してもらえたらと。</p>
<h2 id="反省点">反省点</h2>
<ul>
<li>イベントアテンドだと、キャンセル待ちができない＋どのくらいの方が興味をもっているのかわからない。</li>
<li>イベントページの主催者は複数指定できる方がいい。（土壇場の登録の人が管理できない。私が司会やってたから）</li>
<li>マイクが聞こえにくかった（音量調節とかちゃんと調べないと）</li>
<li>懇親会は立食のほうがやはり動きやすい。</li>
<li>懇親会が1時間ちょっとしかできなかった</li>
</ul>
<h2 id="雑感">雑感</h2>
<p>ということで、ES勉強会、主催の私が一番楽しめました。ありがとうございます。
（あと、気前よく調べて答えますと言ってしまいました。。。まぁ、いいトリガーになるので、ウェルカムですが）</p>
<p>やっぱりKibanaについて興味を持ってる人も多いのかなぁという感触がしたので、次回はぜひKibana3の話をしてもらえるように頑張ります。
あと、<a href="http://mobz.github.io/elasticsearch-head/">elasticsearch-head</a>を使われてるんだなぁと。私は<a href="http://www.elastichq.org/gettingstarted.html">elasticsearch-HQ</a>を入れて使ってみてます。大きなクラスタ管理まではまだやってないので。</p>
<p>あとは、やはりいろんな人に助けられてるなぁと実感しつつ、今後も開催するので助けてください！ということで。
（もちろん、Solr勉強会もがんばりますよー）</p>
<h2 id="関連ブログ">関連ブログ</h2>
<ul>
<li><a href="http://repeatedly.github.io/ja/2013/08/elasticsearch-meetup-1st/">ElasticSearch勉強会 第1回 - Go ahead!</a></li>
<li><a href="http://mt.orz.at/archives/2013/09/elasticsearch-e.html">タムタムの日記 - ElasticSearch勉強会 の参加メモ #elasticsearchjp</a></li>
<li><a href="http://samuraism.jp/diary/2013/09/03/1378216200000.html">第1回ElasticSearch勉強会に行ってきた！ #elasticsearchjp - #侍ズム</a></li>
<li><a href="http://seratch.hatenablog.jp/entry/2013/09/03/234712">第1回 ElasticSearch 勉強会に参加 #elasticsearchjp - seratch</a></li>
</ul>
<p>他にもブログを書かれた方がいらっしゃいましたたら、リンクしたいので連絡いただければ。</p>
</content:encoded>
    </item>
    
    <item>
      <title>ElasticSearchにプラグインで日本語Wikipediaデータを入れてみました</title>
      <link>https://blog.johtani.info/blog/2013/08/23/index-wikipedia-ja-to-elasticsearch/</link>
      <pubDate>Fri, 23 Aug 2013 12:02:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/08/23/index-wikipedia-ja-to-elasticsearch/</guid>
      <description>久々のブログはElasticSearchネタです。勉強会開催する予定だったりすので、もう少し触っておきたいなと。 お手軽に検索するデータとして</description>
      <content:encoded><p>久々のブログはElasticSearchネタです。勉強会開催する予定だったりすので、もう少し触っておきたいなと。
お手軽に検索するデータとして、よくWikipediaのデータを使っています。
ElasticSearchには<a href="https://github.com/elasticsearch/elasticsearch-river-wikipedia">elasticsearch-river-wikipedia</a>という便利なプラグインがあり、Wikipediaのデータを簡単に検索可能な状態にできます。このRiverを利用して日本語のWikipediaのデータを入れたので、メモを取っておきます。
まずは、river-wikipediaで日本語のデータをインデクシングしてみるまでの説明です。
日本語特有の設定（Kuromojiを利用したインデクシング）などはまた後日。</p>
<!-- more -->
<h2 id="プラグインのインストール">プラグインのインストール</h2>
<p>対象とするElasticSearchは現時点で最新版の0.90.3とします。
最新版でRiver動かないなぁとつぶやいた影響かどうかはわかりませんが、2013/08/19に最新版のElasticSearchで動作するプラグインが公開されました。</p>
<p>まずはインストールです。
HPにも書いてありますが、以下のコマンドを実行すればインストールされます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">$ ./bin/plugin -install elasticsearch/elasticsearch-river-wikipedia/1.2.0
-&gt; Installing elasticsearch/elasticsearch-river-wikipedia/1.2.0...
Trying http://download.elasticsearch.org/elasticsearch/elasticsearch-river-wikipedia/elasticsearch-river-wikipedia-1.2.0.zip...
Downloading ..........DONE
Installed river-wikipedia into /opt/elasticsearch/plugins/river-wikipedia
</code></pre></div><p>ElasticSearchが起動している場合はプラグインをインストール後、認識させるためにElasticSearchを再起動します。</p>
<h2 id="日本語wikipediaのインデクシング">日本語Wikipediaのインデクシング</h2>
<p>通常は英語のWikipediaがインデクシングされますが、対象となるファイルを変更することで日本語のWikipediaもインデクシング可能です。
手元に日本語Wikipediaのダンプファイルがあるものとします。（<a href="http://ja.wikipedia.org/wiki/Wikipedia:%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89">ダウンロードはWikipediaデータベースダウンロード</a>のページにあるpages-articles.xml.bz2のファイルです）</p>
<p>ファイルを指定してインデクシングするには、つぎのcurlコマンドを実行します。
コマンドを実行するとすぐにインデクシングが始まりますので注意が必要です。</p>
<pre><code>curl -XPUT localhost:9200/_river/ja-wikipedia/_meta -d '
{
    &quot;type&quot; : &quot;wikipedia&quot;,
    &quot;wikipedia&quot; : {
        &quot;url&quot; : &quot;file:/home/johtani/src/jawiki-latest-pages-articles.xml&quot;
    },
    &quot;index&quot; : {
        &quot;bulk_size&quot; : 1000
    }
}'
</code></pre><p>ここでURLに含まれる「ja-wikipedia」がインデックス名になります。
また、JSONの&quot;url&quot;にはファイルの場所を指定するため、<code>file:</code>で開始するパスを指定します。
例では、bz2を解凍したファイルを指定していますが、bz2のままのファイルでもOKです。</p>
<p>上記コマンドを実行すると、<code>_river</code>というインデックスにつぎのようなエントリが増えています。
(<code>curl -XGET 'localhost:9200/_river/ja-wikipedia/_search?pretty</code>)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
   <span style="color:#f92672">&#34;took&#34;</span>: <span style="color:#ae81ff">5</span>,
   <span style="color:#f92672">&#34;timed_out&#34;</span>: <span style="color:#66d9ef">false</span>,
   <span style="color:#f92672">&#34;_shards&#34;</span>: {
      <span style="color:#f92672">&#34;total&#34;</span>: <span style="color:#ae81ff">1</span>,
      <span style="color:#f92672">&#34;successful&#34;</span>: <span style="color:#ae81ff">1</span>,
      <span style="color:#f92672">&#34;failed&#34;</span>: <span style="color:#ae81ff">0</span>
   },
   <span style="color:#f92672">&#34;hits&#34;</span>: {
      <span style="color:#f92672">&#34;total&#34;</span>: <span style="color:#ae81ff">2</span>,
      <span style="color:#f92672">&#34;max_score&#34;</span>: <span style="color:#ae81ff">1</span>,
      <span style="color:#f92672">&#34;hits&#34;</span>: [
         {
            <span style="color:#f92672">&#34;_index&#34;</span>: <span style="color:#e6db74">&#34;_river&#34;</span>,
            <span style="color:#f92672">&#34;_type&#34;</span>: <span style="color:#e6db74">&#34;ja-wikipedia&#34;</span>,
            <span style="color:#f92672">&#34;_id&#34;</span>: <span style="color:#e6db74">&#34;_status&#34;</span>,
            <span style="color:#f92672">&#34;_score&#34;</span>: <span style="color:#ae81ff">1</span>,
            <span style="color:#f92672">&#34;_source&#34;</span>: {
               <span style="color:#f92672">&#34;ok&#34;</span>: <span style="color:#66d9ef">true</span>,
               <span style="color:#f92672">&#34;node&#34;</span>: {
                  <span style="color:#f92672">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;gdyvwpiAR52lqUCcRhVwsg&#34;</span>,
                  <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Blitzschlag, Baron Von&#34;</span>,
                  <span style="color:#f92672">&#34;transport_address&#34;</span>: <span style="color:#e6db74">&#34;inet[/192.168.100.7:9300]&#34;</span>
               }
            }
         },
         {
            <span style="color:#f92672">&#34;_index&#34;</span>: <span style="color:#e6db74">&#34;_river&#34;</span>,
            <span style="color:#f92672">&#34;_type&#34;</span>: <span style="color:#e6db74">&#34;ja-wikipedia&#34;</span>,
            <span style="color:#f92672">&#34;_id&#34;</span>: <span style="color:#e6db74">&#34;_meta&#34;</span>,
            <span style="color:#f92672">&#34;_score&#34;</span>: <span style="color:#ae81ff">1</span>,
            <span style="color:#f92672">&#34;_source&#34;</span>: {
               <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;wikipedia&#34;</span>,
               <span style="color:#f92672">&#34;wikipedia&#34;</span>: {
                  <span style="color:#f92672">&#34;url&#34;</span>: <span style="color:#e6db74">&#34;file:/home/johtani/src/jawiki-latest-pages-articles.xml&#34;</span>
               },
               <span style="color:#f92672">&#34;index&#34;</span>: {
                  <span style="color:#f92672">&#34;bulk_size&#34;</span>: <span style="color:#ae81ff">100</span>
               }
            }
         }
      ]
   }
}
</code></pre></div><p><code>&quot;_id&quot;: &quot;_meta&quot;</code>というエントリがさきほど登録したWikipediaのRiverに関する設定です。
<code>&quot;_id&quot;: &quot;_status&quot;</code>というエントリが起動したRiverの状態になります。</p>
<h2 id="riverの停止">Riverの停止</h2>
<p>日本語Wikipediaは結構サイズが大きく、手元のAirでインデクシングするのに30分程度かかりました。（bz2圧縮されていないファイルで、何もしていない状態）</p>
<p>途中でRiverを停止したくなった場合は、以下のcurlコマンドを実行します。</p>
<pre><code>$ curl -XDELETE 'localhost:9200/_river/ja-wikipedia'
</code></pre><p>先ほど設定した<code>_river/ja-wikipedia</code>の情報を削除すると、エントリが削除されたのを検知してRiverが停止します。ログにはつぎのようなメッセージが表示されます。</p>
<pre><code>[2013-08-26 18:26:50,130][INFO ][cluster.metadata         ] [Blitzschlag, Baron Von] [[_river]] remove_mapping [ja-wikipedia]
[2013-08-26 18:26:50,130][INFO ][river.wikipedia          ] [Blitzschlag, Baron Von] [wikipedia][ja-wikipedia] closing wikipedia river
</code></pre><p>Riverを停止してもそれまでインデクシングされたデータは検索できます。
データはちょっとだけで良いという場合は、先ほどの<code>_river</code>のデータを削除してください。
（◯件だけ登録したいとかできるかは調べてないです。）</p>
<h2 id="サイズとかマッピングとか">サイズとかマッピングとか</h2>
<h3 id="サイズ">サイズ</h3>
<p>インデックス前のXMLのサイズが5.7Gのとき、ElasticSearchのインデックスサイズ（Optimize後）は7.2Gとなりました。すこし古いファイルを利用しているため、最新版とはサイズが異なるかもしれません。</p>
<p>あと、データ数が、1540000件とやけにきりがいいのがちょっと気になっています。。。
bulkのサイズを10000で指定してインデックスしたので、切れてるのかなぁと。</p>
<p>ということは、データが欠落しているような気がするのでRiverの作りの問題なのか、ElasticSearchの問題なのかはちょっと調べてみないとわからないなと。</p>
<h3 id="マッピング">マッピング</h3>
<p>出来上がったインデックスのマッピング（Solrでいうスキーマみたいなもの）は次のようになっています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
   <span style="color:#f92672">&#34;ja-wikipedia&#34;</span>: {
      <span style="color:#f92672">&#34;page&#34;</span>: {
         <span style="color:#f92672">&#34;properties&#34;</span>: {
            <span style="color:#f92672">&#34;category&#34;</span>: {
               <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>
            },
            <span style="color:#f92672">&#34;disambiguation&#34;</span>: {
               <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;boolean&#34;</span>
            },
            <span style="color:#f92672">&#34;link&#34;</span>: {
               <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>
            },
            <span style="color:#f92672">&#34;redirect&#34;</span>: {
               <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;boolean&#34;</span>
            },
            <span style="color:#f92672">&#34;special&#34;</span>: {
               <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;boolean&#34;</span>
            },
            <span style="color:#f92672">&#34;stub&#34;</span>: {
               <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;boolean&#34;</span>
            },
            <span style="color:#f92672">&#34;text&#34;</span>: {
               <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>
            },
            <span style="color:#f92672">&#34;title&#34;</span>: {
               <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>
            }
         }
      }
   }
}
</code></pre></div><p>Wikipediaの各種データが上記のフィールドに入っています。
また、マッピングタイプはデフォルトで「page」というタイプになっています。</p>
<h2 id="検索">検索</h2>
<p>先ほどのマッピングを元に検索すればOKです。例えばつぎのような感じです。</p>
<pre><code>curl -XPOST 'localhost:9200/ja-wikipedia/_search?pretty' -d '
{
    &quot;size&quot; : 3,
    &quot;script_fields&quot;: {
       &quot;title_only&quot;: {
          &quot;script&quot;: &quot;_source.title&quot;
       }
    }, 
    &quot;query&quot; : {
        &quot;query_string&quot;: {
            &quot;default_field&quot;: &quot;title&quot;,
            &quot;query&quot; : &quot;千葉&quot;
        }
    }
}'
</code></pre><p>結果はこんな感じ。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
   <span style="color:#f92672">&#34;took&#34;</span>: <span style="color:#ae81ff">51</span>,
   <span style="color:#f92672">&#34;timed_out&#34;</span>: <span style="color:#66d9ef">false</span>,
   <span style="color:#f92672">&#34;_shards&#34;</span>: {
      <span style="color:#f92672">&#34;total&#34;</span>: <span style="color:#ae81ff">5</span>,
      <span style="color:#f92672">&#34;successful&#34;</span>: <span style="color:#ae81ff">5</span>,
      <span style="color:#f92672">&#34;failed&#34;</span>: <span style="color:#ae81ff">0</span>
   },
   <span style="color:#f92672">&#34;hits&#34;</span>: {
      <span style="color:#f92672">&#34;total&#34;</span>: <span style="color:#ae81ff">8616</span>,
      <span style="color:#f92672">&#34;max_score&#34;</span>: <span style="color:#ae81ff">5.8075247</span>,
      <span style="color:#f92672">&#34;hits&#34;</span>: [
         {
            <span style="color:#f92672">&#34;_index&#34;</span>: <span style="color:#e6db74">&#34;ja-wikipedia&#34;</span>,
            <span style="color:#f92672">&#34;_type&#34;</span>: <span style="color:#e6db74">&#34;page&#34;</span>,
            <span style="color:#f92672">&#34;_id&#34;</span>: <span style="color:#e6db74">&#34;3582&#34;</span>,
            <span style="color:#f92672">&#34;_score&#34;</span>: <span style="color:#ae81ff">5.8075247</span>,
            <span style="color:#f92672">&#34;fields&#34;</span>: {
               <span style="color:#f92672">&#34;title_only&#34;</span>: <span style="color:#e6db74">&#34;千葉&#34;</span>
            }
         },
         {
            <span style="color:#f92672">&#34;_index&#34;</span>: <span style="color:#e6db74">&#34;ja-wikipedia&#34;</span>,
            <span style="color:#f92672">&#34;_type&#34;</span>: <span style="color:#e6db74">&#34;page&#34;</span>,
            <span style="color:#f92672">&#34;_id&#34;</span>: <span style="color:#e6db74">&#34;2352241&#34;</span>,
            <span style="color:#f92672">&#34;_score&#34;</span>: <span style="color:#ae81ff">4.94406</span>,
            <span style="color:#f92672">&#34;fields&#34;</span>: {
               <span style="color:#f92672">&#34;title_only&#34;</span>: <span style="color:#e6db74">&#34;千葉千枝子&#34;</span>
            }
         },
         {
            <span style="color:#f92672">&#34;_index&#34;</span>: <span style="color:#e6db74">&#34;ja-wikipedia&#34;</span>,
            <span style="color:#f92672">&#34;_type&#34;</span>: <span style="color:#e6db74">&#34;page&#34;</span>,
            <span style="color:#f92672">&#34;_id&#34;</span>: <span style="color:#e6db74">&#34;14020&#34;</span>,
            <span style="color:#f92672">&#34;_score&#34;</span>: <span style="color:#ae81ff">4.8754807</span>,
            <span style="color:#f92672">&#34;fields&#34;</span>: {
               <span style="color:#f92672">&#34;title_only&#34;</span>: <span style="color:#e6db74">&#34;千葉千恵巳&#34;</span>
            }
         }
      ]
   }
}
</code></pre></div><p>結果を見やすくするため、タイトルだけを「title_only」という表示にしています。
ただ、この検索だと、一見「千葉」できちんとヒットしているように見えますが、ElasticSearchのフィールドの定義はstring型になっています。なので、実は「千」や「葉」だけのデータもヒットしています。
マルチバイト文字は1文字ずつインデックスされてしまい、query_stringというクエリでは、フレーズ検索などができていないためです。</p>
<h2 id="まとめ">まとめ</h2>
<p>プラグインいれて、XMLファイルがあれば、検索できるデータが出来上がるので、
暇があったら、お試しで触ってみるデータを簡単に入れてみてはどうでしょうか。</p>
<p>ただ、いくつか気になる点も。</p>
<ul>
<li>日本語が検索しにくい（string型のフィールドなのでuni-gramっぽくなっている）</li>
<li>bulk_sizeの影響で端数が登録できてない（バグ？どうなの？）</li>
</ul>
<p>ということで、ちょっと使いにくいかもなぁということで、つぎはKuromojiを利用してインデックスしてみてみようかなと。次回のエントリで書く予定です。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Kibana3というのもありまして</title>
      <link>https://blog.johtani.info/blog/2013/06/19/introduction-kibana3/</link>
      <pubDate>Wed, 19 Jun 2013 23:43:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/06/19/introduction-kibana3/</guid>
      <description>前回は3番煎じぐらいでしたが、今回は初記事かな？（だといいな） Kibanaには、前回の記事で書いたものとは別に開発中のKibana3というの</description>
      <content:encoded><p>前回は3番煎じぐらいでしたが、今回は初記事かな？（だといいな）</p>
<p>Kibanaには、<a href="http://blog.johtani.info/blog/2013/06/10/fluent-es-kibana/">前回の記事</a>で書いたものとは別に開発中の<a href="http://three.kibana.org/">Kibana3</a>というのが存在します。</p>
<!-- more -->
<h2 id="kibana3って">Kibana3って？</h2>
<p>Kibana2はRubyで書かれていましたが、Kibana3はHTML＋JavaScriptで構成されています。
ですので、ApacheなどのWebサーバに配置することで、利用が可能となります。
ただ、HTML＋JavaScriptのため、ブラウザ上で動作するためブラウザが動作するマシンからElasticSearch（通常だと<code>http://マシン名orIPアドレス:9200/</code>とか）にアクセスできなければいけないという制限があります。</p>
<p>この条件さえクリア出来れば、Kibana3ではKibana2よりも様々なパネルが用意されていて、色々できそうなのでお勧めです。</p>
<h2 id="インストール">インストール</h2>
<p>ElasticSearchやログについては、前回の記事の環境を利用しました。
ですので、Kibana3のインストールのみです。（ApacheもCentOSのサーバに入っていたので。）</p>
<p>ダウンロードして、Apacheの公開ディレクトリに置いただけです。（お試し環境のため、権限とかは大目に見てください。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git clone https://github.com/elasticsearch/kibana.git kibana-javascript
$ cp -R kibana-javascript /var/www/html
</code></pre></div><p>今回はApacheとElasticSearchが同一マシン（＝同一IPアドレスでアクセス可能）で動作している＋ElasticSearchへのアクセスのポートがデフォルト（9200）のため特に設定が必要ありませんでした。</p>
<p>ElasticSeachサーバとKibana3のApacheのサーバが別のサーバの場合やElasticSearchサーバのポートが異なる場合はkibana-javascript/config.jsファイルの編集が必要になります。
cloneしてすぐのconfig.jsは、以下のとおりです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#75715e">/*
</span><span style="color:#75715e">
</span><span style="color:#75715e">elasticsearch:  URL to your elasticsearch server. You almost certainly don&#39;t
</span><span style="color:#75715e">                want &#39;http://localhost:9200&#39; here. Even if Kibana and ES are on
</span><span style="color:#75715e">                the same host
</span><span style="color:#75715e">kibana_index:   The default ES index to use for storing Kibana specific object
</span><span style="color:#75715e">                such as stored dashboards
</span><span style="color:#75715e">modules:        Panel modules to load. In the future these will be inferred
</span><span style="color:#75715e">                from your initial dashboard, though if you share dashboards you
</span><span style="color:#75715e">                will probably need to list them all here
</span><span style="color:#75715e">
</span><span style="color:#75715e">If you need to configure the default dashboard, please see dashboards/default
</span><span style="color:#75715e">
</span><span style="color:#75715e">*/</span>
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">config</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Settings</span>(
{
  <span style="color:#75715e">// By default this will attempt to reach ES at the same host you have
</span><span style="color:#75715e"></span>  <span style="color:#75715e">// elasticsearch installed on. You probably want to set it to the FQDN of your
</span><span style="color:#75715e"></span>  <span style="color:#75715e">// elasticsearch host
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">elasticsearch</span><span style="color:#f92672">:</span>    <span style="color:#e6db74">&#34;http://&#34;</span><span style="color:#f92672">+</span>window.<span style="color:#a6e22e">location</span>.<span style="color:#a6e22e">hostname</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#34;:9200&#34;</span>,
  <span style="color:#75715e">// elasticsearch: &#39;http://localhost:9200&#39;,
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">kibana_index</span><span style="color:#f92672">:</span>     <span style="color:#e6db74">&#34;kibana-int&#34;</span>,
  <span style="color:#a6e22e">modules</span><span style="color:#f92672">:</span>          [<span style="color:#e6db74">&#39;histogram&#39;</span>,<span style="color:#e6db74">&#39;map&#39;</span>,<span style="color:#e6db74">&#39;pie&#39;</span>,<span style="color:#e6db74">&#39;table&#39;</span>,<span style="color:#e6db74">&#39;stringquery&#39;</span>,<span style="color:#e6db74">&#39;sort&#39;</span>,
                    <span style="color:#e6db74">&#39;timepicker&#39;</span>,<span style="color:#e6db74">&#39;text&#39;</span>,<span style="color:#e6db74">&#39;fields&#39;</span>,<span style="color:#e6db74">&#39;hits&#39;</span>,<span style="color:#e6db74">&#39;dashcontrol&#39;</span>,
                    <span style="color:#e6db74">&#39;column&#39;</span>,<span style="color:#e6db74">&#39;derivequeries&#39;</span>,<span style="color:#e6db74">&#39;trends&#39;</span>,<span style="color:#e6db74">&#39;bettermap&#39;</span>],
  }
);
</code></pre></div><p>ポート番号が異なる場合は、1つ目の「elasticsearch:」で指定されている「9200」を環境に合わせて編集するだけになります。
Kibana3とElasticSearchのホストが異なる場合は、1つ目の「elasticsearch:」の行をコメントアウトし、2つ目を有効にしてから環境に合わせたURLに修正して保存すればOKです。</p>
<p>以上で、インストールは完了します。あとは、以下のURLにアクセスするだけです。</p>
<pre><code>http://hogehoge/kibana-javascript/
</code></pre><h2 id="画面構成">画面構成</h2>
<p>アクセスすると次のような画面が表示されます。</p>

<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20130619/kibana3&#43;kibana2-es-index.jpeg" />
    </div>
    <a href="/images/entries/20130619/kibana3&#43;kibana2-es-index.jpeg" itemprop="contentUrl"></a>
      <figcaption align="center"><h4>初期画面</h4>
      </figcaption>
  </figure>
</div>

<p>左上に赤い帯で、「 Oops! Could not match index pattern to any ElasticSearch indices」とエラーが表示されました。</p>
<p>KibanaはElasticSearchに「logstatsh-年.月.日」という日付ごとのインデックスが存在することが前提となっています。
Kibanaに初めてアクセスした場合、「logstash-当日日付」で始まるインデックスを描画しようとします。
これは、私が前回利用したElasticSearchの環境に古いデータ（試したのが19日、データは10日のみ）しか入っていないために出たエラーです。</p>
<p>日付は「Options」というエラーが出ている付近の「Absolute」というリンクをクリックすると、特定の日付をカレンダーで指定することができるようになります。データは6/10にしか入っていないので、6/10（12時くらいから20時くらいまで）のを指定します。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20130619/kibana3-selected-calendar.jpeg" />
    </div>
    <a href="/images/entries/20130619/kibana3-selected-calendar.jpeg" itemprop="contentUrl"></a>
      <figcaption align="center"><h4>日付指定</h4>
      </figcaption>
  </figure>
</div>

<p>選択すると無事データが見えるようになりました。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20130619/Kibana3-sample-include-description.jpeg" />
    </div>
    <a href="/images/entries/20130619/Kibana3-sample-include-description.jpeg" itemprop="contentUrl"></a>
      <figcaption align="center"><h4>データ描画</h4>
      </figcaption>
  </figure>
</div>

<h3 id="ダッシュボードの構成初期">ダッシュボードの構成（初期）</h3>
<p>Kibana3では、この画面をダッシュボードというようです。
このダッシュボードは初期状態では、以下のパーツが表示されています。（子要素があとで説明するパネル名です）</p>
<ul>
<li>Options：描画対象の日付の指定やダッシュボードの保存などを行うRow
<ul>
<li>timepickerパネル：日付の指定</li>
<li>dashcontrolパネル：ダッシュボードの制御（保存とか）</li>
</ul>
</li>
<li>Query：ログ検索式を入れるところ
<ul>
<li>stringqueryパネル</li>
</ul>
</li>
<li>Graph：ヒストグラムの描画（X軸：時間、Y軸：ログ件数）
<ul>
<li>histogramパネル</li>
</ul>
</li>
<li>Events：検索にヒットしたログデータの描画領域
<ul>
<li>fieldsパネル：表示するフィールドの選択（左側。チェックを入れると右側のログ表示領域のカラムが増える）</li>
<li>tableパネル：ログデータ（右側。左側でチェックが入ったカラムだけが表示される。）</li>
</ul>
</li>
</ul>
<p>あくまで初期表示です。各パーツの設定アイコン（歯車のマーク）をクリックすると色々と設定が可能です。
また、「Events」など名称はクリック可能となっていて、クリックすると、そのパーツが折りたたまれた状態にすることも可能です。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20130619/kibana3-collaped.jpeg" />
    </div>
    <a href="/images/entries/20130619/kibana3-collaped.jpeg" itemprop="contentUrl"></a>
      <figcaption align="center"><h4>折りたたんだ状態</h4>
      </figcaption>
  </figure>
</div>

<h3 id="ダッシュボードの設定">ダッシュボードの設定</h3>
<p>ダッシュボードには独自のパネルを簡単に追加することができます。
ダッシュボードの構成はページの一番上にある「Logstash Search」の設定アイコンをクリックすると設定画面が開きます。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20130619/kibana3-dashboad-setting.jpeg" />
    </div>
    <a href="/images/entries/20130619/kibana3-dashboad-setting.jpeg" itemprop="contentUrl"></a>
      <figcaption align="center"><h4>ダッシュボード設定</h4>
      </figcaption>
  </figure>
</div>

<p>「New row」にタイトル名を適当にいれて「Create Row」するとあたらしくパネルを追加することができるRowが追加されます。「Rows」の「Move」にある矢印でRow自体の表示場所を上下に移動することも可能です。</p>
<h3 id="rowの設定">Rowの設定</h3>
<p>追加した「Hoge」にパネルを追加する場合はHogeの上にある設定アイコンをクリックすると設定画面が開きます。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20130619/kibana3-row-setting.jpeg" />
    </div>
    <a href="/images/entries/20130619/kibana3-row-setting.jpeg" itemprop="contentUrl"></a>
      <figcaption align="center"><h4>Rowの設定</h4>
      </figcaption>
  </figure>
</div>

<p>ここでKibana3で用意されているパネルの追加ができます。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20130619/kibana3-panel-add.jpeg" />
    </div>
    <a href="/images/entries/20130619/kibana3-panel-add.jpeg" itemprop="contentUrl"></a>
      <figcaption align="center"><h4>Panel追加ボタン</h4>
      </figcaption>
  </figure>
</div>

<p>パネルを選んでボタンを押せばすぐに表示されます。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20130619/kibana3-sample-panels.jpeg" />
    </div>
    <a href="/images/entries/20130619/kibana3-sample-panels.jpeg" itemprop="contentUrl"></a>
      <figcaption align="center"><h4>パネルの羅列</h4>
      </figcaption>
  </figure>
</div>

<p>こんな感じです。とりあえず、ポコポコと追加してみました。</p>
<p>利用できるパネルの種類は以下の様なパターンです。
適当ですが、表にしてみました。</p>
<table>
<tr><th>パネル名</th><th>概要</th></tr>
<tr><td>column</td><td>Rowの中にパネルを配置するコンテナを用意するためのパネル</td></tr>
<tr><td>dashcontrol</td><td>ダッシュボードの保存、保存したダッシュボードの表示などの操作ボタン</td></tr>
<tr><td>text</td><td>markdown形式などで記述が可能な文章を表示できるパネル</td></tr>
<tr><td>stringquery</td><td>検索クエリ入力用パネル</td></tr>
<tr><td>derivequeries</td><td>フィールドと検索式がわかれた形式の検索入力用パネル</td></tr>
<tr><td>timepicker</td><td>ログ表示の期間を指定するパネル</td></tr>
<tr><td>histogram</td><td>ログの件数のヒストグラム表示用パネル</td></tr>
<tr><td>hits</td><td>ヒット件数表示用パネル</td></tr>
<tr><td>pie</td><td>パイチャート表示用パネル</td></tr>
<tr><td>trends</td><td>指定された時間でデータの増減を%表示するパネル</td></tr>
<tr><td>sort</td><td>ソート条件指定用のプルダウン表示用パネル（変更したらtableの内容がソートされる）</td></tr>
<tr><td>table</td><td>ログデータ表示用パネル</td></tr>
<tr><td>fields</td><td>tableパネルに表示するフィールドを選択するための補助パネル</td></tr>
<tr><td>bettermap</td><td>なんか地図が出てきたパネル<br/>GeoJSONデータをゴニョゴニョ（表示かな？）できるみたい</td></tr>
<tr><td>map</td><td>なんか世界地図が出てきたパネル<br/>２文字の国コード（jaとかか？）かU.S.の州コードのデータを元に地図に色をつけるのかな？</td></tr>
</table>
<p>これらのパネルは個々に色々と設定が可能です。他にもdebug、map2など有りそうでしたがまだ使えないみたいです。</p>
<p>適当に触ってて気づいた注意点です。</p>
<ul>
<li>tableは１ダッシュボードで１つだけが良さそう。
<ul>
<li>２つあると、どちらかにしか描画されない。columnに入れるとグルーピングできたりするのかなぁ？</li>
</ul>
</li>
<li>stringquery、timepickerも１ダッシュボードで１つが良さそう。
<ul>
<li>これもtableと似たような理由です。</li>
</ul>
</li>
<li>ダッシュボード保存し忘れて泣きそうになる
<ul>
<li>JSで実装されてて、自分で色々とカスタマイズできるのですが、保存するのを忘れて泣きそうになりましたｗ</li>
<li>カスタマイズしたダッシュボードについては、ローカルに保存する以外にElasticSearchにも保存ができるみたいです。チームで共有することもできそうです。</li>
</ul>
</li>
<li>derivequeriesを表示するとグラフがカラフルに
<ul>
<li>derivequeriesを追加したらグラフが急にカラフルになりました。</li>
<li>どうもderivequeriesのFieldの部分を変更すると、そのフィールドの値を元にグラフを細分化してくれるようです。色の数の上限はderivequeriesのLength属性の数値で制御出来ます。（5だと5個まで色が出る）</li>
<li>histogramのパネルで自分でクエリを記載することも可能です。ただ、derivequeriesのフィールド変更すると書き換わっちゃいます。。。</li>
</ul>
</li>
</ul>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20130619/kibana3-multi-color-histogram-type.jpeg" />
    </div>
    <a href="/images/entries/20130619/kibana3-multi-color-histogram-type.jpeg" itemprop="contentUrl"></a>
      <figcaption align="center"><h4>derivequeriesを追加したらカラフルに</h4>
      </figcaption>
  </figure>
</div>

<p>ヒストグラムは色々なパターンのグラフを描画できました。ラインによる描画（histo1）、総数を100%としたパーセンテージでの表示（histo2）、ライン＋点による描画（histo3）などです。</p>


<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="/images/entries/20130619/kibana3-several-histogram.jpeg" />
    </div>
    <a href="/images/entries/20130619/kibana3-several-histogram.jpeg" itemprop="contentUrl"></a>
      <figcaption align="center"><h4>ヒストグラムのいくつかのパターン</h4>
      </figcaption>
  </figure>
</div>

<h2 id="感想">感想</h2>
<p>ということで、適当にですが触ってみました。
Kibana2はApacheのアクセスログとかの表示しかできない感じがしましたが、Kibana3だといろいろなデータを描画できそうだなと。
logstash形式のインデックスを用意するのが前提になってるので、時系列データをグラフ描画するのに向いてるんでしょうか。
お手軽にグラフ化できるし、自分でダッシュボードをカスタマイズできるのは素敵です。
ただ、クエリとグラフの関係などはちょっと癖があるかもしれないので、色々と試してみないといけないかもしれないです。
（たとえば、特定のフィールドの値について「A、B、その他」みたいなグラフの描画とかをどうするかとか）</p>
<p>地図の描画は試してみたいかなぁ。</p>
</content:encoded>
    </item>
    
    <item>
      <title>apache-loggen &#43; fluentd &#43; elasticsearch &#43; kibana = ログ検索デモ</title>
      <link>https://blog.johtani.info/blog/2013/06/10/fluent-es-kibana/</link>
      <pubDate>Mon, 10 Jun 2013 23:34:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/06/10/fluent-es-kibana/</guid>
      <description>もう何番煎じだ？ってくらい書かれてますが、コリもせず書いてみました。 Elasticsearch＋Kibanaの環境を作って、タムタムさんのロ</description>
      <content:encoded><p>もう何番煎じだ？ってくらい書かれてますが、コリもせず書いてみました。
Elasticsearch＋Kibanaの環境を作って、タムタムさんのログ生成ツールからApacheのダミーログを流しこんで入れてみました。</p>
<!-- more -->
<h2 id="参考url">参考URL</h2>
<ul>
<li><a href="http://memocra.blogspot.jp/2013/04/kibanakibanaelasticsearchfluentd.html">memorycraftさんのブログ</a></li>
<li><a href="http://kibana.org/">Kibana</a></li>
<li><a href="http://wwwelasticsearch.org">Elasticsearch</a></li>
<li><a href="http://fluentd.org">fluentd</a></li>
<li><a href="http://mt.orz.at/archives/2012/11/apacherubygems.html">apache-loggen</a></li>
</ul>
<h2 id="インストールと起動">インストールと起動</h2>
<p>今回はCentOSへのインストールです。
基本的にはmemorycraftさんのブログの流れのままです。</p>
<h3 id="elasticserchのインストールと起動">elasticserchのインストールと起動</h3>
<p>ダウンロードして、起動するだけ。
お試しということで、-fオプションにてコンソールにログ出力。</p>
<pre><code>curl -OL https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-0.90.1.tar.gz
tar zxvf elasticsearch-0.90.1.tar.gz
cd elasticsearch-0.90.1
./bin/elasticsearch -f
</code></pre><h3 id="kibanaのインストールと起動">Kibanaのインストールと起動</h3>
<p><code>git clone</code>してbundleインストール</p>
<pre><code>git clone --branch=kibana-ruby https://github.com/rashidkpc/Kibana.git
cd Kibana
bundle install
ruby kibana.rb
</code></pre><p>これで、Kibana＋ESのインストール＋起動が完了。
下地が完了。</p>
<h3 id="td-agentのインストールと起動">td-agentのインストールと起動</h3>
<p>ログの流し込みはlogstashなのですが、fluentdのelasticsearchプラグインにて流しこむこともできます。
td.repoとしてtd-agentのリポジトリを登録してから以下を実行します。</p>
<pre><code>yum install td-agent -y
/usr/lib64/fluent/ruby/bin/fluent-gem install fluent-plugin-elasticsearch
vim　/etc/td-agent/td-agent.conf
/etc/init.d/td-agent start
</code></pre><p>これで、td-agentがインストール出来ました。
次は設定です。</p>
<pre><code>&lt;source&gt;
  type tail
  format apache
  path /var/log/httpd/dummy_access_log
  tag dummy.apache.access
&lt;/source&gt;

&lt;match *.apache.*&gt;
  index_name adminpack
  type_name apache
  type elasticsearch
  include_tag_key true
  tag_key @log_name
  host localhost
  port 9200
  logstash_format true
  flush_interval 10s
&lt;/match&gt;
</code></pre><p>以上が設定です。td-agentはtd-agentというユーザで起動されるので、/var/log/httpdディレクトリにアクセスできるかだけ確認が必要です。<br>
いくつかの設定値について気になったので調べました。</p>
<ul>
<li>index_name：adminpackとなってるが、elasticsearchではlogstash-xxxとなってる。
<ul>
<li>これは、logstash_formatがtrueの場合は、利用されないので、指定しなくてもいい。</li>
</ul>
</li>
<li>type_name：Elasticsearchのタイプ名
*　これはlogstash_formatを指定しても有効。ただし、Kibana側で画面からのtype指定は不可能。KibanaConfig.rbにて指定することは可能。</li>
<li>logstash_format：Kibana用にlogstashフォーマットで出力するオプション
<ul>
<li>この指定があるときは、index名が「logstash-YYYY.mm.dd」となる</li>
<li>record（ログ）に@timestampとして時刻が追加される。</li>
</ul>
</li>
<li>tag_key：include_tag_keyがtrueと指定されているため、record（ログ）にtag_keyで指定した文字列をキー、値としてtagの値（上記例だとdummy.apache.access）が付与されて登録される。</li>
</ul>
<h2 id="apache-loggenのインストールと起動">apache-loggenのインストールと起動</h2>
<p>タムタムさんが作成されたApacheのログのダミーを生成するツールです。<br>
gem化されてるので、インストールは非常に簡単です。</p>
<pre><code>gem install apache-loggen
</code></pre><p>で、ログを出力します。出力先は先程設定したdummy_access_logです。</p>
<pre><code>apache-loggen --rate=10 --progress /var/log/httpd/dummy_access_log
</code></pre><p>秒間10アクセスログを出力してくれます。
これで、Kibanaでログが見れるようになりました。
なんて簡単なんでしょう。。。
簡単なログの検索ができてしまいました。
他の形式のログがどうなるのかとかは、また時間があれば。。。</p>
<h2 id="感想とか">感想とか</h2>
<p>非常に簡単でした。素敵です。いくつかこうなるのかな？というのを試してみたのでメモを。</p>
<p>いくつか疑問点です。</p>
<ul>
<li>溜まったログの削除は手動？
<ul>
<li>おそらく。日付ごとにindexが出来上がっているので、削除は楽そう。「logstash-年月日」なので。</li>
</ul>
</li>
<li>認証とかかけれるの？
<ul>
<li>ログ検索は内部でするだろうから、まぁ、なくていいのかな。ログインすらないし。</li>
</ul>
</li>
<li>複数行のログとかってどーすんだろう？（JavaのExceptionとかが混ざるやつ）</li>
</ul>
<p>本格的に触るようになれば調べるかなぁ。。。</p>
<p>あと、ログが増えてきた時にどういった分割構成ができるだろう？って思って考えてみたのが以下になります。</p>
<h3 id="構成パターン">構成パターン</h3>
<p>ログを複数扱う場合は次のようなパターンがありそうかと。</p>
<h4 id="タグfluentdのタグで識別">タグ（fluentdのタグ）で識別</h4>
<p>「@log_name」という名前＝fluentdのタグにてログを識別することで、異なるログを検索することができそうです。
タグであれば、プラグインによってはログ出力時に制御も可能だと思うので、td-agentの設定を変更したりすることもなく対応が可能かと。
ただ、ログの種別ごとにKibanaのプロセスを別にして起動したいといった用途には向いてなさそうです。</p>
<h4 id="type_nameによる識別">type_nameによる識別</h4>
<p>ElasticSearchの機能であるtypeを利用したログの識別パターンです。<br>
fluent-plugin-elasticsearchの設定で<code>type_name</code>を指定しました。
ここを別の名前にすることで、識別することも可能です。</p>
<p><strike>ただし、この場合はKibanaの画面から指定して検索することができません。</strike>
<strong><em>→コメント頂きました。検索条件に「_type:タイプ名」と検索することでtypeを利用した検索が可能です。</em></strong><br>
タグ（@log_name）でも識別できるようにするなどの工夫が必要です。
その代わり、タグ識別ではできなかったKibanaのプロセスを別にして起動することは可能になります。<br>
KibanaConfig.rbのTypeに値を設定することで、起動したKibanaが対象とするログを絞り込むことが可能です。
こうすることで例えば、apache用のKibanaとtomcat用のKibanaは別プロセスにして、ElasticSearchのクラスタは1つという構成も可能になります。</p>
<h4 id="elasticsearchサーバを別立て">ElasticSearchサーバを別立て</h4>
<p>ElasticSearchサーバをそもそも別のプロセスor別のサーバで起動し、Kibanaも別々にすればログの識別も可能です。
可能ですが、色々と管理するものが増えてめんどくさそうですね。。。</p>
<h4 id="インデックス名変更">インデックス名変更</h4>
<p>最後は、fluent-plugin-elasticsearchの設定で「logstash_format」をfalseにすれば、好きなindex_nameを付与できるので、
ログ種別ごとに名前を変更することで識別できます。<br>
ただ、logstash形式でないインデックス名の場合、日付ローテーションができなかったり、Kibana内部で検索時に日付で検索対象を絞り込んで検索することで高速化するといった処理など、使えない機能が多々出てきてしまうのであまりおすすめじゃないかと。。。</p>
<p>ということで、流行りものは触っておこうということで、さわってブログ書いてみました。<br>
開発中に立てておいて、各サーバのログを流しこんでおくなどにも利用できるかもしれないです。
アラート通知などの機能が出てくるともっと便利かもしれないです。</p>
</content:encoded>
    </item>
    
    <item>
      <title>elasticsearch-analysis-kuromojiでユーザ辞書の利用方法(Jugemより移植)</title>
      <link>https://blog.johtani.info/blog/2013/03/20/elasticsearch-analysis-kuromoji%E3%81%A7%E3%83%A6%E3%83%BC%E3%82%B6%E8%BE%9E%E6%9B%B8%E3%81%AE%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 20 Mar 2013 16:43:00 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2013/03/20/elasticsearch-analysis-kuromoji%E3%81%A7%E3%83%A6%E3%83%BC%E3%82%B6%E8%BE%9E%E6%9B%B8%E3%81%AE%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95/</guid>
      <description>なんか、とても久しぶりにイベント参加メモ以外の投稿です。 elastic searchのMLを見てたら、KuromojiのAnalyzerを使うときにユーザ</description>
      <content:encoded><p>なんか、とても久しぶりにイベント参加メモ以外の投稿です。
elastic searchのMLを見てたら、KuromojiのAnalyzerを使うときにユーザ辞書使うのどうするの？という<a href="https://groups.google.com/forum/?fromgroups=#!topic/elasticsearch/7oGNCM7QH4s">投稿</a>を見かけました。</p>
<p>Kuromojiのユーザ辞書にもちょうど興味があったり、elasticsearchもちょっとずつ触りたかったのでちょっと試してみました。（返信もしてみましたが、テキトーな英語です。。。）</p>
<p>elasticsearch-kuromoji-pluginのインストールなどは<a href="http://qiita.com/items/134b049a59fe396c9475">ElasticSearch で kuromoji を使う (ES 0.90.Beta1 + kuromoji 1.2.0篇)</a>を参考にしてください。
私もこちらに記述のある組み合わせ（elasticsearch-0.90.0Beta1 + elasticsearch-analysis-kuromoji/1.2.0）を利用しました。
KuromojiのAnalyzerはデフォルトで「kuromoji」として登録済みですが、こちらはユーザ辞書の指定がありません。
ということで、「kuromoji_user_dict」というユーザ辞書指定をしたtokenizerと、それと使う「my_analyzer」というanalyzerを登録したIndexを作成します。
定義する前に、「userdict_ja.txt」を用意して、elasticsearch-0.90.0Beta1/config/ディレクトリに配置しておきます。
（以下のサンプルでは、SOLE_HOME/example/solr/collection1/conf/lang/userdict_ja.txtをコピーして使いました）</p>
<pre><code>
$ curl -XPUT 'http://localhost:9200/kuromoji_sample/' -d'
{
    &quot;index&quot;:{
        &quot;analysis&quot;:{
            &quot;tokenizer&quot; : {
                &quot;kuromoji_user_dict&quot; : {
                   &quot;type&quot;:&quot;kuromoji_tokenizer&quot;,
                   &quot;user_dictionary&quot;:&quot;userdict_ja.txt&quot;
                }
            },
            &quot;analyzer&quot; : {
                &quot;my_analyzer&quot; : {
                    &quot;type&quot; : &quot;custom&quot;,
                    &quot;tokenizer&quot; : &quot;kuromoji_user_dict&quot;
                }
            }
            
        }
    }
}
'
</code></pre><p>「user_dictionary」というのがユーザ辞書の定義ファイルになります。
注意点としては、6行目で指定した名前「kuromoji_user_dict」を14行目の「tokenizer」に指定しないとちゃんと動かないという点でしょうか。</p>
<p>上記で指定したAnalyzerを利用して「朝青龍」という単語をを解析してみます。</p>
<pre><code>
$ curl -XGET 'http://localhost:9200/kuromoji_sample/_analyze?analyzer=my_analyzer&amp;pretty' -d '朝青龍'
{
 &quot;tokens&quot; : [ {
   &quot;token&quot; : &quot;朝青龍&quot;,
   &quot;start_offset&quot; : 0,
   &quot;end_offset&quot; : 3,
   &quot;type&quot; : &quot;word&quot;,
   &quot;position&quot; : 1
 } ]
</code></pre><p>「朝青龍」という単語がユーザ辞書に登録されているので、1単語として出力されます。
ちなみに、デフォルトの「kuromoji」のanalyzerを指定すると以下の様な出力です。</p>
<pre><code>
$ curl -XGET 'http://localhost:9200/kuromoji_sample/_analyze?analyzer=kuromoji&amp;pretty' -d '朝青龍'
{
 &quot;tokens&quot; : [ {
   &quot;token&quot; : &quot;朝&quot;,
   &quot;start_offset&quot; : 0,
   &quot;end_offset&quot; : 1,
   &quot;type&quot; : &quot;word&quot;,
   &quot;position&quot; : 1
 }, {
   &quot;token&quot; : &quot;青龍&quot;,
   &quot;start_offset&quot; : 1,
   &quot;end_offset&quot; : 3,
   &quot;type&quot; : &quot;word&quot;,
   &quot;position&quot; : 2
 } ]
</code></pre><p>とまぁ、こんなかんじです。
ユーザ辞書を書き換えたあとは「close/open」しないと読み込めないのかなぁ？そのへんはまたあとで調べようかな。</p>
<hr>
<p>ちなみ、以下のページを参考にさせてもらいました。
<a href="http://www.hirotakaster.com/archives/2012/11/elasticsearch-kuromoji-plugin.php">elasticsearch kuromoji plugin - natural days</a>
<a href="http://qiita.com/items/134b049a59fe396c9475">ElasticSearch で kuromoji を使う (ES 0.90.Beta1 + kuromoji 1.2.0篇)</a></p>
</content:encoded>
    </item>
    
  </channel>
</rss>
