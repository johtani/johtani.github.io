<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>logstash on @johtaniの日記 3rd</title>
    <link>https://blog.johtani.info/tags/logstash/</link>
    <description>Recent content in logstash on @johtaniの日記 3rd</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 29 Oct 2015 16:19:57 +0900</lastBuildDate><atom:link href="https://blog.johtani.info/tags/logstash/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Logstash 2.0.0リリース（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/10/29/logstash-2-0-0-released-ja/</link>
      <pubDate>Thu, 29 Oct 2015 16:19:57 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/10/29/logstash-2-0-0-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Logstash 2.0.0 released Logstash 2.0.0が本日（10/28）リリースされました。 このリリースは</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="https://www.elastic.co/blog/logstash-2-0-0-released">Logstash 2.0.0 released</a></p>
<!-- more -->
<p>Logstash 2.0.0が本日（10/28）リリースされました。
この<a href="https://www.elastic.co/downloads/logstash">リリース</a>は
いくつかの設定に関する重要な変更があります。
詳細については、<a href="https://github.com/elastic/logstash/blob/2.0/CHANGELOG.md">changelog</a>または、新しい<a href="https://www.elastic.co/guide/en/logstash/2.0/breaking-changes.html">breaking changes</a>ドキュメントをご覧下さい。</p>
<p>これまでの2.0.0直前のリリースに関する変更点はこちらをご覧ください。</p>
<ul>
<li><a href="https://www.elastic.co/blog/logstash-2-0-0-beta1-released">beta1</a></li>
<li><a href="https://www.elastic.co/blog/logstash-2-0-0-beta2-released">beta2</a></li>
<li><a href="https://www.elastic.co/blog/logstash-2-0-0-beta3-released">beta3</a></li>
<li><a href="https://www.elastic.co/blog/logstash-2-0-0-rc1-released">RC</a></li>
</ul>
<p>ここでは、2.0の主な変更点の概要を説明します。</p>
<h3 id="elasticsearch-20との互換性">Elasticsearch 2.0との互換性</h3>
<p>多くの機能および改善を含んだ<a href="https://www.elastic.co/blog/elasticsearch-2-0-0-released">Elasticsearch 2.0がリリース</a>されました。
Logstash 2.0はこのリリースに対応しています。
Logstashのこれまでのリリースでは、デフォルトで、Javaの <code>node client</code>をElasticsearchとの通信として
使用してきました。
2.0では、HTTPクライアントがデフォルトになります。
これにより、シームレスにユーザのデータを取り込み、付加価値をつけ、Elasticsearchに保存して解析することができます。</p>
<p>HTTPは他のプロトコル（<code>node</code>や<code>transport</code>）同等の機能を持っていますが、
単一のクライアントに接続する時に、少しだけ遅いですが、管理や動作がより簡単です。
HTTPプロトコルを使うことで、Elasticsearchのバージョンのアップグレードが、Logstashのアップグレードすることなく
行うことができます。
デフォルトをHTTPに変更したさらに詳しい情報については<a href="https://www.elastic.co/blog/logstash-2-0-0-beta1-released">beta1のブログ</a>をご覧ください。</p>
<p>他のプロトコル（<code>node</code>と<code>transport</code>）もサポートしますが、これらを利用する場合には、
プラグインを別途インストールする必要があります。</p>
<pre><code>bin/plugin install --version 2.0.0 logstash-output-elasticsearch_java
</code></pre><h4 id="互換性のマトリックス">互換性のマトリックス</h4>
<p>LogstashとElasticsearchのバージョンの互換性は次のようになります。</p>
<p>画像あり。
<a href="https://www.elastic.co/blog/kibana-4-2-0">※画像に関しては原文をご覧ください。</a>
#Image <a href="https://www.elastic.co/assets/bltde5b69e2164aa82f%2Fcompat_matrix.png">https://www.elastic.co/assets/bltde5b69e2164aa82f%2Fcompat_matrix.png</a></p>
<h2 id="shield-20との互換性">Shield 2.0との互換性</h2>
<p>このリリースはShield 2.0リリースにも対応しています。
HTTPプロトコルで、追加のプラグインは必要ありません。
<a href="https://www.elastic.co/guide/en/shield/current/logstash.html">こちらのドキュメント</a>をご覧ください。
<code>transport</code>プロトコルでは、Shield 2.0対応のプラグインを個別にインストールする必要があります。</p>
<pre><code>bin/plugin install --version 2.0.0 logstash-output-elasticsearch_java_shield
</code></pre><h2 id="パフォーマンスの改善">パフォーマンスの改善</h2>
<p>このリリースはまた、多くの部分のパフォーマンスの改善を含んでおり、Logstashを利用してデータをより早く処理することができます。
いくつかをここで説明します。</p>
<ul>
<li>
<p><strong>UserAgentとGeoIPフィルタ</strong>：これらのフィルタで、LRUキャッシュを追加して改善しています。
これにより、IPとユーザエージェントがまとまって現れるというWebリクエストの特性を用いています。
ユーザエージェントフィルタのケースでは、サンプルデータセットにおいて3.7倍ほど早くなりました。
GeoIPでは、1.69倍早くなっています。</p>
</li>
<li>
<p><strong>JSONプロセシング</strong>：LogstashでJSONのsiriaraizu/でシリアライズに利用しているJrJacksonを新しいバージョンにしました。
これにより、JSONの処理が改善されています。</p>
</li>
<li>
<p><strong>フィルタワーカーのより良い値をデフォルトに</strong>：以前のリリースでは、<code>filter_workers</code>の設定は1がデフォルトでした。
これは、フィルタの処理を行うワーカーが1つであるという意味です。
<code>filter_workers</code>の設定のデフォルト値はCPUコア数の半分の値を設定します。フィルタ実行の並列性が上がります。
ですので、複雑なgrokパターンやuseragentフィルタの処理がにとっては重要です。</p>
</li>
</ul>
<h2 id="filebeat-support">Filebeat Support</h2>
<p><a href="https://www.elastic.co/products/beats/filebeat">Filebeat</a>のベータバージョンを<a href="https://www.elastic.co/blog/beats-beta4-filebeat-lightweight-log-forwarding">先日リリース</a>しました。
これは、Logstash Forwarderの次期バージョンです。
Filebeatはファイルベースのログをさらに処理するためにLogstashに送るためのエージェントです。
2.0.0は<a href="https://www.elastic.co/guide/en/logstash/2.0/plugins-inputs-beats.html">logstash-input-beatsプラグイン</a>を使えばFilebeat 1.0.0-beta4とすぐに動作します。</p>
<h2 id="シャットダウン操作">シャットダウン操作</h2>
<p>これまでのLogstashでは、シャットダウンが開始した時に、例外の機構でシャットダウンが開始したことを
プラグインに通知していました。
この処理はサードパーティのコードを使ったプラグインで問題を起こしていました。
Logstashはどの例外を処理するか知らないため、予期しない動作をしていました。
これを修正するためにAPI呼び出し（例えば<code>stop</code>）を各プラグインにシャットダウンのイベントを通知し、
プラグイン自身がきちんと停止するようにしました。
これは、200以上のプラグインに新しいAPIを利用するように修正しないといけないことを意味しました。
しかし、Logstashの停止についてはまだ完全にはフィックスしていません。
とちゅうでおわっているoutputがシャットダウンを遅らせる可能性があるからです。
2.0でAPIの破壊的な変更は適切なリリースでの変更を繰り返すことができる出発点です。</p>
<p>プラグインの開発者へ：もし、Logstash　1.5のプラグインを開発しているなら、
シャットダウンに関する新しいAPIのリストに関するbreaking changesのドキュメントに助言をください。
また、<a href="https://github.com/logstash-plugins/logstash-input-example">example input</a>リポジトリにて、新しいシャットダウンメカニズムの使い方のサンプルコードを提供しています。</p>
<h2 id="ドキュメント">ドキュメント</h2>
<p>2.0に更新された<a href="https://www.elastic.co/guide/en/logstash/2.0/index.html">ドキュメントはこちら</a>です。設定の変更についてもこちらをご覧ください。</p>
<h3 id="20へのアップデート">2.0へのアップデート</h3>
<p>2.0へアップデートする前に、<a href="https://www.elastic.co/guide/en/logstash/2.0/upgrading-logstash.html">アップデートガイド</a>もご覧ください。</p>
<h2 id="フィードバック">フィードバック</h2>
<p>2.0のリリースできたことに、多くのコントリビューター、ユーザに感謝しています。
このリリースに含まれている多くのパッチと全てのプレリリースのテストにも感謝しています。
将来の修正やリリースなどについては<a href="https://www.elastic.co/guide/en/logstash-roadmap/current/index.html">ロードマップ</a>をご覧ください。
2.0は<a href="https://www.elastic.co/downloads/logstash">今日リリース</a>されました。
ご意見ご感想は<a href="https://discuss.elastic.co/c/logstash">Webフォーラム</a>で！</p>
</content:encoded>
    </item>
    
    <item>
      <title>Release, we have（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/10/29/release-we-have-ja/</link>
      <pubDate>Thu, 29 Oct 2015 14:18:59 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/10/29/release-we-have-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Relase, we have ※画像に関しては原文をご覧ください。 Elasticにとって大きな1日</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="https://www.elastic.co/blog/release-we-have">Relase, we have</a>
※画像に関しては原文をご覧ください。</p>
<!-- more -->
<p>Elasticにとって大きな1日（社内では「release bonanza」と呼んでいる）です。
多くの主要なプロダクトを新たにリリースしました。
そして、本日、それらを一緒に利用する時にそれらを一緒に利用する時にユーザの体験についてまとめてみました。</p>
<p>次の通りです。</p>
<p><a href="https://www.elastic.co/blog/elasticsearch-2-0-0-released">Elasticsearch 2.0</a>リリース。
大きなマイルストーン、チームによる改善、そして、コミュニティからの素晴らしい貢献。
Pipeline Aggsと呼ばれる新しいタイプのaggregations、
クエリとフィルタのコンセプトを統合することにより簡素化されたクエリDSL、
better compressionオプション、
JavaのSecurity Managerを有効にすることによる強化されたセキュリティ、
FSの挙動に関する強化（fsync、checksum、atmicなリネーム）、
パフォーマンス、マッピングの挙動の一貫性などなどです。
また、我々のチームによる改善も含まれているLucene 5ベースにアップグレードしています。</p>
<p><a href="https://www.elastic.co/blog/kibana-4-2-0">Kibana 4.2</a>リリース。
Elasticsearch 2.0対応、ダークテーマ、カスタマイズ可能な地図、多くの改善。
Kibana 4.2の多くに作業については外部プラグインサポートといった、内蔵に関するものでした。
この後の説明に続きます。</p>
<p><a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">Marvel 2.0</a>リリース。
Elasticsearch 2.0対応、合理化されたメトリックス、簡素化されたUI、
多くはKibanaプラグイン（Kibanaプラットフォーム上に構築）としての書き換えです。
このKibana拡張の最初の努力は、Kibanaのプラグインをどうやって書くか、
Kibanaユーザに公式に何をする必要があるかといったものを特定するのに役立ちました。
おっと、忘れるところでした、Marvelを全てのユーザにフリーで使えるようにしました。
マルチクラスタサポートについては有償となります。</p>
<p><a href="https://www.elastic.co/blog/sense-2-0-0-beta1">Sense 2.0</a>リリース。
2つ目のKibanaプラグインがこれです。
SenseをKibanaプラグインとして書き換えました。
Elasticsearch 2.0サポート、複数リクエストの実行、
curlへのコピーなどです。
おっと、忘れるところでした。オープンソースとすることにしました！</p>
<p><a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">Shield + Watcher 2.0</a>リリース。ElasticsearchのためのセキュリティプラグインであるShieldと、アラート管理のためのプラグインであるWatcherにも
多くの結果が入っています。
最も要求のあった機能である、フィールドお呼びドキュメントレベルでのセキュリティについて、Luceneに落とし込んで実装しました。
また、セキュリティの操作についてプラガブルに実装できるように変更しました。
Watcherは監視の無効化、SlackやHipChatへの通知（bot ops向け）が可能です。</p>
<p><a href="https://www.elastic.co/blog/logstash-2-0-0-released">Logstash 2.0</a>リリース。
Elasticsearch 2.0のサポート、クリーンな停止、全面的なパフォーマンス改善、<a href="https://www.elastic.co/products/beats">Beats</a>サポート。</p>
<p>ご覧の通り、すべてのプロダクトに関する大きな結果です。
チーム間およびFoundの開発者との間での密な連携に感謝します。
これらが私たちが公式にElasticsearch / Kibanaをホストしている<a href="https://www.elastic.co/found">Found</a>で
利用可能です。</p>
<p>ひゅう、息切れしました。
チームがしてきたことは、感動的で、謙虚で、刺激的です！
Elasticが会社として、全てのユーザ、コントリビュータがどのように私たちの大きなミッションに対する結果をもたらしたかという素晴らしい良い例です。
ユーザに愛され、楽しまれ、成功に導き、革新させる製品を是非ご利用ください。ありがとうございます。</p>
<p>&ldquo;A Lion, in Africa?&rdquo; - まだまだ終わりではありません。この文言で終わりにしますが、すぐに（本当にすぐに）戻ってきます。;)</p>
</content:encoded>
    </item>
    
    <item>
      <title>Logstashを使ったElasticsearchの再インデックス（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2015/05/26/reindex-elasticsearch-with-logstash-ja/</link>
      <pubDate>Tue, 26 May 2015 16:08:10 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/05/26/reindex-elasticsearch-with-logstash-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：Reindex Elasticsearch With Logstash Thanks David! マッピングを変更したり、インデックスの設定を変更したり、あるサ</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="http://david.pilato.fr/blog/2015/05/20/reindex-elasticsearch-with-logstash/">Reindex Elasticsearch With Logstash</a></p>
<p>Thanks David!</p>
<!-- more -->
<p>マッピングを変更したり、インデックスの設定を変更したり、あるサーバから他のサーバや、
あるクラスタから他のクラスタ（例えば複数のデータセンターのような場合）にデータを再インデックスしたくなることがあるでしょう。</p>
<p>後者のような場合は<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html">SnapshotやRestoreの機能</a>を利用することもできますが、インデックスの設定を変更をしたい場合は
その他の方法が必要になります。</p>
<p><a href="https://www.elastic.co/blog/logstash-1-5-0-ga-released">Logstash 1.5.0</a>で、
<a href="https://www.elastic.co/guide/en/logstash/current/plugins-inputs-elasticsearch.html">elasticsearch input</a>と<a href="https://www.elastic.co/guide/en/logstash/current/plugins-outputs-elasticsearch.html">elasticsearch output</a>を使うことで、とても簡単に再インデックスができます。</p>
<p>ではやってみましょう。</p>
<h2 id="古いクラスタ">古いクラスタ</h2>
<p>elasticsearch 1.5.2 はすでにダウンロード済みとして、<code>localhost:9200</code>で<code>old</code>という名前のクラスタを起動します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">bin/elasticsearch --cluster.name<span style="color:#f92672">=</span>old
</code></pre></div><p>クラスタに<code>person</code>という名前のインデックスが存在します。
これは、5シャードで、100万件のドキュメントを持っています。</p>

<link rel="stylesheet" href="/css/hugo-easy-gallery.css" />
<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="http://david.pilato.fr/blog/images/reindex-es01/sense01.png" />
    </div>
    <a href="http://david.pilato.fr/blog/images/reindex-es01/sense01.png" itemprop="contentUrl"></a>
  </figure>
</div>

<h2 id="新しいクラスタ">新しいクラスタ</h2>
<p>次に新しいクラスタを起動します。
<code>localhost:9201</code>で<code>new</code>という名前のクラスタを起動します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">bin/elasticsearch --cluster.name<span style="color:#f92672">=</span>new
</code></pre></div><p>こちらは、空です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">curl -XGET <span style="color:#e6db74">&#34;http://localhost:9201/person&#34;</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
   <span style="color:#f92672">&#34;error&#34;</span>: <span style="color:#e6db74">&#34;IndexMissingException[[person] missing]&#34;</span>,
   <span style="color:#f92672">&#34;status&#34;</span>: <span style="color:#ae81ff">404</span>
}
</code></pre></div><h2 id="logstashのインストール">Logstashのインストール</h2>
<p>次に、Logstash 1.5.0をダウンロードして、インストールします。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">wget http://download.elastic.co/logstash/logstash/logstash-1.5.0.tar.gz
tar xzf logstash-1.5.0.tar.gz
cd logstash-1.5.0
</code></pre></div><p>logstashの設定ファイル<code>logstash.conf</code>を次のように設定します。</p>
<pre><code>input {
  # We read from the &quot;old&quot; cluster
  elasticsearch {
    hosts =&gt; [ &quot;localhost&quot; ]
    port =&gt; &quot;9200&quot;
    index =&gt; &quot;person&quot;
    size =&gt; 500
    scroll =&gt; &quot;5m&quot;
    docinfo =&gt; true
  }
}

output {
  # We write to the &quot;new&quot; cluster
  elasticsearch {
    host =&gt; &quot;localhost&quot;
    port =&gt; &quot;9201&quot;
    protocol =&gt; &quot;http&quot;
    index =&gt; &quot;%{[@metadata][_index]}&quot;
    index_type =&gt; &quot;%{[@metadata][_type]}&quot;
    document_id =&gt; &quot;%{[@metadata][_id]}&quot;
  }
  # We print dots to see it in action
  stdout {
    codec =&gt; &quot;dots&quot;
  }
}
</code></pre><h2 id="実行と修正">実行と修正</h2>
<p>実行します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">bin/logstash -f logstash.conf
</code></pre></div><h3 id="ドキュメントのチェックと修正">ドキュメントのチェックと修正</h3>
<p>何が起きたでしょう？</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">curl -XGET <span style="color:#e6db74">&#34;http://localhost:9200/person/person/AU1wqyQWZJKU8OibfxgH&#34;</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
   <span style="color:#f92672">&#34;_index&#34;</span>: <span style="color:#e6db74">&#34;person&#34;</span>,
   <span style="color:#f92672">&#34;_type&#34;</span>: <span style="color:#e6db74">&#34;person&#34;</span>,
   <span style="color:#f92672">&#34;_id&#34;</span>: <span style="color:#e6db74">&#34;AU1wqyQWZJKU8OibfxgH&#34;</span>,
   <span style="color:#f92672">&#34;_version&#34;</span>: <span style="color:#ae81ff">1</span>,
   <span style="color:#f92672">&#34;found&#34;</span>: <span style="color:#66d9ef">true</span>,
   <span style="color:#f92672">&#34;_source&#34;</span>: {
      <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Tali Elyne&#34;</span>,
      <span style="color:#f92672">&#34;dateOfBirth&#34;</span>: <span style="color:#e6db74">&#34;1955-05-03&#34;</span>,
      <span style="color:#f92672">&#34;gender&#34;</span>: <span style="color:#e6db74">&#34;female&#34;</span>,
      <span style="color:#f92672">&#34;children&#34;</span>: <span style="color:#ae81ff">2</span>,
      <span style="color:#f92672">&#34;marketing&#34;</span>: {
         <span style="color:#f92672">&#34;cars&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;shoes&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;toys&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;fashion&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;music&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;garden&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;electronic&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;hifi&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;food&#34;</span>: <span style="color:#ae81ff">846</span>
      },
      <span style="color:#f92672">&#34;address&#34;</span>: {
         <span style="color:#f92672">&#34;country&#34;</span>: <span style="color:#e6db74">&#34;Germany&#34;</span>,
         <span style="color:#f92672">&#34;zipcode&#34;</span>: <span style="color:#e6db74">&#34;0099&#34;</span>,
         <span style="color:#f92672">&#34;city&#34;</span>: <span style="color:#e6db74">&#34;Bonn&#34;</span>,
         <span style="color:#f92672">&#34;countrycode&#34;</span>: <span style="color:#e6db74">&#34;DE&#34;</span>,
         <span style="color:#f92672">&#34;location&#34;</span>: [
            <span style="color:#ae81ff">7.075943707068682</span>,
            <span style="color:#ae81ff">50.72883500730124</span>
         ]
      }
   }
}
</code></pre></div><p>もう一方のクラスタと比較してみましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">curl -XGET <span style="color:#e6db74">&#34;http://localhost:9201/person/person/AU1wqyQWZJKU8OibfxgH&#34;</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
   <span style="color:#f92672">&#34;_index&#34;</span>: <span style="color:#e6db74">&#34;person&#34;</span>,
   <span style="color:#f92672">&#34;_type&#34;</span>: <span style="color:#e6db74">&#34;person&#34;</span>,
   <span style="color:#f92672">&#34;_id&#34;</span>: <span style="color:#e6db74">&#34;AU1wqyQWZJKU8OibfxgH&#34;</span>,
   <span style="color:#f92672">&#34;_version&#34;</span>: <span style="color:#ae81ff">1</span>,
   <span style="color:#f92672">&#34;found&#34;</span>: <span style="color:#66d9ef">true</span>,
   <span style="color:#f92672">&#34;_source&#34;</span>: {
      <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Tali Elyne&#34;</span>,
      <span style="color:#f92672">&#34;dateOfBirth&#34;</span>: <span style="color:#e6db74">&#34;1955-05-03&#34;</span>,
      <span style="color:#f92672">&#34;gender&#34;</span>: <span style="color:#e6db74">&#34;female&#34;</span>,
      <span style="color:#f92672">&#34;children&#34;</span>: <span style="color:#ae81ff">2</span>,
      <span style="color:#f92672">&#34;marketing&#34;</span>: {
         <span style="color:#f92672">&#34;cars&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;shoes&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;toys&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;fashion&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;music&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;garden&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;electronic&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;hifi&#34;</span>: <span style="color:#66d9ef">null</span>,
         <span style="color:#f92672">&#34;food&#34;</span>: <span style="color:#ae81ff">846</span>
      },
      <span style="color:#f92672">&#34;address&#34;</span>: {
         <span style="color:#f92672">&#34;country&#34;</span>: <span style="color:#e6db74">&#34;Germany&#34;</span>,
         <span style="color:#f92672">&#34;zipcode&#34;</span>: <span style="color:#e6db74">&#34;0099&#34;</span>,
         <span style="color:#f92672">&#34;city&#34;</span>: <span style="color:#e6db74">&#34;Bonn&#34;</span>,
         <span style="color:#f92672">&#34;countrycode&#34;</span>: <span style="color:#e6db74">&#34;DE&#34;</span>,
         <span style="color:#f92672">&#34;location&#34;</span>: [
            <span style="color:#ae81ff">7.075943707068682</span>,
            <span style="color:#ae81ff">50.72883500730124</span>
         ]
      },
      <span style="color:#f92672">&#34;@version&#34;</span>: <span style="color:#e6db74">&#34;1&#34;</span>,
      <span style="color:#f92672">&#34;@timestamp&#34;</span>: <span style="color:#e6db74">&#34;2015-05-20T09:53:44.089Z&#34;</span>
   }
}
</code></pre></div><p>Logstashは<code>@version</code>と<code>@timestamp</code>フィールドを追加してしました。
これらを除去したいので、<a href="http://www.elastic.co/guide/en/logstash/current/plugins-filters-mutate.html">Mutate filter plugin</a>の<a href="http://www.elastic.co/guide/en/logstash/current/plugins-filters-mutate.html#plugins-filters-mutate-remove_field"><code>remove_field</code></a>を使います。</p>
<pre><code>filter {
  mutate {
    remove_field =&gt; [ &quot;@timestamp&quot;, &quot;@version&quot; ]
  }
}
</code></pre><h3 id="マッピングのチェックと修正">マッピングのチェックと修正</h3>
<p>実際に、logstashは<code>_source</code>フィールドを既存のドキュメントから読み込み、
それらを新しいクラスタに直接投入しています。
しかし、logstashはマッピングについてはケアしていません。</p>
<p>古いマッピングと新しいマッピングを比較するために、マッピングを取得してみましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">curl -XGET <span style="color:#e6db74">&#34;http://localhost:9200/person/person/_mapping&#34;</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
   <span style="color:#f92672">&#34;person&#34;</span>: {
      <span style="color:#f92672">&#34;mappings&#34;</span>: {
         <span style="color:#f92672">&#34;person&#34;</span>: {
            <span style="color:#f92672">&#34;properties&#34;</span>: {
               <span style="color:#f92672">&#34;address&#34;</span>: {
                  <span style="color:#f92672">&#34;properties&#34;</span>: {
                     <span style="color:#f92672">&#34;city&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>,
                        <span style="color:#f92672">&#34;index&#34;</span>: <span style="color:#e6db74">&#34;not_analyzed&#34;</span>
                     },
                     <span style="color:#f92672">&#34;country&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>,
                        <span style="color:#f92672">&#34;index&#34;</span>: <span style="color:#e6db74">&#34;not_analyzed&#34;</span>
                     },
                     <span style="color:#f92672">&#34;countrycode&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>,
                        <span style="color:#f92672">&#34;index&#34;</span>: <span style="color:#e6db74">&#34;not_analyzed&#34;</span>
                     },
                     <span style="color:#f92672">&#34;location&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;geo_point&#34;</span>
                     },
                     <span style="color:#f92672">&#34;zipcode&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>
                     }
                  }
               },
               <span style="color:#f92672">&#34;children&#34;</span>: {
                  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
               },
               <span style="color:#f92672">&#34;dateOfBirth&#34;</span>: {
                  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;date&#34;</span>,
                  <span style="color:#f92672">&#34;format&#34;</span>: <span style="color:#e6db74">&#34;dateOptionalTime&#34;</span>
               },
               <span style="color:#f92672">&#34;gender&#34;</span>: {
                  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>,
                  <span style="color:#f92672">&#34;index&#34;</span>: <span style="color:#e6db74">&#34;not_analyzed&#34;</span>
               },
               <span style="color:#f92672">&#34;marketing&#34;</span>: {
                  <span style="color:#f92672">&#34;properties&#34;</span>: {
                     <span style="color:#f92672">&#34;cars&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;electronic&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;fashion&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;food&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;garden&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;hifi&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;music&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;shoes&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;toys&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     }
                  }
               },
               <span style="color:#f92672">&#34;name&#34;</span>: {
                  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>
               }
            }
         }
      }
   }
}
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">curl -XGET <span style="color:#e6db74">&#34;http://localhost:9201/person/person/_mapping&#34;</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
   <span style="color:#f92672">&#34;person&#34;</span>: {
      <span style="color:#f92672">&#34;mappings&#34;</span>: {
         <span style="color:#f92672">&#34;person&#34;</span>: {
            <span style="color:#f92672">&#34;properties&#34;</span>: {
               <span style="color:#f92672">&#34;address&#34;</span>: {
                  <span style="color:#f92672">&#34;properties&#34;</span>: {
                     <span style="color:#f92672">&#34;city&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>
                     },
                     <span style="color:#f92672">&#34;country&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>
                     },
                     <span style="color:#f92672">&#34;countrycode&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>
                     },
                     <span style="color:#f92672">&#34;location&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;double&#34;</span>
                     },
                     <span style="color:#f92672">&#34;zipcode&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>
                     }
                  }
               },
               <span style="color:#f92672">&#34;children&#34;</span>: {
                  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
               },
               <span style="color:#f92672">&#34;dateOfBirth&#34;</span>: {
                  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;date&#34;</span>,
                  <span style="color:#f92672">&#34;format&#34;</span>: <span style="color:#e6db74">&#34;dateOptionalTime&#34;</span>
               },
               <span style="color:#f92672">&#34;gender&#34;</span>: {
                  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>
               },
               <span style="color:#f92672">&#34;marketing&#34;</span>: {
                  <span style="color:#f92672">&#34;properties&#34;</span>: {
                     <span style="color:#f92672">&#34;cars&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;electronic&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;fashion&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;food&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;garden&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;hifi&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;music&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;shoes&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     },
                     <span style="color:#f92672">&#34;toys&#34;</span>: {
                        <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;long&#34;</span>
                     }
                  }
               },
               <span style="color:#f92672">&#34;name&#34;</span>: {
                  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;string&#34;</span>
               }
            }
         }
      }
   }
}
</code></pre></div><p>これにより、いくつかの相違を発見できます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"> <span style="color:#e6db74">&#34;location&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> {
    <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;geo_point&#34;</span>
 }
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"> <span style="color:#e6db74">&#34;location&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> {
    <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;double&#34;</span>
 }
</code></pre></div><p>データをインデックスする「前」に、実際に利用したいマッピングでインデックスを作成しておくことで、
この問題に対処できます。
この時点で、オリジナルのマッピングを望んだ形に変更することができます。例えば、アナライザを変更したりです。
また、インデックスの設定を新しく定義することもできます。
デフォルトでは、Elasticsearchは5つのシャードと各シャードに対して1つのレプリカを作成します。
しかし、この時点でもう一度変更することが可能です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">curl -XDELETE <span style="color:#e6db74">&#34;http://localhost:9201/person&#34;</span>
curl -XPUT <span style="color:#e6db74">&#34;http://localhost:9201/person&#34;</span> -d<span style="color:#e6db74">&#39;
</span><span style="color:#e6db74">{
</span><span style="color:#e6db74">  &#34;settings&#34;: {
</span><span style="color:#e6db74">    &#34;number_of_shards&#34;: 1,
</span><span style="color:#e6db74">    &#34;number_of_replicas&#34;: 0
</span><span style="color:#e6db74">  }
</span><span style="color:#e6db74">}&#39;</span>
curl -XPUT <span style="color:#e6db74">&#34;http://localhost:9201/person/person/_mapping&#34;</span> -d<span style="color:#e6db74">&#39;
</span><span style="color:#e6db74">{
</span><span style="color:#e6db74">  &#34;person&#34;: {
</span><span style="color:#e6db74">    &#34;properties&#34;: {
</span><span style="color:#e6db74">      &#34;address&#34;: {
</span><span style="color:#e6db74">        &#34;properties&#34;: {
</span><span style="color:#e6db74">          &#34;city&#34;: {
</span><span style="color:#e6db74">            &#34;type&#34;: &#34;string&#34;,
</span><span style="color:#e6db74">            &#34;index&#34;: &#34;not_analyzed&#34;
</span><span style="color:#e6db74">          },
</span><span style="color:#e6db74">          &#34;country&#34;: {
</span><span style="color:#e6db74">            &#34;type&#34;: &#34;string&#34;,
</span><span style="color:#e6db74">            &#34;index&#34;: &#34;not_analyzed&#34;
</span><span style="color:#e6db74">          },
</span><span style="color:#e6db74">          &#34;countrycode&#34;: {
</span><span style="color:#e6db74">            &#34;type&#34;: &#34;string&#34;,
</span><span style="color:#e6db74">            &#34;index&#34;: &#34;not_analyzed&#34;
</span><span style="color:#e6db74">          },
</span><span style="color:#e6db74">          &#34;location&#34;: {
</span><span style="color:#e6db74">            &#34;type&#34;: &#34;geo_point&#34;
</span><span style="color:#e6db74">          },
</span><span style="color:#e6db74">          &#34;zipcode&#34;: {
</span><span style="color:#e6db74">            &#34;type&#34;: &#34;string&#34;
</span><span style="color:#e6db74">          }
</span><span style="color:#e6db74">        }
</span><span style="color:#e6db74">      },
</span><span style="color:#e6db74">      &#34;children&#34;: {
</span><span style="color:#e6db74">        &#34;type&#34;: &#34;long&#34;
</span><span style="color:#e6db74">      },
</span><span style="color:#e6db74">      &#34;dateOfBirth&#34;: {
</span><span style="color:#e6db74">        &#34;type&#34;: &#34;date&#34;,
</span><span style="color:#e6db74">        &#34;format&#34;: &#34;dateOptionalTime&#34;
</span><span style="color:#e6db74">      },
</span><span style="color:#e6db74">      &#34;gender&#34;: {
</span><span style="color:#e6db74">        &#34;type&#34;: &#34;string&#34;,
</span><span style="color:#e6db74">        &#34;index&#34;: &#34;not_analyzed&#34;
</span><span style="color:#e6db74">      },
</span><span style="color:#e6db74">      &#34;marketing&#34;: {
</span><span style="color:#e6db74">        &#34;properties&#34;: {
</span><span style="color:#e6db74">          &#34;cars&#34;: {
</span><span style="color:#e6db74">            &#34;type&#34;: &#34;long&#34;
</span><span style="color:#e6db74">          },
</span><span style="color:#e6db74">          &#34;electronic&#34;: {
</span><span style="color:#e6db74">            &#34;type&#34;: &#34;long&#34;
</span><span style="color:#e6db74">          },
</span><span style="color:#e6db74">          &#34;fashion&#34;: {
</span><span style="color:#e6db74">            &#34;type&#34;: &#34;long&#34;
</span><span style="color:#e6db74">          },
</span><span style="color:#e6db74">          &#34;food&#34;: {
</span><span style="color:#e6db74">            &#34;type&#34;: &#34;long&#34;
</span><span style="color:#e6db74">          },
</span><span style="color:#e6db74">          &#34;garden&#34;: {
</span><span style="color:#e6db74">            &#34;type&#34;: &#34;long&#34;
</span><span style="color:#e6db74">          },
</span><span style="color:#e6db74">          &#34;hifi&#34;: {
</span><span style="color:#e6db74">            &#34;type&#34;: &#34;long&#34;
</span><span style="color:#e6db74">          },
</span><span style="color:#e6db74">          &#34;music&#34;: {
</span><span style="color:#e6db74">            &#34;type&#34;: &#34;long&#34;
</span><span style="color:#e6db74">          },
</span><span style="color:#e6db74">          &#34;shoes&#34;: {
</span><span style="color:#e6db74">            &#34;type&#34;: &#34;long&#34;
</span><span style="color:#e6db74">          },
</span><span style="color:#e6db74">          &#34;toys&#34;: {
</span><span style="color:#e6db74">            &#34;type&#34;: &#34;long&#34;
</span><span style="color:#e6db74">          }
</span><span style="color:#e6db74">        }
</span><span style="color:#e6db74">      },
</span><span style="color:#e6db74">      &#34;name&#34;: {
</span><span style="color:#e6db74">        &#34;type&#34;: &#34;string&#34;
</span><span style="color:#e6db74">      }
</span><span style="color:#e6db74">    }
</span><span style="color:#e6db74">  }
</span><span style="color:#e6db74">}&#39;</span>
</code></pre></div><p>さて、もう一度再インデックスしましょう！</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">bin/logstash -f logstash.conf
</code></pre></div>

<div class="box" >
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img itemprop="thumbnail" src="http://david.pilato.fr/blog/images/reindex-es01/sense02.png" />
    </div>
    <a href="http://david.pilato.fr/blog/images/reindex-es01/sense02.png" itemprop="contentUrl"></a>
  </figure>
</div>

<h2 id="インデックスやタイプ名の変更">インデックスやタイプ名の変更</h2>
<p>もちろん、インデックス名やタイプ名、IDを変更したい場合も変更が可能です！:)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">  <span style="color:#960050;background-color:#1e0010">elasticsearch</span> {
    <span style="color:#960050;background-color:#1e0010">host</span> <span style="color:#960050;background-color:#1e0010">=&gt;</span> <span style="color:#f92672">&#34;localhost&#34;</span>
    <span style="color:#960050;background-color:#1e0010">port</span> <span style="color:#960050;background-color:#1e0010">=&gt;</span> <span style="color:#e6db74">&#34;9201&#34;</span>
    <span style="color:#960050;background-color:#1e0010">protocol</span> <span style="color:#960050;background-color:#1e0010">=&gt;</span> <span style="color:#e6db74">&#34;http&#34;</span>
    <span style="color:#960050;background-color:#1e0010">index</span> <span style="color:#960050;background-color:#1e0010">=&gt;</span> <span style="color:#e6db74">&#34;europe_people&#34;</span>
    <span style="color:#960050;background-color:#1e0010">index_type</span> <span style="color:#960050;background-color:#1e0010">=&gt;</span> <span style="color:#e6db74">&#34;someone&#34;</span>
    <span style="color:#960050;background-color:#1e0010">document_id</span> <span style="color:#960050;background-color:#1e0010">=&gt;</span> <span style="color:#e6db74">&#34;%{[@metadata][_id]}&#34;</span>
  }
</code></pre></div></content:encoded>
    </item>
    
    <item>
      <title>Logstashプラグインのエコシステムの変更（日本語訳）</title>
      <link>https://blog.johtani.info/blog/2014/12/14/plugin-ecosystem-changes/</link>
      <pubDate>Sun, 14 Dec 2014 01:00:40 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/12/14/plugin-ecosystem-changes/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：exciting logstash plugin ecosystem changes Logstash 1.5.0 Beta 1(お試しはこちら)のリリースで、 プラグインのインストー</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="http://www.elasticsearch.org/blog/plugin-ecosystem-changes/">exciting logstash plugin ecosystem changes</a></p>
<p>Logstash 1.5.0 Beta 1(<a href="http://www.elasticsearch.org/overview/logstash/download/">お試しはこちら</a>)のリリースで、
プラグインのインストール、管理、公開の方法を変更しています。
ユーザやコミュニティからフィードバックをもらいました。
その目的は、プラグインの利用や開発をより簡単にすることです。
このプロジェクトは始まったばかりです。プラグインのコミュニティを探し、
共有するためのワンストップソリューションを提供するこのアイデアを改善していく予定です。
このブログで、この決定を行った理由を説明し、新しいワークフローをと今後のロードマップを説明します。</p>
<!-- more -->
<h2 id="プラグインがあります">プラグインがあります！</h2>
<p>Logstashは、プラグイン（input、filter、output、codec）が豊富にあります。
これらは、Elasticsearchにより開発されたものと、コミュニティからコントリビュートされたものです。
Logstashの主な特長の1つは、これらのプラグインの有効性と動作を拡張するプラグインを追加するのが簡単なことです。
現在、165以上のプラグインがエコシステムにあり、これらは、2つのプロジェクトに分かれています。</p>
<ul>
<li><code>logstash-core</code>は最もよく使われるプラグインで、Logstashにデフォルトで含まれます</li>
<li><code>logstash-contrib</code>はコミュニティにより開発されたプラグインを含み、別途ダウンロードできます</li>
</ul>
<h2 id="新プラグインエコシステムの変更">新プラグインエコシステムの変更</h2>
<p>1.5.0では、全てのプラグインは、Logstashコアから分離され、rubygemsを使って個別にパッケージングされます。
rubygemsを選択したのは、依存関係のあるライブラリの配布とパッケージングがパワフルで一般的なものだからです。
さらに、<a href="http://rubygems.org/">rubygems.org</a>プラットフォームは配布や探索に影響があります。
また、Logstashにプラグインをインストール、アップデート、削除するのが簡単な基盤も追加しました。
<code>contrib</code>プロジェクトは徐々に終了します。全てのプラグインは個別のプロジェクトになります。</p>
<h2 id="プラグインエコシステム変更の理由">プラグインエコシステム変更の理由</h2>
<p>多数のプラグインをもっていると、配布と公開に関して難題が出てきます。
私たちが変更するに至った理由は次のようなものです。</p>
<ul>
<li>現在は、プラグインの更新に伴い、Logstashの新バージョンのリリースが必要</li>
<li>開発者は、Logstashのリリース間隔とは別に、新バージョンをリリースをしたい</li>
<li>プラグイン開発者は、外部依存を記述できるようにしたい</li>
<li>Logstashコアの配布パッケージのダウンロードサイズを小さくし、ユーザは必要なプラグインのみインストール</li>
<li><code>logstash-contrib</code>を1つのリポジトリとして管理するのは難しい</li>
</ul>
<h2 id="詳細">詳細：</h2>
<h3 id="ソースコードの場所">ソースコードの場所</h3>
<p>Logstashのソースコードは、今後も<a href="https://github.com/elasticsearch/logstash">現在のGitHubのリポジトリ</a>のままです。
しかし、プラグインに関するコードやテストコードは含まなくなります。
この分離により、個別のプラグインの改善と同様にコアの改善に集中できます。
これにより、Logstashプロジェクトの全体の品質も向上します。</p>
<p>全プラグインのソースコードは、新しいGitHub organization、<a href="https://github.com/logstash-plugins">logstash-plugins</a>にて管理します。
各プラグインは個別のリポジトリとして、ここに配置されます。
一見すると、これはメンテナンスが難しくなるように思えます。しかし、テスト、Issue、依存関係を明確にすることができます。
私たちの目的は、テスト、ドキュメント、gemの公開の自動化であり、これを簡単にするためのツールを追加します。</p>
<p>しかし、プラグインの開発者はプラグインのソースコードソースコードをlogstash-pluginsに置く必要はありません。
ー コミュニティで利用可能にするために、<a href="http://rubygems.org/">rubygems.org</a>でそれを公開するだけで良いです。</p>
<h2 id="ワークフロー">ワークフロー</h2>
<p>ここで、新プラグインエコシステムのやりとり/ワークフローについて、いくつかの観点から説明します。</p>
<h3 id="logstashユーザ">logstashユーザ:</h3>
<p>ユーザは、これまでのリリース同様にLogstashのバイナリをダウンロードします。
Logstash 1.5.0は、1.4.2でパッケージされていたプラグインと同等のものが含まれています。
新しいシステムに簡単に移行できるようにです。
そして、ユーザは、最初のデプロイの後に、Logstashプラグインのをインストール、アップグレードできるようになります。</p>
<p><code>$LS_HOME/bin/plugin</code>スクリプトがプラグイン操作に関連するコマンドになります。</p>
<h5 id="プラグインのインストール">プラグインのインストール</h5>
<p>プラグインのほとんどはgemとして<a href="http://rubygems.org/">rubygems.org</a>にアップロードされます。
例えば、もしユーザが<a href="https://github.com/logstash-plugins/logstash-output-kafka">Apache Kafka outputプラグイン</a>をインストールする場合、次のコマンドを実行します。</p>
<pre><code>bin/plugin install logstash-output-kafka
</code></pre><p>または、ファイルをダウンロード済みの場合は次のコマンドとなります。</p>
<pre><code>bin/plugin install /path/to/logstash-output-kafka-1.0.0.gem
</code></pre><h5 id="プラグインの削除">プラグインの削除</h5>
<pre><code>bin/plugin uninstall logstash-output-kafka
</code></pre><h5 id="1つまた全プラグインのアップデート">1つまた全プラグインのアップデート</h5>
<pre><code>bin/plugin update
</code></pre><pre><code>bin/plugin update logstash-output-kafka
</code></pre><h5 id="プラグインのリストアップ">プラグインのリストアップ</h5>
<pre><code>bin/plugin list
</code></pre><pre><code>bin/plugin list elasticsearch ( List all plugins containing a name )
</code></pre><pre><code>bin/plugin list --group output ( list all outputs )
</code></pre><h4 id="ドキュメント">ドキュメント</h4>
<p>プラグインが個別に管理されても、<a href="http://www.elasticsearch.org/guide/en/logstash/current/index.html">全プラグインのドキュメントは1カ所</a>です。</p>
<h3 id="logstash-plugin開発者">logstash plugin開発者:</h3>
<p>プラグイン開発者と作者は、Logstashエコシステムのためにプラグインを公開することができます。
プラグインは、gemやJavaライブラリの依存関係を宣言できます。
より重要なのは、Logstashのリリース間隔に関係なく、プラグインの改善版をリリースできます。</p>
<p>Rubygemsテクノロジはパッケージングシステム、依存関係管理、ホスティングのために選択されてきました。
Rubyのgemを公開することに慣れている開発者は、Logstashプラグインを簡単に公開することができます。
Elasticsearchはこれらの機能に関して開発者を支援するために、ツールを提供、メンテナンスします。</p>
<h4 id="開発およびローカルでのテスト">開発およびローカルでのテスト</h4>
<p>JRuby <code>1.7.16</code>がプラグインを開発するための唯一の前提条件です。
プラグインにパッチを提供するのは以前と同様です。
例えば、<code>logstash-output-kafka</code>にパッチを送るのは次のようになります。</p>
<ol>
<li><code>git clone https://github.com/logstash-plugins/logstash-output-kafka.git</code></li>
<li>変更</li>
<li>プラグインをローカルでテスト
<ul>
<li><code>bundle install</code></li>
<li><code>bundle exec rspec</code></li>
<li>Logstashの他のバージョンもしくはローカルでテストする場合、Gemfileを編集し、    次のように別のロケーションを加えます。<code>gem &quot;logstash&quot;, :github =&gt; &quot;elasticsearch/logstash&quot;, :ref =&gt; &quot;master&quot;</code></li>
</ul>
</li>
<li>新しいPull Requestを<code>logstash-output-kafka</code>に対して作成</li>
<li>コミュニティでコードレビューを受け、Elasticsearchがパッチを受け入れ</li>
</ol>
<h4 id="バージョン">バージョン</h4>
<p>バージョン情報は、それぞれのプラグインの<code>.gemspec</code>で管理します。
例えば、Apache Kafka outputのgemspecは<a href="https://github.com/logstash-plugins/logstash-output-kafka/blob/master/logstash-output-kafka.gemspec">こちら</a>です。
バージョニングは<a href="http://semver.org/">semantic versioning</a>のルールに従い、
Logstashのバージョニングとは別に、プラグインの開発者によって管理されます。
Logstash 1.5.0がリリースされると、マイルストーン1のプラグインはバージョン1.0.0となり、マイルストーン2のプラグインはバージョン2.0.0となるでしょう。</p>
<h4 id="公開">公開</h4>
<p>開発者が変更を加えプラグインを公開したいと思った時、<code>.gemspec</code>のバージョン番号を変更します。
全テストが成功した時、Elasticsearchはrubygems.orgにプラグインを手動で公開します。
もし、テストが失敗した場合、プラグインは公開されません。
長期的には、プラグインの公開の自動化を行いたいと思っています。
この変更は新しいため、公開の自動化を提供する前に、自動化についてより理解し、プラグインのテスト基盤を改良したいと思っています。</p>
<h4 id="issue">Issue</h4>
<p>Issueは、各プラグインのGitHubリポジトリに対してオープンなければなりません。
Logstashコアのリポジトリは、コアのパイプラインや共通的な機能に関連するIssueについて扱います。</p>
<h4 id="ドキュメント-1">ドキュメント</h4>
<p>プラグインのドキュメントはソースコード自体から生成されます。
それぞれのプラグインのドキュメントは、そのプラグインのリポジトリに含まれます。
Elasticsearchは
<a href="http://www.elasticsearch.org/guide">elasticsearch.org/guide</a>に全てのプラグインのドキュメントを集め生成できる基盤を提供します。</p>
<h4 id="移行">移行</h4>
<p>全ての新しいpull requestとissueは<a href="https://github.com/logstash-plugins">logstash-plugin</a> organisation配下にある各プラグインのリポジトリに対してオープンする必要があります。</p>
<h5 id="すでにあるprはどうすれば良いですか">すでにあるPRはどうすれば良いですか？</h5>
<p>気にしないでください。すでにあるpull requestは開発者によって移行する必要はありません。
LogstashチームがLogstashコアリポジトリに対してのPRを、個別の関連するプラグインのリポジトリに対してマージします。</p>
<pre><code>git clone … # clone the specific plugin repo
# now apply the patch
curl -s https://github.com/elasticsearch/logstash/pull/XXXX | git am --3way
git push
</code></pre><p><strong>Note:このプロセスはすでにあるPRに対してgit historyを管理します</strong></p>
<h5 id="github-issue">GitHub Issue</h5>
<p>現在、LogstashリポジトリにオープンされているIssueは、それぞれのプラグインのリポジトリに移行します。
Logstashチームがgithub.com APIを利用してこの処理を自動的に行います。
安心してください。私たちが個別のプラグインに対する既存のIssueを移行します。</p>
<h2 id="今後のロードマップ">今後のロードマップ</h2>
<p>これは、最初のステップであり、これらの変更は、ユーザや開発者に対してエコシステムをよりよくするために、
しっかりとした基盤を提供します。</p>
<p>短期的には、開発者のためにpull requestのフィードバックでテスト自動化を提供する基盤を追加していきます。
プラグインリポジトリのブートストラップや管理のためのツールも提供していきます。</p>
<p>長期的には、すべてのLogstashプラグインを探し、公開するためのコミュニティポータルを提供したいと思っています。
このアイデアは、Puppet ForgeやAWS marketplaceのようなものです。</p>
<p><a href="http://www.elasticsearch.org/blog/logstash-1-5-0-beta1-released/">Logstash 1.5.0 Beta 1</a>をリリースし、これは新しいエコシステムを提供します。
ぜひ、試していただき、これらの変更に関して感じたことを教えてください。
あなたのフィードバック(<a href="http://twitter.com/elasticsearch">Twitter</a>もしくは<a href="https://github.com/elasticsearch/logstash/issues/new">GitHub</a>)はとても貴重です！</p>
</content:encoded>
    </item>
    
    <item>
      <title>Logstash 1.5.0 Beta1リリース(日本語訳)</title>
      <link>https://blog.johtani.info/blog/2014/12/12/logstash-1-5-0-beta1-released-ja/</link>
      <pubDate>Fri, 12 Dec 2014 17:17:26 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/12/12/logstash-1-5-0-beta1-released-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：logstash 1.5.0.beta1 released Logstash 1.5.0 Beta1をリリースしました。こちらのページからダウンロードで</description>
      <content:encoded><p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>
<p>原文：<a href="http://www.elasticsearch.org/blog/logstash-1-5-0-beta1-released/">logstash 1.5.0.beta1 released</a></p>
<p>Logstash 1.5.0 Beta1をリリースしました。<a href="http://www.elasticsearch.org/overview/logstash/download/">こちらのページ</a>からダウンロードできます。</p>
<p><strong>Note: ベータリリースです。本番環境では使用しないでください。</strong></p>
<!-- more -->
<h2 id="150の主な変更点は">1.5.0の主な変更点は？</h2>
<p>1.5.0の主なテーマはプラグイン管理、パフォーマンス改善、<a href="http://kafka.apache.org/">Apache Kafka</a>インテグレーションです。Logstashの主な特徴の1つは
プラグインを利用できることであり、パイプラインの動作を拡張するためにプラグインを追加するのが簡単なことです。
このリリースで、プラグインの開発、管理、公開がより簡単になります。
また、Logstashの速度をより良くしたため、より多くのデータを短時間に処理することができます。
興味ありませんか？では、詳細を見ていきましょう。</p>
<h2 id="plugin-ecosystemの変更">plugin ecosystemの変更</h2>
<p>Logstashは165ものプラグイン(inputs、filters、outputs、codecs)を持っており、
これらはElasticsearchとコミュニティからのコントリビュートで開発されています。
多くのプラグインを管理することは、使いやすさと素早さの間のトレードオフがあります。
Logstashの全てのプラグインをまとめることは使いやすさがある一方、プラグインの更新を取り込むために
Logstashの新しいリリースを待ってもらうことになります。
Logstashからプラグインを分離して個別に配布する場合、更新は簡単になりますが、使いやすさ（特に新しいユーザに）に影響が出ます。</p>
<p>私たちは、プロジェクトを前進させるために、これらのバランスをとることを考えました。
これまで、全ての利用可能なプラグインは’core’と&rsquo;contrib'の2つに分割していました。
&lsquo;core'にあるよく使われるプラグインは、Logstashに含めていました。
コミュニティによりコントリビュートされたプラグインは&rsquo;contrib'パッケージとして分離して配布していました。
1.5.0のリリースで、ユーザに対してより良いプラグイン管理をできるように変更しました。
全てのプラグインは、それ自身によるパッケージに移行しました。
パッケージングフレームワークとしてrubygemsを使い、<a href="http://rubygems.org/">rubygem.org</a>経由でこれらのプラグインを配布、公開します。
また、Logstashにプラグインのインストール、更新、削除を簡単にするための構造も追加しました。</p>
<p>例えば、S3 output pluginをインストールするには、以下のコマンドを実行します。</p>
<pre><code>$LS_HOME/bin/plugin install logstash-output-s3
</code></pre><p>それだけです！Logstashがgemと依存するgemをrubygems.orgからダウンロードし、インストールします。
あなたは、S3にデータを送ることができるようになります。</p>
<p>ダウンロード可能なLogstashリリースはプラグインをまだ多く含んでいますが、
いつでも、個別にプラグインをアップグレードし、インストールすることができます。
プラグインエコシステムの変更に関する詳細のブログ記事をお待ち下さい。</p>
<h2 id="パフォーマンス改善">パフォーマンス改善</h2>
<p>Logstash 1.5.0はより高速になっています。パフォーマンスが改善された2カ所について説明します。</p>
<h3 id="grok-filter">grok filter</h3>
<p>Grok filterはLogstashで、構造化データを抽出するためにパターンを記述するのに使われます。
本リリースで、人気のある幾つかのパターンのgrok filterのスループットを100%に改善しました。
言い換えると、grok filterを使うときに、Logstashを通してより多くのデータを処理することができます。</p>
<p>私たちのベンチマークテストで、1.5.0と1.4.2のスループットの比較をしました。
利用したデータは690万件のApache Webアクセスlogで、<code>COMBINEDAPACHELOG</code>のgrok patternです。
1.5.0で、スループットは34,000 event per sec(eps)から50,000 epsに増加しました。
両方のテストを8コアのマシンでLogstashで8つのワーカーを実行しました。
これらのテストで、一つのgrok filterを実行し、
<code>stdin</code>と<code>stdout</code>を使ったパイプラインでイベントのスループットを計測しました。
全体的なパフォーマンスは、様々なハードウェアやLogstashのコンフィグによって変化することに注意してください。</p>
<h3 id="json-serialization--deserialization">json serialization / deserialization</h3>
<p>JSONのシリアライズ/でシリアライズを<a href="https://github.com/guyboertje/jrjackson">JrJackson</a>ライブラリを利用して実装しました。
これにより、100%以上のスループットの改善がありました。
先ほど説明したパフォーマンステストにおいて、1.3KBのサイズの500,00 JSONイベントを送信し、
16,000 epsから30,000 epsにスループットが改善しました。
45,000サイズのイベントで、850 epsから3500 epsにスループットが増加しました。
すばらしいです。</p>
<h2 id="apache-kafka-integration">apache kafka integration</h2>
<p>いまでは、Apache Kafkaが大規模スケールデータ処理システムでよく利用されます。
Logstashの配備のスケーリングにおいて、Kafkaもまた、shippingインスタンスとindexingインスタンス間の
データを保存するための中間メッセージバッファとして使うことができます。</p>
<p>1.5.0で、Logstash Kafkaのinputとoutputのプラグインのビルトインサポートを追加しました。
これは、<a href="https://github.com/joekiller/logstash-kafka">Joseph Lawson</a>によって最初に開発されました。
私たちは、これらのプラグインにインテグレーションテストとドキュメントを追加することにより改良し、
新しいKafkaの機能を開発し続けます。
また、<a href="http://avro.apache.org/">Apache Avro</a> codecを追加することで、Kafkaに保存されたイベントを
簡単に取得でき、ELKスタックを使ってそれらを解析できるようにしました。</p>
<p>Kafka inputを追加するのは次のコマンドです。</p>
<pre><code>$LS_HOME/bin/plugin install logstash-input-kafka
</code></pre><p>Kafka outputは次のコマンドです。</p>
<pre><code>$LS_HOME/bin/plugin install logstash-output-kafka
</code></pre><h2 id="セキュリティに関する改善">セキュリティに関する改善</h2>
<p>認証と経路暗号化のサポートを追加し、Elasticsearchのoutput、input、filterのセキュリティを改良しました。
例えば、HTTPプロトコルでSSL/TLSにより暗号化を有効にでき、
HTTPベーシック認証をユーザ名とパスワードをリクエストに与えることで設定できます。
これらの機能は、時期にリリースされる<a href="http://www.elasticsearch.org/overview/shield/">Elasticsearch Shield</a>セキュリティプロダクトとLogstashを統合できます。</p>
<h2 id="ドキュメント">ドキュメント</h2>
<p>これまで、Logstashのドキュメントは[logstash.net])(<a href="http://logstash.net/">http://logstash.net/</a>)に置いてあり、
他のELKスタックと一緒に動かす時に、情報を探すのが厄介でした。
1.5.0および、今後のバージョンのドキュメントはelasticsearch.orgの<a href="http://www.elasticsearch.org/guide/en/logstash/current/index.html">Logstash Guide</a>に移行します。
この移行で<a href="http://elasticsearch.org/guide">elasticsearch.org/guide</a>にELKスタックを利用、
学習するためにドキュメントが1つになりました。
このベータリリースのイテレーションで、私たちはプレゼンテーションとドキュメントの品質を改善することに活発に取り組んでいきます。
(過去のLogstashのドキュメントの全てはいままでの<a href="http://logstash.net/docs/1.4.2/">logstash.net</a>で引き続き公開していく予定です。)</p>
<h2 id="バグフィックスと改善">バグフィックスと改善</h2>
<p>ここまでの新しい機能に加えて、Logstash 1.5.0では、多くのバグフィックスと多くの機能改善があります。
ここで、これらのいくつかを紹介します。</p>
<ul>
<li>出力しない&rsquo;metadata'をイベントに格納可能に。これは、例えば、date filterに使う中間フィールドのために必要。(<a href="https://github.com/elasticsearch/logstash/issues/1834">#1834</a>,<a href="https://logstash.jira.com/browse/LOGSTASH-1798"> #LOGSTASH-1798</a>)</li>
<li>HTTPを利用しているときのファイルデスクリプタリークの修正。Logstashがストールするのを防ぎ、OOMエラーからクラッシュするケースも防ぎます。(<a href="https://github.com/elasticsearch/logstash/issues/1604">#1604</a>)</li>
<li>Twitter input:<code>full_tweet</code>オプションの追加、Twitter rate limitingエラーのハンドリング(<a href="https://github.com/elasticsearch/logstash/issues/1471">#1471</a>)</li>
<li>イベントを生成するfilter(multiline、clone、split、metrics)により、
後続の条件文にこれらのイベントを正しく伝搬(<a href="https://github.com/elasticsearch/logstash/issues/1431">#1431</a>)</li>
<li>Elasticsearch output:Logstashはデフォルトで<code>message.raw</code>フィールドを作成しない。messageフィールドはElasticsearch
により<code>not_analyzed</code>でマルチフィールドとして追加される。マルチフィールドはディスクスペースが2倍必要だが、利点がない。</li>
<li>bin/logstashの複数のサブコマンドを除去(<a href="https://github.com/elasticsearch/logstash/issues/1797">#1797</a>)</li>
</ul>
<p>これらの機能、改善、バグフィックスについては、Logstash 1.5.0.Beta1 の<a href="https://github.com/elasticsearch/logstash/blob/master/CHANGELOG">changelog</a>をごらんください。</p>
<h2 id="試してみてください">試してみてください！</h2>
<p>ぜひ、Logstash 1.5.0 Beta 1をダウンロードして試してみてください。
そして、感想をTwitter(<a href="https://twitter.com/elasticsearch">@elasticsearch</a>)などで教えて下さい。
また、問題がありましたら、<a href="https://github.com/elasticsearch/logstash/issues">GitHub issues page</a>で報告をお願いします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>インデックステンプレートとLogstash</title>
      <link>https://blog.johtani.info/blog/2014/11/25/import-apache-accesslog-using-logstash-2/</link>
      <pubDate>Tue, 25 Nov 2014 16:25:46 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/11/25/import-apache-accesslog-using-logstash-2/</guid>
      <description>前回の「Logstashを利用したApacheアクセスログのインポート」の続きです。 前回の記事では、Logstashの設定ファイルについて説</description>
      <content:encoded><p>前回の「<a href="http://blog.johtani.info/blog/2014/11/21/import-apache-accesslog-using-logstash/">Logstashを利用したApacheアクセスログのインポート</a>」の続きです。
前回の記事では、Logstashの設定ファイルについて説明しました。
今回は「Elasticsearchに設定するインデックステンプレート」について説明します。</p>
<!-- more -->
<h2 id="テンプレートの設定">テンプレートの設定</h2>
<p>Elasticsearchでは、登録するデータの特性に合わせてMappingを定義する方がデータを効率良く扱うことができる場合があります。
この場合、通常ですと、インデックス作成時にMappingを指定します。</p>
<p>ただ、今回は、<a href="http://blog.johtani.info/blog/2014/11/21/import-apache-accesslog-using-logstash#output-elasticsearch">インデックス名に「年」を含める形</a>で指定してあります。
「年」はLogstashで処理したデータによって決まります。このため、あらかじめMappingを指定してインデックスを作成するのは難しいです。</p>
<p>このような場合に便利な機能として、「<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-templates.html#indices-templates">インデックステンプレート</a>」があります。</p>
<h3 id="インデックステンプレートとは">インデックステンプレートとは</h3>
<p>実際のテンプレートの説明に入る前に、少しだけ説明を。
インデックステンプレートとは、インデックスが作成されるタイミングで自動的に適用される設定をテンプレートとして登録できる機能のことです。
実際にテンプレートが適用されるかどうかは、インデックス名で判断されます。</p>
<p>例えば、大して重要でもなく、データ量も少ないインデックス用のテンプレートとして、シャード数が1、レプリカ数が0、&quot;_source&quot;を保存しない設定のテンプレートを登録する場合、
次のようになります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">curl -XPUT localhost:<span style="color:#ae81ff">9200</span>/_template/template_1 -d <span style="color:#e6db74">&#39;
</span><span style="color:#e6db74">{
</span><span style="color:#e6db74">  &#34;template&#34; : &#34;te*&#34;,
</span><span style="color:#e6db74">  &#34;settings&#34; : {
</span><span style="color:#e6db74">    &#34;number_of_shards&#34; : 1,
</span><span style="color:#e6db74">    &#34;number_of_replicas&#34; : 0
</span><span style="color:#e6db74">  },
</span><span style="color:#e6db74">  &#34;mappings&#34; : {
</span><span style="color:#e6db74">    &#34;type1&#34; : {
</span><span style="color:#e6db74">      &#34;_source&#34; : { &#34;enabled&#34; : false }
</span><span style="color:#e6db74">    }
</span><span style="color:#e6db74">  }
</span><span style="color:#e6db74">}
</span><span style="color:#e6db74">&#39;</span>
</code></pre></div><p><code>_template</code>がインデックステンプレートを登録するためのエンドポイントです。
<code>template_1</code>がこのテンプレートのIDです。削除などについては、このIDを利用します。</p>
<p>そして、重要なのは、&ldquo;<code>template</code>&quot;の設定です。
&ldquo;<code>template</code>&quot;には、このテンプレートが適用されるべきインデックス名を記載します。
上記サンプルでは<code>te*</code>となっているため、<code>te</code>で始まる名前のインデックスを作成した場合にテンプレートにある設定が適用されます。</p>
<h3 id="今回利用するテンプレート">今回利用するテンプレート</h3>
<p>私がJJUG CCCや第7回Elasticsearch勉強会のKibana4のデモで利用したインデックスのテンプレートは次のものになります。
&ldquo;<code>template</code>&quot;には、<a href="http://blog.johtani.info/blog/2014/11/21/import-apache-accesslog-using-logstash/#output-elasticsearch">前回の記事で紹介したoutput/elasticsearchの設定</a> に合致する<code>new_demo_access_log-*</code>を指定しています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">curl -XPUT localhost:<span style="color:#ae81ff">9200</span>/_template/new_access_log_for_demo -d <span style="color:#e6db74">&#39;
</span><span style="color:#e6db74">{
</span><span style="color:#e6db74">  &#34;template&#34;: &#34;new_demo_access_log-*&#34;,
</span><span style="color:#e6db74">  &#34;settings&#34;: {
</span><span style="color:#e6db74">    &#34;number_of_shards&#34;: &#34;2&#34;,
</span><span style="color:#e6db74">    &#34;number_of_replicas&#34;: &#34;0&#34;
</span><span style="color:#e6db74">  },
</span><span style="color:#e6db74">  &#34;mappings&#34;: {
</span><span style="color:#e6db74">    &#34;_default_&#34;: {
</span><span style="color:#e6db74">      &#34;dynamic_templates&#34;: [
</span><span style="color:#e6db74">        {
</span><span style="color:#e6db74">          &#34;string_template&#34;: {
</span><span style="color:#e6db74">            &#34;mapping&#34;: {
</span><span style="color:#e6db74">              &#34;index&#34;: &#34;not_analyzed&#34;,
</span><span style="color:#e6db74">              &#34;type&#34;: &#34;string&#34;
</span><span style="color:#e6db74">            },
</span><span style="color:#e6db74">            &#34;match_mapping_type&#34;: &#34;string&#34;,
</span><span style="color:#e6db74">            &#34;match&#34;: &#34;*&#34;
</span><span style="color:#e6db74">          }
</span><span style="color:#e6db74">        }
</span><span style="color:#e6db74">      ],
</span><span style="color:#e6db74">      &#34;properties&#34;: {
</span><span style="color:#e6db74">        &#34;path&#34;: {
</span><span style="color:#e6db74">          &#34;type&#34;: &#34;multi_field&#34;,
</span><span style="color:#e6db74">          &#34;fields&#34;: {
</span><span style="color:#e6db74">            &#34;no_analyzed&#34;: {
</span><span style="color:#e6db74">              &#34;index&#34;: &#34;not_analyzed&#34;,
</span><span style="color:#e6db74">              &#34;type&#34;: &#34;string&#34;
</span><span style="color:#e6db74">            },
</span><span style="color:#e6db74">            &#34;analyzed&#34;: {
</span><span style="color:#e6db74">              &#34;index&#34;: &#34;analyzed&#34;,
</span><span style="color:#e6db74">              &#34;type&#34;: &#34;string&#34;
</span><span style="color:#e6db74">            }
</span><span style="color:#e6db74">          }
</span><span style="color:#e6db74">        },
</span><span style="color:#e6db74">        &#34;referer&#34;: {
</span><span style="color:#e6db74">          &#34;type&#34;: &#34;multi_field&#34;,
</span><span style="color:#e6db74">          &#34;fields&#34;: {
</span><span style="color:#e6db74">            &#34;no_analyzed&#34;: {
</span><span style="color:#e6db74">              &#34;index&#34;: &#34;not_analyzed&#34;,
</span><span style="color:#e6db74">              &#34;type&#34;: &#34;string&#34;
</span><span style="color:#e6db74">            },
</span><span style="color:#e6db74">            &#34;analyzed&#34;: {
</span><span style="color:#e6db74">              &#34;index&#34;: &#34;analyzed&#34;,
</span><span style="color:#e6db74">              &#34;type&#34;: &#34;string&#34;
</span><span style="color:#e6db74">            }
</span><span style="color:#e6db74">          }
</span><span style="color:#e6db74">        },
</span><span style="color:#e6db74">        &#34;agent&#34;: {
</span><span style="color:#e6db74">          &#34;type&#34;: &#34;multi_field&#34;,
</span><span style="color:#e6db74">          &#34;fields&#34;: {
</span><span style="color:#e6db74">            &#34;no_analyzed&#34;: {
</span><span style="color:#e6db74">              &#34;index&#34;: &#34;not_analyzed&#34;,
</span><span style="color:#e6db74">              &#34;type&#34;: &#34;string&#34;
</span><span style="color:#e6db74">            },
</span><span style="color:#e6db74">            &#34;analyzed&#34;: {
</span><span style="color:#e6db74">              &#34;index&#34;: &#34;analyzed&#34;,
</span><span style="color:#e6db74">              &#34;type&#34;: &#34;string&#34;
</span><span style="color:#e6db74">            }
</span><span style="color:#e6db74">          }
</span><span style="color:#e6db74">        },
</span><span style="color:#e6db74">        &#34;geoip&#34;: {
</span><span style="color:#e6db74">          &#34;type&#34;: &#34;object&#34;,
</span><span style="color:#e6db74">          &#34;properties&#34;: {
</span><span style="color:#e6db74">            &#34;location&#34;: {
</span><span style="color:#e6db74">              &#34;geohash&#34;: true,
</span><span style="color:#e6db74">              &#34;geohash_precision&#34;: 10,
</span><span style="color:#e6db74">              &#34;type&#34;: &#34;geo_point&#34;,
</span><span style="color:#e6db74">              &#34;lat_lon&#34;: true,
</span><span style="color:#e6db74">              &#34;geohash_prefix&#34;: true
</span><span style="color:#e6db74">            }
</span><span style="color:#e6db74">          }
</span><span style="color:#e6db74">        },
</span><span style="color:#e6db74">        &#34;response&#34;: {
</span><span style="color:#e6db74">          &#34;copy_to&#34;: &#34;response_int&#34;,
</span><span style="color:#e6db74">          &#34;type&#34;: &#34;string&#34;
</span><span style="color:#e6db74">        },
</span><span style="color:#e6db74">        &#34;bytes&#34;: {
</span><span style="color:#e6db74">          &#34;type&#34;: &#34;long&#34;
</span><span style="color:#e6db74">        },
</span><span style="color:#e6db74">        &#34;response_int&#34;: {
</span><span style="color:#e6db74">          &#34;type&#34;: &#34;integer&#34;
</span><span style="color:#e6db74">        }
</span><span style="color:#e6db74">      }
</span><span style="color:#e6db74">    }
</span><span style="color:#e6db74">  }
</span><span style="color:#e6db74">}
</span><span style="color:#e6db74">&#39;</span>
</code></pre></div><h4 id="settings設定">settings設定</h4>
<p>デモ用であり、手元で2台のノードを起動するということもあり、<code>number_of_shards</code>に<code>2</code>を、<code>number_of_replicas</code>に<code>0</code>を指定してあります。</p>
<h4 id="mappings設定">mappings設定</h4>
<h5 id="インデックスのタイプ">インデックスのタイプ</h5>
<p>Mappingsの指定は通常、特定の<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/glossary.html#glossary-type">タイプ</a>を指定します。
今回のデモでは、1種類しかないのですが、タイプ名を特に意識しないために、<code>_default_</code>を使用しました。
この場合、任意のタイプに適用されることとなります。
タイプを指定してMappingの設定を行う場合は<code>_default_</code>の部分に特定のタイプ名を記入します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#66d9ef">&#34;mappings&#34;: </span>{
  <span style="color:#66d9ef">&#34;_default_&#34;: </span>{
    ...
</code></pre></div><h5 id="ダイナミックテンプレート">ダイナミックテンプレート</h5>
<p>次は<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-root-object-type.html#_dynamic_templates">ダイナミックテンプレート</a>です。
インデックステンプレートはインデックスの設定をテンプレート化しました。ダイナミックテンプレートはフィールドに対してテンプレートを設定できます。</p>
<p>以下のダイナミックテンプレートでは、<code>string</code>タイプのフィールドのデフォルト設定を変更しています。
通常、<code>string</code>タイプのフィールドは<code>analyzed</code>となりますが、<code>not_analyzed</code>に変更してあります。
詳しく検索したいフィールドの方が少ないためです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">...
<span style="color:#66d9ef">&#34;dynamic_templates&#34;: </span>[
  {
    <span style="color:#66d9ef">&#34;string_template&#34;: </span>{
      <span style="color:#66d9ef">&#34;mapping&#34;: </span>{
        <span style="color:#66d9ef">&#34;index&#34;: </span><span style="color:#e6db74">&#34;not_analyzed&#34;</span>,
        <span style="color:#66d9ef">&#34;type&#34;: </span><span style="color:#e6db74">&#34;string&#34;</span>
      },
      <span style="color:#66d9ef">&#34;match_mapping_type&#34;: </span><span style="color:#e6db74">&#34;string&#34;</span>,
      <span style="color:#66d9ef">&#34;match&#34;: </span><span style="color:#e6db74">&#34;*&#34;</span>
    }
  }
],
...  
</code></pre></div><h5 id="multi_field指定">multi_field指定</h5>
<p>検索もしたいし、Terms Aggregationでも利用したいフィールドについては、<code>multi_field</code>を利用して、
<code>analyzed</code>と<code>not_analyzed</code>の2種類のフィールドを用意しています。
<code>multi_field</code>設定を用いることで、1つのJSONのデータから、異なる形のフィールドを用意することが可能です。</p>
<p>今回のテンプレートでは、<code>path</code>、<code>referer</code>、<code>agent</code>に<code>multi_field</code>を指定しました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">...
<span style="color:#66d9ef">&#34;path&#34;: </span>{
  <span style="color:#66d9ef">&#34;type&#34;: </span><span style="color:#e6db74">&#34;multi_field&#34;</span>,
  <span style="color:#66d9ef">&#34;fields&#34;: </span>{
    <span style="color:#66d9ef">&#34;no_analyzed&#34;: </span>{
      <span style="color:#66d9ef">&#34;index&#34;: </span><span style="color:#e6db74">&#34;not_analyzed&#34;</span>,
      <span style="color:#66d9ef">&#34;type&#34;: </span><span style="color:#e6db74">&#34;string&#34;</span>
    },
    <span style="color:#66d9ef">&#34;analyzed&#34;: </span>{
      <span style="color:#66d9ef">&#34;index&#34;: </span><span style="color:#e6db74">&#34;analyzed&#34;</span>,
      <span style="color:#66d9ef">&#34;type&#34;: </span><span style="color:#e6db74">&#34;string&#34;</span>
    }
  }
},
...
</code></pre></div><p>例えば、上記の設定の場合、入力のJSONは<code>path</code>というデータのみですが、インデックス上には<code>path.no_analyzed</code>と
<code>path.analyzed</code>というフィールドができあがります。
実際に検索する場合は、<code>path.analyzed:検索したい文字列</code>という形で検索をすることで、いわゆる部分一致のような検索が可能です。
また、完全一致をしたい場合は<code>path.no_analyzed:検索したい文字列</code>という指定になります。
用途を考えると、<code>request</code>も指定したほうが良いかもしれません。</p>
<h5 id="geoip">geoip</h5>
<p><a href="http://blog.johtani.info/blog/2014/11/21/import-apache-accesslog-using-logstash#filter-geoip">Logstashでgeoipデータ</a>を付与していました。
このgeoipのデータをKibana4で利用するために、geoデータとして登録する必要があります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#66d9ef">&#34;geoip&#34;: </span>{
  <span style="color:#66d9ef">&#34;type&#34;: </span><span style="color:#e6db74">&#34;object&#34;</span>,
  <span style="color:#66d9ef">&#34;properties&#34;: </span>{
    <span style="color:#66d9ef">&#34;location&#34;: </span>{
      <span style="color:#66d9ef">&#34;geohash&#34;: </span><span style="color:#66d9ef">true</span>,
      <span style="color:#66d9ef">&#34;geohash_precision&#34;: </span><span style="color:#ae81ff">10</span>,
      <span style="color:#66d9ef">&#34;type&#34;: </span><span style="color:#e6db74">&#34;geo_point&#34;</span>,
      <span style="color:#66d9ef">&#34;lat_lon&#34;: </span><span style="color:#66d9ef">true</span>,
      <span style="color:#66d9ef">&#34;geohash_prefix&#34;: </span><span style="color:#66d9ef">true</span>
    }
  }
},
</code></pre></div><p>上記の設定がgeoデータの指定です。
<code>type</code>に<code>object</code>が指定してありますが、これは、geoipのデータがネストしているためです。
geoipオブジェクトのうち、緯度経度のデータは<code>location</code>に入っているため、こちらに緯度経度関係の設定を指定します。</p>
<ul>
<li><code>&quot;type&quot;: &quot;geo_point&quot;</code>：<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-geo-point-type.html#mapping-geo-point-type"><code>geo_point</code></a>タイプであることを指定</li>
<li><code>&quot;geohash&quot;: true</code>：緯度経度のデータをもとに、geohashの値もインデックス</li>
<li><code>&quot;geohash_precision&quot;: 10</code>：geohashの精度の指定</li>
<li><code>&quot;lat_lon&quot;: true</code>：緯度経度を個別の<code>.lat</code>、<code>.lon</code>というフィールドにもインデックス</li>
<li><code>&quot;geohash_prefix&quot;: true</code>：該当するgeohashのみでなく、その親にあたるgeohashについてもインデックスする</li>
</ul>
<h5 id="responseresponse_intbytes">response、response_int、bytes</h5>
<p>最後は、response、response_int、bytesです。</p>
<p>responseには、HTTPステータスコードが入ります。
文字列としても扱いたいですが、integerとして、Renge Aggregationなどを行いたいので、
response_intというフィールドにも値を入れています。
<code>multi_field</code>でも可能ですが、ここでは、<a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-core-types.html#copy-to"><code>copy_to</code></a>を利用しました。
<code>copy_to</code>を用いることで、異なるフィールドに値をコピーすることができます。</p>
<p>bytesについては、longで扱いたいとういう理由だけです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">
<span style="color:#66d9ef">&#34;response&#34;: </span>{
  <span style="color:#66d9ef">&#34;copy_to&#34;: </span><span style="color:#e6db74">&#34;response_int&#34;</span>,
  <span style="color:#66d9ef">&#34;type&#34;: </span><span style="color:#e6db74">&#34;string&#34;</span>
},
<span style="color:#66d9ef">&#34;bytes&#34;: </span>{
  <span style="color:#66d9ef">&#34;type&#34;: </span><span style="color:#e6db74">&#34;long&#34;</span>
},
<span style="color:#66d9ef">&#34;response_int&#34;: </span>{
  <span style="color:#66d9ef">&#34;type&#34;: </span><span style="color:#e6db74">&#34;integer&#34;</span>
}
</code></pre></div><h2 id="まとめ">まとめ</h2>
<p>今回はデモに利用したインデックスてプレートについて説明しました。
前回の、Logstashの設定とこのインデックステンプレートを用いることで、Kibanaで解析するデータの準備ができます。
実際の操作などについては、また次回の記事で説明しようかと思います。</p>
<p>不明な点、誤植などありましたら、コメント欄へお願いします。</p>
</content:encoded>
    </item>
    
    <item>
      <title>Logstashを利用したApacheアクセスログのインポート</title>
      <link>https://blog.johtani.info/blog/2014/11/21/import-apache-accesslog-using-logstash/</link>
      <pubDate>Fri, 21 Nov 2014 17:30:39 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2014/11/21/import-apache-accesslog-using-logstash/</guid>
      <description>JJUG CCCや第7回Elasticsearch勉強会のKibana4のデモにアクセスログを利用しました。 ただ、セッションでは、どうやってElas</description>
      <content:encoded><p>JJUG CCCや第7回Elasticsearch勉強会のKibana4のデモにアクセスログを利用しました。</p>
<p>ただ、セッションでは、どうやってElasticsearchに投入したのかという詳しい話をしていませんでした。
本記事では、データ取り込み時に利用したLogstashの設定ファイルについて説明します。</p>
<!-- more -->
<p>Logstashの設定の説明に入る前に、全体の流れを。
「ApacheアクセスログをKibana4により可視化」です。</p>
<h2 id="材料の準備">材料の準備</h2>
<p>「ApacheアクセスログをKibana4により可視化」に必要な材料は次の通りです。
（今回は起動するところまでいかないので、実際に必要なのは次回以降になります。）</p>
<ul>
<li>Java 7（u55以上を1つ）</li>
<li>Logstash 1.4.2（1つ）</li>
<li>Elasticsearch 1.4.0（1つ）</li>
<li>Kibana4 Beta2（1つ）</li>
<li>Apacheのアクセスログ（適量）</li>
</ul>
<p>Apacheのアクセスログ以外は、公式サイトからダウンロードできます。
それぞれをダウンロードして、起動できるようにしておきましょう。</p>
<p>※1台のマシン上で行う場合は、アクセスログの量を少なめにするなどの対策をとりましょう。
※今回は、1台のマシン（Mac）上で、VMなどを利用せず、それぞれ直接起動するものとします。</p>
<h2 id="可視化の手順と流れ">可視化の手順と流れ</h2>
<p>可視化の流れとしては、</p>
<ol>
<li>Logstashでファイルを読み込み、各種処理（パースしたり、情報を追加したり、切り出したり）</li>
<li>Elasticsearchに保存</li>
<li>Kibanaでグラフを作ったり、検索してみたり</li>
</ol>
<p>です。</p>
<p>今回は、1のLogstashでファイルを読み込んだりする設定ファイルの説明です。</p>
<h3 id="logstashの設定">Logstashの設定</h3>
<h4 id="logstashの基本">Logstashの基本</h4>
<p>まずは、Logstashの設定ですが、簡単にLogstashの説明を。
Logstashは大きく3つのパーツに分かれています。</p>
<ol>
<li>input：データの入力処理</li>
<li>filter：inputで読み込んだデータに対する操作など</li>
<li>output：データの出力処理</li>
</ol>
<p>inputでデータを読み込み（複数可）、filterでデータに対して各種処理を行い、outputでデータを指定されたところに出力（複数可）します。</p>
<h4 id="アクセスログの読み込み設定">アクセスログの読み込み設定</h4>
<p>アクセスログの読み込み処理は大まかに次のようなものとなります。</p>
<ol>
<li>アクセスログを読み込む（input/file）</li>
<li>読み取ったアクセスログを各フィールド（IPアドレス、ユーザエージェントなど）に分割（filter/grok）</li>
<li>日付のパース（filter/date）</li>
<li>クライアントIPアドレスにgeoipの情報を付加（filter/geoip）</li>
<li>リクエストのパスの第1階層の抽出（filter/grok）</li>
<li>ユーザエージェントのパース（filter/useragent）</li>
<li>Elasticsearchへの出力（output/elasticsearch）</li>
</ol>
<p>設定ファイルは次のようなものになります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">input {
  file {
    path <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;/Users/johtani/demo_access_log/*/*.log&#34;</span>
    start_position <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;beginning&#34;</span>
  }
}

filter {
  grok {
    match <span style="color:#f92672">=&gt;</span> { <span style="color:#e6db74">&#34;message&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;%{COMBINEDAPACHELOG}&#34;</span> }
    break_on_match <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">false</span>
    tag_on_failure <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;_message_parse_failure&#34;</span><span style="color:#f92672">]</span>
  }
  date {
    match <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;timestamp&#34;</span>, <span style="color:#e6db74">&#34;dd/MMM/YYYY:HH:mm:ss Z&#34;</span><span style="color:#f92672">]</span>
    locale <span style="color:#f92672">=&gt;</span> en
  }
  geoip {
    source <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;clientip&#34;</span><span style="color:#f92672">]</span>
  }
  grok {
    match <span style="color:#f92672">=&gt;</span> { <span style="color:#e6db74">&#34;request&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;^/%{WORD:first_path}/%{GREEDYDATA}$&#34;</span> }
    tag_on_failure <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;_request_parse_failure&#34;</span><span style="color:#f92672">]</span>
  }
  useragent {
    source <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;agent&#34;</span>
    target <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;useragent&#34;</span>
  }
}

output {
  elasticsearch {
    host <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;localhost&#34;</span>
    index <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;new_demo_access_log-%{year}&#34;</span>
    cluster <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;demo_cluster&#34;</span>
    protocol <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;http&#34;</span>
  }
}
</code></pre></div><h5 id="1-アクセスログを読み込むinputfile">1. アクセスログを読み込む（input/file）</h5>
<p>inputの<a href="http://logstash.net/docs/1.4.2/inputs/file">fileモジュール(a)</a>を使用してアクセスログのファイルを読み込みます。
<code>path</code>でアクセスログのファイルのパスを指定します。
今回利用したアクセスログは<code>demo_access_log/2010/access20100201.log</code>といった日毎のファイルに分割されていたため、
<code>*</code>を利用してファイルのパスを指定しました。
また、今回は既存のファイルの読み込みだけのため、<code>start_position</code>に<code>beginning</code>を指定してあります。
デフォルトでは<code>end</code>が指定されるため、Logstashを起動後に追記されたログから対象になってしまうためです。
その他の設定については、公式ガイドをご覧ください。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">input {
  file { <span style="color:#75715e"># a</span>
    path <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;/Users/johtani/demo_access_log/*/*.log&#34;</span> <span style="color:#75715e"># b</span>
    start_position <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;beginning&#34;</span> <span style="color:#75715e"># c</span>
  }
}
</code></pre></div><blockquote>
<p>Logstashでは、ファイルをどこまで読み込んだかという情報を保持するために、<a href="http://logstash.net/docs/1.4.2/inputs/file#sincedb_path">sincedb</a>を利用しています。
設定変更後に同じファイルを最初から読み込みたい場合などは、こちらのファイルを一旦削除するなどの対応が必要です。</p>
</blockquote>
<p>ちなみに、読み込んだデータは次のようなJSONになっています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#f92672">&#34;message&#34;</span>: <span style="color:#e6db74">&#34;読み込んだアクセスログ&#34;</span>,
  <span style="color:#f92672">&#34;@version&#34;</span>: <span style="color:#e6db74">&#34;1&#34;</span>,
  <span style="color:#f92672">&#34;@timestamp&#34;</span>:<span style="color:#e6db74">&#34;2014-11-21T06:16:21.644Z&#34;</span>,
  <span style="color:#f92672">&#34;host&#34;</span>:<span style="color:#e6db74">&#34;jupiter.local&#34;</span>,
  <span style="color:#f92672">&#34;path&#34;</span>:<span style="color:#e6db74">&#34;/Users/johtani/demo_access_log/2010/access20100201.log&#34;</span>}
<span style="color:#960050;background-color:#1e0010">}</span>
</code></pre></div><p>特に指定がない場合は、<code>message</code>に読み込んだデータが入ってきます。
<code>@timestamp</code>がLogstashが読み込んだ時刻、<code>host</code>はLogstashが動作しているホスト名です。
<code>path</code>はfileモジュールが読み込んだファイルのパスを設定しています。
この後の処理で、どこの項目に対して処理を行うかといったことが重要になるので、</p>
<h5 id="2-読み取ったアクセスログを各フィールドipアドレスユーザエージェントなどに分割filtergrok">2. 読み取ったアクセスログを各フィールド（IPアドレス、ユーザエージェントなど）に分割（filter/grok）</h5>
<p>2.〜6.の処理は、inputで読み込んだ1アクセスログに対する処理となります。</p>
<p>ここでは、<a href="http://logstash.net/docs/1.4.2/filters/grok">grokフィルタ</a>を使用して
Apacheのアクセスログを各フィールドに分割します。
Logastashでは、簡単に使えるようにいくつかの<a href="https://github.com/elasticsearch/logstash/tree/v1.4.2/patterns">パターン</a>が用意されています。
Apacheのログのために、<a href="https://github.com/elasticsearch/logstash/blob/v1.4.2/patterns/grok-patterns#L91"><code>COMBINEDAPACHELOG</code></a>というのが用意されています。
今回はこちらを使用しています。その他にも日付などパターンが用意されているので、試してみてください。</p>
<p><code>message</code>にアクセスログが入っているので、こちらの項目に対して<code>COMBINEDAPACHELOG</code>のパターンを
<code>match</code>で適用してフィールドに抜き出します。
<code>tag_on_failure</code>は、<code>match</code>でパースに失敗した場合に、<code>tag</code>というフィールドに指定した文字列を出力する機能になります。
デフォルトだと<code>_grokparsefailure</code>が付与されますが、ここでは、どの処理で失敗したがを判別するために文字列を変更しています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">filter {
  grok {
    match <span style="color:#f92672">=&gt;</span> { <span style="color:#e6db74">&#34;message&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;%{COMBINEDAPACHELOG}&#34;</span> }
    break_on_match <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">false</span>
    tag_on_failure <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;_message_parse_failure&#34;</span><span style="color:#f92672">]</span>
  }
  <span style="color:#f92672">...</span>
</code></pre></div><p><code>clientip</code>、<code>ident</code>、<code>auth</code>、<code>timestamp</code>、<code>verb</code>、<code>request</code>、<code>httpversion</code>、<code>response</code>、<code>bytes</code>、<code>referrer</code>、<code>agent</code>がgrokフィルタにより抜き出された項目です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#f92672">&#34;message&#34;</span>:<span style="color:#e6db74">&#34;アクセスログ&#34;</span>,
  <span style="color:#f92672">&#34;@version&#34;</span>:<span style="color:#e6db74">&#34;1&#34;</span>,
  <span style="color:#f92672">&#34;@timestamp&#34;</span>:<span style="color:#e6db74">&#34;2014-11-21T07:20:54.387Z&#34;</span>,
  <span style="color:#f92672">&#34;host&#34;</span>:<span style="color:#e6db74">&#34;jupiter.local&#34;</span>,
  <span style="color:#f92672">&#34;path&#34;</span>:<span style="color:#e6db74">&#34;/Users/johtani/demo_access_log/2010/access20100201.log&#34;</span>,
  <span style="color:#f92672">&#34;clientip&#34;</span>:<span style="color:#e6db74">&#34;クライアントのIPアドレス&#34;</span>,
  <span style="color:#f92672">&#34;ident&#34;</span>:<span style="color:#e6db74">&#34;-&#34;</span>,
  <span style="color:#f92672">&#34;auth&#34;</span>:<span style="color:#e6db74">&#34;-&#34;</span>,
  <span style="color:#f92672">&#34;timestamp&#34;</span>:<span style="color:#e6db74">&#34;01/Feb/2010:00:00:26 +0900&#34;</span>,
  <span style="color:#f92672">&#34;verb&#34;</span>:<span style="color:#e6db74">&#34;GET&#34;</span>,
  <span style="color:#f92672">&#34;request&#34;</span>:<span style="color:#e6db74">&#34;/images/favicon.ico&#34;</span>,
  <span style="color:#f92672">&#34;httpversion&#34;</span>:<span style="color:#e6db74">&#34;1.1&#34;</span>,
  <span style="color:#f92672">&#34;response&#34;</span>:<span style="color:#e6db74">&#34;200&#34;</span>,
  <span style="color:#f92672">&#34;bytes&#34;</span>:<span style="color:#e6db74">&#34;318&#34;</span>,
  <span style="color:#f92672">&#34;referrer&#34;</span>:<span style="color:#e6db74">&#34;\&#34;-\&#34;&#34;</span>,
  <span style="color:#f92672">&#34;agent&#34;</span>:<span style="color:#e6db74">&#34;\&#34;Mozilla/5.0 (Windows; U; Windows NT 5.1; ja; rv:1.9.1.7) Gecko/20091221 Firefox/3.5.7 (.NET CLR 3.5.30729)\&#34;&#34;</span>
}
</code></pre></div><h5 id="3-日付のパースfilterdate">3. 日付のパース（filter/date）</h5>
<p>Logstashは特に指定がない場合、inputでデータを取り出した日付が<code>@timestamp</code>となります。
そして、このフィールドが特に指定がない場合は、Elasticsearchのデータの日付となり、Kibanaで利用する日付となります。</p>
<p>リアルタイムにアクセスログを読み込む場合は、読み込んだ日時でもほぼ問題はありませんが、過去データの場合はそうもいきません。
そこで、<a href="http://logstash.net/docs/1.4.2/filters/date"><code>dateフィルタ</code></a>を使用して、<code>@timestamp</code>の値を書き換えます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">date {
  match <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;timestamp&#34;</span>, <span style="color:#e6db74">&#34;dd/MMM/YYYY:HH:mm:ss Z&#34;</span><span style="color:#f92672">]</span>
  locale <span style="color:#f92672">=&gt;</span> en
}
</code></pre></div><p>上記では、<code>timestamp</code>という項目に対して<code>dd/MMM/YYYY:HH:mm:ss Z</code>という日付パターンの場合に値を書き換える設定となります。
なお、日付の月の部分が<code>Feb</code>となっているため、<code>locale</code>に<code>en</code>を指定しています。Logstashが動作するマシンの<code>locale</code>が<code>ja</code>などの場合にパースに失敗するためです。</p>
<h5 id="a-namefilter-geoip4-クライアントipアドレスにgeoipの情報を付加filtergeoipa"><a name="filter-geoip">4. クライアントIPアドレスにgeoipの情報を付加（filter/geoip）</a></h5>
<p>どの国からのアクセスかなどを判別したいので、IPアドレスを元にgeoipを利用してより詳細な情報を付与します。
Logstashでもこの機能が用意されており、簡単に利用ができます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">geoip {
  source <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;clientip&#34;</span><span style="color:#f92672">]</span>
}
</code></pre></div><p>これだけです。対象とするIPアドレスのフィールドを指定しているだけです。
<code>geoip</code>というフィールドが追加され、次のような情報が付与されます。
国名、緯度経度、タイムゾーンなどです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#960050;background-color:#1e0010">...</span>  
  <span style="color:#f92672">&#34;geoip&#34;</span>: {
    <span style="color:#f92672">&#34;ip&#34;</span>: <span style="color:#e6db74">&#34;IPアドレス&#34;</span>,
    <span style="color:#f92672">&#34;country_code2&#34;</span>: <span style="color:#e6db74">&#34;JP&#34;</span>,
    <span style="color:#f92672">&#34;country_code3&#34;</span>: <span style="color:#e6db74">&#34;JPN&#34;</span>,
    <span style="color:#f92672">&#34;country_name&#34;</span>: <span style="color:#e6db74">&#34;Japan&#34;</span>,
    <span style="color:#f92672">&#34;continent_code&#34;</span>: <span style="color:#e6db74">&#34;AS&#34;</span>,
    <span style="color:#f92672">&#34;latitude&#34;</span>: <span style="color:#ae81ff">36</span>,
    <span style="color:#f92672">&#34;longitude&#34;</span>: <span style="color:#ae81ff">138</span>,
    <span style="color:#f92672">&#34;timezone&#34;</span>: <span style="color:#e6db74">&#34;Asia/Tokyo&#34;</span>,
    <span style="color:#f92672">&#34;location&#34;</span>: [
      <span style="color:#ae81ff">138</span>,
      <span style="color:#ae81ff">36</span>
    ]
  }
  <span style="color:#960050;background-color:#1e0010">...</span>
}
</code></pre></div><h5 id="5-リクエストのパスの第1階層の抽出filtergrok">5. リクエストのパスの第1階層の抽出（filter/grok）</h5>
<p>リクエストされたURLは<code>request</code>フィールドにありますが、個別のURLだと、大まかな集計が大変です。
もちろん、クエリで処理することもできますが、Logstashで処理するついでに、第1階層のディレクトリ名を抽出しておくことで、
検索や集計を行いやすくしておきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">grok {
  match <span style="color:#f92672">=&gt;</span> { <span style="color:#e6db74">&#34;request&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;^/%{WORD:first_path}/%{GREEDYDATA}$&#34;</span> }
  tag_on_failure <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;_request_parse_failure&#34;</span><span style="color:#f92672">]</span>
}
</code></pre></div><p>また、grokフィルタの登場です。
今回は、<code>WORD:first_path</code>という記述方法で、<code>WORD</code>パターンにマッチした文字列を<code>first_path</code>というフィールドに展開する指定をしています。</p>
<p>例えば、サイトのスクリプトなどが<code>scripts</code>というディレクトリにある場合は、<code>first_path</code>の値を利用して、
後続のフィルタでログデータを出力しないといった処理にも使えます。</p>
<h5 id="6-ユーザエージェントのパースfilteruseragent">6. ユーザエージェントのパース（filter/useragent）</h5>
<p>Logstashではユーザエージェントの文字列から、いくつかの情報を付与するフィルタも用意されています。
<a href="http://logstash.net/docs/1.4.2/filters/useragent"><code>useragent</code>フィルタです。</a></p>
<pre><code>useragent {
  source =&gt; &quot;agent&quot;
  target =&gt; &quot;useragent&quot;
}
</code></pre><p><code>agent</code>というフィールドにユーザエージェントの文字列があるので、このフィールドに対してフィルタを適用します。
元の文字列も取っておきたいので、<code>useragent</code>という別のフィールドに出力するように指定してあります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#e6db74">&#34;useragent&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> {
  <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Firefox&#34;</span>,
  <span style="color:#f92672">&#34;os&#34;</span>: <span style="color:#e6db74">&#34;Windows XP&#34;</span>,
  <span style="color:#f92672">&#34;os_name&#34;</span>: <span style="color:#e6db74">&#34;Windows XP&#34;</span>,
  <span style="color:#f92672">&#34;device&#34;</span>: <span style="color:#e6db74">&#34;Other&#34;</span>,
  <span style="color:#f92672">&#34;major&#34;</span>: <span style="color:#e6db74">&#34;17&#34;</span>,
  <span style="color:#f92672">&#34;minor&#34;</span>: <span style="color:#e6db74">&#34;0&#34;</span>
}<span style="color:#960050;background-color:#1e0010">,</span>
</code></pre></div><p>このように、OS名やバージョン名などが抽出できます。</p>
<h5 id="a-nameoutput-elasticsearch7-elasticsearchへの出力outputelasticsearcha"><a name="output-elasticsearch">7. Elasticsearchへの出力（output/elasticsearch）</a></h5>
<p>最後は、<a href="http://logstash.net/docs/1.4.2/outputs/elasticsearch">Elasticsearchへのデータの出力設定</a>です。</p>
<p><code>index</code>にて、出力するindex名を指定してあります。
また、年毎のインデックス名にするために<code>%{year}</code>を利用しています。
<a href="http://logstash.net/docs/1.4.2/configuration#sprintf">sprintf format</a>です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">elasticsearch {
  host <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;localhost&#34;</span>
  index <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;new_demo_access_log-%{year}&#34;</span>
  cluster <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;demo_cluster&#34;</span>
  protocol <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;http&#34;</span>
}
</code></pre></div><h2 id="まとめ">まとめ</h2>
<p>ということで、今回はアクセスログをLogstashにて読み込む時の設定について説明してきました。
次回は、実際にLogstashを起動してElasticsearchにデータを登録するところまでを説明します。</p>
<p>JJUG CCCや勉強会のデモに用いたデータは、
Elasticsearchにデータを登録する前にテンプレートも設定してありました。こちらについても、次回説明しようと思います。</p>
<p>不明な点、誤植などありましたら、コメント欄へお願いします。</p>
</content:encoded>
    </item>
    
  </channel>
</rss>
