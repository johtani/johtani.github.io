<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">

  <channel>
    <title>Sense on @johtaniの日記 3rd</title>
    <link>https://blog.johtani.info/tags/sense/</link>
    <description>Recent content in Sense on @johtaniの日記 3rd</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 30 Oct 2015 17:55:06 +0900</lastBuildDate><atom:link href="https://blog.johtani.info/tags/sense/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Senseの歴史 - Sense 2.0.0-beta1の紹介(日本語訳)</title>
      <link>https://blog.johtani.info/blog/2015/10/30/sense-2-0-0-beta1-ja/</link>
      <pubDate>Fri, 30 Oct 2015 17:55:06 +0900</pubDate>
      
      <guid>https://blog.johtani.info/blog/2015/10/30/sense-2-0-0-beta1-ja/</guid>
      <description>※この記事は次のブログを翻訳したものになります。 原文：The Story of Sense - Announcing Sense 2.0.0-beta1 誕生 よくある良いプロジェクト同様、Senseもビールを飲みながら考</description>
      <content:encoded>&lt;p&gt;&lt;strong&gt;※この記事は次のブログを翻訳したものになります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;https://www.elastic.co/blog/sense-2-0-0-beta1&#34;&gt;The Story of Sense - Announcing Sense 2.0.0-beta1&lt;/a&gt;&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;誕生&#34;&gt;誕生&lt;/h2&gt;
&lt;p&gt;よくある良いプロジェクト同様、Senseもビールを飲みながら考えつきました。
&lt;a href=&#34;https://en.wikipedia.org/wiki/Amstel&#34;&gt;Amstel&lt;/a&gt;での手漕ぎボートのセッションの後で。
友人の&lt;a href=&#34;https://twitter.com/jkaizer&#34;&gt;Jasper&lt;/a&gt;と私はJasperの&lt;a href=&#34;http://q42.nl/&#34;&gt;会社&lt;/a&gt;で毎年行われる
&lt;a href=&#34;http://w00t.camp/&#34;&gt;ハッカソン&lt;/a&gt;について話をしていました。
このハッカソンはどのようなアイデアでどんなチームで行うかを聞き取りされる、厳密なハッカソンです。
その時、私とJasperはChromeブラウザに別のヒストリーを表示するという作業をやると&lt;a href=&#34;https://twitter.com/anneveling&#34;&gt;Anne Veling&lt;/a&gt;に話をしていました。&lt;/p&gt;
&lt;p&gt;Jasperと私はElasticsearchのユーザでしたが、リッチなREST APIにリクエストを送信するための
便利なツールがないと知っていました。
恥ずべきことに、cURLコマンドを利用するターミナルがその時の一番良いツールでした。
皆さん、ターミナルでボディつきのリクエストをサブミットするのがどのくらい不便かというのをわかるために、
5秒ほどターミナルで実行してみてください。
タイプミスのような単純なことでさえ、すべてのコマンドを再タイプしなければならなかったり、
複数行サポートのターミナルと戦ったりです。
ウェブベースのJSONエディタを見つけ出して、それをベースにすることが必要でした。&lt;/p&gt;
&lt;h2 id=&#34;終わりなきウィークエンド&#34;&gt;終わりなきウィークエンド&lt;/h2&gt;
&lt;p&gt;リサーチをして、Anneに電話しました。
私は彼に、History Pageのプロジェクトにもコミットするが、
Elasticsearchユーザなので、便利なコンソールを開発する時間も欲しいという話をしました。
私たちは、&lt;a href=&#34;https://ace.c9.io/&#34;&gt;Ace&lt;/a&gt;オンラインエディタを利用して、
自動でAPIを認識するナレッジベースを構築し、
コンテキストに沿ったサジェストを大なうようにしました。
Anneはすぐに、それが素晴らしいと同意してくれました。
しかし、彼は、ハッカソンの基本的なルール（週末にそれが終わる必要がある）に違反しているので、
そのアイデアを却下するしかありませんでした。
確かに、私たちが提案していたものは行えませんでした。
最後に、私たちは、ChromeのHistory Pageの素晴らしい置き換えについて実装しました。&lt;/p&gt;
&lt;p&gt;それでも、私はチャレンジし、それが終わるであろうことを終わるであろうことを証明しなければなりませんでした。
次の週末（といくつかの終業後 :)）に、私はそれを作りました。
Senseの誕生です。
それは、まだバグだらけでしたが、動きました。
これを見せるとみんな興奮しました。&lt;/p&gt;
&lt;h2 id=&#34;初期&#34;&gt;初期&lt;/h2&gt;
&lt;p&gt;Knowledge Baseの拡張とバグのフィックスで数日を過ごしました。
Senseは広まり始め、ずっと古いバグのあるバージョンを利用しないといけないのかと私は恐れました。
SenseをChromeのExtentionとしてリリースすることを決め、リリースすると自動的に更新されるようにしました。
History Panelのような機能を一つづつ追加するようにしました。&lt;/p&gt;
&lt;p&gt;Elasticにジョインしてから、会社の人たちがSenseを使用しているということを聞き、とても幸せでした。
特に、&lt;a href=&#34;https://twitter.com/clintongormley&#34;&gt;Clint&lt;/a&gt;と話をしたときのことを覚えています。
彼は、&amp;ldquo;You know what Sense should do? It should use this format and allow you to have multiple requests in the editor&amp;rdquo;
「Senseになにをすべきかわかる？フォーマットを使うべきだし、エディタで複数のリクエストを持つようにするべきだ」
と言いました。
もちろん、その他のチャレンジも行いました。これは、簡単なものではなく、Aceの詳細を知る必要がありました。
それは新しいAceモード（Aceによって利用されているハイライティングロジック）です。
これは、Senseのサジェストエンジンに密に統合されました。&lt;/p&gt;
&lt;p&gt;次のものが古いSenseのスクリーンショットです。&lt;/p&gt;
&lt;p&gt;画像あり。Figure 1. Sense 0.7
&lt;a href=&#34;https://www.elastic.co/blog/sense-2-0-0-beta1&#34;&gt;※画像に関しては原文をご覧ください。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;APIのURLを入力すると、JSONのボディが入力されます。
うまく切り離すことができ、AceのスタンダードJSONモードを使っていました。
しかし、ここで、次のようなフォーマットをどうやってサポートするか考える必要がありました。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;GET _cluster/health
POST index/_settings
{
  &amp;#34;index&amp;#34;: { &amp;#34;number_of_replicas&amp;#34;: 3 }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これは、Aceが3つの異なるものをどうやってパースするかを知る必要があるということです。
HTTPメソッドとURLとJSONボディです。
また、困ったことに、前に説明した前に説明した通り、明らかに別々にはならないものでした。
JSONボディが完全であることを知る唯一の方法はかっこを数えることです。
それは、いくつかの作業とAceのカスタマイズが必要でしたが、それらを切り離すことができました。
そして、Senseのシンタックスが生まれたのです（Thanks Clint!）&lt;/p&gt;
&lt;h2 id=&#34;marvel時代&#34;&gt;Marvel時代&lt;/h2&gt;
&lt;p&gt;就業時間中、私の優先すべき仕事は&lt;a href=&#34;https://www.elastic.co/products/marvel&#34;&gt;Marvel&lt;/a&gt;の開発になりました。
これは、Elasticsearchのための管理と監視のためのソリューションです。
（side note: Marvelは生まれ変わっています。（&amp;quot;&lt;a href=&#34;https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released&#34;&gt;Shield, Watcher, and Marvel 2.0.0 GA Released&lt;/a&gt;&amp;quot;））
Marvelは開発環境ではフリーなので、MarvelにSenseを組み込むことにしました。
これにより、Senseの開発が日中も行えるようになり、多くのユーザに利用され始めました。
また、Senseは実際に真の&lt;a href=&#34;https://twitter.com/spenceralger&#34;&gt;JavaScript開発者&lt;/a&gt;によって開発されました。
彼は、コードをクリーンにし、ブラウザにおける最新の技術を私に教えてくれました。&lt;/p&gt;
&lt;p&gt;この期間のSenseは数回書き換えられています。
最も顕著なものは、個別のURLとJSONのサジェストエンジンを書き換えて、
1つのサジェストエンジンにしこれらのコンテキストで動作するようにし、さらに3つ目のコンテキスト（URLパラメータ）を追加したことです。&lt;/p&gt;
&lt;p&gt;新しいエンジンはまた、複数のサジェストコンテキストをメンテナンスするのが簡単になりました。
例えば、&lt;code&gt;_search API&lt;/code&gt;のソートパラメータを考えます。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;GET _search
{
  &amp;#34;sort&amp;#34;: [
     &amp;#34;timestamp&amp;#34;: &amp;#34;desc&amp;#34;,
     &amp;#34;price&amp;#34;: {
        &amp;#34;order&amp;#34;: &amp;#34;desc&amp;#34;.
        &amp;#34;missing&amp;#34;: &amp;#34;last&amp;#34;
     },
     &amp;#34;nested_filter&amp;#34;: { &amp;#34;term&amp;#34;: { ... }},
     &amp;#34;_score&amp;#34;
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ユーザがどこにいるかによって、Senseは単純な値（&lt;code&gt;_score&lt;/code&gt;のような）か、
複雑な構造（&lt;code&gt;order&lt;/code&gt;と&lt;code&gt;missing&lt;/code&gt;のような）やフィルタ（&lt;code&gt;nested_filter&lt;/code&gt;のような）も
サジェストする必要があります。
これらのサジェストのパスが一度に処理され、無関係なものは除外されます。&lt;/p&gt;
&lt;h2 id=&#34;sense-20の紹介&#34;&gt;Sense 2.0の紹介！&lt;/h2&gt;
&lt;p&gt;Marvel 1.xはKibana 3.0をベースにしていました。
これは、データの探索やダッシュボードツールとして素晴らしいものでした。
しかし、Kibanaチームはさらに素晴らしいものを出しました。
Kibana 4.xはElasticsearchをバックエンドとするUIアプリを簡単に構築することができる
プラットフォームとして設計されています。
実際に、&lt;a href=&#34;https://www.elastic.co/guide/en/marvel/current/index.html&#34;&gt;Marvel 2.0&lt;/a&gt;はKibanaの
プラットフォームで利用できる最初のアプリです。&lt;/p&gt;
&lt;p&gt;Senseの話に戻します。
ElasticsearchのAPIとやりとりする一般的なコンソールです。
これをKibanaのアプリぴったりだと気付きました。
ということで、&lt;a href=&#34;https://github.com/elastic/sense/&#34;&gt;Sense 2.0&lt;/a&gt;をKibanaアプリとしてオープンソースで公開しました。
開発及び本番環境で利用してください。&lt;/p&gt;
&lt;p&gt;Figure 2. Screenshot Sense 2.0
&lt;a href=&#34;https://www.elastic.co/blog/sense-2-0-0-beta1&#34;&gt;※画像に関しては原文をご覧ください。&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;リリースのハイライト&#34;&gt;リリースのハイライト&lt;/h2&gt;
&lt;p&gt;Sense 2.0の新しい機能をここで簡単に紹介します。
（すべての変更点については&lt;a href=&#34;https://www.elastic.co/guide/en/sense/current/release_notes.html#_2_0_0_beta1&#34;&gt;こちら&lt;/a&gt;をご覧ください。）&lt;/p&gt;
&lt;h4 id=&#34;elasticsearch-20&#34;&gt;Elasticsearch 2.0&lt;/h4&gt;
&lt;p&gt;SenseのナレッジベースをElasticsearch 2.0サポートに更新しました。
新しいPipeline aggregationにも対応しています。&lt;/p&gt;
&lt;h4 id=&#34;複数リクエストの実行&#34;&gt;複数リクエストの実行&lt;/h4&gt;
&lt;p&gt;テストやいくつかの一連のコマンドを繰り返し実行したい時があるでしょう。
その時に、それら全てをSenseに記述し、
実行したいリクエストを選択状態にしてElasticsearchにリクエストできます。&lt;/p&gt;
&lt;p&gt;Figure 3. Submit multiple requests
&lt;a href=&#34;https://www.elastic.co/blog/sense-2-0-0-beta1&#34;&gt;※画像に関しては原文をご覧ください。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Senseは、Elasticsearchにリクエストを一つずつ送信し、それぞれの出力結果を右のパネルに表示します。
これは、問題のデバッグや複数のシナリオでのクエリの組み合わせの実行に非常に便利です。&lt;/p&gt;
&lt;h4 id=&#34;複数リクエストのコピーペースト&#34;&gt;複数リクエストのコピーペースト&lt;/h4&gt;
&lt;p&gt;複数リクストを選択し、フォーマットしたり、cURLのコマンドとしてコピーすることも可能です。&lt;/p&gt;
&lt;p&gt;Figure 4. Copy multiple requests as cURL
&lt;a href=&#34;https://www.elastic.co/blog/sense-2-0-0-beta1&#34;&gt;※画像に関しては原文をご覧ください。&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Delete all data in the `website` index
curl -XDELETE &amp;#34;http://localhost:9200/website&amp;#34;
# Create a document with ID 123
curl -XPUT &amp;#34;http://localhost:9200/website/blog/123&amp;#34; -d&amp;#39;
{
  &amp;#34;title&amp;#34;: &amp;#34;My first blog entry&amp;#34;,
  &amp;#34;text&amp;#34;:  &amp;#34;Just trying this out...&amp;#34;,
  &amp;#34;date&amp;#34;:  &amp;#34;2014/01/01&amp;#34;
}&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;もちろん、複数のcURLコマンドをコピーしてSenseにペースとすると、Senseはそれらをパースしてくれます。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;Sense 2.0.0のベータリリースです。
実際に多くの作業が終わった認識です。すぐにGAが出るでしょう。&lt;/p&gt;
&lt;p&gt;Sense 2.0を知り、試していただくために、新しい&lt;a href=&#34;https://www.elastic.co/guide/en/sense/current/index.html&#34;&gt;ドキュメント&lt;/a&gt;を参考にしてください。
バグやリクエストがある場合は、&lt;a href=&#34;https://discuss.elastic.co/c/ecosystem&#34;&gt;フォーラム&lt;/a&gt;や&lt;a href=&#34;https://github.com/elastic/sense/issues&#34;&gt;GitHubのIssue&lt;/a&gt;に登録をお願いします。&lt;/p&gt;
</content:encoded>
    </item>
    
  </channel>
</rss>
