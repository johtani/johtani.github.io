<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@johtaniの日記 2nd]]></title>
  <link href="http://blog.johtani.info/atom.xml" rel="self"/>
  <link href="http://blog.johtani.info/"/>
  <updated>2017-09-16T17:02:07+09:00</updated>
  <id>http://blog.johtani.info/</id>
  <author>
    <name><![CDATA[johtani]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[検索座談会ってのをやってみた]]></title>
    <link href="http://blog.johtani.info/blog/2017/05/25/search-meetup/"/>
    <updated>2017-05-25T00:24:13+09:00</updated>
    <id>http://blog.johtani.info/blog/2017/05/25/search-meetup</id>
    <content type="html"><![CDATA[<p>久々のブログ。
Elasticsearch勉強会を主催してますが、
プロダクトを超えて、検索で共通してある課題とか、悩みとか、あるかなぁと。
その辺りを話す場所を考えてみるのいいかもと思い、検索座談会ってのを5人でやってみた。</p>

<!-- more -->


<p>とりあえず、初めてなので、5名ほどで。プロダクトはかぶってない感じでした。</p>

<h3>話した議題はこの辺り。</h3>

<ul>
<li>形態素解析の辞書は何を使ってる？有償のもの？

<ul>
<li>そもそも形態素解析？</li>
</ul>
</li>
<li>辞書の更新とかは？

<ul>
<li>シノニムってどうしてる？</li>
</ul>
</li>
<li>サジェストとかのデータはどう作ってる？どうしてる？

<ul>
<li>検索ログとかから作ってる？</li>
</ul>
</li>
<li>検索結果のランキングって検索結果だけで決めるの？

<ul>
<li>検索漏れとかキーワードのミスマッチとかどうしてる？</li>
</ul>
</li>
</ul>


<h3>今後話したい内容はこの辺かな？</h3>

<ul>
<li>緯度経度系の検索</li>
<li>画像検索、音声検索</li>
<li>検索のキーワードの調査とかしてる人とかいるかな？</li>
<li>どんな機能が欲しい？</li>
<li>前処理としてはどんなことをしてる？</li>
</ul>


<p>このあとどうしていくかはまだ考え中。知り合いを捕まえて、どんなことしてるかを聞きにいくのもいいし、議題みたいなことを決めて、それを話してくれそうな人にコンタクトして議論するのもありかなぁ。
普通の勉強会みたいなのにするかもしれないし。
とりあえず、どのくらい興味を持ってる人がいるのかがわからないので。。。</p>

<p>もちろん、Elasticsearch勉強会は別でやっていきますよ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[今年の振り返りと来年の抱負（2016）]]></title>
    <link href="http://blog.johtani.info/blog/2016/12/31/looking-back-2016/"/>
    <updated>2016-12-31T22:22:14+09:00</updated>
    <id>http://blog.johtani.info/blog/2016/12/31/looking-back-2016</id>
    <content type="html"><![CDATA[<p>今年はRioのプレイバック見ながら書いてます。
今年はなんか長い一年だった気が。</p>

<!-- more -->


<h2>振り返り（2015年に書いた抱負から）</h2>

<p>まずは去年の抱負を元に。</p>

<h5>英語の継続</h5>

<p>継続してます。まぁ当たり前ですが。もう少し話す機会増やさないとだなぁと思いつつ。英会話しながら、海外TVドラマ見ながら。
見たドラマはこの辺かな？</p>

<ul>
<li>ER</li>
<li>SUITS</li>
<li>メンタリスト</li>
<li>Numb3rs</li>
<li>エレメンタリー</li>
<li>Agent of Shield</li>
</ul>


<p>あと、映画も見てます。とりあえず、耳を慣らすために字幕ありで見てるので、
英語だけでとは行きませんが。。。
そろそろ同じ映画を英語字幕で見るとかしたほうがいいのかもなぁ。</p>

<h5>もっとElasticsearchの開発に参加</h5>

<p>一応参加してます。ちょっとずつですが。
イベントが重なるとできなくなるので、小さなPRとかを細々とって感じですが。。。</p>

<h5>人員の倍増？</h5>

<p>倍増したかな？現時点で日本は8名になりました。そのうち1人は完全リモートです。
来年も倍増とは行かないだろうなぁ。取り急ぎ、サポートエンジニアが足りてないのでそこを埋めないと。。。</p>

<h5>日本語情報発信</h5>

<p>これはちょっと足踏みしてるかも。ブログの翻訳とかはやってるんですが、もう少しなんとかしないとなぁ。ブログも書かないと。。。</p>

<h5>Splatoon S+?</h5>

<p>なりました！とりあえずS+とSを行ったり来たりしてる感じです。
メインはノヴァネオですが、Sに落ちたら違う武器でS+に上がるまでチャレンジするってのをやってます。わかば、バケスロソーダ、プライム、ワサビくらいはやったかな？
そろそろまた違う武器かなぁ。S+99は無理そうなんで。。。</p>

<h2>振り返り(今年あったできごと)</h2>

<p>その他の今年の出来事。</p>

<ul>
<li>初香港</li>
<li>初プラハ</li>
<li>OSCなど、東京以外でのカンファレンス参加</li>
<li>厄年</li>
<li>東京オフィス！</li>
<li>BBLとかトレーニング</li>
<li>lucene-gosenをちょっとメンテ</li>
<li>Podcastデビュー？</li>
</ul>


<p>初モノ今年も多いかな。
今年は、昨年よりは長く感じた一年でした。
月1くらいで出張してたのもあるのかなぁ？
香港、プラハはもちろん会社のイベントです。
香港はジャッキーチェンの映画を彷彿とさせるところがちょくちょくあって面白かったです。
ビルとかの補修の足場が竹竿とか。
プラハも面白かったです。やっぱりヨーロッパの古い町は歴史のある建物が多くて楽しいです。</p>

<p>OSCなどのイベントも色々行きました。福岡、名古屋、大阪、京都、札幌と回りました。
それとは別に大阪、福岡も行ったかな。
来年は沖縄と広島に行きたいなぁ。。。
出張のついで？じゃないですが、御朱印集めし始めました。神社仏閣もいいですよねぇ。</p>

<p><a href="http://blog.johtani.info/blog/2016/06/30/broken-something-in-this-year/">厄年</a>はきつかった。。。たまたまだとは思うけど、お祓いに行ったのが効いたのかなぁ。後半は特に問題なかったかな。腕時計無くしたと思ったら見つかったりしたし。</p>

<p>弊社東京オフィスができました。（あんまり行ってないけど）
ときどきアクロクエストさんがセミナーを開いたりしてます。
昨年のTour Tokyo後のMeetupでもイベントスペースを使って、Drinkup（勉強会の懇親会だけバージョン）もやりました。
今後もちょこちょことイベントをやってみようかな？</p>

<p>BBLも始めました。あまりきちんと宣伝してないからそれほど依頼は来てないですが。
あとは、今年も2回日本語でトレーニングしました。
前回はほぼ満席にまでなりました。
来年も頑張りたいかな。ショートカットするためにもいいと思うんで、トレーニングを受けて欲しいんです。。。</p>

<p>lucene-gosenのメンテもしました。
といってもプログラムではなく、ビルドシステムをAntからGradleに変更したんですが。
来年もちょっとずつ触りたいな。機能面で拡充するかはわからないですが。。。</p>

<p>Podcastにもデビューさせていただきました。
wyukawaさんのPodcastです。「<a href="http://wyukawa.tumblr.com/post/153257053753/johtani%E3%81%95%E3%82%93%E3%81%A8elasticsearch%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%A9%B1%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F-guest">johtaniさんとElasticsearchについて話しました</a>」楽しかったです。
また出たいなぁというか、喋るの面白かった！</p>

<h2>来年の抱負</h2>

<ul>
<li>もちろん英語の継続</li>
<li>継続的にイベントに登壇</li>
<li>もっと開発＆ブログ</li>
<li>サポートエンジニア獲得！</li>
<li>個人的な検索勉強会の再開</li>
</ul>


<p>英語はまぁ、当たり前ですね。会社の人つかまえてもっと喋る時間増やさないとだな。</p>

<p>来年もいろんなカンファレンスなどに出てブース出したり、セッション持ったりして
もっともっと広めていかないとなぁ。
あとは、勉強会とMeetupもやっていかないと。入門編と上級編みたいに分けてみるのもありかなぁと考えて見たり。
スピーカー、ご意見募集しております。</p>

<p>開発に時間をさくための時間の活用をしていかないとなぁと。
どうも時間の使い方がまだ上手くないので。ブログも一緒ですね。。。
月1くらいのペースではかきたいな。。。
ブログもそうだけど書籍もかな？？？？
あと、外資系の他の会社の人ともまた飲みたいなー。</p>

<p>開発の時間を確保という面ではサポートエンジニアも募集中です。
最近、クライアントが増えて来てチケットが増えて来てるんで、サポートしたりもしてるんです。。。
自分の時間を増やすためにもサポートエンジニアを確保しないと。誰かいい人いないかなぁ。</p>

<p>個人的にやってた勉強会を忙しいって言って中断してるので、再開しないと。。。</p>

<p>ということで、今年もあと數十分になってしまいました。
今年も色々な方に助けていただけました。お世話になりました。
この場を借りてお礼申し上げます。</p>

<p>来年もいろんな方々に助けてもらうと思いますが、よろしくお願いいたします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2016年のElastic Stack]]></title>
    <link href="http://blog.johtani.info/blog/2016/12/25/elasticsearch-6-features/"/>
    <updated>2016-12-25T00:03:50+09:00</updated>
    <id>http://blog.johtani.info/blog/2016/12/25/elasticsearch-6-features</id>
    <content type="html"><![CDATA[<p>Merry Christmas!
<a href="http://qiita.com/advent-calendar/2016/elastic">Elastic stack Advent Calendar 2016</a> 最終日の記事になります。</p>

<p>簡単に今年の変遷を振り返ってみます。</p>

<!-- more -->


<h2>Elasticsearch 2.2 (2月)</h2>

<ul>
<li><a href="https://www.elastic.co/jp/blog/elasticsearch-2-2-0-and-2-1-2-and-1-7-5-released">Elasticsearch 2.2.0、2.1.2、1.7.5リリース</a></li>
</ul>


<p>クエリプロファイラやGeo系の性能改善などが取り込まれました。
また、同時期にリリースされたKibana 4.4ではColor pickerやShare用のURLの短縮化機能なども追加されました。</p>

<h2>第2回目のユーザカンファレンス、Elastic{ON}開催（2月）</h2>

<p>サンフランシスコで、弊社第2回目のカンファレンスが開催されました。
2015年の会場よりも大きくなり、多数の方に参加いただきました。
ここで、以下の発表がありました。</p>

<h3>Elastic StackとX-Packの紹介</h3>

<p>これまで、ELK stackと呼ばれて意味明日が、Beatsチームの参加により、ELKだけではなくなったこともあり、Elastic Stackと呼び名を変える事になりました。
また、Marvel、Shield、Watcherなどの商用の拡張機能についても、
単体の名称ではなく、X（Extension）-Packと1つの名前になる事に。
詳細については<a href="https://www.elastic.co/jp/blog/heya-elastic-stack-and-x-pack">公式のブログ</a>をご覧ください。</p>

<h3>Elastic CloudとElastic Cloud Enterpriseの発表</h3>

<p>2015年にElasticにジョインし、
これまでFound.no（Found）と呼ばれていた弊社のElasticsearch as a Serviceが<a href="https://www.elastic.co/jp/blog/introducing-elastic-cloud-and-elastic-cloud-enterprise">Elastic Cloudと名称変更</a>しました。
また、Elastic Cloudで培っているノウハウを詰め込んだElastic Cloud Enterpriseも発表しました。実際に利用可能になるまでには
まだもう少しかかってしまいますが、アルファ版が公開されていますので、興味のある方は触ってみてください。</p>

<p>Elastic{ON}2016で撮影された、<a href="https://www.elastic.co/blog/life-without-elasticsearch-elasticon16">「Elasticsearchがないあなたの人生はどうなりますか？」</a> といった面白い動画も公開されています。</p>

<h2>Elasticsearch 2.3リリース（3月）</h2>

<ul>
<li><a href="https://www.elastic.co/jp/blog/elasticsearch-2-3-0-and-2-2-2-released">Elasticsearch 2.3.0および2.2.2をリリース</a></li>
</ul>


<p>Reindex APIが登場し、Mappingの変更やShard数の変更など、色々とデータの更新などがやりやすくなりました。
また、Task Managementの機能も追加され、長時間かかる処理を間違った場合などの対処が楽になりました。
個人的には、Deprecation Loggingの機能が導入されたことが嬉しいこととなります。次期メジャーバージョンで廃止される機能についてログに出力されるようになりました。
実際に運用されているアプリで利用している機能が今後なくなるかどうかをログを見るとわかるという仕組みです。</p>

<h2>Rally登場（4月）</h2>

<ul>
<li><a href="https://www.elastic.co/jp/blog/announcing-rally-benchmarking-for-elasticsearch">Rally登場：Elasticsearchのベンチマークツール</a></li>
</ul>


<p>Elasticsearchのベンチマークツールがリリースされました。
定期的にElasticsearchの性能を計測することは問題点を見つける事に役に立ちます。そういった手助けをしてくれるツールが公開されることは非常に便利なことかと。</p>

<h2>Elastic Stack 5 alpha1 リリース（4月）</h2>

<ul>
<li><a href="https://www.elastic.co/jp/blog/elastic-stack-release-5-0-0-alpha-1">Elastic Stack 5.0.0 alpha 1 リリース</a></li>
</ul>


<p>Ingest NodeやLucene 6、新しいKibanaのUIなど多くのものが詰まっていました。ここから多くのユーザにテストしてもらい、5.0の正式リリースを迎えることができました。</p>

<h2>Elasticsearch 2.4.0リリース（8月）</h2>

<ul>
<li><a href="https://www.elastic.co/jp/blog/release-bonanza-elasticsearch-graph-shield-watcher-marvel-reporting-logstash-2-4-beats-1-3-and-kibana-4-6-are-now-available"></a></li>
</ul>


<p>2.xの最後のマイナーバージョンリリースです。
Reportingなどの追加とドットつきフィールド名の復活がありました。</p>

<h2>Elastic Stack 5.0.0 beta1 リリース（9月）</h2>

<ul>
<li><a href="https://www.elastic.co/jp/blog/elastic-stack-release-5-0-0-beta1">Elastic Stack Release - 5.0.0-beta1</a></li>
</ul>


<p>ついにベータです。Painlessがスクリプトのデフォルトになったり、TimelionがKibanaに取り込まれるなど、正式リリースまであと少し！</p>

<h2>Prelertチームジョイン（9月）</h2>

<ul>
<li><a href="https://www.elastic.co/blog/welcome-prelert-to-the-elastic-team">Welcome Prelert to the Elastic Team</a></li>
</ul>


<p>Machine Learningエンジンを開発し、Elasticsearch,Kibanaとの組み合わせの製品をリリースしていたPrelertという会社がジョインしました。
Elasticsearchに保存された多くのデータをより活用していただくことができるかと思います。
Elastic{ON} Tour 2016 Tokyoで弊社SAの大輪の発表も人気があるものでした。まだベータ段階ですが、利用して見ることも可能です。
ビデオなどが公開されたらまたツイートしようと思います。</p>

<h2>Elastic{ON} Tour Tokyo 2016開催（12月）</h2>

<p>今年で2回目のTokyoローカルの1日イベントでした。
ブログは「まだ」書いてませんが、、、今回も盛りだくさんのイベントになりました。
早朝のトレーニング（ハンズオンではない）にも80名近くの方に参加していただけましたし、私はKibanaのキーノート＋デモという大役をもらいましたし、ちょっと大変でした。
今年もAMA（Ask Me Anything）ブースが大盛況でした。
色々な方から、弊社のサポート、開発者が色々な質問を受け、それに答えるという形です。楽しんでいただけたかと思います。
来年もぜひ開催したいなと思っています。</p>

<p>また、<a href="https://www.elastic.co/blog/first-wave-of-elasticon-17-sessions-revealed">Elastic{ON}17のセッションも</a>いくつか発表されています。
ぜひ、サンフランシスコで行われる本場のカンファレンスにもご参加ください！</p>

<h2>来年は？</h2>

<p>1月後半か2月に<a href="https://www.meetup.com/ja-JP/Tokyo-Elastic-Fantastics/">Elasticsearch勉強会</a>を検討しようと思っています。スピーカーに興味のある方は連絡いただければと。</p>

<p>会社としては、<a href="https://www.elastic.co/elasticon/conf/2017/sf">Elastic{ON}2017</a>が3月にまた開催されます。これで3回目となります。もちろん私も参加予定なので、参加される方は、現地で会いましょう！</p>

<p>そのほかにも<a href="http://www.bigdatacon.jp/ja/">BIG DATA ANALYTICS TOKYO</a>やオープンソースカンファレンス（<a href="http://www.ospn.jp/osc2017-osaka/">大阪</a>）、<a href="http://event.shoeisha.jp/devsumi/20170216/">デブサミ</a>といったカンファレンスに参加（登壇・ブースなど）予定です。
参加される方は、ぜひブースまでお越しください。</p>

<p>では、また来年のAdvent Calendarでお会いしましょう！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elasticsearch 5.0の便利機能紹介？]]></title>
    <link href="http://blog.johtani.info/blog/2016/12/01/elasticsearch-5-dot-0-highlight/"/>
    <updated>2016-12-01T17:34:30+09:00</updated>
    <id>http://blog.johtani.info/blog/2016/12/01/elasticsearch-5-dot-0-highlight</id>
    <content type="html"><![CDATA[<p>Elastic stack Advent Calendar 1日目の記事になります。</p>

<p><a href="https://www.elastic.co/jp/blog/elasticsearch-5-0-0-released">Elasticsearch 5.0</a>が10月末にリリースされました。
リリースのブログでいくつか紹介されているのですが、そこでは紹介されていない機能について2、3紹介しようと思います。</p>

<!-- more -->


<p>その前に、5.0、あれ？その前は2.xじゃなかったっけ？？と困惑されている方もいるかと思うので、簡単に5となった経緯の紹介をしようかと。</p>

<h3>バージョン番号</h3>

<p>なぜ2から5に飛んだのかという話ですが、このスライドがその紹介になっています。</p>

<p><a href="https://speakerdeck.com/johtani/elastic-stack-5-dot-0-alpha1-alpha5?slide=5">https://speakerdeck.com/johtani/elastic-stack-5-dot-0-alpha1-alpha5?slide=5</a></p>

<p><a href="https://www.elastic.co/elasticon/conf/2016/sf/opening-keynote">Elastic{ON} 2016のキーノート</a>でも紹介がありましたが、KibanaやLogstashとElasticsearchを組み合わせて使うときにバージョンのミスマッチで動かないというユーザの声が上がっていました。
2.xのリリースから、同じ日にKibana、Logstash、Beatsもリリースするようになったのですが、
やはり、バージョン番号が異なるため、ミスマッチで動かないというユーザが時々いました。</p>

<p>Elastic Stackという名称にもなったため、バージョン番号をそろえようという事になり、
Elasticsearch、Kibana、Logstash、Beats全てが5.0.0としてリリースされ、
今後は同じバージョン番号になります。</p>

<p>ちなみに、「5」になった理由はKibanaのメジャーバージョンが「4」だったためです。</p>

<p>さて、では、いくつか機能の紹介を。</p>

<h3>Reindex from remote cluster</h3>

<p>Reindexが2.3から導入されました。データの再登録ができるようになり、マッピングの変更や
Shardの数の変更などが柔軟に行えるようになりました。
便利でしたが、あくまでも同一のクラスタでデータを登録し直す形でした。</p>

<p>5.0からはこの機能に加えて、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html#reindex-from-remote">異なるクラスタからデータを取得してReindex</a>を行うことができるようになりました。
こんな形になります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>POST _reindex
</span><span class='line'>{
</span><span class='line'>  "source": {
</span><span class='line'>    "remote": {
</span><span class='line'>      "host": "http://otherhost:9200",
</span><span class='line'>      "username": "user",
</span><span class='line'>      "password": "pass"
</span><span class='line'>    },
</span><span class='line'>    "index": "source",
</span><span class='line'>    "query": {
</span><span class='line'>      "match": {
</span><span class='line'>        "test": "data"
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  "dest": {
</span><span class='line'>    "index": "dest"
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><code>username</code>と<code>password</code>はリモートのクラスタに認証の気候が存在する場合に利用できるオプションです。
また、ReindexのAPIはクエリを使用して、必要なデータだけを取得することが可能です。
この機能により、1.xや2.xのクラスタからデータを移行することが可能になります。</p>

<h3>Custom analyzer test using Analyze API</h3>

<p>もう一つ、ちょっとだけ便利な機能を紹介します。
独自にAnalyzerを定義（TokenizerとToken Filterなどを個別に設定）して、その挙動を確認するとき、2.xまでは、インデックスを作成してそのインデックスに対して<code>_analyze</code> APIを呼び出す必要がありました。</p>

<p>5.xからは<code>_analyze</code> APIの読み出しのパラメータで指定できるようになりました。
こんな感じです。ここでは、<code>lowercase</code>フィルタのあとに、<code>{...}</code>で<code>stop</code>フィルタを
パラメータの中で、指定しています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -XGET 'localhost:9200/_analyze' -d '
</span><span class='line'>{
</span><span class='line'>  "tokenizer" : "whitespace",
</span><span class='line'>  "filter" : ["lowercase", {"type": "stop", "stopwords": ["a", "is", "this"]}],
</span><span class='line'>  "text" : "this is a test"
</span><span class='line'>}'</span></code></pre></td></tr></table></div></figure>


<p>ちょっとだけですが、Analyzerなどを試すのが楽になるのではないでしょうか？</p>

<p>ということで、以上が1日目の記事でした。
Logstashなど、他の5.0.0に関する記事もAdvent Calendarに空きがあるようなので、個別にかこうかなと思います。お楽しみに！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lucene Kuromoji for NEologdで指定した品詞の単語を抜き出すIngest Pluginを書いてみた #elasticsearchjp]]></title>
    <link href="http://blog.johtani.info/blog/2016/07/22/making-ingest-processor-plugin-with-cookiecutter/"/>
    <updated>2016-07-22T13:26:56+09:00</updated>
    <id>http://blog.johtani.info/blog/2016/07/22/making-ingest-processor-plugin-with-cookiecutter</id>
    <content type="html"><![CDATA[<p>久しぶりに、技術的なブログ書いてます。</p>

<p>Ingest Processorのプラグインを作ってみたくなったので、書いてみました。
ただ書いてみるんじゃ3番煎じになりそうなので、<a href="https://cookiecutter.readthedocs.io/en/latest/readme.html">cookiecutter</a>を使ってみました。</p>

<!-- more -->


<p>と言っても、同僚のAlexが<a href="https://discuss.elastic.co/t/cookiecutter-template-for-writing-ingest-processors/52985">cookiecutter-elasticsearch-ingest-processor</a>と言うテンプレートを作ってくれているのを使っただけですが。（<a href="https://discuss.elastic.co">https://discuss.elastic.co</a> に投稿された記事で、使い方がアニメgifで説明されててわかりやすいです）</p>

<p><a href="https://cookiecutter.readthedocs.io/en/latest/readme.html">cookiecutter</a>とは、コマンドラインで質問に答えると、テンプレートからプロジェクトが生成できるツールです。
Elasticでは、カスタムBeatを作る時に利用する例がいつかの日本語ブログや発表資料で話題になっていました。
これのIngest Processorのプラグインバージョンです。</p>

<p>今回は、NEologdも使ってみたかったので、Lucene Kuromoji for NEologdを利用して
指定した品詞の単語だけを抽出するProcessorを作ってみました。</p>

<p>GitHubのプロジェクト：<a href="https://github.com/johtani/elasticsearch-ingest-kuromoji-pos-extract">https://github.com/johtani/elasticsearch-ingest-kuromoji-pos-extract</a></p>

<h3>Cookiecutterの使い方</h3>

<p><a href="https://cookiecutter.readthedocs.io/en/latest/readme.html">Cookiecutterのインストールはサイト</a>をご覧ください。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cookiecutter gh:spinscale/cookiecutter-elasticsearch-ingest-processor</span></code></pre></td></tr></table></div></figure>


<p>あとは、出てくる以下の項目を指定するだけです。</p>

<ul>
<li><code>processor_type</code> : Ingest Processorのタイプ名です。<code>kuromoji_part_of_speech_extract</code>としました。（Alexのだと<code>_</code>を使うとちょっと問題があるので後述）</li>
<li><code>description</code> : readme.mdに利用されます。</li>
<li><code>developer_name</code> : 名前を記載。Javaのファイルのヘッダに利用</li>
<li><code>elasticsearch_version</code> : デフォルトで<code>5.0.0-alpha4</code>が指定されているので、特に指定せず</li>
</ul>


<p>以上の質問に答えたら、プロジェクトのディレクトリ構造が出来上がってます。
プロジェクトのビルドなどにはGradleを利用します。</p>

<h3>プロジェクトのIntelliJ IDEA用のファイルを生成</h3>

<p>build.gradleファイルでGradleのideaプラグインがapplyされているので、以下のコマンドを叩けばIntelliJ IDEAのプロジェクトファイル（？）が生成され、IntelliJで開けばすぐに開発ができる状態にできます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gradle idea</span></code></pre></td></tr></table></div></figure>


<h3>コーディング</h3>

<p>あとは、必要処理をコーディングします。
実際にコーディングするクラスは<code>org.elasticsearch.plugin.ingest.kuromoji_part_of_speech_extract</code>のパッケージにある以下の2つです。（パッケージ名にはprocessor_typeの名前が指定されている）</p>

<ul>
<li>IngestKuromojiPartOfSpeechExtractPlugin</li>
<li>KuromojiPartOfSpeechExtractProcessor</li>
</ul>


<h4>IngestKuromojiPartOfSpeechExtractPlugin</h4>

<p>Pluginというクラスは、プラグインをNodeのModuleとして登録する処理を書くクラスとなります。
生成してすぐは、次のような形になっています。（※importやクラス定義の部分は省略しています。）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="o">...</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Setting</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">YOUR_SETTING</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">new</span> <span class="n">Setting</span><span class="o">&lt;&gt;(</span><span class="s">&quot;ingest.kuromoji_part_of_speech_extract.setting&quot;</span><span class="o">,</span> <span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="o">(</span><span class="n">value</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">value</span><span class="o">,</span> <span class="n">Setting</span><span class="o">.</span><span class="na">Property</span><span class="o">.</span><span class="na">NodeScope</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Setting</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">getSettings</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">YOUR_SETTING</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onModule</span><span class="o">(</span><span class="n">NodeModule</span> <span class="n">nodeModule</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">nodeModule</span><span class="o">.</span><span class="na">registerProcessor</span><span class="o">(</span><span class="n">KuromojiPartOfSpeechExtractProcessor</span><span class="o">.</span><span class="na">TYPE</span><span class="o">,</span>
</span><span class='line'>                <span class="o">(</span><span class="n">registry</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">KuromojiPartOfSpeechExtractProcessor</span><span class="o">.</span><span class="na">Factory</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>YOUR_SETTING</code>プロパティと<code>getSettings()</code>メソッドは<code>elasticsearch.yml</code>で指定したい設定を記述する場合の例になります。今回は特に必要ないので両方削除しました。
最終系は<a href="https://github.com/johtani/elasticsearch-ingest-kuromoji-pos-extract">GitHubのコード</a>をご覧ください。</p>

<h4>KuromojiPartOfSpeechExtractProcessor</h4>

<p>Processorは実際にIngest Nodeで行う処理を書くところです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TYPE</span> <span class="o">=</span> <span class="s">&quot;kuromoji_part_of_speech_extract&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">field</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">targetField</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">KuromojiPartOfSpeechExtractProcessor</span><span class="o">(</span><span class="n">String</span> <span class="n">tag</span><span class="o">,</span> <span class="n">String</span> <span class="n">field</span><span class="o">,</span> <span class="n">String</span> <span class="n">targetField</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">tag</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">field</span> <span class="o">=</span> <span class="n">field</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">targetField</span> <span class="o">=</span> <span class="n">targetField</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">(</span><span class="n">IngestDocument</span> <span class="n">ingestDocument</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">content</span> <span class="o">=</span> <span class="n">ingestDocument</span><span class="o">.</span><span class="na">getFieldValue</span><span class="o">(</span><span class="n">field</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">// TODO implement me!</span>
</span><span class='line'>        <span class="n">ingestDocument</span><span class="o">.</span><span class="na">setFieldValue</span><span class="o">(</span><span class="n">targetField</span><span class="o">,</span> <span class="n">content</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getType</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">TYPE</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Factory</span> <span class="kd">extends</span> <span class="n">AbstractProcessorFactory</span><span class="o">&lt;</span><span class="n">KuromojiPartOfSpeechExtractProcessor</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">KuromojiPartOfSpeechExtractProcessor</span> <span class="nf">doCreate</span><span class="o">(</span><span class="n">String</span> <span class="n">processorTag</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">config</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">field</span> <span class="o">=</span> <span class="n">readStringProperty</span><span class="o">(</span><span class="n">TYPE</span><span class="o">,</span> <span class="n">processorTag</span><span class="o">,</span> <span class="n">config</span><span class="o">,</span> <span class="s">&quot;field&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">targetField</span> <span class="o">=</span> <span class="n">readStringProperty</span><span class="o">(</span><span class="n">TYPE</span><span class="o">,</span> <span class="n">processorTag</span><span class="o">,</span> <span class="n">config</span><span class="o">,</span> <span class="s">&quot;target_field&quot;</span><span class="o">,</span> <span class="s">&quot;default_field_name&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">KuromojiPartOfSpeechExtractProcessor</span><span class="o">(</span><span class="n">processorTag</span><span class="o">,</span> <span class="n">field</span><span class="o">,</span> <span class="n">targetField</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>TYPE</code>が<a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/put-pipeline-api.html">Ingest APIのPipelineでProcessorを指定するときに使う名前</a>になります。ここは、cookiecutterの時にprocessor_typeに入力した文字列になっています。
<code>kuromoji_part_of_speech_extract</code>だと長いので、<code>kuromoji_pos_extract</code>に変えました。</p>

<p><code>execute()</code>メソッドに<code>// TODO implement me!</code>とあります。
この部分に実際の処理を記述していきます。</p>

<p>あとは、<code>Factory</code>クラスでIngest APIで指定された設定項目を読み込みます。
今回作成した<code>elasticsearch-ingest-kuromoji-pos-extract</code>では品詞を指定する必要があるので、<code>pos_tags</code>を指定できるように処理を追加しました。</p>

<p>私が実装したものの説明をするとちょっと長くなりそうなので、<a href="https://github.com/johtani/elasticsearch-ingest-kuromoji-pos-extract">GitHubのコード</a>をご覧ください。</p>

<h3>テストのコーディング</h3>

<p>テストのクラスもテンプレートで生成されています。</p>

<ul>
<li>KuromojiPartOfSpeechExtractProcessorTests</li>
<li>KuromojiPartOfSpeechExtractRestIT</li>
</ul>


<h4>KuromojiPartOfSpeechExtractProcessorTests</h4>

<p>Processorクラスのテストになります。生成直後は次のような感じです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testThatProcessorWorks</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">document</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>    <span class="n">document</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;source_field&quot;</span><span class="o">,</span> <span class="s">&quot;fancy source field content&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">IngestDocument</span> <span class="n">ingestDocument</span> <span class="o">=</span> <span class="n">RandomDocumentPicks</span><span class="o">.</span><span class="na">randomIngestDocument</span><span class="o">(</span><span class="n">random</span><span class="o">(),</span> <span class="n">document</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">KuromojiPartOfSpeechExtractProcessor</span> <span class="n">processor</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">KuromojiPartOfSpeechExtractProcessor</span><span class="o">(</span><span class="n">randomAsciiOfLength</span><span class="o">(</span><span class="mi">10</span><span class="o">),</span> <span class="s">&quot;source_field&quot;</span><span class="o">,</span> <span class="s">&quot;target_field&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">processor</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">ingestDocument</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="n">ingestDocument</span><span class="o">.</span><span class="na">getSourceAndMetadata</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">data</span><span class="o">,</span> <span class="n">hasKey</span><span class="o">(</span><span class="s">&quot;target_field&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;target_field&quot;</span><span class="o">),</span> <span class="n">is</span><span class="o">(</span><span class="s">&quot;fancy source field content&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="c1">// TODO add fancy assertions here</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>テストメソッドも実装されていますが、パラメータの追加の設定処理やアサーションが書かれてません。
実装に合わせて、アサーションや設定処理を追加しましょう。</p>

<h4>KuromojiPartOfSpeechExtractRestIT</h4>

<p>こちらはIntegration Testになります。
実際にElasticsearchに対して外部からAPIを叩くような感じです。
APIを叩くときに利用するJSONの設定やアサーションは<code>src/test/resources</code>にyamlファイルがあります。</p>

<ul>
<li>10_basic.yaml</li>
<li>20_kuromoji_part_of_speech_extract_processor.yaml</li>
</ul>


<p><code>10_basic.yaml</code>はプラグインがインストールされているかの確認のテストです。特に変更する必要はないです。</p>

<p><code>20_kuromoji_part_of_speech_extract_processor.yaml</code>は実際にコーディングしたProcessorが動くかどうかのテストです。</p>

<p>テストの内容については、<a href="https://github.com/johtani/elasticsearch-ingest-kuromoji-pos-extract">GitHubのコード</a>をご覧ください。</p>

<h3>テストの実行とZipの生成</h3>

<p>テストの実行とZipの生成は次のコマンドを実行すればOKです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">gradle</span> <span class="n">check</span>
</span></code></pre></td></tr></table></div></figure>


<p>テストに問題があった場合は、コケますし、問題なければ<code>SUCCESS</code>と表示が出ます。
成功した場合は<code>build/distributions/</code>というディレクトリにzipファイルができています。
これをElasticsearchのpluginコマンドでインストールすれば動きます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">bin</span><span class="o">/</span><span class="n">plugin</span> <span class="n">install</span> <span class="nl">file:</span><span class="c1">///path/to/elasticsearch-ingest-kuromoji-pos-extract/build/distribution/ingest-kuromoji_part_of_speech_extract-0.0.1-SNAPSHOT.zip</span>
</span></code></pre></td></tr></table></div></figure>


<h3>kuromoji_pos_extractの利用方法</h3>

<p>Ingest APIには便利な<a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/simulate-pipeline-api.html">Simulate Pipeline API</a>があります。</p>

<p>ということで、<a href="https://github.com/neologd/mecab-ipadic-neologd/blob/master/README.ja.md">mecab-ipadic-NEologd</a>にあったサンプルの文章を使って、使い方の説明です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='JSON'><span class='line'><span class="err">POST</span> <span class="err">_ingest/pipeline/_simulate</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;pipeline&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;description&quot;</span> <span class="p">:</span> <span class="s2">&quot;kuromoji neologd extract test&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;processors&quot;</span> <span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;kuromoji_pos_extract&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;field&quot;</span> <span class="p">:</span> <span class="s2">&quot;body&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;target_field&quot;</span> <span class="p">:</span> <span class="s2">&quot;noun_field&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;pos_tags&quot;</span> <span class="p">:</span> <span class="p">[</span>
</span><span class='line'>          <span class="s2">&quot;名詞-固有名詞-組織&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;名詞-固有名詞-一般&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;名詞-固有名詞-人名-一般&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;名詞-固有名詞-地域-一般&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;名詞-固有名詞-地域-国&quot;</span>
</span><span class='line'>          <span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;docs&quot;</span> <span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;_index&quot;</span><span class="p">:</span> <span class="s2">&quot;index&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;_type&quot;</span><span class="p">:</span> <span class="s2">&quot;type&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;_id&quot;</span><span class="p">:</span> <span class="s2">&quot;id&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;_source&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;body&quot;</span> <span class="p">:</span> <span class="s2">&quot;10日放送の「中居正広のミになる図書館」（テレビ朝日系）で、SMAPの中居正広が、篠原信一の過去の勘違いを明かす一幕があった。&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>結果はこちら。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='JSON'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;docs&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;doc&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;_index&quot;</span><span class="p">:</span> <span class="s2">&quot;index&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;_id&quot;</span><span class="p">:</span> <span class="s2">&quot;id&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;_type&quot;</span><span class="p">:</span> <span class="s2">&quot;type&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;_source&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;noun_field&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="s2">&quot;10日&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;中居正広のミになる図書館&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;テレビ朝日&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;SMAP&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;中居正広&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;篠原信一&quot;</span>
</span><span class='line'>          <span class="p">],</span>
</span><span class='line'>          <span class="nt">&quot;body&quot;</span><span class="p">:</span> <span class="s2">&quot;10日放送の「中居正広のミになる図書館」（テレビ朝日系）で、SMAPの中居正広が、篠原信一の過去の勘違いを明かす一幕があった。&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nt">&quot;_ingest&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;timestamp&quot;</span><span class="p">:</span> <span class="s2">&quot;2016-07-22T06:18:49.007+0000&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>noun_field</code>に固有名詞の単語が抜き出せているのがわかるかと思います。</p>

<h3>Alexのテンプレートで困った点</h3>

<p>テンプレートは便利だったのですが、<code>processor_type</code>に<code>_</code>を使用したタイプ名を指定すると次のような問題（？）が発生しました。</p>

<ul>
<li>クラス名が<code>Kuromoji_part_of_speech_extractProcessor</code>となってしまう</li>
</ul>


<p>深刻な問題ではないのですが、JavaだとCamel Caseが普通なのでちょっと気になって。
ということで、<a href="https://github.com/spinscale/cookiecutter-elasticsearch-ingest-processor/pull/1">プルリク</a>作って出してみました。まだ取り込まれてないかな。</p>

<p>取り込み前に使いたい方は以下のコマンドを実行してください。
<code>processor_class_name</code>という項目が増えています。
デフォルトだと<code>processor_type</code>の<code>_</code>の部分を取り除きつつCamel Caseにしたものが入ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='JSON'><span class='line'><span class="err">cookiecutter</span> <span class="err">gh:johtani/cookiecutter-elasticsearch-ingest-processor</span>
</span></code></pre></td></tr></table></div></figure>


<h3>まとめ</h3>

<p>ということで、とりあえず作ってみましたというものになります。
特徴的な単語（固有名詞だけ）を抜き出して、別のフィールドにできるので、タグみたいなものをこれを使って前処理で作れるようになるかなぁと。</p>

<h2>参考ブログ（元ネタ？）</h2>

<p>インスパイア元となったブログです。</p>

<ul>
<li><a href="http://dev.classmethod.jp/server-side/elasticsearch/ingest-plugin-useragent/">User Agentを解析するIngest Pluginを書いてみた</a></li>
<li><a href="http://blog.cybozu.io/entry/2016/07/05/080000">Elasticsearch 5.0.0のIngest Node用プラグインを書いた話</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[よく物が壊れる年]]></title>
    <link href="http://blog.johtani.info/blog/2016/06/30/broken-something-in-this-year/"/>
    <updated>2016-06-30T10:57:38+09:00</updated>
    <id>http://blog.johtani.info/blog/2016/06/30/broken-something-in-this-year</id>
    <content type="html"><![CDATA[<p>なんか、今年はよく物が壊れる、厄年だからかなぁ？</p>

<p>ということで、記念に何が壊れたかをブログに残しておこうかと。</p>

<!-- more -->


<ol>
<li>腕時計（壊れてないかな）

<ul>
<li>電波腕時計を使ってたんだけど、電池がへたってたのでオーバーホールしてもらった。</li>
</ul>
</li>
<li>Moto 360（壊れたというか。。。）

<ul>
<li>何度かバージョンアップしてるんだけど、数ヶ月前から、ちょっと触っただけで電源が落ちる現象が。ファームウェアのせいかAndroid Wearのバージョンアップのせいかわからないけど。。。挙げ句の果てに、電源を入れるために充電器にセットしないといけないと言う酷い仕様。。。</li>
</ul>
</li>
<li>自転車前輪

<ul>
<li>自転車で車道を横切る側溝の蓋の間に前輪がはまってすっ転んでしまい、タイヤのスポークがちょっと曲がってしまう</li>
</ul>
</li>
<li>ジーンズその1

<ul>
<li>自転車で転んだ時に、膝とかこすって破れる</li>
</ul>
</li>
<li>ジーンズその2

<ul>
<li>福岡出張中に雨で滑って派手に転んで、膝に大きな穴が。。。</li>
</ul>
</li>
<li>リュック

<ul>
<li><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">あー、怪しいなと思ってたんだけど、やっぱりこわれた、、、 <a href="https://t.co/CD2Y7t6AOD">pic.twitter.com/CD2Y7t6AOD</a></p>&mdash; Jun Ohtani (@johtani) <a href="https://twitter.com/johtani/status/743409932981014528">2016年6月16日</a></blockquote> <script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
怪しいとは思ってたんだけど。。。
ということで、リュックを新調しつつ修理に出してるところ。</li>
</ul>
</li>
<li>Xperia Z3

<ul>
<li>先週金曜日にカメラのレンズが結露してるなぁと思ったら、電源が入らなくなった。補償サービスに入ってたんで、新しいZ3を次の日に送付してもらい復旧。いろいろなアプリがログインしないといけないのでかなり大変だった。。。</li>
</ul>
</li>
</ol>


<p>まだ、半年残ってるので他にも壊れるのかなぁ。。。
お祓いしてもらったので、何もなければいいんだけど。</p>

<p>ということで、なんとなく<a href="http://www.amazon.co.jp/registry/wishlist/29EMX20UN9P16/ref=cm_sw_r_tw_ws_NhjDxb61H9RBS">欲しいものリスト</a>を貼っておきますね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第16回Elasticsearch勉強会を開催しました。 #elasticsearchjp]]></title>
    <link href="http://blog.johtani.info/blog/2016/06/28/16th-elasticsearch-meetup/"/>
    <updated>2016-06-28T13:55:55+09:00</updated>
    <id>http://blog.johtani.info/blog/2016/06/28/16th-elasticsearch-meetup</id>
    <content type="html"><![CDATA[<p><a href="https://elasticsearch.doorkeeper.jp/events/46539">第16回Elasticsearch勉強会</a>を開催しました。
スタッフの皆さん、スピーカーの皆さん、会場提供していただいた<a href="http://recruit-tech.co.jp">リクルートテクノロジーズさん</a>、ありがとうございました！
今回は、司会だけに注力してみました（）。</p>

<!-- more -->


<h3>チェックイン数など</h3>

<ul>
<li>チェックインした人：141名</li>
<li>キャンセルしなかった人：67名</li>
</ul>


<p>でした。</p>

<p>今回は、参加希望者が多くて、当日にも100名近いキャンセル待ちの方がいたので、
240名まで、参加者枠を増枠（会場キャパ190名程度）して対応しました。
まぁ、読み通り、1/3の方はキャンセルしない形でした。
天気も良く電車の遅延などもなさそうだったので、ちょっとドキドキしてたのですが。</p>

<p>以下は簡単なメモです。</p>

<h2>「LogstashとElasticsearchで作るEnterprise Search Platform」/ Elastic Kosho Owa</h2>

<p>スライド：<a href="https://speakerdeck.com/kosho/enabling-enterprise-search-platform-with-elastic-stack">https://speakerdeck.com/kosho/enabling-enterprise-search-platform-with-elastic-stack</a></p>

<ul>
<li>使ってるLogstashの設定ファイルを elastic-japan at elastic dot co に送るとTシャツがもらえるらしい。</li>
<li>Logstashの<a href="https://github.com/logstash-plugins/logstash-filter-ruby/blob/master/lib/logstash/filters/ruby.rb">filter-ruby</a>はここで、evalしてcallしてるから、特にforkとかしてないかと。</li>
</ul>


<h2>「企業・業界情報プラットフォームSPEEDAにおけるElasticsearchの活用」 / 株式会社ユーザベース 北内 啓さん</h2>

<p>スライド：<a href="http://www.slideshare.net/tau3000/speedaelasticsearch-63510388">http://www.slideshare.net/tau3000/speedaelasticsearch-63510388</a></p>

<ul>
<li>アルゴリズム関連の開発担当</li>
<li>企業データをいろんな軸で検索したい

<ul>
<li>データ数が約70億レコードになりそう（通貨 x MySQL）</li>
</ul>
</li>
<li>300万企業データ＋Nestedとかで持ってる。

<ul>
<li>11万フィールド？？？</li>
<li>10台の物理サーバに24仮想マシン</li>
</ul>
</li>
<li>企業名の検索

<ul>
<li>recall重視</li>
</ul>
</li>
<li>NewsPicksの検索機能

<ul>
<li>「日本 化粧品 売上高」業界のデータとかも観れるのかな？有料会員向け機能</li>
<li>登録済みキーワードかどうかをRDB＋Esに検索して、ID化するっぽい

<ul>
<li>ID（Analyze必要ない）検索だから、termクエリだった、サンプルが。</li>
</ul>
</li>
</ul>
</li>
<li>ノードの役割分担

<ul>
<li>更新はMasterNode経由でDataNodeへ。</li>
<li>検索はClientNode経由でDataNodeへ。</li>
</ul>
</li>
<li>1.xかぁ。。。</li>
</ul>


<h2>「Elasticsearchベースの全文検索システムFess」 / 株式会社エヌツーエスエム 菅谷信介さん</h2>

<p>スライド：<a href="http://www.slideshare.net/shinsuke/elasticsearchfess">http://www.slideshare.net/shinsuke/elasticsearchfess</a></p>

<ul>
<li>10.xからSolrをやめてElasticsearchへ。</li>
<li>日本語検索

<ul>
<li>bigram＋形態素（1文字検索とかに対応するため）</li>
</ul>
</li>
<li>NeologDに対応したkuromojiを利用</li>
<li>DBFluteをESFluteとしてEs対応</li>
<li>KOPFを組み込んで使ってる</li>
<li>configをREST API経由で更新できるプラグインあり</li>
</ul>


<h2>LT</h2>

<h3>「ElasticsearchとGCPのネットワークでハマった話」 株式会社サイバーエージェント 平田大地 さん @daichild</h3>

<p>スライド：<a href="https://speakerdeck.com/daic_h/gcpfalsenetutowakudehamatutahua">https://speakerdeck.com/daic_h/gcpfalsenetutowakudehamatutahua</a></p>

<ul>
<li>hhkb2 2刀流！</li>
<li>networkのKeep-alive周りで困ったよというお話。</li>
<li>後で聞いたけど、<a href="https://www.elastic.co/guide/en/elasticsearch/plugins/current/cloud-gce.html">GCE Cloud Plugin</a>は使ってるそうです。</li>
</ul>


<p><strong>06/28 17:00追記</strong></p>

<ul>
<li>Pingを定期的に実行させることで回避も出来るようです。</li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.3/modules-transport.html#_tcp_transport">transport.ping_schedule</a>に時間を指定します。通常のNode（Transport以外）は&#8217;-1&#8217;が指定してあり、動作してません。</li>
</ul>


<h3>「スクリプトフィールドで作るランキングみたいな何か」iwag さん</h3>

<p>スライド：<a href="https://speakerdeck.com/iwag/elasticsearch-dezuo-rurankingu">https://speakerdeck.com/iwag/elasticsearch-dezuo-rurankingu</a></p>

<ul>
<li>1.xかぁ。。。</li>
<li>あとは、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html">function_score</a>とかも面白いですよ！</li>
</ul>


<h2>その他、感想などのブログ</h2>

<ul>
<li><a href="http://tsuyoshi-nakamura.hatenablog.com/entry/2016/06/28/115244">第16回elasticsearch勉強会に参加してきた</a></li>
<li><a href="https://masutaka.net/chalow/2016-06-28-1.html">第16回Elasticsearch勉強会に参加してきた </a></li>
</ul>


<h2>まとめ＋宣伝？</h2>

<p>1.xがまだまだいますねぇ、早く2.xにアップしましょう！（5.0ももう直ぐだし）。懇親会でも色々と話しましたが、<a href="https://discuss.elastic.co">https://discuss.elastic.co</a> というフォーラムあるので、ぜひ活用してください。</p>

<p>次回は8月末か9月頭かでしょうか。
<a href="http://www.ospn.jp/osc2016-kyoto/">7月末にOSC京都</a>に出没するので、京都で勉強会やりたいと思ってます！
会場とかスピーカーとか興味ある人連絡ください。</p>

<p>東京の勉強会のスピーカーも随時募集中ですので、連絡ください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第15回Elasticsearch勉強会を開催しました。 #elasticsearchjp]]></title>
    <link href="http://blog.johtani.info/blog/2016/03/17/15th-elasticsearch-jp/"/>
    <updated>2016-03-17T12:43:00+09:00</updated>
    <id>http://blog.johtani.info/blog/2016/03/17/15th-elasticsearch-jp</id>
    <content type="html"><![CDATA[<p><a href="https://elasticsearch.doorkeeper.jp/events/40444">第15回Elasticsearch勉強会</a>を開催しました。
スタッフの皆さん、スピーカーの皆さん、会場提供していただいた<a href="http://recruit-tech.co.jp">リクルートテクノロジーズさん</a>、ありがとうございました！
今回は、Elastic{on} 2016開催直後ということで、大半はElastic{on}に関する話でした。</p>

<!-- more -->


<h3>チェックイン数など</h3>

<ul>
<li>チェックインした人：114名</li>
<li>キャンセルしなかった人：62名</li>
</ul>


<p>でした。
今回は、少しおそめで1時間前にキャンセル待ちがいない状態にしました。
まぁ、いつもの感じでしょうか。数値も安定してきた感じですかね。</p>

<h2>&ldquo;Elasticsearchと機械学習を実際に連携させる&rdquo; / <a href="https://www.preferred-networks.jp">Preferred Networks America, Inc.</a> CTO 久保田展行(Kubota Nobuyuki) さん</h2>

<p>スライド：<a href="http://www.slideshare.net/nobu_k/elasticsearch-59627321">Elasticsearchと機械学習を実際に連携させる</a></p>

<p><a href="http://blog.johtani.info/blog/2016/01/08/14th-elasticcsearch-jp/">前回の続き</a>の話で、今回が本題でした。</p>

<p>勉強会直前に発表された<a href="http://sensorbee.io">SensorBee</a>をElasticsearchと一緒に使うとどんなことができるかというお話です。
まぁ、前処理重要ですよねというのが、いつものことですが、印象的でした。
いつものようにわかりやすい説明だったので、使ってブログを書いて欲しいなと。</p>

<p>発表の中で、説明に出てきたデモとか。
* <a href="https://research.preferred.jp/2016/01/ces2016/">CES2016でロボットカーのデモを展示してきました</a></p>

<h2>&ldquo;Elastic{ON} 2016レポート&rdquo; / Elastic Jun Ohtani</h2>

<p>スライド：<a href="https://speakerdeck.com/johtani/elastic-on-2016-repoto">elastic{on} 2016 レポート</a></p>

<p>写真多めで、キーノートをメインに話をしました。</p>

<p>簡単なまとめとしては</p>

<ul>
<li>プロダクトロゴができました。<a href="https://www.elastic.co/brand">ロゴ画像などはこちら</a></li>
<li>次のメインバージョンは全て5.0。（<a href="https://www.elastic.co/v5">5.0に関する通知が欲しい人はこちらで登録できます</a>）</li>
<li><a href="https://www.elastic.co/elasticon/conf/2016/sf">elastic{on} 2016のビデオなどはこちら</a></li>
<li>BBL始めます。連絡ください</li>
</ul>


<h2>&ldquo;Elastic{ON}の過ごし方&rdquo; / クラスメソッド株式会社 藤本 真司 さん</h2>

<p>スライド：<a href="http://dev.classmethod.jp/server-side/elasticsearch/elasticsearch-study-15-lt/">Elastic{ON}の過ごし方</a></p>

<p>印象に残ったのは</p>

<ul>
<li>「自他共に認めるブログの会社」</li>
<li>4/12にSAPさんに会場を借りてElastic＆クラスメソッドでイベントやります。</li>
</ul>


<p>やっぱりご飯が美味しいんですねぇ。
早速<a href="http://dev.classmethod.jp/server-side/elasticsearch/elasticsearch-study-15-lt/">ブログ</a>が書かれてました。</p>

<h2>&ldquo;Elastic{ON} 2016 見るべきセッション資料 7選&rdquo; / Acroquest Technology株式会社 谷本 心 さん</h2>

<p>スライド：<a href="https://speakerdeck.com/shintanimoto/elastic-on-2016-jian-rubekisetusiyonzi-liao-7xuan-number-elasticsearchjp">Elastic{ON} 2016 見るべきセッション資料 7選 #elasticsearchjp</a></p>

<p>印象に残ったのは</p>

<ul>
<li>東京でハンズオンやる会場提供者募集中！</li>
<li>Ingest Node（参考：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/ingest.html">Ingest Nodeのドキュメントは公開中。</a>）</li>
<li>Reindex API（参考：<a href="https://github.com/elastic/elasticsearch/pull/17060">Backport reindex to 2.x </a>）</li>
</ul>


<h2>その他、感想などのブログ</h2>

<ul>
<li><a href="http://dev.classmethod.jp/server-side/elasticsearch/elasticsearch-study-15-lt/">第15回elasticsearch勉強会にLTで登壇しました #elasticsearch #elasticsearchjp</a></li>
<li><a href="http://d.hatena.ne.jp/Kazuhira/20160316/1458142636">第15回elasticsearch勉強会に参加してきました #elasticsearch #elasticsearchjp</a></li>
</ul>


<h2>まとめ＋宣伝</h2>

<p>来年のElastic{ON}に参加したいと思っていただけたらよかったなと。</p>

<p>4/12にクラスメソッドさんとイベントを行います。また、ツイートすると思います。</p>

<p>次回はいつも通りだと5月中旬になるかと思います（大丈夫かな？<a href="http://www.ospn.jp/osc2016-nagoya/">OSC 2016 Nagoya</a>でしゃべったり、ブース出したりとかするけど）。
5末に名古屋に出没します。名古屋で勉強会できればやりたいと思ってます。会場とかスピーカーとか興味がある方は連絡ください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「自然言語処理の基本と技術」を読んでる]]></title>
    <link href="http://blog.johtani.info/blog/2016/03/14/review-basics-and-tech-of-nlp/"/>
    <updated>2016-03-14T22:34:12+09:00</updated>
    <id>http://blog.johtani.info/blog/2016/03/14/review-basics-and-tech-of-nlp</id>
    <content type="html"><![CDATA[<p>久々のポスト。。。</p>

<p>久々に、技術書読んでます。<a href="http://amzn.to/1QSplr1">「自然言語処理の基本と技術」</a>という本です。</p>

<p>監修の方のツイートを見て気になったので、買ってみました。
書籍のサイトの説明はこんな感じでした。</p>

<!-- more -->


<blockquote><p>本書は、この未来に不可欠となるに違いない自然言語処理の、技術的、ビジネス的基礎知識をくまなくコンパクトに図解した一冊です。
著者陣もそれぞれの分野の第一線で活躍するエキスパート揃い！</p></blockquote>

<p>確かに著者陣がすごいです。</p>

<p>まだ、「はじめに」と自分に関係のある「情報検索」の章を流し読みしただけなんですが、次のような特徴がある本です。</p>

<ul>
<li>平易な単語で説明してある（難しい専門用語が少ない）</li>
<li>数式が出てこない（多分。少なくとも読んだ部分では見てない）</li>
<li>説明には例と図解がある</li>
</ul>


<p>情報検索の章で言うと、全文検索でよく使われる転置インデックス（索引という単語が使われてる）がなぜ必要なのか、どういう感じで作られるのか、
転置インデックスに利用する索引の単語をどうやって作るのか（文字N-Gramや形態素解析）、単語の正規化（ステミングやストップワード）などの説明が
本当にわかりやすく書かれています。
スコアリングについても触れられています。</p>

<p>Elasticsearchも転置インデックスを用いた検索を行っており、
MappingでAnalyzerの指定をしている理由などの理解に役に立つと思います。</p>

<p>全文検索システムがどのように検索を処理しているかをざっくり理解するのにはもってこいじゃないかと。
1点残念だなと思ったのは、書籍に「索引」がありませんでした（本の索引を思い浮かべてくださいっていう説明あったんだけど）。。。
Kindle版を購入すれば「検索」できるのかな？</p>

<p>ということで、まだ、流し読みしただけなんですが、「すごく」オススメです。
購入はこちらから！</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=johtani-22&o=9&p=8&l=as1&asins=479812852X&nou=1&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第14回Elasticsearch勉強会を開催しました。 #elasticsearchjp]]></title>
    <link href="http://blog.johtani.info/blog/2016/01/08/14th-elasticcsearch-jp/"/>
    <updated>2016-01-08T11:34:56+09:00</updated>
    <id>http://blog.johtani.info/blog/2016/01/08/14th-elasticcsearch-jp</id>
    <content type="html"><![CDATA[<p>あけましておめでとうございます、johtaniです。</p>

<p><a href="https://elasticsearch.doorkeeper.jp/events/36330">第14回Elasticsearch勉強会</a>を開催しました。
スタッフの皆さん、スピーカーの皆さん、会場提供していただいた<a href="http://recruit-tech.co.jp">リクルートテクノロジーズさん</a>、ありがとうございました！
今年もよろしくお願いします！参加していただき盛り上げていただいた参加者の皆さんもありがとうございました。</p>

<!-- more -->


<h3>チェックイン数など</h3>

<ul>
<li>チェックインした人：122名</li>
<li>キャンセルしなかった人：58名</li>
</ul>


<p>でした。
今回も当日の昼の時点でキャンセル待ちがない状態にしていました。
いくつか電車が止まっていたという話を聞いていたので、開始を5分遅らせ、
受付は45分くらいまで開けておくという対応をしてもらいました。</p>

<h3>&ldquo;ココが辛いよelasticsearch&rdquo; / 株式会社リクルートテクノロジー @tatakaba さん</h3>

<p>スライド：<a href="http://www.slideshare.net/takahitotakabayashi/elasticsearch-56936397">ココが辛いよelasticsearch</a></p>

<p>実際にいくつかのサービスで運用されている内容とどういった機能を利用しているか、
どういったものを独自に作っているかという話をしていただきました。</p>

<ul>
<li>独自PluginでA/Bテストしてる</li>
<li>Snapshotの活用</li>
<li>Index作成は環境に合わせて行っている。</li>
<li>バージョンは混在</li>
<li>PusnaRSのバージョンアップの話。

<ul>
<li>2つのバージョンのクラスタを用意してリアルタイムに切り替え。</li>
</ul>
</li>
<li>Elasticsearchの活用

<ul>
<li>QueryのRewrite：</li>
<li>SolrのリクエストをEsで受け付けたり。</li>
</ul>
</li>
<li>辛い話。

<ul>
<li>バージョンアップが辛い</li>
<li>Riverなくなるのつらい</li>
<li>データずれるのつらい</li>
</ul>
</li>
</ul>


<p>補足：</p>

<h4>バージョンアップについて</h4>

<p>1.x系から2.x系にアップされるのであれば、こちらを必ず試してください。</p>

<p><a href="https://github.com/elastic/elasticsearch-migration">https://github.com/elastic/elasticsearch-migration</a></p>

<p>「.」が使えなくなるという話は、Solrとの大きな違いになるのかもなぁと。
ネスト構造のデータの表記を「.」で行うというのを厳密に行えるように、
「.」を使えなくしたというのがあるかと。</p>

<h4>Riverについて</h4>

<p>Riverがなくなった理由については、<a href="https://www.elastic.co/blog/deprecating-rivers">https://www.elastic.co/blog/deprecating-rivers</a> で記載があります。
便利なのですが、負荷が偏ったり、スケールしないとかいう問題点があるかなと。</p>

<p>良いサンプルとしては、JDBC Riverなどは、Javaのプログラムとして起動できるように変更されていたりします。</p>

<p><a href="https://github.com/jprante/elasticsearch-jdbc/wiki/jdbc-plugin-feeder-mode-as-an-alternative-to-the-deprecated-elasticsearch-river-api">https://github.com/jprante/elasticsearch-jdbc/wiki/jdbc-plugin-feeder-mode-as-an-alternative-to-the-deprecated-elasticsearch-river-api</a></p>

<p>（<strong>個人的</strong> には、SolrのDIHもRiverもあんまり好きではなかったです。データの変換処理と、ロード処理は別々にしたい人だったので。）</p>

<h4>データのズレなど</h4>

<p>耐障害性とか信頼性に関しては、どういった問題点があるのか、どういった対応をしているのかというのがまとめられたページが用意されています。</p>

<p><a href="https://www.elastic.co/guide/en/elasticsearch/resiliency/current/index.html">https://www.elastic.co/guide/en/elasticsearch/resiliency/current/index.html</a></p>

<h3>「機械学習を利用したちょっとリッチな検索」 / Preferred Networks America, Inc. CTO 久保田展行(Kubota Nobuyuki) さん</h3>

<p>スライド：<a href="http://www.slideshare.net/nobu_k/ss-56810268">機械学習を利用したちょっとリッチな検索</a></p>

<p>来日していただき、機械学習と検索の話をしてもらいました。
本編は次回の発表かもw</p>

<ul>
<li>機械学習を元に、検索対象の情報を元の情報から増やしてあげる。</li>
<li>増えた情報を検索できるようにする</li>
</ul>


<h4>今日のゴール：</h4>

<ul>
<li>機械学習とはどういうものか？</li>
<li>データの集め方とか、アノテーションとか</li>
<li>学習の方法（ツールやライブラリに依存）</li>
</ul>


<h4>Esでの活用方法</h4>

<ul>
<li>オフラインで学習させて、情報を付与した後に、Elasticsearchに入れる</li>
<li>Jubatus＋fluentdで</li>
<li>ChainerサポートのOSSのツールを公開予定</li>
</ul>


<p>「ここからが本当の地獄だ。。。」ってのが聴きたいw</p>

<h3>「Lucene Query 再考 - Domain Specific Query 実装 -」 / Supership株式会社 インフラ事業開発本部検索グループ 大川真吾 さん</h3>

<p>スライド：<a href="http://www.slideshare.net/ShingoOKAWA/elasticsearch-20150107-56772462">Lucene Query 再考 - Domain Specific Query 実装 -</a></p>

<p>Luceneのクエリに関する話と、クエリパーサーに関する話でした。
こういった濃い話も勉強会でしてもらえると、色々な参加者に楽しんでいただけるかなぁと。
次回も続きを話してもらう予定です。</p>

<p>補足：</p>

<p>参考までにですが、Elasticsearchに入門したての人向けに、
Analyzerとか転置インデックスとかの話をした時のスライドになります。
<a href="https://speakerdeck.com/johtani/lucenetori-ben-yu-falsejian-suo">https://speakerdeck.com/johtani/lucenetori-ben-yu-falsejian-suo</a></p>

<h3>LT:</h3>

<h4>Fluentd meets Beats / @repeatedly さん</h4>

<p>スライド：<a href="http://www.slideshare.net/repeatedly/fluentpluginbeats-at-elasticsearch-meetup-14">http://www.slideshare.net/repeatedly/fluentpluginbeats-at-elasticsearch-meetup-14</a></p>

<p>参考Qiita：<a href="http://qiita.com/repeatedly/items/77af41788f0b3ccdefd2">http://qiita.com/repeatedly/items/77af41788f0b3ccdefd2</a></p>

<p>Beatsの説明をTDの人からしてもらうなどw
FluentdにBeatsからのデータを流し込めるようにしたプラグインが出たという話でした。</p>

<p>filebeatの性能の件は社内で聞いてみようかと。</p>

<h4>Elasticsearchインデクシングのパフォーマンスを測ってみた / 日本IBM　黒澤亮二さん</h4>

<p>スライド：<a href="http://www.slideshare.net/kuron99/elasticsearch-56784623">Elasticsearchインデクシングのパフォーマンスを測ってみた</a></p>

<p>参考Qiita：<a href="http://qiita.com/rjkuro/items/e79eec7ffb0511b7c678">http://qiita.com/rjkuro/items/e79eec7ffb0511b7c678</a></p>

<p>細かな性能測定の結果を駆け足で話してもらいました。
皆さんもこの指標をもとに、手元の環境を計測してみたりしてみてもらえればと。</p>

<p>あとは、2.x系になってるので、同じ方法で計測してもらってまた
発表してもらえると嬉しいなー（棒）</p>

<h2>その他、感想などのブログ</h2>

<ul>
<li><a href="http://acro-engineer.hatenablog.com/entry/2016/01/08/123857">Elasticsearch勉強会　第14回フィードバック</a></li>
</ul>


<h2>まとめ＋宣伝</h2>

<p>久々に（初めてかな？）、ゲストがいないのに自分が喋りませんでした。
次回は3月中旬を予定してます。
次回は、Elastic{ON}16の報告をする予定です。いろいろと発表あるだろうし。</p>

<p>あと、今月末の1/29に<a href="http://www.ospn.jp/osc2016.enterprise-osaka/">オープンソースカンファレンス 2016.enterprise@Osaka</a>にブース出展します。
セミナー枠でも弊社OSSプロダクトの概要を話しする予定です。
関西の方は、ぜひ参加していただければと。ブースでお待ちしております。</p>

<p>また、スピーカーや場所が用意できたら、出張勉強会もまたやりたいなと思っています。
興味ある方は、連絡ください！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[今年の振り返りと来年の抱負（2015）]]></title>
    <link href="http://blog.johtani.info/blog/2015/12/31/looking-back-2015/"/>
    <updated>2015-12-31T21:33:02+09:00</updated>
    <id>http://blog.johtani.info/blog/2015/12/31/looking-back-2015</id>
    <content type="html"><![CDATA[<p>今年は紅白見ながら書いてます。
早い一年だったなぁ。</p>

<!-- more -->


<h2>振り返り(2014年に書いた抱負から)</h2>

<p>まずは去年の抱負を元に振り返りをば。</p>

<ul>
<li>英語の継続</li>
<li>海外のイベントへの参加</li>
<li>多岐にわたるイベントでのスピーカー</li>
<li>日本の人員の倍増！？</li>
<li>Elasticsearchに関する日本語の情報発信</li>
<li>Elasticsearch座談会みたいなものの開催</li>
</ul>


<p>英語はまぁ、継続してます。亀の歩みですが。。。</p>

<p>海外のイベントへの参加は、<a href="http://blog.johtani.info/blog/2015/03/11/attend-elasticon/">自社のイベント</a>だけでした。<a href="https://www.elastic.co/elasticon/conf/2016/sf">来年のElastic{ON}</a>ももちろん参加です。来年こそBerlin Buzzwords行きたいな。。。</p>

<p>多岐にわたるイベントとまではいってないですかね。。。来年はOSC(<a href="http://www.ospn.jp/osc2016.enterprise-osaka/">大阪</a>や<a href="http://www.ospn.jp/osc2016-spring/">東京</a>)に出没予定です。参加される方は、声をかけていただければと。</p>

<p>人員は倍増しました！営業の方が参画されたのがかなり助かってます。
今現在で4名です！来年も倍増できるかなぁ？</p>

<p>日本語の情報発信はリリースブログの翻訳が多めでした。来年は独自コンテンツも増やさないとなぁ。
あとやっぱ書籍かなぁ。。。座談会は来年の課題に。。。</p>

<h2>振り返り(今年あったできごと)</h2>

<p>その他の今年の出来事。</p>

<ul>
<li>初渡米</li>
<li>初バルセロナ</li>
<li>東京以外で勉強会</li>
<li>初自社イベント（日本で）</li>
<li>初トレーナー</li>
<li>不惑</li>
</ul>


<p>今年も初モノ多いですね。今年も楽しい一年でした。
自社イベントでアメリカやバルセロナなどに行きました。40年近く、海外に行ったことないせいか、海外に行って経験することが面白いです。</p>

<p>東京以外での勉強会もやりました。名古屋、大阪、京都、北海道と。
来年もOSCで訪れた場所で勉強会を開催したいなぁと。</p>

<p>自社のイベント（Elastic{ON} Tour Tokyo）も東京でやりました。
どうなることかと思っていましたが、朝から大勢の方に来ていただけてホッとしました。
自分のトークがどうだったのかという反応も気になりますが。。。
せっかくShayたちが来ていたので、もっとブースに話しに来てもらえるともっと嬉しかったかもなぁと。</p>

<p>Tour Tokyoを挟んで自社の公式トレーニングのトレーナーもやりました。
日本で3回目にして、初の日本語でのトレーニングでした。前の2回は逐次通訳だったんですが。
トレーニングって大変だなぁと思ったのと、やはり日本語でトレーニングを受けられるとだいぶ違うだろうなという実感がありました。
来年もできればいいなと。トレーニング自体があったことを知らない人もいたのかなぁ？</p>

<h2>来年の抱負</h2>

<ul>
<li>英語の継続</li>
<li>もっとElasticsearchの開発に参加</li>
<li>人員の倍増？</li>
<li>日本語情報発信</li>
<li>Splatoon S+?</li>
</ul>


<p>英語あいかわらず出来てないので、頑張らないと。
もっと喋ったりしないとなんだろうなぁ。</p>

<p>来年は開発をもっとやりたいなと。
来年1月にはセールスのエンジニアが加入するので、開発にもっと時間を割きたいなと。</p>

<p>人員は倍増できるように頑張りたいです。少なくとも、2人が1月に入ることは決まってるんで、後二人！</p>

<p>ブログももっと書かないとですね。新機能とかこんな使い方できるよとか。
どんな記事が欲しいかとかコメントもらえると楽なので、突っ込みくださいw</p>

<p>最後は、完全に私用ですね。Splatoonにはまってますw
SとA+を行ったり来たりで。。。</p>

<p>ということで、今年はあと、数時間ですが、色々とお世話になりました。 この場を借りてお礼申し上げます。</p>

<p>来年も、いろんな方に絡んでいくとは思いますが、よろしくお願いいたします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015年のElasticsearch]]></title>
    <link href="http://blog.johtani.info/blog/2015/12/25/about-elasticsearch-in-2015/"/>
    <updated>2015-12-25T13:29:54+09:00</updated>
    <id>http://blog.johtani.info/blog/2015/12/25/about-elasticsearch-in-2015</id>
    <content type="html"><![CDATA[<p>今年最後のAdvent Calendarとなります。</p>

<p>この記事は<a href="http://qiita.com/advent-calendar/2015/elasticsearch">Elasticsearch Advent Calendar 2015</a>の最終日のエントリです。</p>

<p>簡単に今年の変遷を、Elasticsearchをベースに振り返ってみようかと思います。</p>

<!-- more -->


<h2>Kibana 4リリース（2月）</h2>

<ul>
<li><a href="http://blog.johtani.info/blog/2015/02/20/kibana-4-literally-ja/">Kibana 4（日本語訳）</a></li>
</ul>


<p>いきなり、Elasticsearchではない話題ですが。
AggregationベースのKibanaがリリースされました。
画面が黒くないというので、話題になりましたw
12月末時点では、4.3.1になっています。
Sub Aggregationによる強力なグラフ表示や異なるインデックスに対するグラフを
一つのダッシュボードに表示できるといったことができるようになりました。</p>

<h2>セキュリティ向けプラグインShieldのリリース（2月）</h2>

<ul>
<li><a href="http://blog.johtani.info/blog/2015/02/27/you-know-for-security-shield-goes-ga-ja/">セキュリティ向けプラグインShieldのリリース（日本語訳）</a></li>
</ul>


<p>商用向けのプラグインの第2弾です。
セキュリティ強化のためのプラグインで、いろいろなところで引き合いがあったりします。</p>

<h2>初のユーザカンファレンス、Elastic{ON}開催（3月）</h2>

<ul>
<li><a href="http://blog.johtani.info/blog/2015/03/11/attend-elasticon/">#elasticon に参加中</a></li>
</ul>


<p>サンフランシスコで、弊社初のカンファレンスが開催されました。（来年（2016年）もサンフランシスコで開催されます。）
また、ここで、以下の2点の発表がありました。</p>

<ul>
<li>ロゴ及びドメイン名などの変更</li>
<li>Foundのジョイン</li>
</ul>


<p>約1300名が参加する大イベントでした。
初の渡米で楽しんできましたが、ドメインの切り替えなどは大変でした。。。
まだ、ロゴを変えて1年経ってないということが実感できてないです。</p>

<p><a href="https://www.elastic.co/found">Found</a>のジョインはまだまだ、日本で知名度が出てないかもなぁと。
もっと広めないと。
利点としては以下の通りです。</p>

<ul>
<li>新バージョンがすぐに利用可能に。また、バージョンアップも画面で指定可能</li>
<li>公式プラグイン＋その他いくつかのプラグインが利用可能</li>
</ul>


<h2>Elasticsearch 1.5 リリース（4月）</h2>

<ul>
<li><a href="http://blog.johtani.info/blog/2015/04/01/elasticsearch-1-5-0-released-ja/">Elasticsearch 1.5.0リリース（日本語訳）</a></li>
</ul>


<p>主に、resiliencyに関する改良になります。
毎リリースで信頼性向上につながる改良が含まれる形になっています。
このリリースの近くで初の東京の外での勉強会を<a href="http://blog.johtani.info/blog/2015/04/04/elasticsearch-study-session-at-nagoya/">名古屋で開催</a>したりもしました。</p>

<h2>discuss.elastic.coをオープン（5月）</h2>

<ul>
<li><a href="https://discuss.elastic.co">https://discuss.elastic.co</a></li>
</ul>


<p>これまでは、Google Groupsを使っていましたが、Elasticが提供しているプロダクトが
別々のグループであったために、プロダクトにまたがった質問がやりにくかったり、検索がしにくかったりという問題点がありました。
今では、過去のGoogle Groupsのデータも移行されているので、是非参加して、質問・回答してみてください。
<a href="https://discuss.elastic.co/c/in-your-native-tongue/18-category">日本語でやりとりできるカテゴリ</a>もあるので、どんどん、やりとりしていただければ。</p>

<h2>Elasticsearch 1.6 リリース（6月）</h2>

<ul>
<li><a href="http://blog.johtani.info/blog/2015/06/10/elasticsearch-1-6-0-released-ja/">Elasticsearch 1.6.0リリース（日本語訳）</a></li>
</ul>


<p>2.0に向けたUpgrade APIが含まれるなど、次期リリースに向けた準備が整いつつあるリリースでした。
他にもsynced flushの取り込みやレスポンスのJSONのフィルタリングなど細かな改善も取り込まれています。</p>

<h2>Found PremiumとStandardリリース（7月）</h2>

<ul>
<li><a href="http://blog.johtani.info/blog/2015/07/07/we-just-made-found-more-awesome-ja/">さらに進化したFound（日本語訳）</a></li>
</ul>


<p>Foundに弊社のサポートチームがサポートできるプレミアムが追加されました。
これにより、商用プラグインとして提供しているShieldが（現在はWatcherも）利用できるなど、
より便利になりました。また、Kibana 4も無料で提供されていたりします。</p>

<p><a href="https://www.elastic.co/found/pricing">小さなサイズのものですと、無料で試していただける</a>ものもあるので、試してみてもらえればと。</p>

<h2>Elasticsearch 1.7 リリース（7月）</h2>

<ul>
<li><a href="http://blog.johtani.info/blog/2015/07/22/elasticsearch-1-7-0-and-1-6-1-released-ja/">Elasticsearch 1.7.0 および 1.6.1リリース（日本語訳）</a></li>
</ul>


<p>1.x系、最後のリリースでした。
小さい改善ですが、セキュリティフィックス、クラスタの安定化に寄与する機能改善が含まれています。</p>

<p>この<a href="http://blog.johtani.info/blog/2015/07/16/kansai-1st-elasticsearch-jp/">リリース直前に大阪、京都で勉強会も開催してみました。</a></p>

<h2>Elasticsearch 2.0.0-beta1 リリース（8月）</h2>

<ul>
<li><a href="http://blog.johtani.info/blog/2015/08/27/elasticsearch-2-0-0-beta1-released-ja/">Elasticsearch 2.0.0-beta1リリース（日本語訳）</a></li>
</ul>


<p>待ちに待った、Lucene 5ベースのElasticsearchの登場でした。
doc_valuesがデフォルトになったり、エラーが構造化されて見やすくなったり、
Pipeline Aggregationが導入されたりしています。
また、問題点の洗い出しも兼ねて、ベータリリースとして、本リリースまでに多くのIssueをあげていただきました。</p>

<h2>Elasticsearch 2.0.0 リリース（10月）</h2>

<p>2.0の本リリースです。リリースまでに、beta1、2及び、rc1がリリースされました。</p>

<p>追加された機能や目玉の改善については「<a href="https://speakerdeck.com/johtani/elasticsearch-2-dot-0falseshao-jie">Elasticsearch 2.0の紹介</a>」のスライドを参考にしていただければと。</p>

<p>また、Elasticsearch 2.0のリリースに合わせて、商用プラグインやLogstash、Kibanaの新しいバージョンがリリースされました。
Kibanaなどは、プラットフォームとしての機能を備え、Senseや<a href="http://blog.johtani.info/blog/2015/12/01/introduction-timelion/">Timelion</a>と言ったプラグインアプリもリリースされています。</p>

<ul>
<li><a href="http://blog.johtani.info/blog/2015/10/29/logstash-2-0-0-released-ja/">Logstash 2.0.0リリース（日本語訳）
</a></li>
<li><a href="http://blog.johtani.info/blog/2015/10/29/kibana-4-2-0-ja/">Kibana 4.2.0リリース（日本語訳）
</a></li>
<li><a href="http://blog.johtani.info/blog/2015/10/30/sense-2-0-0-beta1-ja/">Senseの歴史 - Sense 2.0.0-beta1の紹介(日本語訳)</a></li>
<li><a href="http://blog.johtani.info/blog/2015/10/30/shield-watcher-and-marvel-2-0-ga-released-ja/">Shield、Watcher、Marvel 2.0.0 GAリリース（日本語訳）</a></li>
</ul>


<h2>Elasticsearch 2.1.0 リリース（11月）</h2>

<ul>
<li><a href="https://www.elastic.co/blog/elasticsearch-2-1-0-and-2-0-1-released">Elasticsearch 2.1.0 and 2.0.1 released</a></li>
</ul>


<h2>Beats 1.0.0のリリース（11月）</h2>

<ul>
<li><a href="https://www.elastic.co/blog/beats-1-0-0">The Beats 1.0.0</a></li>
</ul>


<p>Go言語で書かれた軽量データシッパーになります。
パケットをキャプチャしてElasticsearchに送る<a href="https://www.elastic.co/downloads/beats/packetbeat">Packetbeat</a>、
topコマンドで取れるデータなどを<a href="https://www.elastic.co/downloads/beats/topbeat">Topbeat</a>、
ログファイルなどを取り込み配送する<a href="https://www.elastic.co/downloads/beats/filebeat">Filebeat</a>がリリースされました。</p>

<p><a href="https://www.elastic.co/guide/en/beats/libbeat/current/index.html">libbeat</a>と呼ばれる、
ベースとなるライブラリを元にしたプロダクトで、Logstashのエージェントのような使い方もできるようになっています。</p>

<p>Go言語に興味のある方などは、調べてみてはいかがでしょう？</p>

<h2>来年は？</h2>

<p>日本では、<a href="https://elasticsearch.doorkeeper.jp/events/36330">1/7に第14回Elasticsearch勉強会</a>を開催します。
すでに、38名のキャンセル待ちとなっていますが、おそらく、年明けにキャンセルがそこそこ出ると思うので、まだ間に合うんじゃないかなぁと。</p>

<p>会社としては、<a href="https://www.elastic.co/elasticon/conf/2016/sf">Elastic{ON}16</a>が控えています。参加される方は、ぜひ現地で声をかけてください！！</p>

<p>その他にもイベント、オープンソースカンファレンス（まずは、<a href="https://www.ospn.jp/osc2016.enterprise-osaka/">大阪</a>、<a href="http://www.ospn.jp/osc2016-spring/">東京</a>）などに出没する予定ですので、こちらも参加していただければと。</p>

<p>では、また来年のAdvent Calendarでお会いしましょう！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Timelionの紹介 - Elasticsearch Advent Calendar 2015 1日目]]></title>
    <link href="http://blog.johtani.info/blog/2015/12/01/introduction-timelion/"/>
    <updated>2015-12-01T11:28:11+09:00</updated>
    <id>http://blog.johtani.info/blog/2015/12/01/introduction-timelion</id>
    <content type="html"><![CDATA[<p>こんにちは、<a href="https://twitter.com/johtani">@johtani</a>です。</p>

<p>早いもので、師走です。今年もあと少しとなりました（今月が一番忙しかったりしますが。。。）。
ということで、Advent Calendarの季節が始まりました。</p>

<p>この記事は<a href="http://qiita.com/advent-calendar/2015/elasticsearch">Elasticsearch Advent Calendar 2015</a>の1日目のエントリです。</p>

<p>今日は、最近公開された<a href="https://github.com/elastic/timelion">Timelion</a>の紹介をしたいと思います。</p>

<!-- more -->


<h2>Timelion?</h2>

<p>11/12に公開されたばかりのアプリになります。（<a href="https://www.elastic.co/blog/timelion-timeline">公式のブログはこちら</a>。ブログでは動画による説明もあり）</p>

<p>Kibanaにプラグインとしてインストールすることで使用することができるようになるアプリです。
Timelionと書いて「Timeline」と読むようです。
Kibanaとは異なるグラフ描画のプラグインになっています。</p>

<h3>Kibana 4.2からプラットフォーム化</h3>

<p>Kibana 4.2から、Kibanaにプラグイン機構が導入されました。
Kibanaとしての機能以外にも、プラグインとして、アプリを追加できるようになっています。
Timelionもその一つです。</p>

<h3>インストール</h3>

<p>Timelionを試してみるには、ElasticsearchとKibanaが必要になります。（こちらは、すでにインストールされているとして。。。）</p>

<p>Kibanaのコマンドを利用して、プラグインをインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bin/kibana plugin -i kibana/timelion</span></code></pre></td></tr></table></div></figure>


<p>インストールしたら、Kibanaにアクセスして、Timelionを呼び出します。</p>

<h3>Timelionへアクセス</h3>

<p>ブラウザで<code>localhost:5601</code>にアクセスすると、Kibanaが出てきます。
Kibanaのプラグイン選択のアイコンをクリックし、Timelionのアイコンをクリックします。</p>

<p><img src="http://blog.johtani.info/images/entries/20151201/switch_to_timelion.jpg" title="" ></p>

<p>すると、初期画面はこんな感じです。
直近15分のElasticsearchに入っているデータがが全部出てきます。
チュートリアルも出てきてます（初回起動時に出たはず）</p>

<p><img src="http://blog.johtani.info/images/entries/20151201/tutrial_timelion.jpg" title="" ></p>

<p>Kibanaでの検索窓の部分に関数を指定していくことで、グラフが描画できるツールになっています。</p>

<h3>サンプル：気温データを可視化</h3>

<p>百聞は一見に如かずということで、
<a href="http://www.data.jma.go.jp/gmd/risk/obsdl/index.php">気象庁のデータ</a>を使って、
ちょっとしたグラフを書いてみました。
1年間の気温の推移と日照時間になります。</p>

<p><img src="http://blog.johtani.info/images/entries/20151201/tenperature_naha_and_sapporo.jpg" title="" ></p>

<p>上のグラフが那覇、下グラフが札幌の気温のグラフになります。</p>

<ul>
<li>赤いライン：最高気温</li>
<li>青いライン：最低気温</li>
<li>黄色い棒グラフ：日照時間</li>
</ul>


<p>最低気温と日照時間はグラフは次のような式で描画しています。</p>

<h5>青いラインの最低気温</h5>

<p>気温のグラフになります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.es(index='tenki2', q='city:naha', metric='avg:temperature_min').label('min'),</span></code></pre></td></tr></table></div></figure>


<p><code>.es()</code>がelasticsearchに対するデータ取得の関数です。
引数は次のような意味になります。
* index：対象とするインデックス名
* q：検索クエリ。ここでは、cityというフィールドにnahaで検索。
* metric：描画対象となっているデータの入ったフィールド。temperature_minというフィールドの1日毎の平均値を取得</p>

<p>最低気温と最高気温は別々のフィールドに格納してあります。最高気温の場合は（temperature_max）を指定します。</p>

<p><code>.label(min)</code>で、グラフの凡例の指定です。
残念ながら、日本語の指定は現時点（2015年12月01日時点）ではうまくいかなかったです。（<a href="https://github.com/elastic/timelion/issues/17%EF%BC%89">https://github.com/elastic/timelion/issues/17%EF%BC%89</a></p>

<p>デフォルトでは、線グラフが選択されているので、グラフの種類は特に指定はしていません。
明確に指定する場合は<code>lines()</code>を指定します。</p>

<h5>黄色い棒グラフの日照時間</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.es(index='tenki2', q='city:naha', metric='avg:sunlight').label(sunlight).bars()</span></code></pre></td></tr></table></div></figure>


<p><code>.es()</code>に関しては最低気温のグラフとほぼ一緒です。異なるのは、metricの取得対象のフィールド名です。</p>

<p><code>.label()</code>で凡例を指定しています。先程と同様です。</p>

<p>最後に、棒グラフにしたいため、<code>.bars()</code>を指定しています。</p>

<p>その他に用意されている関数について知りたい場合は、Timelionのヘルプを表示すると説明が出てきます。
<code>cusum()</code>のような値を累積して表示するような関数も用意されています。</p>

<p><img src="http://blog.johtani.info/images/entries/20151201/about_help.jpg" title="" ></p>

<h3>まとめ</h3>

<p>Kibanaとは少し違うアプローチで時系列データを描画するためのツールとなっています。
線グラフと棒グラフを一つのグラフに描画したりもできますし、
累積のグラフなんかも描画できるようになっています。</p>

<p>実験的なプロジェクトである、Timelionの紹介でした。
ここでのノウハウがkibanaにフィードバックされると色々と面白いことになるんじゃないかなと。</p>

<h3>ということで、</h3>

<p>明日は、<a href="http://qiita.com/zoetro">zoetro</a>さんの「Kibanaのプラグインの話」になります。
お楽しみに！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第13回Elasticsearch勉強会を開催しました。#elasticsearchjp]]></title>
    <link href="http://blog.johtani.info/blog/2015/11/10/13th-elasticsearch-jp/"/>
    <updated>2015-11-10T17:22:58+09:00</updated>
    <id>http://blog.johtani.info/blog/2015/11/10/13th-elasticsearch-jp</id>
    <content type="html"><![CDATA[<p><a href="https://elasticsearch.doorkeeper.jp/events/33631">第13回Elasticsearch勉強会</a>を開催しました。
スタッフの皆さん、スピーカーの皆さん、会場提供していただいた<a href="http://recruit-tech.co.jp">リクルートテクノロジーズさん</a>、ありがとうございました！
来年もよろしくお願いします！参加していただき盛り上げていただいた参加者の皆さんもありがとうございました。</p>

<p>7月同様、<a href="http://samuraism.com">サムライズム</a>の<a href="https://twitter.com/yusuke">@yusuke</a>さんに
テキスト翻訳していただき、大変助かりました。</p>

<!-- more -->


<h3>チェックイン数など</h3>

<ul>
<li>チェックインした人：100名</li>
<li>キャンセルしなかった人：36名</li>
</ul>


<p>でした。
今回は当日の時点でキャンセル待ちがない状態にしていました。
雨もあって、これなかった人もいるのでしょうか。</p>

<h2>&ldquo;Beyond the basics with Elasticsearch&rdquo; / Honza Král / Elastic</h2>

<p>スライド：<a href="https://speakerdeck.com/elasticsearch/beyond-the-basics-with-elasticsearch  ">https://speakerdeck.com/elasticsearch/beyond-the-basics-with-elasticsearch  </a>
参考ビデオ（別のカンファレンスで話した時のビデオ）：<a href="https://www.youtube.com/watch?v=yIixWzjTNog">https://www.youtube.com/watch?v=yIixWzjTNog</a></p>

<p>Pycon HKでアジアに来ていたHonzaに、ついでに日本で話をしてもらうという企画で、
前回から1カ月足らずでの開催となりました。
Elasticsearchの基本的な検索機能とは別の機能に関して少し話をしてもらった感じです。
<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-percolate.html">Percolator</a>と<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html">Aggregation</a>の話でした。</p>

<p>詳しくはビデオやスライドを見てもらうのがいいかなと。</p>

<h2>&ldquo;How did we use Found.no for our services?&rdquo; / 株式会社アイリッジ　Takuya Noguchi さん @tn961ir</h2>

<p>スライド：未定</p>

<ul>
<li>Foundユーザー。1.7までの話。</li>
<li>社内で独自にクラスタを構築していたが、managed serviceを利用したいと思っていた。</li>
<li>Found用のACLがShieldに</li>
<li>マルチバイトのインデックス名とかも使いたいが、Nginxとの連携でちょっと。。。</li>
<li>セキュリティ関連の話も。Securityに関する報告はこういうものも用意されてるので、こちらに相談してもらうのがいいかも。<a href="https://www.elastic.co/community/security">https://www.elastic.co/community/security</a></li>
<li>要望がいくつか。</li>
</ul>


<h2>&ldquo;ログ収集の仕組みを再考しよう！　あとマウンテンビューに行ってきました。&rdquo; / Acroquest Technology株式会社 谷本 心さん @cero_t</h2>

<p>スライド：<a href="http://www.slideshare.net/shintanimoto/lets-reconsider-about-collecting-logs-plus-visiting-elasticmoutain-view">http://www.slideshare.net/shintanimoto/lets-reconsider-about-collecting-logs-plus-visiting-elasticmoutain-view</a></p>

<p>ログの小話から始まり、ログに関する考え方とかを披露してもらいました。
さらに踏み込んだログの活用の方法の話になるかと思いきや、
思いっきり話が飛んで、マウンテンビューのElasticオフィスに遊びに行った写真が出てきましたw</p>

<p>写真の後は、弊社のTanya（<a href="https://www.elastic.co/elasticon/tour/2015/tokyo">来月のElastic{ON} Tour Tokyo</a>で来日予定）から
聞いた弊社製品に関する話をしていただきました。
きっと、Beatsに関して次は話してくれるんだろうなぁ（棒）。
流れ的には、<a href="https://www.elastic.co/elasticon/conf/2016/sf">来年の2月にサンフランシスコで開催されるElastic{ON}16</a>につながりそうだったので、ここで宣伝しときますね。
今年3月に開催されたイベントには残念ながら日本の方はいなかったので、次回は日本の方がいると嬉しいなぁと。</p>

<h2>LT &ldquo;「Elasticsearch を使った単語共起頻度の計算」&rdquo; / 株式会社はてな　id:takuya-a さん</h2>

<p>スライド：未定</p>

<p>一風変わったElasticsearchの使い方的な話でした。
検索用にデータを登録してあるElasticsearchから単語の頻度情報を抜き出して、
別のインデックスに登録するという感じでしょうか。
こういうのが、実は、Elasticsearchに機能としてあると便利だったりするのかもなぁと思ってみたり。</p>

<p>LTよりはちょっと長かったですかねw</p>

<h2>その他、感想などのブログ</h2>

<ul>
<li><a href="http://arika.hateblo.jp/entry/2015/11/09/204652">elasticsearch勉強会</a></li>
</ul>


<h2>まとめ＋宣伝</h2>

<p>今回も@yusukeさんのテキスト翻訳に助けていただきました。ほんとありがとうございます。
今年の勉強会はこれがラストになります。
来月は、トレーニングと<a href="https://www.elastic.co/elasticon/tour/2015/tokyo">Elastic{ON} Tour Tokyo</a>があるので忙しくなりそうですが、
参加予定の方は楽しみにしていてください！</p>

<ul>
<li>Operations : <a href="http://training.elastic.co/class/Operations/Japan/Dec">http://training.elastic.co/class/Operations/Japan/Dec</a></li>
<li>Developer : <a href="http://training.elastic.co/class/Developer/Japan/Dec">http://training.elastic.co/class/Developer/Japan/Dec</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Senseの歴史 - Sense 2.0.0-beta1の紹介(日本語訳)]]></title>
    <link href="http://blog.johtani.info/blog/2015/10/30/sense-2-0-0-beta1-ja/"/>
    <updated>2015-10-30T17:55:06+09:00</updated>
    <id>http://blog.johtani.info/blog/2015/10/30/sense-2-0-0-beta1-ja</id>
    <content type="html"><![CDATA[<p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>

<p>原文：<a href="https://www.elastic.co/blog/sense-2-0-0-beta1">The Story of Sense - Announcing Sense 2.0.0-beta1</a></p>

<!-- more -->


<h2>誕生</h2>

<p>よくある良いプロジェクト同様、Senseもビールを飲みながら考えつきました。
<a href="https://en.wikipedia.org/wiki/Amstel">Amstel</a>での手漕ぎボートのセッションの後で。
友人の<a href="https://twitter.com/jkaizer">Jasper</a>と私はJasperの<a href="http://q42.nl/">会社</a>で毎年行われる
<a href="http://w00t.camp/">ハッカソン</a>について話をしていました。
このハッカソンはどのようなアイデアでどんなチームで行うかを聞き取りされる、厳密なハッカソンです。
その時、私とJasperはChromeブラウザに別のヒストリーを表示するという作業をやると<a href="https://twitter.com/anneveling">Anne Veling</a>に話をしていました。</p>

<p>Jasperと私はElasticsearchのユーザでしたが、リッチなREST APIにリクエストを送信するための
便利なツールがないと知っていました。
恥ずべきことに、cURLコマンドを利用するターミナルがその時の一番良いツールでした。
皆さん、ターミナルでボディつきのリクエストをサブミットするのがどのくらい不便かというのをわかるために、
5秒ほどターミナルで実行してみてください。
タイプミスのような単純なことでさえ、すべてのコマンドを再タイプしなければならなかったり、
複数行サポートのターミナルと戦ったりです。
ウェブベースのJSONエディタを見つけ出して、それをベースにすることが必要でした。</p>

<h2>終わりなきウィークエンド</h2>

<p>リサーチをして、Anneに電話しました。
私は彼に、History Pageのプロジェクトにもコミットするが、
Elasticsearchユーザなので、便利なコンソールを開発する時間も欲しいという話をしました。
私たちは、<a href="https://ace.c9.io/">Ace</a>オンラインエディタを利用して、
自動でAPIを認識するナレッジベースを構築し、
コンテキストに沿ったサジェストを大なうようにしました。
Anneはすぐに、それが素晴らしいと同意してくれました。
しかし、彼は、ハッカソンの基本的なルール（週末にそれが終わる必要がある）に違反しているので、
そのアイデアを却下するしかありませんでした。
確かに、私たちが提案していたものは行えませんでした。
最後に、私たちは、ChromeのHistory Pageの素晴らしい置き換えについて実装しました。</p>

<p>それでも、私はチャレンジし、それが終わるであろうことを終わるであろうことを証明しなければなりませんでした。
次の週末（といくつかの終業後 :)）に、私はそれを作りました。
Senseの誕生です。
それは、まだバグだらけでしたが、動きました。
これを見せるとみんな興奮しました。</p>

<h2>初期</h2>

<p>Knowledge Baseの拡張とバグのフィックスで数日を過ごしました。
Senseは広まり始め、ずっと古いバグのあるバージョンを利用しないといけないのかと私は恐れました。
SenseをChromeのExtentionとしてリリースすることを決め、リリースすると自動的に更新されるようにしました。
History Panelのような機能を一つづつ追加するようにしました。</p>

<p>Elasticにジョインしてから、会社の人たちがSenseを使用しているということを聞き、とても幸せでした。
特に、<a href="https://twitter.com/clintongormley">Clint</a>と話をしたときのことを覚えています。
彼は、&#8221;You know what Sense should do? It should use this format and allow you to have multiple requests in the editor&#8221;
「Senseになにをすべきかわかる？フォーマットを使うべきだし、エディタで複数のリクエストを持つようにするべきだ」
と言いました。
もちろん、その他のチャレンジも行いました。これは、簡単なものではなく、Aceの詳細を知る必要がありました。
それは新しいAceモード（Aceによって利用されているハイライティングロジック）です。
これは、Senseのサジェストエンジンに密に統合されました。</p>

<p>次のものが古いSenseのスクリーンショットです。</p>

<p>画像あり。Figure 1. Sense 0.7
<a href="https://www.elastic.co/blog/sense-2-0-0-beta1">※画像に関しては原文をご覧ください。</a></p>

<p>APIのURLを入力すると、JSONのボディが入力されます。
うまく切り離すことができ、AceのスタンダードJSONモードを使っていました。
しかし、ここで、次のようなフォーマットをどうやってサポートするか考える必要がありました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET _cluster/health
</span><span class='line'>POST index/_settings
</span><span class='line'>{
</span><span class='line'>  "index": { "number_of_replicas": 3 }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>これは、Aceが3つの異なるものをどうやってパースするかを知る必要があるということです。
HTTPメソッドとURLとJSONボディです。
また、困ったことに、前に説明した前に説明した通り、明らかに別々にはならないものでした。
JSONボディが完全であることを知る唯一の方法はかっこを数えることです。
それは、いくつかの作業とAceのカスタマイズが必要でしたが、それらを切り離すことができました。
そして、Senseのシンタックスが生まれたのです（Thanks Clint!）</p>

<h2>Marvel時代</h2>

<p>就業時間中、私の優先すべき仕事は<a href="https://www.elastic.co/products/marvel">Marvel</a>の開発になりました。
これは、Elasticsearchのための管理と監視のためのソリューションです。
（side note: Marvelは生まれ変わっています。（&#8221;<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">Shield, Watcher, and Marvel 2.0.0 GA Released</a>&ldquo;））
Marvelは開発環境ではフリーなので、MarvelにSenseを組み込むことにしました。
これにより、Senseの開発が日中も行えるようになり、多くのユーザに利用され始めました。
また、Senseは実際に真の<a href="https://twitter.com/spenceralger">JavaScript開発者</a>によって開発されました。
彼は、コードをクリーンにし、ブラウザにおける最新の技術を私に教えてくれました。</p>

<p>この期間のSenseは数回書き換えられています。
最も顕著なものは、個別のURLとJSONのサジェストエンジンを書き換えて、
1つのサジェストエンジンにしこれらのコンテキストで動作するようにし、さらに3つ目のコンテキスト（URLパラメータ）を追加したことです。</p>

<p>新しいエンジンはまた、複数のサジェストコンテキストをメンテナンスするのが簡単になりました。
例えば、<code>_search API</code>のソートパラメータを考えます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET _search
</span><span class='line'>{
</span><span class='line'>  "sort": [
</span><span class='line'>     "timestamp": "desc",
</span><span class='line'>     "price": {
</span><span class='line'>        "order": "desc".
</span><span class='line'>        "missing": "last"
</span><span class='line'>     },
</span><span class='line'>     "nested_filter": { "term": { ... }},
</span><span class='line'>     "_score"
</span><span class='line'>  ]
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>ユーザがどこにいるかによって、Senseは単純な値（<code>_score</code>のような）か、
複雑な構造（<code>order</code>と<code>missing</code>のような）やフィルタ（<code>nested_filter</code>のような）も
サジェストする必要があります。
これらのサジェストのパスが一度に処理され、無関係なものは除外されます。</p>

<h2>Sense 2.0の紹介！</h2>

<p>Marvel 1.xはKibana 3.0をベースにしていました。
これは、データの探索やダッシュボードツールとして素晴らしいものでした。
しかし、Kibanaチームはさらに素晴らしいものを出しました。
Kibana 4.xはElasticsearchをバックエンドとするUIアプリを簡単に構築することができる
プラットフォームとして設計されています。
実際に、<a href="https://www.elastic.co/guide/en/marvel/current/index.html">Marvel 2.0</a>はKibanaの
プラットフォームで利用できる最初のアプリです。</p>

<p>Senseの話に戻します。
ElasticsearchのAPIとやりとりする一般的なコンソールです。
これをKibanaのアプリぴったりだと気付きました。
ということで、<a href="https://github.com/elastic/sense/">Sense 2.0</a>をKibanaアプリとしてオープンソースで公開しました。
開発及び本番環境で利用してください。</p>

<p>Figure 2. Screenshot Sense 2.0
<a href="https://www.elastic.co/blog/sense-2-0-0-beta1">※画像に関しては原文をご覧ください。</a></p>

<h2>リリースのハイライト</h2>

<p>Sense 2.0の新しい機能をここで簡単に紹介します。
（すべての変更点については<a href="https://www.elastic.co/guide/en/sense/current/release_notes.html#_2_0_0_beta1">こちら</a>をご覧ください。）</p>

<h4>Elasticsearch 2.0</h4>

<p>SenseのナレッジベースをElasticsearch 2.0サポートに更新しました。
新しいPipeline aggregationにも対応しています。</p>

<h4>複数リクエストの実行</h4>

<p>テストやいくつかの一連のコマンドを繰り返し実行したい時があるでしょう。
その時に、それら全てをSenseに記述し、
実行したいリクエストを選択状態にしてElasticsearchにリクエストできます。</p>

<p>Figure 3. Submit multiple requests
<a href="https://www.elastic.co/blog/sense-2-0-0-beta1">※画像に関しては原文をご覧ください。</a></p>

<p>Senseは、Elasticsearchにリクエストを一つずつ送信し、それぞれの出力結果を右のパネルに表示します。
これは、問題のデバッグや複数のシナリオでのクエリの組み合わせの実行に非常に便利です。</p>

<h4>複数リクエストのコピーペースト</h4>

<p>複数リクストを選択し、フォーマットしたり、cURLのコマンドとしてコピーすることも可能です。</p>

<p>Figure 4. Copy multiple requests as cURL
<a href="https://www.elastic.co/blog/sense-2-0-0-beta1">※画像に関しては原文をご覧ください。</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Delete all data in the `website` index
</span><span class='line'>curl -XDELETE "http://localhost:9200/website"
</span><span class='line'># Create a document with ID 123
</span><span class='line'>curl -XPUT "http://localhost:9200/website/blog/123" -d'
</span><span class='line'>{
</span><span class='line'>  "title": "My first blog entry",
</span><span class='line'>  "text":  "Just trying this out...",
</span><span class='line'>  "date":  "2014/01/01"
</span><span class='line'>}'</span></code></pre></td></tr></table></div></figure>


<p>もちろん、複数のcURLコマンドをコピーしてSenseにペースとすると、Senseはそれらをパースしてくれます。</p>

<h2>まとめ</h2>

<p>Sense 2.0.0のベータリリースです。
実際に多くの作業が終わった認識です。すぐにGAが出るでしょう。</p>

<p>Sense 2.0を知り、試していただくために、新しい<a href="https://www.elastic.co/guide/en/sense/current/index.html">ドキュメント</a>を参考にしてください。
バグやリクエストがある場合は、<a href="https://discuss.elastic.co/c/ecosystem">フォーラム</a>や<a href="https://github.com/elastic/sense/issues">GitHubのIssue</a>に登録をお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shield、Watcher、Marvel 2.0.0 GAリリース（日本語訳）]]></title>
    <link href="http://blog.johtani.info/blog/2015/10/30/shield-watcher-and-marvel-2-0-ga-released-ja/"/>
    <updated>2015-10-30T16:21:31+09:00</updated>
    <id>http://blog.johtani.info/blog/2015/10/30/shield-watcher-and-marvel-2-0-ga-released-ja</id>
    <content type="html"><![CDATA[<p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>

<p>原文：<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">Shield, Watcher, and Marvel 2.0.0 GA Released</a></p>

<!-- more -->


<p>本日（10/28）Shield、WatcherおよびMarvel 2.0をリリースしました。
これが、<a href="https://www.elastic.co/blog/elasticsearch-2-0-0-released">Elasticsearch 2.0</a>に対応したこれらのプラグインの最初のリリースです。</p>

<p>Elasticsearch 2.0対応のほかに、ShieldとWatcher 2.0は、
セキュリティとアラートを拡張するいくつかの新しい素敵な機能も備えています。</p>

<h2>Shield</h2>

<ul>
<li><p>拡張可能なレルム - Sheild 1.xはユーザ認証のコア的なものを定義するのにフォーカスし
3つの認証メカニズム（<em>esusers</em>、LDAP/AD、PKI）を提供しました。
これらを提供することで、多くのユーザおよびユースケースをカバー出来ましたが、
追加の認証メカニズムを統合する必要があることもわかっていました。
ということで、Shieldのレルムベースの認証システムをユーザが利用、拡張できるようにオープンにし、
ユーザ認証を扱うためのレルム実装をプラグインとして拡張できるようにしました。
特定もしくはプロプライエタリな認証メカニズムが必要なユーザもShieldの強力な
セキュリティ機能（ロールベースの認証、セキュアな通信など）をフルに活用できるようになりました。
カスタムレルムの詳細については、<a href="https://www.elastic.co/guide/en/shield/current/custom-realms.html">こちら</a>をご覧ください。</p></li>
<li><p>フィールドとドキュメントのACL - Shield 2.0はフィールドとドキュメントレベルのアクセス制御機能を提供します。
これは、ロールごとにアクセス可能なフィールドやドキュメントを定義できます。
この新しい機能は、設定の変更するよりも便利です。
このアクセス制御はElasticsearchのLuceneインデックスという最も低レベルで実装されています。
その結果として、このメンテナンスがより簡単であるだけでなく、より良くなっています。
詳細については<a href="https://www.elastic.co/guide/en/shield/current/setting-up-field-and-document-level-security.html">こちら</a>をご覧ください。</p></li>
<li><p>ユーザなりすまし - Shield 2.0で、ユーザなりすましの機能が実装されました。
これは、ユーザ（適切なパーミッションを持った）が、他のユーザになることができ、
それらのユーザのためにリクエストを実行できます。
これは、Elasticsearch上に構築されたアプリケーションがすでにユーザ認証を行いますが、
認可はElasticsearchサイドで行う必要があるような場合に有用です。
このシナリオで、アプリケーションの&#8221;main&#8221;ユーザを設定でき、正しくなりすましを割り当て、
ElasticsearchにアプリケーションユーザとしてリクエストをElasticsearchに実行させることができます。
詳細については、<a href="https://www.elastic.co/guide/en/shield/current/submitting-requests-for-other-users.html">こちら</a>をご覧ください。</p></li>
</ul>


<h2>Watcher</h2>

<ul>
<li><p>SlackとHipChatインテグレーション - SlackとHipChatはチーム/グループコラボレーションツールです。
これらは、急速に主流になり、組織の主な内部コミュニケーションハブとなっています。
Watcher 2.0はチャンネル/ルームやユーザにこれらのコミュニケーションチャネル経由で、Watchの通知を行うことができるアクションを
実装しました。
<a href="https://www.elastic.co/guide/en/watcher/current/configuring-slack.html">slack</a>や<a href="https://www.elastic.co/guide/en/watcher/current/configuring-hipchat.html">hipchat</a>アクションについてはドキュメントをご覧ください。</p></li>
<li><p>Array Compare Condition - 新しいconditionはタイムシリーズのデータのスパイクを検知するのを簡単にします。
<a href="https://www.elastic.co/guide/en/watcher/current/condition.html#condition-compare">compare</a> conditionは1.xで導入されましたが、このコンディションはElasticsearchのダイナミックスクリプト機能を有効にする必要がアンク使えます。
詳細については<a href="https://www.elastic.co/guide/en/watcher/current/condition.html#condition-array-compare">array_compare</a> conditionをご覧ください。</p></li>
<li><p>Watchの有効・無効化 - ユーザからの多かったリクエストとして、Watchの無効化がありました。
1.xには、登録済みのWatchを無効にする機能がありませんでした。
これは、Watchを消すか、Watchのトリガーを変更することで回避していました。
これは、全体としてはWatchを管理するのを難しくする回避方法でしかありません。
2.0では、APIを呼び出すだけで、Watchの変更をすることなく、簡単にWatchの有効化・無効化が可能になりました。
これは1.0からあるべき基本的な機能でしたが、ついにこの問題を解決しました。
詳細は<a href="https://www.elastic.co/guide/en/watcher/current/watch-active-state.html#watch-active-state">こちら</a>をご覧ください。</p></li>
</ul>


<h2>Marvel</h2>

<p>Marvel 2.0を紹介するのに興奮しています。
Kibana 4をベースとした、再設計されたUIを持っています。
Marvel 1.xで学んだ多くのことを導入し、より使いやすく監視しやすいUIになっています。
ShieldとWatcherと同様に、最初のMarvelのリリースは将来的な成長の基盤となり
Elasticsearch2.0を効率的に管理するための主要なメトリックにフォーカスしています。</p>

<p>画像あり。
<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">※画像に関しては原文をご覧ください。</a></p>

<p>再設計により、インタフェースを6ページに減らしています。</p>

<h3>Cluster list</h3>

<p>画像あり。
<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">※画像に関しては原文をご覧ください。</a></p>

<p>ユーザやカスタマーの多くは複数のクラスタを利用しています。
新しいMarvelはそれらを集中的にモニタリングする一つのクラスタからそれらを簡単に監視できます。
各クラスタのデータ送信先をこのモニタリングクラスタにするだけです。</p>

<h3>Cluster Overview</h3>

<p>画像あり。
<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">※画像に関しては原文をご覧ください。</a></p>

<p>クラスタオーバービューはある一つのクラスタの主要な性能メトリックを見ることができ、
素早くスパイクを発見できます。
このページはまた、アクティブなシャードのリカバリやリロケーションも見ることができます。</p>

<h3>Indices List</h3>

<p>画像あり。
<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">※画像に関しては原文をご覧ください。</a></p>

<p>インデックスのリストにはクラスタにあるすべてのインデックスとその属性が表示されます。
テーブルはライブでアップデートされ、フィルタリングやソートも可能です。
一番大きなインデックスは？といったことも調べられます。</p>

<h3>Index Detail</h3>

<p>画像あり。
<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">※画像に関しては原文をご覧ください。</a></p>

<p>インデックス詳細ページはインデックスの主な性能メトリックを見ることができ、シャードの配置についても表示します。</p>

<h3>Nodes List</h3>

<p>画像あり。
<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">※画像に関しては原文をご覧ください。</a></p>

<p>ノードリストはクラスタにあるノードとその主な性能メトリックを見ることができます。
テーブルはライブでアップデートされ、フィルタリングも可能です。
高いCPU利用率やディスクの残り容量なども簡単にわかるようになっています。</p>

<h3>Node Detail</h3>

<p>画像あり。
<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">※画像に関しては原文をご覧ください。</a></p>

<p>ノード詳細ページは個別のノードに関する主な性能メトリックを見ることができ、ノードにあるシャードのリストも見ることができます。</p>

<p>新しいMarvelはKibana 4の上に構築されたので、管理方法が変わっています。
Marvelのインストールは2つのステップがあります。
marvel-agentとmarvel user interfaceです。</p>

<h2>Marvel Agent</h2>

<p>marvel-agentはElasticsearchクラスタにプラグインとしてインストールします。
主なパフォーマンス情報を取得し、ローカルもしくは分離されたモニタリングクラスタにデータを保存・送信します。</p>

<h2>Marvel User Interface</h2>

<p>Marvel UIはKibanaのプラグインとしてインストールします。
これは、Kibana 4.2の新しいプラグインインフラを利用し、
Marvel Appとして、Kibanaのインタフェースとは個別に提供されます。
Kibanaのアプリの切り替えは次の画像の通りです。</p>

<p>画像あり。
<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">※画像に関しては原文をご覧ください。</a></p>

<p>2.0リリースは私たちのプロダクトの大きな一歩です。またユーザの意見を常にお待ちしています。
ぜひ、Webフォーラム（<a href="https://discuss.elastic.co%EF%BC%89%E3%82%84%E3%83%A1%E3%83%BC%E3%83%AB%EF%BC%88info@elastic.co%EF%BC%89%E3%81%A7%E3%81%94%E6%84%8F%E8%A6%8B%E3%82%92%E3%80%82">https://discuss.elastic.co%EF%BC%89%E3%82%84%E3%83%A1%E3%83%BC%E3%83%AB%EF%BC%88info@elastic.co%EF%BC%89%E3%81%A7%E3%81%94%E6%84%8F%E8%A6%8B%E3%82%92%E3%80%82</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elasticsearch 2.0.0リリース(日本語訳)]]></title>
    <link href="http://blog.johtani.info/blog/2015/10/29/elasticsearch-2-0-0-released-ja/"/>
    <updated>2015-10-29T16:20:43+09:00</updated>
    <id>http://blog.johtani.info/blog/2015/10/29/elasticsearch-2-0-0-released-ja</id>
    <content type="html"><![CDATA[<p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>

<p>原文：<a href="https://www.elastic.co/blog/elasticsearch-2-0-0-released">Elasticsearch 2.0.0 GA released</a></p>

<!-- more -->


<p>Elasticsearch 1.0.0のリリース以降、
477のコミッター2,799のpull requestがあった、
<strong>Elasticsearch 2.0.0 GA（Lucene 5.2.1ベース）</strong>をリリースしました。</p>

<p>それだけでなく、<a href="#shield-watcher">Shield（セキュリティプラグイン）とWatcher（アラーティングプラグイン）</a>、
新しくなった<a href="#marvel">Marvel（モニタリングプラグイン）</a>（プロダクション環境でフリー！）、
また、新しくオープンソースとなった<a href="#sense">Sense editor</a>の2.0.0もリリースしました。</p>

<p><a href="https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0">Elasticsearch 2.0.0</a>のダウンロードはこちらから。
また、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.0/breaking-changes-2.0.html">2.0.0での重要な変更点についてはこちら</a>をご覧ください。
全ての変更点については、次をご覧ください。</p>

<ul>
<li><a href="https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0">Changes list for Elasticsearch 2.0.0</a></li>
<li><a href="https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0-rc1">Changes list for Elasticsearch 2.0.0-rc1</a></li>
<li><a href="https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0-beta2">Changes list for Elasticsearch 2.0.0-beta2</a></li>
<li><a href="https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0-beta1">Changes list for Elasticsearch 2.0.0-beta1</a></li>
</ul>


<p>商用プラグインについてはこちらです。</p>

<ul>
<li><a href="https://www.elastic.co/guide/en/shield/2.0.0/release-notes.html#_2_0_0">Shield 2.0.0 change logs</a></li>
<li><a href="https://www.elastic.co/guide/en/watcher/2.0.0/release-notes.html#_2_0_0">Watcher 2.0.0 change logs</a></li>
</ul>


<h2>Elasticsearchの新機能</h2>

<p>Elasticsearch 2.0.0には素晴らしい新機能があります。</p>

<h4>Pipeline Aggregations</h4>

<p>Aggregationsで導関数や移動平均のような他のAggregationの結果に対する計算が可能となります。
この機能はクライアントサイドで実装しなければなりませんでしたが、
Elasticsearchに計算させることで、より強力な解析のクエリを簡単に組み立て、クライアントのコードを簡略化できます。
これは、予測解析や予測解析や例外検知といった可能性をもたらします。
Pipeline Aggregationについては次をご覧ください。</p>

<ul>
<li><a href="https://www.elastic.co/blog/out-of-this-world-aggregations">Out of this world aggregations.</a></li>
<li><a href="https://www.elastic.co/blog/staying-in-control-with-moving-averages-part-1">Staying in Control with Moving Averages - Part 1.</a></li>
<li><a href="https://www.elastic.co/blog/staying-in-control-with-moving-averages-part-2">Staying in Control with Moving Averages - Part 2.</a></li>
</ul>


<h4>Query/Filter merging</h4>

<p>フィルタはもうありません。
全てのフィルタ条件はクエリとなりました。
クエリコンテキストで使用した場合、関連度のスコアに影響し、フィルタコンテキストで使用した場合、
これまでのフィルタのように、ヒットしなかったドキュメントを除外するだけとなります。
この変更はクエリの実行時に自動的に最も効率的な順序で実行するように最適化されることを意味します。
例えば、遅いクエリ（フレーズやgeo）の最初の実行は速い近似フェーズで実行され、
それから、遅い正確なフェーズで結果を修正します。
フィルタコンテキストでは、直近でよく使われた条件が自動的にキャッシュされます。
詳細については、&#8221;<a href="https://www.elastic.co/blog/better-query-execution-coming-elasticsearch-2-0">Better query execution coming to Elasticsearch 2.0</a>&ldquo;をご覧ください。</p>

<h4>設定可能な圧縮率</h4>

<p><code>_source</code>のようなStored fieldsは高速なLZ4（デフォルト）で圧縮するか、インデックスサイズを小さくできるDEFLATE
で圧縮できます。
これは、特にロギングのケースで便利です。
古いインデックスをオプティマイズする前に<code>best_compression</code>に変更することができます。
詳細については&#8221;<a href="https://www.elastic.co/blog/store-compression-in-lucene-and-elasticsearch">Store compression in Lucene and Elasticsearch</a>&ldquo;をご覧ください。</p>

<h4>堅牢に</h4>

<p>新しいElasticsearchはJava Security Managerの元で実行されます。
これは、セキュリティの観点で大きな前進です。
Seciruty ManagerはElastcsearchにより制限をかけ、ハッカーによりシステムに対して何でもできるようなものを制限します。
Elasticsearchはまた、インデキシングの観点でも堅牢になっています。</p>

<ul>
<li>ドキュメントはインデキシングリクエストに答える前に、耐久性のためにディスクに<code>fsync</code>されます。</li>
<li>すべてのファイルはチェックサムにより、早期に障害を検知します。</li>
<li>すべてのファイルはどんなファイルへの書き込みもアトミックです</li>
</ul>


<p>最後に、システム管理者から要請の多かった変更として、
設定されて居ないノードがパブリックなネットワークから参加しないようになりました。
Elasticsearchは<a href="https://manage.contentstack.io/blog/elasticsearch-unplugged">デフォルトではローカルホストのみにバインド</a>します。マルチキャストは無くなりました。（プラグインとして残っています。）</p>

<h4>パフォーマンスと信頼性</h4>

<p>上記以外にも細かな修正がElasticsearchとLuceneにはあります。
より安定し、信頼性をあげ、簡単に設定できるようにするものです。例えば、次のようなものです。</p>

<ul>
<li>ヒープの使用率の低減（doc valuesがデフォルト、マージ時のメモリ使用率の削減、
roaring bitsetsによるフィルタキャッシュ）</li>
<li>構造化され読みやすくなった例外</li>
<li>設定の代わりに、フィードバックループを使用した自動調整</li>
<li>安全で明確で信頼性のあるタイプマッピングの大きな修正</li>
<li>クラスタ状態の差分変更による伝搬の高速化および、大きなクラスタでのより安定的に</li>
<li>normsの圧縮の改善。これまではヒープスペースを大きく利用していた。</li>
<li>マージの自動的な調整（不可解な設定の微調整が必要ない）</li>
<li>より詳細なLuceneのメモリリポート</li>
<li>最適化されたクエリ実行を活用するためにParent/childを書き換え</li>
</ul>


<h4>コアプラグイン</h4>

<p>公式にサポートされたコアプラグインはElasticsearchと同じバージョン番号で同じタイミングでリリースされます。
インストールするプラグインとElasticsearchの複雑なバージョンの対応表に悩まされる必要はもうありません。
コアプラグインのインストールは次のように簡略化されています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bin/plugin install analysis-icu</span></code></pre></td></tr></table></div></figure>


<h2><a name="shield-watcher">ShieldとWatcherの新機能</a></h2>

<p>商用プラグインも新しい機能をリリースしました。</p>

<h4>Shield</h4>

<ul>
<li>フィールドおよびドキュメントレベルのアクセス制御</li>
<li>ユーザのなりすまし</li>
<li>カスタム拡張可能な認証レルム</li>
</ul>


<h4>Watcher</h4>

<ul>
<li>個別のWatchを有効/無効に</li>
<li>SlackやHipChatへの通知</li>
</ul>


<p>これらの詳細については“<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">Shield, Watcher, and Marvel 2.0.0 GA Released</a>”をご覧ください。</p>

<p>コアプラグイン同様、商用プラグインもElasticsearchのバージョンと同じものが同時にリリースされます。
インストールは次の通りです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bin/plugin install license
</span><span class='line'>bin/plugin install shield
</span><span class='line'>bin/plugin install watcher</span></code></pre></td></tr></table></div></figure>


<h2><a name="marvel">Marvel 2.0.0はプロダクションでの利用もフリーに</a></h2>

<p>Marvelモニタリングプラグインはカスタマに非常に価値のあるもので、
ユーザの発展とともに問題を診断したり見つけたりするのに役に立ってきました。
私たちは、何を改善でき、Mαrvelを一から書き直すことで、いろいろとわかったことがあります。</p>

<ul>
<li>Marvel UIを新しい<a href="https://www.elastic.co/blog/kibana-4-2-0">Kibanaプラットフォーム</a>上に構築</li>
<li>ダッシュボードにはより簡単に問題を発見するために、最も重要なメトリックを可視化</li>
<li>1つのインストールで、複数のクラスタのモニタリングをサポート（商用サポート対象）</li>
</ul>


<p>一番良い点はMarvelがすべてのElasticsearchユーザに対してプロダクション環境でフリーになったことです！
ライセンスが必要ですが、課金の必要はありません。
もし、マルチクラスタモニタリングサポートが必要な場合、それは商用サポート対象となります。</p>

<p>詳細に関しては“<a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">Shield, Watcher, and Marvel 2.0.0 GA Released</a>”をご覧ください。</p>

<h2><a name="sense">Sense editorがオープンソースに</a></h2>

<p>Sense（ブラウザベースのElasticsearchリクエストとDSL向けのエディタ）を
<a href="https://www.elastic.co/blog/kibana-4-2-0">Kibanaプラットフォーム</a>のアプリとして、オープンソースにしました。
また、このリリースで新しい機能が追加されています。</p>

<ul>
<li>複数のcURLリクエストをペースとすると、Sense表記に変更</li>
<li>複数のSenseリクエストをcURL表記にしてコピー</li>
<li>複数のリクエストを一度に実行可能</li>
<li>Elasticsearch 2.0サポートとなった自動補完機能</li>
</ul>


<p>SenseはKibanaのアプリとして次のようにインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./bin/kibana plugin --install elastic/sense</span></code></pre></td></tr></table></div></figure>


<p>Senseの詳細については、&#8221;<a href="https://www.elastic.co/blog/sense-2-0-0-beta1">The Story of Sense - Announcing Sense 2.0.0-beta1</a>&ldquo;をご覧ください。</p>

<h2>Elasticsearch Migration Plugin</h2>

<p>Elasticsearch Migration PluginはElasticsearch 1.xから2.0にアップグレードする時の良い出発点となります。
1.xのElasticsearchクラスタにサイトプラグインとしてインストールすると、
アップグレードする前に解決すべき問題があるかどうかを検知してくれます。
（例えば、Lucene 3のような古いインデックスや、2.0.0にした場合に動作しない問題のある
マッピング（<a href="https://www.elastic.co/blog/great-mapping-refactoring">The Great Mapping Refactoring</a>）のような問題）</p>

<p>プラグインに関して<a href="http://github.com/elastic/elasticsearch-migration">Elasticsearch Migration repository</a>をご覧ください。</p>

<h2>まとめ</h2>

<p>ぜひ、<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-2-0-0">Elasticsearch 2.0.0</a>をダウンロードして、試してみてください。
そして、感想をTwitter(<a href="https://twitter.com/elastic">@elastic</a>)や<a href="https://discuss.elastic.co/c/elasticsearch">Webフォーラム</a>などで教えて下さい。
また、問題がありましたら、<a href="https://github.com/elastic/elasticsearch/issues">GitHub issues page</a>で報告をお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kibana 4.2.0リリース（日本語訳）]]></title>
    <link href="http://blog.johtani.info/blog/2015/10/29/kibana-4-2-0-ja/"/>
    <updated>2015-10-29T16:20:19+09:00</updated>
    <id>http://blog.johtani.info/blog/2015/10/29/kibana-4-2-0-ja</id>
    <content type="html"><![CDATA[<p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>

<p>原文：<a href="https://www.elastic.co/blog/kibana-4-2-0">Kibana 4.2.0 released</a></p>

<!-- more -->


<p>Elasticsearch 2.0 + Kibana 4.2 = 💚
Elasticsearch 2.0サポートのKibanaの最初のリリースです。
これが何を意味するでしょう？
速さ、安定さ、新しい機能。
試してみたい方は、<a href="https://www.elastic.co/downloads/kibana">いますぐダウンロード</a>してください。
そうでない方は、Kibana 4.2の楽しい機能について読んでみてください。</p>

<h3>暗黒面は怖い？</h3>

<p>そんなことありません。
私たちは常にチャートチャートとダッシュボードを組み立てている組み立てている間は明るいバックグラウンドを使うことを推奨してきましたが、
時々、巨大なスクリーンで暗い部屋で誰も明るい画面から目を背けないようにしたいでしょう。
その影響を小さくするためにダークモードを導入しました。
あなたは、NOCや天文台、その他の暗い場所でKibanaのダッシュボードを楽しむことができます。</p>

<p>画像あり。
<a href="https://www.elastic.co/blog/kibana-4-2-0">※画像に関しては原文をご覧ください。</a></p>

<h3>地図のカスタマイズ</h3>

<p>Kibanaの地図は素晴らしいですが、もっと多くのオプションが望まれていると聞きました。
もし地図に関して知識があるなら、Kibana 4.2のWMSバックグラウンド地図サポートを試してみてください。
WMSは非常に強力で、US Geological Surveyを含む多くの無料サービスがあります。
<a href="http://viewer.nationalmap.gov/example/services/serviceList.html">http://viewer.nationalmap.gov/example/services/serviceList.html</a></p>

<p>画像あり。
<a href="https://www.elastic.co/blog/kibana-4-2-0">※画像に関しては原文をご覧ください。</a></p>

<h3>シナリオは？</h3>

<p>何かおかしい時、何が起こっているかを正しく知ってもらいたいので、Kibanaがそのタイミングで注目したいコンポーネントがあるなら、
どのように動いているかという概要を知るためのサーバステータスページを作りました。
もちろん、全てがOKであるというのを知りたいだけの場合でも、settingメニューのStatusタブからいつでも呼び出せます。</p>

<p>画像あり。
<a href="https://www.elastic.co/blog/kibana-4-2-0">※画像に関しては原文をご覧ください。</a></p>

<h3>全てにおいて速く</h3>

<p>ブラウザリフレッシュはKibana 4.2の新しいコードビルディングシステムのおかげで、さらに早くなりました。
また、メモリを覚えてます？<strike>Pepperidge Farm</strike>Kibanaが覚えています。
Kibana 4.2は小さな小さな小さなメモリフットプリントを管理している間、長い長い長い時間実行されているダッシュボードを見ることができるような
大きなメモリのクリーンアップも含んでいます。</p>

<h3>もっとありますが。。。</h3>

<p>小さな微調整がいくつもあります。また、今後紹介する本当に刺激的なものの基礎を気づき上げてきました。
これからも<a href="http://elastic.co/blog">Elasticのブログ</a>、<a href="https://twitter.com/elastic">Twitter</a>、<a href="https://github.com/elastic/kibana">KibanaのGitHubリポジトリ</a>に注目し、<strike>モンスタートラック</strike><strong>アナリティクス</strong>の瞬間に立ち会ってください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logstash 2.0.0リリース（日本語訳）]]></title>
    <link href="http://blog.johtani.info/blog/2015/10/29/logstash-2-0-0-released-ja/"/>
    <updated>2015-10-29T16:19:57+09:00</updated>
    <id>http://blog.johtani.info/blog/2015/10/29/logstash-2-0-0-released-ja</id>
    <content type="html"><![CDATA[<p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>

<p>原文：<a href="https://www.elastic.co/blog/logstash-2-0-0-released">Logstash 2.0.0 released</a></p>

<!-- more -->


<p>Logstash 2.0.0が本日（10/28）リリースされました。
この<a href="https://www.elastic.co/downloads/logstash">リリース</a>は
いくつかの設定に関する重要な変更があります。
詳細については、<a href="https://github.com/elastic/logstash/blob/2.0/CHANGELOG.md">changelog</a>または、新しい<a href="https://www.elastic.co/guide/en/logstash/2.0/breaking-changes.html">breaking changes</a>ドキュメントをご覧下さい。</p>

<p>これまでの2.0.0直前のリリースに関する変更点はこちらをご覧ください。</p>

<ul>
<li><a href="https://www.elastic.co/blog/logstash-2-0-0-beta1-released">beta1</a></li>
<li><a href="https://www.elastic.co/blog/logstash-2-0-0-beta2-released">beta2</a></li>
<li><a href="https://www.elastic.co/blog/logstash-2-0-0-beta3-released">beta3</a></li>
<li><a href="https://www.elastic.co/blog/logstash-2-0-0-rc1-released">RC</a></li>
</ul>


<p>ここでは、2.0の主な変更点の概要を説明します。</p>

<h3>Elasticsearch 2.0との互換性</h3>

<p>多くの機能および改善を含んだ<a href="https://www.elastic.co/blog/elasticsearch-2-0-0-released">Elasticsearch 2.0がリリース</a>されました。
Logstash 2.0はこのリリースに対応しています。
Logstashのこれまでのリリースでは、デフォルトで、Javaの <code>node client</code>をElasticsearchとの通信として
使用してきました。
2.0では、HTTPクライアントがデフォルトになります。
これにより、シームレスにユーザのデータを取り込み、付加価値をつけ、Elasticsearchに保存して解析することができます。</p>

<p>HTTPは他のプロトコル（<code>node</code>や<code>transport</code>）同等の機能を持っていますが、
単一のクライアントに接続する時に、少しだけ遅いですが、管理や動作がより簡単です。
HTTPプロトコルを使うことで、Elasticsearchのバージョンのアップグレードが、Logstashのアップグレードすることなく
行うことができます。
デフォルトをHTTPに変更したさらに詳しい情報については<a href="https://www.elastic.co/blog/logstash-2-0-0-beta1-released">beta1のブログ</a>をご覧ください。</p>

<p>他のプロトコル（<code>node</code>と<code>transport</code>）もサポートしますが、これらを利用する場合には、
プラグインを別途インストールする必要があります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bin/plugin install --version 2.0.0 logstash-output-elasticsearch_java</span></code></pre></td></tr></table></div></figure>


<h4>互換性のマトリックス</h4>

<p>LogstashとElasticsearchのバージョンの互換性は次のようになります。</p>

<p>画像あり。
<a href="https://www.elastic.co/blog/kibana-4-2-0">※画像に関しては原文をご覧ください。</a></p>

<h1>Image <a href="https://www.elastic.co/assets/bltde5b69e2164aa82f%2Fcompat_matrix.png">https://www.elastic.co/assets/bltde5b69e2164aa82f%2Fcompat_matrix.png</a></h1>

<h2>Shield 2.0との互換性</h2>

<p>このリリースはShield 2.0リリースにも対応しています。
HTTPプロトコルで、追加のプラグインは必要ありません。
<a href="https://www.elastic.co/guide/en/shield/current/logstash.html">こちらのドキュメント</a>をご覧ください。
<code>transport</code>プロトコルでは、Shield 2.0対応のプラグインを個別にインストールする必要があります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bin/plugin install --version 2.0.0 logstash-output-elasticsearch_java_shield</span></code></pre></td></tr></table></div></figure>


<h2>パフォーマンスの改善</h2>

<p>このリリースはまた、多くの部分のパフォーマンスの改善を含んでおり、Logstashを利用してデータをより早く処理することができます。
いくつかをここで説明します。</p>

<ul>
<li><p><strong>UserAgentとGeoIPフィルタ</strong>：これらのフィルタで、LRUキャッシュを追加して改善しています。
これにより、IPとユーザエージェントがまとまって現れるというWebリクエストの特性を用いています。
ユーザエージェントフィルタのケースでは、サンプルデータセットにおいて3.7倍ほど早くなりました。
GeoIPでは、1.69倍早くなっています。</p></li>
<li><p><strong>JSONプロセシング</strong>：LogstashでJSONのsiriaraizu/でシリアライズに利用しているJrJacksonを新しいバージョンにしました。
これにより、JSONの処理が改善されています。</p></li>
<li><p><strong>フィルタワーカーのより良い値をデフォルトに</strong>：以前のリリースでは、<code>filter_workers</code>の設定は1がデフォルトでした。
これは、フィルタの処理を行うワーカーが1つであるという意味です。
<code>filter_workers</code>の設定のデフォルト値はCPUコア数の半分の値を設定します。フィルタ実行の並列性が上がります。
ですので、複雑なgrokパターンやuseragentフィルタの処理がにとっては重要です。</p></li>
</ul>


<h2>Filebeat Support</h2>

<p><a href="https://www.elastic.co/products/beats/filebeat">Filebeat</a>のベータバージョンを<a href="https://www.elastic.co/blog/beats-beta4-filebeat-lightweight-log-forwarding">先日リリース</a>しました。
これは、Logstash Forwarderの次期バージョンです。
Filebeatはファイルベースのログをさらに処理するためにLogstashに送るためのエージェントです。
2.0.0は<a href="https://www.elastic.co/guide/en/logstash/2.0/plugins-inputs-beats.html">logstash-input-beatsプラグイン</a>を使えばFilebeat 1.0.0-beta4とすぐに動作します。</p>

<h2>シャットダウン操作</h2>

<p>これまでのLogstashでは、シャットダウンが開始した時に、例外の機構でシャットダウンが開始したことを
プラグインに通知していました。
この処理はサードパーティのコードを使ったプラグインで問題を起こしていました。
Logstashはどの例外を処理するか知らないため、予期しない動作をしていました。
これを修正するためにAPI呼び出し（例えば<code>stop</code>）を各プラグインにシャットダウンのイベントを通知し、
プラグイン自身がきちんと停止するようにしました。
これは、200以上のプラグインに新しいAPIを利用するように修正しないといけないことを意味しました。
しかし、Logstashの停止についてはまだ完全にはフィックスしていません。
とちゅうでおわっているoutputがシャットダウンを遅らせる可能性があるからです。
2.0でAPIの破壊的な変更は適切なリリースでの変更を繰り返すことができる出発点です。</p>

<p>プラグインの開発者へ：もし、Logstash　1.5のプラグインを開発しているなら、
シャットダウンに関する新しいAPIのリストに関するbreaking changesのドキュメントに助言をください。
また、<a href="https://github.com/logstash-plugins/logstash-input-example">example input</a>リポジトリにて、新しいシャットダウンメカニズムの使い方のサンプルコードを提供しています。</p>

<h2>ドキュメント</h2>

<p>2.0に更新された<a href="https://www.elastic.co/guide/en/logstash/2.0/index.html">ドキュメントはこちら</a>です。設定の変更についてもこちらをご覧ください。</p>

<h3>2.0へのアップデート</h3>

<p>2.0へアップデートする前に、<a href="https://www.elastic.co/guide/en/logstash/2.0/upgrading-logstash.html">アップデートガイド</a>もご覧ください。</p>

<h2>フィードバック</h2>

<p>2.0のリリースできたことに、多くのコントリビューター、ユーザに感謝しています。
このリリースに含まれている多くのパッチと全てのプレリリースのテストにも感謝しています。
将来の修正やリリースなどについては<a href="https://www.elastic.co/guide/en/logstash-roadmap/current/index.html">ロードマップ</a>をご覧ください。
2.0は<a href="https://www.elastic.co/downloads/logstash">今日リリース</a>されました。
ご意見ご感想は<a href="https://discuss.elastic.co/c/logstash">Webフォーラム</a>で！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Release, we have（日本語訳）]]></title>
    <link href="http://blog.johtani.info/blog/2015/10/29/release-we-have-ja/"/>
    <updated>2015-10-29T14:18:59+09:00</updated>
    <id>http://blog.johtani.info/blog/2015/10/29/release-we-have-ja</id>
    <content type="html"><![CDATA[<p><strong>※この記事は次のブログを翻訳したものになります。</strong></p>

<p>原文：<a href="https://www.elastic.co/blog/release-we-have">Relase, we have</a>
※画像に関しては原文をご覧ください。</p>

<!-- more -->


<p>Elasticにとって大きな1日（社内では「release bonanza」と呼んでいる）です。
多くの主要なプロダクトを新たにリリースしました。
そして、本日、それらを一緒に利用する時にそれらを一緒に利用する時にユーザの体験についてまとめてみました。</p>

<p>次の通りです。</p>

<p><a href="https://www.elastic.co/blog/elasticsearch-2-0-0-released">Elasticsearch 2.0</a>リリース。
大きなマイルストーン、チームによる改善、そして、コミュニティからの素晴らしい貢献。
Pipeline Aggsと呼ばれる新しいタイプのaggregations、
クエリとフィルタのコンセプトを統合することにより簡素化されたクエリDSL、
better compressionオプション、
JavaのSecurity Managerを有効にすることによる強化されたセキュリティ、
FSの挙動に関する強化（fsync、checksum、atmicなリネーム）、
パフォーマンス、マッピングの挙動の一貫性などなどです。
また、我々のチームによる改善も含まれているLucene 5ベースにアップグレードしています。</p>

<p><a href="https://www.elastic.co/blog/kibana-4-2-0">Kibana 4.2</a>リリース。
Elasticsearch 2.0対応、ダークテーマ、カスタマイズ可能な地図、多くの改善。
Kibana 4.2の多くに作業については外部プラグインサポートといった、内蔵に関するものでした。
この後の説明に続きます。</p>

<p><a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">Marvel 2.0</a>リリース。
Elasticsearch 2.0対応、合理化されたメトリックス、簡素化されたUI、
多くはKibanaプラグイン（Kibanaプラットフォーム上に構築）としての書き換えです。
このKibana拡張の最初の努力は、Kibanaのプラグインをどうやって書くか、
Kibanaユーザに公式に何をする必要があるかといったものを特定するのに役立ちました。
おっと、忘れるところでした、Marvelを全てのユーザにフリーで使えるようにしました。
マルチクラスタサポートについては有償となります。</p>

<p><a href="https://www.elastic.co/blog/sense-2-0-0-beta1">Sense 2.0</a>リリース。
2つ目のKibanaプラグインがこれです。
SenseをKibanaプラグインとして書き換えました。
Elasticsearch 2.0サポート、複数リクエストの実行、
curlへのコピーなどです。
おっと、忘れるところでした。オープンソースとすることにしました！</p>

<p><a href="https://www.elastic.co/blog/shield-watcher-and-marvel-2-0-ga-released">Shield + Watcher 2.0</a>リリース。ElasticsearchのためのセキュリティプラグインであるShieldと、アラート管理のためのプラグインであるWatcherにも
多くの結果が入っています。
最も要求のあった機能である、フィールドお呼びドキュメントレベルでのセキュリティについて、Luceneに落とし込んで実装しました。
また、セキュリティの操作についてプラガブルに実装できるように変更しました。
Watcherは監視の無効化、SlackやHipChatへの通知（bot ops向け）が可能です。</p>

<p><a href="https://www.elastic.co/blog/logstash-2-0-0-released">Logstash 2.0</a>リリース。
Elasticsearch 2.0のサポート、クリーンな停止、全面的なパフォーマンス改善、<a href="https://www.elastic.co/products/beats">Beats</a>サポート。</p>

<p>ご覧の通り、すべてのプロダクトに関する大きな結果です。
チーム間およびFoundの開発者との間での密な連携に感謝します。
これらが私たちが公式にElasticsearch / Kibanaをホストしている<a href="https://www.elastic.co/found">Found</a>で
利用可能です。</p>

<p>ひゅう、息切れしました。
チームがしてきたことは、感動的で、謙虚で、刺激的です！
Elasticが会社として、全てのユーザ、コントリビュータがどのように私たちの大きなミッションに対する結果をもたらしたかという素晴らしい良い例です。
ユーザに愛され、楽しまれ、成功に導き、革新させる製品を是非ご利用ください。ありがとうございます。</p>

<p>&ldquo;A Lion, in Africa?&rdquo; - まだまだ終わりではありません。この文言で終わりにしますが、すぐに（本当にすぐに）戻ってきます。;)</p>
]]></content>
  </entry>
  
</feed>
