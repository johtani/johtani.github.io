<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@johtaniの日記 2nd]]></title>
  <link href="http://blog.johtani.info/atom.xml" rel="self"/>
  <link href="http://blog.johtani.info/"/>
  <updated>2019-10-25T21:39:00+09:00</updated>
  <id>http://blog.johtani.info/</id>
  <author>
    <name><![CDATA[johtani]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bonfire Data & Science #1に参加しました]]></title>
    <link href="http://blog.johtani.info/blog/2019/10/25/bonefire-01/"/>
    <updated>2019-10-25T19:40:02+09:00</updated>
    <id>http://blog.johtani.info/blog/2019/10/25/bonefire-01</id>
    <content type="html"><![CDATA[<p>Bonfire Data &amp; Science #1にブログ枠で参加してきました。
ということで、メモです。</p>

<!-- more -->


<ul>
<li>日時 : 2019/10/25 19:00 - 21:30</li>
<li>場所 : Yahoo! Japan</li>
<li>サイト : <a href="https://yj-meetup.connpass.com/event/148121/">https://yj-meetup.connpass.com/event/148121/</a></li>
<li>ハッシュタグ: <a href="https://twitter.com/search?q=%23yjbonfire%20&amp;src=typed_query&amp;f=live">#yjbonfire</a></li>
</ul>


<h2>概要</h2>

<p>Data &amp; Scienceとは？
データとサイエンスに関わる人達の情報共有のための勉強会/交流会</p>

<p>サイトから引用です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>第1回のテーマは「画像検索」です！
</span><span class='line'>
</span><span class='line'>最近EC系のサイトで類似画像検索が出来るようになったけどどうやってるの？
</span><span class='line'>画像検索のモデルってどうしてるの？
</span><span class='line'>画像検索のインフラはどうしてるの？
</span><span class='line'>私たちの会社でも画像検索を用いたサービスを構築できるだろうか？
</span><span class='line'>こういった疑問に答えたり、いま抱えている悩みを解決するヒントを得る場になればと思っています。
</span><span class='line'>
</span><span class='line'>今回は、画像検索を行なっているヤフー, メルカリ, ZOZOテクノロジーズの3社に事例と基盤技術について登壇いただきます。</span></code></pre></td></tr></table></div></figure>


<p>QAはこちら。<a href="https://app.sli.do/event/w3wayjmv/live/questions">https://app.sli.do/event/w3wayjmv/live/questions</a></p>

<h2>Mercari画像検索について(仮)</h2>

<ul>
<li><p>発表者：荒瀬晃介(株式会社メルカリ / AIエンジニアリングチーム)</p></li>
<li><p>AIエンジニアチーム</p></li>
<li>写真検索プロジェクトのTech Lead</li>
<li>iOSのみで提供の写真検索</li>
<li>システムオーバービュー

<ul>
<li>MobileNet v2で特徴抽出</li>
<li>ANNのインデックスを使ってDBに入れる</li>
</ul>
</li>
<li>論文も発表済み（3本）

<ul>
<li>今日の発表はこの内の2本を元に話をします。</li>
</ul>
</li>
</ul>


<h4>C2Cでの問題点</h4>

<ul>
<li>商品は床やテーブル上で撮影</li>
<li>クエリは着用（着ている）画像が使われやすい。

<ul>
<li>人が写ってる写真が結果に多いと業者が出展しているように見えてしまう。

<h4>提案手法</h4></li>
</ul>
</li>
<li>人が写ってるものから人の代表ベクトルを抜き取る (クエリ時にのみ処理を実施しているので変更が容易)</li>
<li>特徴変換ベクトル

<ul>
<li>トップスなど、分類ごとに学習させてからベクトルを構成</li>
</ul>
</li>
<li>なんでMobileNet v2?

<ul>
<li>エッジデバイスでの処理を見据えて選択</li>
</ul>
</li>
</ul>


<h4>インフラ</h4>

<ul>
<li>Docker + k8s</li>
<li>CRDを使ってる？</li>
<li>training

<ul>
<li>コンテナベースパイプライン

<ul>
<li>いくつかのバッチ処理を工程ごとにパイプライン化</li>
<li>バッチ実行情報をカスタムリソースとしている＝再実行が簡単（復旧作業が容易）</li>
</ul>
</li>
<li>画像を扱う＝ダウンロードが時間がかかる -> 復旧しやすいようにPVにある程度キャッシュさせている</li>
</ul>
</li>
<li><p>Serving&hellip;</p>

<ul>
<li>GCP側</li>
</ul>
</li>
<li><p>なぜ2つに別れてるんだろう？実際のサービスも2つに分かれてたりするんだろうか？</p></li>
</ul>


<h4>将来の展望</h4>

<ul>
<li>Realtime Image Search

<ul>
<li>カメラでものを写している状態でそれが何かを検索できる。</li>
<li>物体検出＋特徴抽出をエッジで行うためできる</li>
</ul>
</li>
<li>エッジの性能により違いが出てきたりするっぽい</li>
</ul>


<h4>QA</h4>

<ul>
<li>Q: 業者が想定されると、購入意欲を下げるというのは実験した結果？それとも想像？

<ul>
<li>A: 実験はしていないが、e-commerceにおいての研究がある</li>
</ul>
</li>
<li>Q: どういう理由でマルチクラウドにしたんでしょう?

<ul>
<li>A: 画像のマスターがAWS。メルカリのマイクロサービスはGKEなので、サービング環境がGCP</li>
</ul>
</li>
<li>Q: 画像の内、服のエリアが大部分で体の面積が少ない場合と、メガネや帽子のように、アイテムの方の面積が少ない場合で、トレーニングに必要なデータ数は変わりましたか？

<ul>
<li>A: カテゴリによる性質の違うはある。ので、改善は必要。</li>
</ul>
</li>
</ul>


<h2>ZOZO画像検索について(仮)</h2>

<ul>
<li><p>発表者：平田拓也(株式会社ZOZO / AIエンジニアリングチーム)</p></li>
<li><p>(聞き逃した。。。)</p></li>
<li>WEAR</li>
<li>マルチサイズ</li>
</ul>


<h4>チーム構成</h4>

<ul>
<li>研究所＋ML Opsチーム</li>
</ul>


<h4>使用しているアルゴリズム</h4>

<ul>
<li>物体検出アルゴリズム</li>
<li>特徴量抽出アルゴリズム</li>
<li>近似最近傍探索（approximate nearest neighbor, ANN）</li>
</ul>


<h4>インフラ</h4>

<ul>
<li>GCPを採用。

<ul>
<li>BigQuery上にデータ基盤がある</li>
<li>Managed GPUが必要</li>
</ul>
</li>
<li>なんでk8s?

<ul>
<li>コンテナ</li>
<li>Cloud Runがなかった</li>
</ul>
</li>
</ul>


<h4>アーキテクチャ</h4>

<ul>
<li>マイクロサービス化されている</li>
<li><a href="https://techblog.zozo.com/entry/cloudnext19tokyo-imagesearch">Google Cloud Next 2019 Tokyoでsonotsさんの発表があるよ</a></li>
</ul>


<h4>監視項目</h4>

<ul>
<li>CPUなどは見ていない</li>
<li>レスポンスタイムとステータス監視</li>
<li>リクエスト数</li>
<li>APM</li>
<li>使ってるものStackdriver + Datadog + Sentry

<ul>
<li>Warningが30分で続けたら通知などができるのがStackdriver</li>
</ul>
</li>
</ul>


<h4>画像検索の改善のためにやっていること</h4>

<ul>
<li>課題

<ul>
<li>レイテンシーが大きい

<ul>
<li>推論が大変？</li>
</ul>
</li>
<li>急激なトラフィックの増加に対応できない

<ul>
<li>GPUのスケールアウトが問題 -> 先行投資が必要</li>
</ul>
</li>
</ul>
</li>
<li>流れ

<ol>
<li>キャッシュありなし</li>
<li>物体検出 (GPU)</li>
<li>特徴量抽出 (GPU)</li>
<li>近似最近傍探索</li>
<li>DBから取得</li>
</ol>
</li>
</ul>


<p>2と3が問題</p>

<ul>
<li>2と3を特徴量DBという形でデータが登録された時点で特徴量などを計算してしまうことでGPUへの依存をなくした。</li>
<li>Apache AirFlowが便利？</li>
</ul>


<h4>Cloud ComposerとApache AirFlow</h4>

<p>Cloud Composerに関するいくつかのTipsがありました。</p>

<h4>QA</h4>

<ul>
<li>Q: 推論をCPUでやったらどれぐらい遅いんだろう

<ul>
<li>A: GPUインスタンス代金 &lt; それと同等の速度を出すためのCPUインスタンス代金</li>
</ul>
</li>
<li>Q: k8sスケールアウト時のリソース割当を最適化する為、resource limit / request標準化 or 時系列分析などから自動調整するなどはされていますか？

<ul>
<li>A: &hellip;聞き逃した</li>
</ul>
</li>
<li>Q: (TCOを考慮したクラスタ構成) Cloud Composerの値段が高いようなパプリッククラウド利用の課題対策としてプライベートクラウドとのハイブリッド構成にされているのでしょうか？もしハイブリッド構成でしたら、パブリック or クラウドを切り分ける基準はございますか。

<ul>
<li>A: GKEオンリー</li>
</ul>
</li>
<li>Q: cloud composerでairflowを使う辛い点は？

<ul>
<li>A: 不安定さ。。。</li>
</ul>
</li>
</ul>


<h2>Yahoo!ショッピングにおける画像検索(仮)</h2>

<ul>
<li>発表者：佐藤 純一(ヤフー株式会社)</li>
<li>商品検索APIの開発とか検索エンジンの保守とか</li>
<li>類似画像検索システムの開発が直近の仕事</li>
</ul>


<h4>類似画像検索</h4>

<ul>
<li>ヤフーショッピング

<ul>
<li>3億の商品</li>
<li>ファッション系はビジュアルが重要＝言語による表現が難しい</li>
</ul>
</li>
<li>iOSとAndroid

<ul>
<li>Androidだとカメラで撮影してから検索みたいなことも可能</li>
</ul>
</li>
</ul>


<h4>システム概要</h4>

<ol>
<li>物体検出</li>
<li>ノイズ除去</li>
<li>特徴抽出
*</li>
<li>インデックス(NGT) -> <a href="https://github.com/yahoojapan/NGT">https://github.com/yahoojapan/NGT</a></li>
<li>1000万件を超える</li>
<li>検索</li>
<li>アプリの画像をAPIに投げてベクトルから、近いものn件を取得</li>
</ol>


<h4>ベクトル化/インデックス更新</h4>

<ul>
<li>GPUマシン</li>
<li>Kafka使ってる</li>
<li>クラウドストレージに日次？バックアップみたいに保存</li>
<li>差分更新の仕組みがある</li>
<li>メンズとレディースは分けている

<ul>
<li>絞り込み検索のために分離（インデックスのメタデータとしてタグがある）</li>
</ul>
</li>
</ul>


<h4>システム構成</h4>

<ul>
<li>Python</li>
<li>Kafka</li>
<li>TensolflowServing</li>
<li>可視化？監視？はGrafana＋Prometheus</li>
</ul>


<h4>開発を通しての学び</h4>

<ul>
<li>自動デプロイとかテスト</li>
<li>検索精度の確認ツールを作る

<ul>
<li>コレ重要だよね。何が変更してるかとか、何が正しいかってのが必要だし。。。</li>
</ul>
</li>
<li>復旧可能、早期復旧の仕組みを容易</li>
</ul>


<h4>今後の方針</h4>

<ul>
<li>対象商品の拡大</li>
<li>物体検出特徴抽出モデルの性能改善</li>
<li>NGTの検索システムをValdに移行

<ul>
<li><a href="https://github.com/vdaas/vald">Vald</a>

<ul>
<li>k8s上で動作、分散検索、分散インデキシングなどの機能を提供予定</li>
</ul>
</li>
</ul>
</li>
</ul>


<h4>QA</h4>

<ul>
<li>Q: iOS(既存の画像)とAndroid(カメラで撮る)で画像検索の方式が違うのはなぜ？

<ul>
<li>A: アプリの違い</li>
</ul>
</li>
<li>Q: 1枚の写真に沢山写っている中で、対象の商品をどう識別しているんでしょう。靴もトップスもボトムスも写っていたら、かなり難しそう

<ul>
<li>A: Yahooブラウザの場合は1番大きな領域のものを選択。Yahoo shoppingだと選択可能</li>
</ul>
</li>
</ul>


<h2>NGTについて(仮)</h2>

<ul>
<li>発表者：岩崎 雅二郎(ヤフー株式会社)</li>
<li>類似画像検索を20年くらいやってる</li>
</ul>


<h4>近傍検索ライブラリ</h4>

<ul>
<li><p><a href="https://github.com/yahoojapan/NGT">https://github.com/yahoojapan/NGT</a></p>

<ul>
<li>高次元ベクトルの近傍検索</li>
<li>ツリーとグラフによるインデックス</li>
</ul>
</li>
<li><p>近傍検索とは?</p>

<ul>
<li>距離空間上でのクエリの近傍のオブジェクトを取得

<ul>
<li>k最近傍検索（通常はこっち）</li>
<li>範囲検索（あんまり使われない）</li>
</ul>
</li>
</ul>
</li>
<li><p>NGTの特徴</p>

<ul>
<li>世界トップレベルの高速高精度な近似近傍検索</li>
<li>OSS</li>
<li>追加削除が可能（削除がとくに難しいらしい）</li>
<li>多様な利用形態（Python、C++、C、Go、コマンドライン）</li>
<li>サーバ版NGT（ngtd、vald）を提供</li>
<li>共有メモリ版でメモリサイズ以上のデータ登録可能</li>
<li>量子化版NGT（NGTQ）により。。。</li>
</ul>
</li>
<li><p>ANNベンチマークによりテスト</p>

<ul>
<li>実行環境が決められているらしい。誰が実行しても比較可能</li>
<li>グラフベースの検索の仕組みのほうが性能がいいというのがベンチマーク結果からわかる</li>
</ul>
</li>
</ul>


<h4>なんではやいの？</h4>

<ul>
<li>インデックス生成

<ul>
<li>ツリー（グラフの探索起点の取得に利用する。DVP-tree）</li>
<li>グラフ（ANNG）

<ul>
<li>ノードを逐次追加しつつ、近傍ノードを検索してから接続するというのを繰り返している</li>
</ul>
</li>
</ul>
</li>
<li>検索

<ul>
<li>ツリーから絞り込みつつ、グラフを検索する</li>
</ul>
</li>
<li>ANNGに課題があるのでONNG（Optimized Nearest Neighbors Graph）に

<ul>
<li>ノード単位の次数（入出）を最適化</li>
<li>データセットによって有効な次数が違う。。。</li>
</ul>
</li>
</ul>


<h4>NGTを利用した深層学習で。。。</h4>

<ul>
<li>Yahoo!ラボ FavNavi</li>
<li>特徴量の構成（低次特徴量（300次元）、カテゴリ特徴量（128次元）、領域アスペクト比（1次元））

<ul>
<li>個別の特徴量だけだとイマイチな結果になるが、組み合わせるといい感じになる</li>
</ul>
</li>
</ul>


<h4>モデル性西洋学習データ</h4>

<p>スライドがあればいいなぁ（表書くの大変だし。。。）</p>

<h4>QA</h4>

<ul>
<li>Q: 実際のお客さまの利用を考えると、近似近隣の密度が異なるので、近いものばかりの検索結果や遠いものも含んでしまった検索結果が出ると思うのですが、遠いものが含まれてしまうと、閾値でフィルタしたりするのでしょうか?

<ul>
<li>A: NGTは近いものしかないので、外れ値ってなんでしょう。。。

<ul>
<li>検索のフィルタリングをある程度している（カテゴリとか）。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>まとめ</h2>

<p>慣れない分野の話を聞きながらざっとメモを取ったものなので役に立つかはわかりませんが。。。</p>

<p>アルゴリズムとかまでは得意ではないんですが、画像「検索」ということで参加してみました。
実際に画像検索の仕組みがどんな感じでできているのか、どんな技術がつかわれているのか？ってのがわかったのは
面白かったです。確かに検索のためのキーワードって出てこないことあるしなぁと。
あー、こんなかばんほしいとか、これなんだろ？みたいなのあるからなぁ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elasticsearch NEXT STEP 2を頂きました]]></title>
    <link href="http://blog.johtani.info/blog/2019/10/10/review-es-next-step-2/"/>
    <updated>2019-10-10T15:56:29+09:00</updated>
    <id>http://blog.johtani.info/blog/2019/10/10/review-es-next-step-2</id>
    <content type="html"><![CDATA[<p>この間の<a href="https://www.meetup.com/ja-JP/Tokyo-Elastic-Fantastics/events/264954133/">Elasticsearch勉強会</a>でAcroquest Technologyの人たちが<a href="http://acro-engineer.hatenablog.com/entry/2019/09/19/120000">技術書展7で販売されていた書籍</a>を頂いてしまいました。なので、軽く読んでの感想と宣伝です（これ、電子版とかで買えないのかな？）。</p>

<!-- more -->


<p>Elasticのパートナーとしても活躍していただいてますが、こういう感じでさまざまなところでElastic Stackを広めていただいていて感謝しかありません。</p>

<p>章立てとしては以下の通りです。</p>

<ol>
<li>Elasticsearchでエンタープライズサーチを実現する</li>
<li>同僚が作成、メンテナンスしている<a href="https://fscrawler.readthedocs.io/en/latest/#">FSCrawler</a>を使った例も書かれています。ローカルのファイル（PDFやJSONとか）をサクッとElasticsearchにインストールしたりするのには便利です。</li>
<li>Kibana Canvasによる柔軟な可視化</li>
<li>Canvasについてどんなものなのか？というのと<a href="https://github.com/elastic/examples/tree/master/canvas/elasticoffee">elasticcofee</a>というサンプルを元に、その変更の仕方などが説明されています。</li>
<li>Elastic APMによるアプリケーションパフォーマンス監視</li>
<li>Go AgentとAPM自体の使い方の説明です。最近強化されている他の機能との連携（AlertingやMachine Learning）についても触れてくれています。</li>
<li>Kubernetesクラスタのメトリクス・ログ・性能情報の可視化</li>
<li>Azure上でAzure Kubernetes Serviceの上で動いているアプリなどをBeats、APMでデータを取りつつ、他のAzure上に<a href="https://azuremarketplace.microsoft.com/en-us/marketplace/apps/elastic.elasticsearch?tab=Overview">Azure Marketplaceのテンプレート</a>を用いて起動したElasticsearchとKibanaの環境を用いて可視化する方法が説明されています。</li>
</ol>


<p>ということで、薄い本ですが、手順をおって説明されていたり、7.3と新しいバージョンで書かれているのですばらしいなぁと。
前作の<a href="https://amzn.to/322j99v">「Elasticsearch NEXT STEP」</a>に引き続きインプレスさんから出たりするのかなぁ？</p>

<p>ちなみに、Elastic APMのRubyに関して興味がある方は、私が前に発表したときの資料がありますので、<a href="https://noti.st/johtani/eJPLbZ/elastic">こちらを参考に</a>してみてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[勉強会の受付自作？アプリ？HTMLについて]]></title>
    <link href="http://blog.johtani.info/blog/2019/06/19/qr-code-with-meetup-dot-com/"/>
    <updated>2019-06-19T19:10:44+09:00</updated>
    <id>http://blog.johtani.info/blog/2019/06/19/qr-code-with-meetup-dot-com</id>
    <content type="html"><![CDATA[<p>Twitterで「Meetup.comに切り替えたらー」みたいな話があったので、
受付用アプリとかなくてという話になったので、普段Elasticsearch勉強会で使用している
QRコード生成の仕組みを紹介してみようかと。</p>

<!-- more -->


<p>HTMLだけで済むようにQRコードを生成する<code>jquery.qrcode.min.js</code>ってのを使用してます。</p>

<p><a href="https://gist.github.com/johtani/657df4dcfa7c31a86575760e23b64f7d">HTMLコードはこちら</a>。</p>

<h2>仕組み</h2>

<ul>
<li>1枚だけのHTMLを生成</li>
<li>Meetupの<a href="https://www.meetup.com/ja-JP/meetup_api/auth/#oauth2">OAuth2</a>の仕組みを利用(consumer keyを発行する必要あり。)</li>
<li>Meetup APIを利用してユーザー情報取得</li>
<li>取得したユーザー情報をGoogle Formに埋め込んだ形で表示するURLを組み立てる</li>
<li>組み立てたURLをQRコードにしてHTMLに表示</li>
<li>受付で、QRコードリーダーを使って、QRコードを読み込むとGoogle Formが開くので、「送信」ボタンを押す</li>
</ul>


<h3>1. HTMLの作成</h3>

<p>QRコードを表示するためのHTMLを作成します。Gistに貼り付けてあるので、参考にしてもらえれば。
いくつか埋め込まないといけないものがあるので、個別にそれは説明します。</p>

<h3>2. Google Formの準備</h3>

<p>Elasticsearch勉強会では、出席者の情報として、IDと氏名をリストとして保存しています。
目的としては、何人実際に参加したかを計測するのが目的です。
ですので、参加者リストのGoogle Formを作成します。
で、作成した後に、プレビューを表示する。こんな感じ。</p>

<p><img src="http://blog.johtani.info/images/entries/20190619/google_form.png" width="300"></p>

<p>この時のプレビューのURLをQRコードのURLとして使いたいので、このURLをQRコード表示のHTMLに埋め込みます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">createGoogleFormURL</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;entry.1744035444&quot;</span> <span class="o">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;entry.2031666715&quot;</span> <span class="o">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;https://docs.google.com/forms/d/e/&lt;GOOGLE_FORM_ID&gt;/viewform?&quot;</span> <span class="o">+</span> <span class="nx">$</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここら辺です。
<code>return</code>に書いてある<code>https</code>で始まる文字列をまず、先ほどのURLで置き換えます。
次に、プレビューのHTMLの中から<code>&lt;input&gt;</code>タグを探して、<code>name</code>の値を抜き出します。
それを<code>obj</code>のキーに利用します。<code>entry.</code>で始まる文字列が該当します。</p>

<p>これで、このURLをQRコードにすれば、値（ここだとIDと氏名）が埋め込まれた形のGoogle Formがスマホのブラウザで起動します。</p>

<h3>3. Meetup APIの準備</h3>

<p>MeetupのAPIを利用できるようにします。Meetup.comにログインするとみれるAPIのページがあります。
<a href="https://secure.meetup.com/meetup_api">https://secure.meetup.com/meetup_api</a></p>

<p>まず、OAuthを利用するためのConsumer Keyを発行します。</p>

<p>メニューのOAuth Consumersをクリックして、</p>

<p><img src="http://blog.johtani.info/images/entries/20190619/meetup_oauth_consumers.png" width="400"></p>

<p>&ldquo;Create New Consumer&#8221;をクリックします。
すると、次のような画面が開きます。</p>

<p><img src="http://blog.johtani.info/images/entries/20190619/meetup_oauth_create_consumer.png" width="400"></p>

<p><code>Consumer name</code>と<code>Redirect URI</code>が重要です。</p>

<p><code>Consumer name</code>はユーザーがMeetup経由で認証するときに、その認証画面で表示される名前になります。
わかりやすい名前を表示してあげると良いかと。</p>

<p><code>Redirect URI</code>が一番重要です。実際にOAuthで認証が通った後に表示するHTMLを提供しているURLを指定します。
Elasticsearch勉強会の場合は、私のドメインにwwwをつけた&#8221;<a href="https://www.johtani.info">https://www.johtani.info</a>&#8220;を指定しています。
実際にQRコード表示用のHTMLを配置するHTTPサーバーのトップのURLを指定します。
（ちなみに、私のウェブサーバーはS3で運用してます。ですので、HTMLをS3のバケットにアップロードしてあるだけです）</p>

<p>必須項目を入力したあと、最下部にある<code>Register Consumer</code>ボタンを押せばキーが生成されます。
生成されたキーがOAuth2のURLのパラメータに必要になります。</p>

<p>これで、リダイレクトの準備が整いました。</p>

<p>OAuth2のURLには、<a href="https://www.meetup.com/ja-JP/meetup_api/auth/#oauth2implicit">Implicit Flow</a>を利用します。
これで、リダイレクト先のHTMLにトークンがわたるので、Meetup APIにこのトークンが使えるようになります。</p>

<p>認証用のURLはこちらです。このURLを参加者宛のメールに入れて毎回送信しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">https</span><span class="o">:</span><span class="c1">//secure.meetup.com/ja-JP/oauth2/authorize?response_type=token&amp;redirect_uri=&lt;QRコード表示HTMLのURL&gt;&amp;client_id=&lt;コンシューマーキー&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>参加者はこのリンクをクリックすることで、次のような画面が出てきます。
ログインしていない場合はLog in画面が表示され、まずはログインを促されます。</p>

<p><img src="http://blog.johtani.info/images/entries/20190619/meetup_oauth_page.png" width="400"></p>

<p>で、Allowをクリックすれば、<code>redirect_uri</code>に指定されているページが表示されるわけです。</p>

<p>QRコード表示用のHTMLでは、次のAPIを使用して、ログインしているユーザーの情報を取得してきています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">getMemberId</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="s1">&#39;https://api.meetup.com/2/member/self/?only=id,name&amp;access_token=&#39;</span><span class="o">+</span> <span class="nx">getToken</span><span class="p">(),</span> <span class="nx">displayQRCode</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここで取れた値が、先ほどの「2. Google Formの準備」で説明したコードの<code>data</code>の部分に渡ってくるわけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">createGoogleFormURL</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;entry.1744035444&quot;</span> <span class="o">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;entry.2031666715&quot;</span> <span class="o">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;https://docs.google.com/forms/d/e/&lt;GOOGLE_FORM_ID&gt;/viewform?&quot;</span> <span class="o">+</span> <span class="nx">$</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4. QRコードの表示</h3>

<p>あとは、<a href="https://github.com/jeromeetienne/jquery-qrcode"><code>jquery.qrcode.min.js</code></a>を使用してURLを表示するだけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">displayQRCode</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#qrcode&#39;</span><span class="p">).</span><span class="nx">qrcode</span><span class="p">({</span><span class="nx">width</span><span class="o">:</span> <span class="mi">128</span><span class="p">,</span><span class="nx">height</span><span class="o">:</span> <span class="mi">128</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span><span class="nx">createGoogleFormURL</span><span class="p">(</span><span class="nx">data</span><span class="p">)});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>サイズとURLを指定するだけですね。</p>

<h2>まとめ</h2>

<p>あとは、受付で、参加者の方が表示してくれたQRコードをスマホのQRコードリーダーやカメラで読み込めばGoogle Formが開いて必要な情報は入っているので、「送信ボタン」を押せば参加者リストが出来上がっていくという形になります。</p>

<p>毎回勉強会の前日に、前回のGoogle Formを「コピー」してから、各回の勉強会の登録者フォームを作成しています。
コピーすることにより、Google Formの<code>&lt;input&gt;</code>タグに使用される<code>name</code>もそのままコピーされるので、
QRコード生成用のHTMLを書き換える部分の手間が減る形になっています（気づくまで数回かかったw）。</p>

<p>ですので、QRコードのHTMLの中身としては、「勉強会のページへのリンク」、「Google Formへのリンク」の2つを書き換えてから毎回アップロードしているだけとなっています。</p>

<p>このやり方が、スマートかどうかはわからないですが、受付アプリがない中、Meetup.comから取得した参加者リストのExcelやプリントアウトしたリストを元に参加者をチェックするよりは、手間が省けてるんじゃないかなぁと。</p>

<p>残念ながら、QRコードの存在を知らないでそのまま勉強会にくる人がいるので、受付で最低一人はMeetup.comの参加者リストから、
名前を検索してチェックするという作業もやってもらってます。
QRコードを持ってきた方がすんなり受付を通過できるようになってますので、ぜひQRコードを持って勉強会にきてもらえればと。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[勉強会運営座談会ってのをやってみた]]></title>
    <link href="http://blog.johtani.info/blog/2019/04/26/meetup-organizer-drinkup/"/>
    <updated>2019-04-26T00:02:06+09:00</updated>
    <id>http://blog.johtani.info/blog/2019/04/26/meetup-organizer-drinkup</id>
    <content type="html"><![CDATA[<p><a href="https://www.meetup.com/ja-JP/Tokyo-Elastic-Fantastics/">Elasticsearch勉強会</a>や<a href="https://search-tech.connpass.com">検索技術勉強会</a>やってるんだけど、独学で勉強会やってるなーと思い、みんなはどうやってるんだろうとツイートしてみたところ。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">あー、勉強会運営座談会したい。</p>&mdash; Jun Ohtani (@johtani) <a href="https://twitter.com/johtani/status/1113015829195481088?ref_src=twsrc%5Etfw">2019年4月2日</a></blockquote>


<p> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<blockquote class="twitter-tweet" data-conversation="none" data-lang="ja"><p lang="ja" dir="ltr">面白そう</p>&mdash; 機械の体を手に入れるのよ鉄郎 (@tetsuroito) <a href="https://twitter.com/tetsuroito/status/1113017239937081344?ref_src=twsrc%5Etfw">2019年4月2日</a></blockquote>


<p> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<blockquote class="twitter-tweet" data-conversation="none" data-lang="ja"><p lang="ja" dir="ltr">やってみるか。</p>&mdash; Jun Ohtani (@johtani) <a href="https://twitter.com/johtani/status/1113017372653215744?ref_src=twsrc%5Etfw">2019年4月2日</a></blockquote>


<p> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<blockquote class="twitter-tweet" data-conversation="none" data-lang="ja"><p lang="ja" dir="ltr">やりましょう</p>&mdash; 機械の体を手に入れるのよ鉄郎 (@tetsuroito) <a href="https://twitter.com/tetsuroito/status/1113017409928015872?ref_src=twsrc%5Etfw">2019年4月2日</a></blockquote>


<p> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>ってことで、何人か釣れたので、<a href="https://connpass.com/event/126699/">勉強会運営座談会</a>をやってみました。
会場提供していただいた、<a href="https://classi.jp">Classiさん</a>ありがとうございました！</p>

<!-- more -->


<p>参加してくれた人たちはまぁ、勉強会のサイトを見ていただければなんとなくわかるかなと。
自己紹介とどんな勉強会、読書会運営してますってとこから始めて、次のようなトピックについてピザ食いながら3時間くらい話しました。</p>

<ul>
<li>スピーカーの募集方法

<ul>
<li>運営側から声かけてる？それとも公募してる？</li>
<li>登壇時間とかどうしてる？</li>
<li>スピーカーになってもらうためになんかやってる？</li>
</ul>
</li>
<li>スケジュール管理

<ul>
<li>会場探し、スピーカー探し、イベントページ作るタイミングは？</li>
<li>複数拠点開催したことある？</li>
<li>ハンズオンとかはどうしてる？</li>
</ul>
</li>
<li>土日開催？平日開催？</li>
<li>アンケートとってますか？</li>
<li>使用してるイベントサイトは？</li>
<li>ドタキャン対応どうしてる？出欠とったりしてる？懇親会の規模とかどうやって見積もってる？</li>
<li>運営費用関連はどうしてる？

<ul>
<li>グッズとか、ツールとか、スピーカーへの謝礼とか</li>
</ul>
</li>
<li>運営って複数でやってる？

<ul>
<li>その時のツールは？</li>
<li>運営メンバーにはどうやってなってもらう？</li>
<li>録画配信とかまで手が回る？</li>
</ul>
</li>
<li>会場探すの大変じゃない？

<ul>
<li>会場の部屋の使い方はどうしてる？</li>
</ul>
</li>
<li>行動規範とかどうしてる？</li>
<li>読書会の場合に人が減ってったりしない？</li>
</ul>


<p>まぁ、こんな感じです。色々話してメモしてたんですが、まぁトピックくらいで。</p>

<p>そもそもは、勉強会の運営って本業ではない（はずな）ので、いかに楽をしつつうまく運営できるかってのを知りたいのと、
他の人どうやってるかってのからアイデアもらえるといいなーと思ったんでやってみました。
他のツールがどんなものかとか知れたし、あー、そういうやり方すればいいのねーみたいなのも知れたので、次回以降の勉強会に活かせればなーと。
自分がやってるやり方とかもブログ書くといいのかなぁ？</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">残念です！次回もやるかもしれないので、 <a href="https://twitter.com/johtani?ref_src=twsrc%5Etfw">@johtani</a> さんに期待してください！</p>&mdash; 機械の体を手に入れるのよ鉄郎 (@tetsuroito) <a href="https://twitter.com/tetsuroito/status/1121413483331895296?ref_src=twsrc%5Etfw">2019年4月25日</a></blockquote>


<p> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>次回やるのかなぁ？興味ある人いるのかなぁ？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Search Engineering Tech Talk(検索技術勉強会)の運営として参加して始めてみました。]]></title>
    <link href="http://blog.johtani.info/blog/2019/02/26/start-search-engineering-tech-talk/"/>
    <updated>2019-02-26T23:38:00+09:00</updated>
    <id>http://blog.johtani.info/blog/2019/02/26/start-search-engineering-tech-talk</id>
    <content type="html"><![CDATA[<p>どーも、johtaniです。</p>

<p><a href="https://search-tech.connpass.com/event/112866/">Search Engineering Tech Talk</a>という勉強会に運営として参加して、第1回の勉強会を開始しました。
本日（2/26）は第1回目だったので、ブログを残しておこうかと。</p>

<!-- more -->


<p>勉強会自体の資料については<a href="https://search-tech.connpass.com/event/112866/">第1回の勉強会のページ</a>にあるし、勉強会の感想とかブログはツイートやみんながブログを書いてくれると思うので、勉強会開催の経緯などについてブログを残しておこうかと。</p>

<h2>なんで始めたの？</h2>

<p>私自身が古くはFAST Searchに始まり、何か縁があって、
検索のシステムに長く携わってきたこと（Apache Solrの本書いたり、Elasticsearch勉強会始めたり）もあり、
検索が面白いなと日々思ってます（思ってるだけかもしれないが）。</p>

<p>で、これまでElasticsearch勉強会をやっているのですが、検索エンジン固有の話ではない、
いわゆる検索の共通の課題というのがあるなぁと。
そういう課題やノウハウって、製品に限らず共有できれば面白いことがもっとできるんじゃないだろうか？
と感じることが多々ありまして。
オープンソースのコミュニティをソースコードをベースではなく、共通の課題・話題を中心としたコミュニティが
あってもいいんじゃないかなぁと。</p>

<p>まぁ、要は、私がみんなの検索で困ってることとか、どうやって検索システム考えてるのかが聞きたかったわけですよ。</p>

<p>ということで、一人でやっても面白くないので、興味ありそうな人を募ってやってみようということを始めたのが2018年12月くらいです。</p>

<h2>運営とかどうしてるの？</h2>

<p>まずは、共同主催者（コアメンバー）を募集してみようということで、Googleフォーム作って、
興味ありそうな人がいる場所に投稿してみました。（TwitterとかFBとか）
で集まったのが今回紹介したメンバー（<a href="https://noti.st/johtani/ZsQG5A/search-engineering-tech-talk">スライド参照</a>）です。
ユーザー企業の人もいれば、私みたいな検索エンジンの人もいるので面白い感じにできたかなぁと。
で、スピーカーを運営や知り合いに声をかけて第1回をやってみたという感じです。</p>

<h2>今後どうするの？</h2>

<p>残念ながら次回はまだ未定です。
2ヶ月に1回くらいのペースで開催できればなーと思ってますが、スピーカーが集まるかなどによるかなぁと。
ということで、<a href="https://search-tech.connpass.com">勉強会のグループのページ</a>にスピーカー応募フォームのリンクがありますので、スピーカーに興味がある方は入力していただければと。</p>

<p>もちろん第2回はやりたいので、勉強会のページからの連絡をお待ちください！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[今年の振り返りと来年の抱負（2018）]]></title>
    <link href="http://blog.johtani.info/blog/2018/12/31/looking-back-2018/"/>
    <updated>2018-12-31T16:14:45+09:00</updated>
    <id>http://blog.johtani.info/blog/2018/12/31/looking-back-2018</id>
    <content type="html"><![CDATA[<p>今年も振り返りブログをかけてます。よかったw</p>

<!-- more -->


<h2>振り返り（2017年に書いた抱負から）</h2>

<p>まずは去年の抱負を元に。</p>

<h5>もっと英語の継続＆TOEIC</h5>

<p>まぁ、継続してます。英会話も続けてますし、海外TVドラマや映画見てます。
ただ、昨年書いたTOEICはイベントが被りまくってて受けれてないです。。。
来年は受けれればいいが。
ちなみに見たドラマはこの辺。あんまり見てないなぁ。
「はじまりのうた」は飛行機の中で見たんですが、よかったです。
最近は音楽系の映画が好きなのかなぁ。グレーテストマンショー（ミュージカル風）とかもハマったし。</p>

<ul>
<li>Game of Thrones</li>
<li>はじまりのうた BEGIN AGAIN (映画)</li>
<li>24 シーズン4まで</li>
</ul>


<p>今は、ボキャブラリのなさに苦しんでる感じです。キクタンとかするべきなのかもなぁ。
基本勉強が下手だからなー。</p>

<h5>継続的にイベントに登壇 ＆ CfPもっと出すぞ！</h5>

<p>OSCには出てました。あとは、いくつかに呼ばれて出たりでしょうか。
CfPはJJUGしか出せてない気がするんで、もっと出さないとですね。。。
春のJJUGでは20分で短すぎた「オープンソースとビジネスモデル」の話（同僚のネタ）が
今年面白かった内容かなぁと。
もっと話を作るのをうまくしないとだろうなぁ。
ユースケースが増えてるんで、もっといろんなところに出ていかないとなぁと。
ブースの出し方とかもちょっと考えないといけないかもなーと思ってたり。
マンネリになってきてる気がするんで、なんか取り入れないとなぁ。</p>

<h5>もっとブログ！</h5>

<p>出だしはよかったんですが、途中でRustネタのブログも止まってしまいましたね。。。
業務が忙しくなったのを言い訳にして時間が取れなくなってるんで、
もっと習慣つけないとなぁ。</p>

<h5>雑誌やWeb系雑誌で記事を。</h5>

<p>できてないです。。。どうすっかなぁ。
重い腰上げないのが問題なんですけどね。。。
自社のウェビナーとかはそこそこやってましたが。</p>

<h5>コミュニティを別の方法で盛り上げ</h5>

<p>フォーラムは皆さんのおかげで盛り上がってきてる気がしてます。
別の方法ではなく、勉強会を9月から毎月開催にして、ユースケースごとに切り替えてみました。
あとは、<a href="http://bit.ly/SpeakerElasticTokyoMeetup">スピーカー登録用のフォーム</a>の用意とかして、継続的に楽にスピーカーの人たちが見つけられるようにと。
私は「全然」関わってないんですが、技術書典でいろんな方に書籍を書いていただきました。
また、<a href="https://elasticlover.hatenablog.jp/archive">Elasticlover</a>という毎週いろんな記事をまとめていただけ助かりました。
少しでも感謝をということで、コミュニティランチというイベントで、フォーラムで回答していただいてる方や、書籍を出していただいた方を招いてCEOのShayとランチするというイベントもやってみました。
少しは盛り上げられたかなぁ。
次は、ハッカソンみたいなのとかやってみるのもありなのかなぁ？（サポートしきれない気がするんだよなぁ）</p>

<h5>Elasticsearchなど検索系の開発にも参加</h5>

<p>開発。。。
Analyzer向けの<a href="https://github.com/johtani/analyze-api-ui-plugin">Kibanaのプラグイン</a>の開発は継続してますが、あんまり開発してないですねぇ（<a href="https://github.com/johtani">GitHubの草</a>をみながら)。
ちょっとしたPRはやったりしてますが、もっとやりたい。。。
とりあえず、来年しょっぱなは、検索系じゃないですが、KibanaのプラグインのReact化をやらないとなぁと。</p>

<h2>振り返り(今年あったできごと)</h2>

<p>さて、反省が多かったですが、ここからは今年の出来事を。</p>

<ul>
<li>初スノーシュー in US</li>
<li>オフィス引越し</li>
<li>パリで料理w</li>
<li>K8sとde:code</li>
<li>QNAPとか</li>
<li>IPO!</li>
<li>初のオンライン登壇</li>
<li>初アイルランド!</li>
<li>Pixel3 XL</li>
</ul>


<p>今年も初モノがちらほら。</p>

<p>アメリカでスノーシューやりました。昨年は釣りでしたが、今年はスノーシューでした。
スノーシューはすごくよかったんですが、サンフランシスコから社内ミーティングのある場所までの
移動に10時間バスに缶詰という変な初モノもありました。。。
スノーリゾートのある山の上にバスで移動だったんですが、前日までの天候の生でチェーン規制が出てしまい、登りかけた山を降りて、違う経路で登り直すという長旅でした。。。
途中からずっとゲームオブスローンズみてました。。。</p>

<p>オフィスが引っ越しました。人数が増えてきたのもあり、銀座のWeWorkに引っ越しました（私はあんまり行かなかったりしますがw）。
ただ、すでに手狭になってきて、来年はまた引っ越してるかもなぁ。
今年の終わりで日本のメンバーが22名に増えました！すごい！4年半前の22倍！</p>

<p>パリで料理もしましたwセールスのキックオフミーティングがパリで開催され、なぜか参加してきました。
そこで、DevRelチームのミーティング＆ディナーがあったんですが、ディナーがアクティビティ付きで、チームのみんなとパリで料理やカクテル作ってきました。
まさか、パリで手巻き寿司作るとは思わなかった（怖くて食べてないですw）</p>

<p>今年はイベントが連続することが多かったです。パリから帰ってすぐに<a href="https://thinkit.co.jp/article/13087">de:codeでMSの川崎さんと登壇</a>したりしました。Kubernetesを触る機会ができたんでよかったですが、時差ボケは辛かったw今年は他にもカンファレンス直後にトレーニングだったりと、夏に喉やられちゃいました。喉に負担をかけない話し方の練習すべきなんだろうなぁ。</p>

<p>自宅の環境もちょっと整えました。10年前から使ってた、TeraStationを<a href="https://amzn.to/2QZFxPe">QNAPに刷新</a>。快適に検索できるわ、クラウドにバックアップとれるわで、すごく快適です。
あとは、自室のディスプレイをディスプレイアームにつけたり、壊れたモニタースピーカーを<a href="https://amzn.to/2EX5qsB">Yamahaのパワードスピーカー</a>に買い替えたりと。
ちょこちょこ自宅で作業したりするんで、快適です。</p>

<p>今年はめでたいことに会社がIPOしました。<a href="https://www.elastic.co/blog/ze-bell-has-rung-thank-you-users-customers-and-partners">ニューヨーク証券取引所で株式公開しました</a>。
転職して4年、初体験なんで何がどうってのはいまいち実感わかないんですが、順調にきてるのは嬉しい限りです。今後も頑張りますよ！</p>

<p>自社のウェビナーでは、オンライン登壇してたんですが、<a href="https://wp.infra-workshop.tech/event/elastic-stack-%E5%85%A5%E9%96%80/">インフラ勉強会でオンライン登壇</a>させていただきました。
Elastic Stackの入門的な話をさせていただいたので、興味があればみていただければと。
こういうのにはマイクが非常に重要だなというのが結論です。ウェビナーで使ってる<a href="https://amzn.to/2EZvvHo">Shureのマイク</a>で話したので聞き取りやすかったです。
来年はもっと手軽にちょっとしたウェビナーとかポッドキャストやろうかな、ということで、持ち運び用に<a href="https://amzn.to/2EZs6sm">SAM SONGo Mic</a>を購入してみたのでどっかで試してみたいなー。</p>

<p>アイルランド（ダブリン）にも行きました。これまた、社内のミーティングなんですけどね。半年に1度エンジニアが集まる社内イベントがあるので、いろんなところに旅をさせてもらっていて、すごく楽しいです。
みんなにも会えるし。ただ、アイルランドの英語はきつかった。。。</p>

<p>最後はPixel3です。SonyのXperiaをここ数年は使ってたんですが、電池の持ちなどが悪くなったんで、気になってたPixel3に変えました。すごくいい。いらないものが入ってないのもいい。あと<a href="https://twitter.com/johtani/status/1073185795870085120">カメラがすごくいい</a>。他の機能をまだちゃんと調べてないんで、誰か便利機能知ってたら教えてくださいw</p>

<p>とまぁ、こんな感じでした。</p>

<h2>来年の抱負</h2>

<p>最後は来年の抱負を。</p>

<ul>
<li>TOEIC</li>
<li>CfP見つけて応募 &amp; いろんな場所に顔を出す</li>
<li>もっとブログ！</li>
<li>Rustの継続</li>
<li>開発の継続</li>
<li>日本でエンジニア獲得!</li>
</ul>


<p>まぁ、英語ですね。これは地道にやるしかないんだろうなと思いつつ、コツコツが苦手でw
とりあえず、今年はどこかでTOEIC受けないとな。</p>

<p>いつも行かないけど、弊社プロダクトに関係のあるカンファレンスのCfPを見つけ出して、
応募しまくって、少しでもしゃべらないとなぁ。喋れなくても、Elasticsearchがらみで登壇していただいてる方がいるカンファレンスには顔を出していきたいなぁと。
登壇される方いたら、ぜひ連絡ください！あとは、CfPのサイトを探す仕組みを作らないとなぁ。
検索サイト作るかなぁ。
あとは、カンファレンスではなく、いろんな会社に遊びにいきたいと思ってます。
入門的な話をしてほしいような方、こんな使い方してますっていう話をしていただける方、大募集です。
これもGoogle Formでも作ってみるか。</p>

<p>ブログなぁ。<a href="https://amzn.to/2EZhzwf">小さな習慣</a>を読んだのに、習慣化できてないので、なんとかしないとという意味で。。。が、頑張ります。。。</p>

<p>Rustの継続＆開発の継続もですね。Java歴が長いので、他の言語を勉強しようと思ってRustやってますがなかなか身についてないというか、時間を取れてない。これもコツコツやらないとなー
検索関連の開発もちょっとずつやりたいなと思ってるんで、<a href="https://github.com/DmitryKey/luke/issues/134">LukeへContribute</a>しようかな。</p>

<p>切実なんですが、日本に弊社のエンジニアを増やしたいなと。特に人前で喋ってもらえる人が増えると助かるんです。弊社最近、ユースケースが増えてきてて、追いつかなくてwダレカタスケテーw</p>

<p>さーて、そろそろ紅白のサザンが始まるんで終わりです。</p>

<p>今年も様々な方々に様々な面で助けていただきました。本当にお世話になりました。
この場を借りてお礼申し上げます。</p>

<p>来年ももちろん、助けてもらうんで、よろしくお願いいたします！
あと、話聞きたい方、声かけてくださーい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elastic Stack 7.0で入ってくる新機能をちょっと紹介]]></title>
    <link href="http://blog.johtani.info/blog/2018/12/25/whats-new-in-elastic-stack-7/"/>
    <updated>2018-12-25T00:00:01+09:00</updated>
    <id>http://blog.johtani.info/blog/2018/12/25/whats-new-in-elastic-stack-7</id>
    <content type="html"><![CDATA[<p><a href="https://qiita.com/advent-calendar/2018/elasticsearch">Elastic stack (Elasticsearch) Advent Calendar 2018</a>の25日目の記事になります。
今年最後のAdvent Calendarです！来年も忘れてなければやるはず！</p>

<p>今日は、すでにalpha2までリリースされた7系でどんな変更が入るのかをちょっとだけ紹介します。
ほんとにちょっとだけですよ。</p>

<!-- more -->


<h3>Kibanaのk7 design (kibana)</h3>

<p><a href="https://www.elastic.co/guide/en/kibana/master/release-notes-7.0.0-alpha1.html#K7-design-7.0.0">Kibanaの新デザインです。K7って呼ぶのかな？</a></p>

<p><img src="http://blog.johtani.info/images/entries/20181225/k7dashboard.png" width="600"></p>

<p>まだ、メニューと一部が実装されているだけですが、7.0.0でガラッと変わりそうです。
そのほかの画面の<a href="https://github.com/elastic/kibana/issues?utf8=%E2%9C%93&amp;q=is%3Aissue+is%3Aopen+k7">Issueはこちら</a>です。
&ldquo;k7&#8221;で検索しただけですが。メタIssueが見つからなかったんで。<a href="https://github.com/elastic/kibana/issues/25736">例えば、こんな感じでアプリとかのスイッチとかがこんな感じになるよというデザイン案が観れたりします</a>。</p>

<h3>Zen2 (elasticsearch)</h3>

<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-discovery.html">Elasticsearchの新しいクラスター管理機構アルゴリズム</a>になります。
Zenと呼ばれる独自実装のものを6系までは使っていましたが、7系向けに変更がかかりました。
実際には、Nodeを探す仕組み、Masterの選出アルゴリズム、クラスター状態の管理などを行います。
上記のリンクにあるようにドキュメントも詳しくなりました。
信頼性をさらに向上し、設定ミスを起こしにくくして、より使いやすくという目的で様々な変更が加えられています。
これが、<a href="https://github.com/elastic/elasticsearch/issues/32006">メタIssue</a>かな？
アルゴリズムの変更や、クラスターの状態の管理の方法などの変更に関するIssueやPRにリンクが貼ってあります。</p>

<h3>新しいデータタイプ (elasticsearch)</h3>

<h4>Feature/Feature vector datatype</h4>

<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/feature.html">ドキュメントはこちら</a>と<a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/feature-vector.html">こちら</a></p>

<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/query-dsl-feature-query.html">feature query</a>と合わせて使用するためのフィールドで、しかもクエリのスコア計算「のみ」に使用するフィールドになります。
検索条件やソート、Aggregationの対象ではなく、クエリのスコアに影響させたい値を入れておくためのフィールドです。
6から追加された機能の「<a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/search-uri-request.html">track_total_hits</a>」をfalseにした時と合わせると、function_scoreなどで計算をしていた場合よりも、検索性能が上がるという利点まであります。
ちなみに、「track_total_hits」は検索ヒット数を計算しないで、上位のデータを取得する時にクエリを早くするといったことができる機能になります。
<a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/index-modules-index-sorting.html">Index Sorting</a>と組み合わせることで威力が発揮できる仕組みになるはずです。</p>

<h3>Filebeat supports NetFlow (beats)</h3>

<p><a href="https://www.elastic.co/guide/en/beats/filebeat/master/filebeat-input-netflow.html">NetFlowが入力</a>として追加されます。
Filebeatと言いつつ、File以外の入力が徐々に増えてきてますね（UDPやTCPにも対応しましたし）。
ネットワーク機器などの監視を行う方などにはさらに便利になってくるのではないでしょうか？
（私はこの辺りは不得手なので、誰か使ってみてもらえればと！）</p>

<h2>まとめ</h2>

<p>まだ、序の口って感じですが、今年はこの辺で。7系ではここであげた以外にも様々な機能が追加されています（もしくは予定です）。
Elasticのドキュメントの良いところは、masterブランチのドキュメントも公開されていることです。
ドキュメントのバージョンを<code>7.0.0-alpha2</code>にすれば、masterブランチで追加されたページが見れるので、
興味のある方は眺めてみていただければと。物によって、リリースノートが書かれていなかったりするので注意は必要ですが。</p>

<p>今年もあと数日になりましたが、Advent Calendarへの参加ありがとうございました！
来年ももちろんやりますので、年始からネタを考えてくださいね。</p>

<p>来年一発目は、<a href="https://www.meetup.com/ja-JP/Tokyo-Elastic-Fantastics/events/257301177/">第28回Elasticsearch勉強会 - 6.5機能紹介 -</a>になります。ウェビナーでも紹介しましたが、6.5で入った様々な新機能をデモありで紹介する予定です。
興味のある方はぜひご参加ください。</p>

<p>では、来年もよろしくお願いいたします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2018年のElastic StackとElastic]]></title>
    <link href="http://blog.johtani.info/blog/2018/12/01/whats-happen-at-elastic-in-2018/"/>
    <updated>2018-12-01T10:48:38+09:00</updated>
    <id>http://blog.johtani.info/blog/2018/12/01/whats-happen-at-elastic-in-2018</id>
    <content type="html"><![CDATA[<p><a href="https://qiita.com/advent-calendar/2018/elasticsearch">Elastic stack (Elasticsearch) Advent Calendar 2018</a>の1日目の記事になります。</p>

<p>ちょっと遅れちゃいました。。。
まだ、1ヶ月を残してますが、簡単に今年起こったことを振り返ってみようと思います。毎年恒例ですね、ここ数年。</p>

<!-- more -->


<h3>Elastic Stack 6.2.0リリース(2月)</h3>

<p><a href="https://www.elastic.co/jp/blog/elastic-stack-6-2-0-released">リリース記事はこちら</a></p>

<p>APMがGAリリースされ、Beats monitoring UIも追加されました。Stackとしての統一度がちょっとずつ上がってきた感じですね。
Kibanaのホーム画面（左メニューのKibanaアイコンをクリックした時）にデータ登録のチュートリアル的な画面が追加されています。
特にBeatsを利用する時の流れが簡単にわかるのがいい感じです。Metricsなどはローカルでちょっと試すのにも簡単な流れですので、ぜひ一度やってみてもらいたいなと。
個人的にはtermsを使ったパイチャートで、<a href="https://github.com/elastic/kibana/pull/15525">その他の数値がどのくらいあるかといった表示ができるよう</a>になって、やっと帰ってきた！（Kibana 3の頃にはあった機能）という印象でした。</p>

<h3>Elastic{ON}18開催(2月)</h3>

<p>第4回目のユーザーカンファレンスがSFで開催されました。
今年のキーノートが今年最大のニュースですね。
<a href="https://www.elastic.co/jp/blog/doubling-down-on-open">X-Packのコードの公開が発表された</a>のがこの時でした。
個人的に今後もオープンソースに携わっていきたいと思いながら日々働いていますが、
Elasticのオープンソースへのこだわりと、シンプルな考え方を再確認して素晴らしい会社で働けてるなーと。
商用のソースコードを公開してユーザーや顧客の皆さんとより良いものを作っていきたいという形ですので、今後もよろしくお願いします！
<a href="https://www.elastic.co/elasticon/conf/2018/sf/opening-keynote">キーノートの動画はこちら</a>からご覧いただけます。</p>

<p>そのほかにも次のような発表が行われました。</p>

<ul>
<li>SQL for elasticsearch</li>
<li>Canvas</li>
<li>Elastic App Search(旧Swiftype)</li>
</ul>


<h3>Elastic Stack 6.3.0リリース(6月)</h3>

<p><a href="https://www.elastic.co/jp/blog/elastic-stack-6-3-0-released">リリース記事はこちら</a></p>

<p>2月末のElastic{ON}で発表されたX-Packのコードの公開にはやはり時間がかかりました。
有償コードのリポジトリとの統合やライセンスの変更、テスト環境などなど、色々大変だったみたいです。
ようやく公開され、ベーシックのライセンスの扱いなども変わり、より使いやすくなったのがこのタイミングです。</p>

<ul>
<li>X-Packをプラグインとしてのインストールが不要に</li>
<li>ベーシックライセンスがデフォルトでONに。6.3から登録などが不要に。</li>
<li>Apache 2.0ライセンスの部分のみのディストリビューションも別途ダウンロードできるようになどなど</li>
</ul>


<p><a href="https://www.elastic.co/jp/webinars/elastic-stack-6-3">日本でもリリースウェビナーをやりました</a>。ご覧いただけましたかね？</p>

<h3>Elastic Cloud Elasticsearch Serviceがより使いやすく(8月)</h3>

<p><a href="https://www.elastic.co/jp/blog/the-next-generation-elasticsearch-service-hot-warm-clusters-machine-learning-more-hardware-choices-and-new-pricing">リリース記事はこちら</a></p>

<p>これまでは、メモリとストレージの比率だけしか指定できなかったのですが、
このリリースで様々なユースケースに応じた組み合わせが可能になりました。
CPUやメモリリソースよりもストレージを大きくしたりなどです。
専用マスターノードを追加できたり、待望の機械学習（Machine Learning）が提供されたりと色々と変更があり使いやすくなったかと。
昔からよく聞かれる、Kuromojiなどのカスタム辞書を登録する機能もあるので、Elastic Cloud便利です。
<a href="https://www.elastic.co/jp/cloud/elasticsearch-service">ご存知ない方は、14日間のトライアル</a>もありますので試していただければと！</p>

<h3>Elastic Stack 6.4.0リリース(8月)</h3>

<p><a href="https://www.elastic.co/jp/blog/elastic-stack-6-4-0-released">リリース記事はこちら</a></p>

<p>フィールドエイリアスや韓国語のアナライザーがElasticsearchに追加されました。
Kibanaはデザインがここからさらに少しずつ変更が入ってたりします。
<a href="https://elastic.github.io/eui/#/">Elastic UIフレームワークと呼ばれるデザイン用のライブラリ</a>が、ElasticのプロダクトのUIに取り込まれていってる感じです。統一感が取れてきてますよね。私が開発している<a href="https://github.com/johtani/analyze-api-ui-plugin/issues/25">Analyze UIのプラグインにも取り込みました</a>。
あとは、マイクロソフトのde:codeで話をさせていただいた、<a href="https://www.elastic.co/blog/logstash-6-4-0-released">Logstash向けのAzure Moduleがリリース</a>されたのもこのバージョンでした。AzureのEvent Hubからデータを取り込んで、SQLデータベースのモニタリングや、ユーザーの認証などをとってKibanaで可視化するものです。</p>

<p>もっとも気に入っているのはサンプルデータの登録が簡単になったことです。これまでは、KibanaとElasticsearchを用意した後に、データを入れるためにFilebeatなどを使ってから、ようやくKibanaで遊べるという形でした。
6.4からは、ElasticsearchとKibanaを立ち上げて、Kibanaのホーム画面の「Sample Data」のリンクを押した後に、「Sample flght data」の「Add」ボタンを押せばKibanaからデータが登録されます（<a href="https://www.elastic.co/guide/en/kibana/current/tutorial-sample-data.html">サンプルデータについてはこちら</a>）。とりあえず触ってみたいという方への敷居がさらに下がったのではないかなぁと。</p>

<h3>Elastic認定エンジニア第1号(8月)</h3>

<p><a href="https://www.elastic.co/jp/blog/celebrating-the-first-elastic-certified-engineer">ブログ記事はこちら</a></p>

<p>認定制度も始まりました。Elasticsearchの知識、経験を問われるテストを受けていただき、合格すると認定されるというやつです。
なんと、社外で世界初の認定エンジニアがアクロクエストの吉岡さんでした（上記ブログ参照）。
私もトレーナーやってるのもあり、慌てて認定をとったりしましたw。
認定テストは筆記ではなく、実際に作業をするテストなので実践的です。
トレーニングの受講が必須ではないのも面白いなぁと思いました。
トレーニングや認定エンジニアに興味がある方は、<a href="https://training.elastic.co">Elasticのトレーニングのサイト</a>をご覧ください。
1月末にはまた、日本語でElasticsearchのトレーニングも開催されます！</p>

<h3>Elastic Cloud Enterprise 2.0リリース(9月)</h3>

<p><a href="https://www.elastic.co/jp/blog/elastic-cloud-enterprise-2-0-0-released">リリース記事はこちら</a></p>

<p><a href="https://www.elastic.co/jp/products/ece">Elastic Cloud Enterprise</a>をご存知ない方もいらっしゃるかもしれません。
Elastic Cloudの裏側で利用しているクラスターの起動などの仕組みを製品として提供しているのがこちらになります。
Elastic Cloudで機械学習や様々な構成ができるようになったものがリリースされたのがこの2.0です。
複数のElasticsearchクラスターを管理したい場合には、こちらが便利なツールになってるんじゃないかなぁと。
部署ごとにクラスターを提供するといったことが可能になるので、乱立する前に利用するのも便利かなーと。</p>

<h3>ニューヨーク証券取引所で株式を公開(10月)</h3>

<p><a href="https://www.elastic.co/jp/blog/ze-bell-has-rung-thank-you-users-customers-and-partners">ブログ記事</a></p>

<h3>日本語でブログ(10月)</h3>

<p><a href="https://www.elastic.co/jp/blog/how-to-configure-elasticsearch-cluster-better">Elasticsearchの運用に関する典型的な4つの誤解</a>というブログを書きました。4年も働いてるのに、会社のブログに翻訳以外で書いたことなかったので。。。
Twitterや勉強会、ブログ記事などで見かけるよくある誤解に関する記事を書いてみました。
Elasticは英語のブログも活発に書かれているのですが、今後もこのような形で日本語でのブログも頑張りますので、
読んでみたいものなどあればコメントいただければと。</p>

<p>まぁ、<a href="https://www.elastic.co/jp/blog/author/kosho-owa">弊社の大輪は色々書いてるんで</a>、私がもっと頑張れって話ですかね。。。</p>

<h3>Elastic Stack 6.5.0リリース(11月)</h3>

<p><a href="https://www.elastic.co/jp/blog/elastic-stack-6-5-0-released">リリース記事はこちら</a></p>

<p>昨日（11/30）のウェビナーでも話をさせていただきましたが、Elastic Stack 6.5は「本当にマイナーリリース？？？」と思うほど盛りだくさんの機能がリリースされました。</p>

<ul>
<li>インフラUI、ログUI</li>
<li>Elastic APMの分散トレーシング対応</li>
<li>Java &amp; Go APM Agent GAリリース</li>
<li>Cross Cluster Replication</li>
<li>ODBCドライバー</li>
<li>Kibana Canvas</li>
<li>Kibana Spaces</li>
<li>Data Visualizer for files</li>
<li>Functionbeat</li>
<li>LogstashのApp Search output</li>
</ul>


<p>リストアップしただけでもこれです。45分のウェビナーでは伝えきれてないなぁとも思ってますので、何か検討しようと思います！</p>

<h3>Elasticsearch勉強会(3月から12月)</h3>

<p><a href="https://www.meetup.com/ja-JP/Tokyo-Elastic-Fantastics/">Elasticsearch勉強会ページ</a></p>

<p>今年は、6回の勉強会を開催（1つは12月19日開催）しました。
9月からは、ユースケースなど、もっと参加者の皆さんの興味があることにフォーカスしながら開催をしてみ始めました。
参加しやすくなってればいいのですが。。。
そろそろまたアンケートをとったりして、参加しやすいか、どんな改善がしてほしいかなどを聞きたいなと思っています。</p>

<p>12月はもっと皆さんと喋りたいなということで、<a href="https://www.meetup.com/ja-JP/Tokyo-Elastic-Fantastics/events/256619262/">スピーカーなしの「LT&amp;忘年会」</a>にしてみました。
私やElasticのものも参加するので、ぜひ色々聞いたり、他のコミュニティの方達の使い方を聞き出して、
新しい発見をしていただければなーと思います。LTでスピーカーの練習をするってものありですよ！（まだ誰も応募してくれてない。。。）
発表することで、フィードバックがもらえて、自分の使い方に自信が持てたり、その他の視点を得ることができると思いますので、
ぜひ発表してみていただければと。</p>

<h3>12月のjohtani出没イベント</h3>

<p>12月は以下のイベントにブースを出してます。イベントに参加される方ははぜひブースにお立ち寄りください！！</p>

<ul>
<li>12/4-5 : <a href="https://containerdays.jp">Japan Container Days</a> - 東京</li>
<li>12/8 : <a href="https://www.ospn.jp/osc2018-fukuoka/">OSC福岡</a> - 福岡</li>
<li>12/15 : <a href="http://www.java-users.jp/ccc2018fall/#/">JJUG CCC 2018 Fall</a> - 東京</li>
<li>12/19 : <a href="https://www.meetup.com/ja-JP/Tokyo-Elastic-Fantastics/events/256619262/">第27回Elasticsearch勉強会</a> - 東京</li>
</ul>


<p>なんか、忙しそうだな。。。</p>

<h3>まとめ</h3>

<p>駆け足でしたが今年を振り返ってみました。
今年も色々ありましたが、今後もよろしくお願いいたします。</p>

<p>さて、<a href="https://qiita.com/advent-calendar/2018/elasticsearch">Elastic Stack Advent Calendar 2018</a>は今日から25日まで続きます。こらからの記事を楽しみにしています！</p>

<p>ということで、次は<a href="https://qiita.com/kaibadash@github">kaibadash@github</a>さんの「ぼくの考えた最強のElasticsearch index設定を最強にわかりやすく書くぞ！！！」になります。お楽しみに！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新規導入した長期出張用のアイテムをいくつか紹介]]></title>
    <link href="http://blog.johtani.info/blog/2018/10/18/items-for-long-businesstrip/"/>
    <updated>2018-10-18T01:34:55+09:00</updated>
    <id>http://blog.johtani.info/blog/2018/10/18/items-for-long-businesstrip</id>
    <content type="html"><![CDATA[<p>（転職する少し前までパスポートすら持ってなかったのに）今の会社に転職してから、半年に1度の割合で海外への出張が発生する生活を送っています。
4年目になりますが、今回いくつか新しいガジェット？アイテム？を出張用に導入したので感想を書いておこうかなと。</p>

<!-- more -->


<p>とりあえず、以下の4つです。</p>

<h2>Felimoa ネック ピロー</h2>

<p>これまでは、無印で購入した「<a href="https://www.muji.net/store/cmdty/detail/4550002125325">フィットするネックピロー</a>」を使ってました。
特に使ってる間は問題ないのですが、どうしてもかさばります。。。
そんな時、FBで見かけたのがこちら。</p>

<iframe style="width:240px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="https://rcm-fe.amazon-adsystem.com/e/cm?ref=tf_til&t=johtani-22&m=amazon&o=9&p=8&l=as1&IS2=1&detail=1&asins=B077GQR2QC&linkId=68ae5d69e21ae8138332beb9d301a542&bc1=000000&lt1=_blank&fc1=333333&lc1=0066c0&bg1=ffffff&f=ifr">
    </iframe>


<p>厚みがないので、持ち運びが便利でした（商品紹介の中にありますが、リュックにつけると邪魔にならない）。
飛行機の中で使うので、それほど暑くない場所なので、ムレる感じでもなく。
ただ、ヘッドフォン＋真横にフレームがくる形になるとヘッドフォンに干渉するので、
私はフレームを顎の下の方に寄せた形で使ってました。
軽さと場所を取らないのがよかったです。</p>

<h2>ノイズキャンセリングヘッドフォン</h2>

<p>これまでは、<a href="https://www.sony.jp/walkman/products/NW-A840_series/">SONYのNW-A847</a>という
ノイズキャンセリング機能付きのウォークマン＋アクセサリーで外部入力を取り込む形で、飛行機で映画を見ていました。
これ自体が8年前の製品ですね。。。
これとは別に、冬の寒い時期は防寒も兼ねてヘッドフォンを使用しています。
<a href="https://www.sony.jp/headphone/products/MDR-10R/">MDR-10R</a>を使ってたんですが、昨年こんな感じになりまして。。。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">応急処置 <a href="https://t.co/uDErZWpPVC">pic.twitter.com/uDErZWpPVC</a></p>&mdash; Jun Ohtani (@johtani) <a href="https://twitter.com/johtani/status/928850255222681601?ref_src=twsrc%5Etfw">2017年11月10日</a></blockquote>


<p> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>で、ヘッドフォンの買い替えを検討してたんです。
そこへ飛び込んできたのがSonyの新しいノイズキャンセリングヘッドフォンでしたと。</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=johtani-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B07GZ8DZC8&linkId=0b91ad46d6f630a45d53c65eba62725a"></iframe>


<p>せっかく買い換えるし、今度はいいものを長くということでフライト前日に購入してしまいました。
結論としては高いけど買ってよかったと。よかった点はこんな感じです。</p>

<ul>
<li>軽い</li>
<li>イヤーパッドが耳を抑えることがないので長時間でも気にならない</li>
<li>人の声だけノイズキャンセリングをオフにする（騒音などはキャンセルしてくれる）</li>
<li>バッテリーが長時間</li>
<li>ヘッドフォンを外さないでも案内を聞くことができる「クイックアテンションモード」</li>
</ul>


<p>などなど。行きのフライトで5時間も遅れが出ましたが、空港、飛行機内で非常に快適に過ごせました。
大事に使おう。。。</p>

<h2>cw-x</h2>

<p>知り合いがFBにアップしてて、立ちっぱなしの仕事だったり、長時間のフライトでも足が疲れないという噂を聞いて購入しました。</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=johtani-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B01BKDX2QY&linkId=5af7d1ce20febf92530820e8e6b66284"></iframe>


<p>長時間のフライトの後に、ホテルで1泊しても足の疲れって結構残ってるんです。
今回、12時間のフライトでズボンの下に履いて行きましたが、足の疲れがほぼありませんでした。
デブになりつつあり、足太くなって来てるので、履くのはちょっと苦労しますが。。。もともときつめに作ってるんじゃないかなぁ（希望的観測）。
帰りも使用しましたが、帰りはフライト前に1万歩ほどダブリンの街中を歩き回ってたので、流石に疲れが出てます。。。
今度は、カンファレンスのブースなどで立つことが多いシーンでも使ってみて、疲れがどうなるかを試してみようと思います。</p>

<h2>携帯ウォシュレット</h2>

<p>初めて購入しました。海外のホテルで1週間とか連泊するんですが、トイレットペーパーがやはり硬めなのが気になって。。。</p>

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=johtani-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B005FDJ8SM&linkId=e959d19209ac105a9f0e30ab00e2c4be"></iframe>


<p>世界に誇る日本の技術の一つだと確信してますw
ドイツに長期出張してた友人が便利だよと言ってたので、思い切って購入して持って行きました。
硬めのトイレットペーパーも気にならなくなるのでとても幸せな気分ですw</p>

<h2>まとめ</h2>

<p>とりあえず、今回はこんな感じです。
総じて導入してよかったなという感じでした。
他にもおすすめ出張グッズとかあればコメントいただけると嬉しいです。</p>

<p>普段使ってるものとか、どういうものを持っていってるとか興味ある人いるかなぁ？
ではでは。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第25回Elasticsearch勉強会を開催しました。]]></title>
    <link href="http://blog.johtani.info/blog/2018/10/17/26th-elasticsearch-tokyo-meetup/"/>
    <updated>2018-10-17T17:33:50+09:00</updated>
    <id>http://blog.johtani.info/blog/2018/10/17/26th-elasticsearch-tokyo-meetup</id>
    <content type="html"><![CDATA[<p>毎月開催の2回目になります。
今回は日経さんの会場をお借りしての開催となりました。</p>

<p>前回から、スピーカーの募集を<a href="http://bit.ly/SpeakerElasticTokyoMeetup">http://bit.ly/SpeakerElasticTokyoMeetup</a> で行なっております。
ぜひ皆さんのノウハウを共有していただけると助かります。
また、次回もすでにスケジュール済みです。次回は<a href="https://www.meetup.com/ja-JP/Tokyo-Elastic-Fantastics/events/254646236/">「ログ/メトリック分析」回</a>になります。</p>

<p>以下は、個人的なメモになります。</p>

<!-- more -->


<h3>メディアコンテンツ向け記事検索DBとして使うElasticsearch / Future Architect 株式会社 村田 靖拓さん (twitter: @famipapamart)</h3>

<ul>
<li>メディア記事コンテンツ検索</li>
<li>全ての情報が1indexに入っているようにすること。</li>
<li>typeは少し悩んだ。</li>
<li>範囲検索にはならない場合がある。（文字列で登録してWildcard検索できるようにした）</li>
<li>kuromojiで基本対応</li>
<li>異体字についてはchar filterでマッピング</li>
<li>細かな設定とかもスライドにて公開予定。

<ul>
<li>基本的なプラグインだけで対応した</li>
</ul>
</li>
<li>Dynamic Field mappingを有効にしたまま対応</li>
<li>パフォーマンス検証</li>
<li>初回のインデックスのロードは<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/tune-for-search-speed.html#_warm_up_the_filesystem_cache">この辺かなぁ？</a>。</li>
<li>自力でQueryのoffset-limitを構築するのかぁ。

<ul>
<li>ソート条件が固定らしいのでできる方法</li>
</ul>
</li>
</ul>


<h3>minne での検索運用(仮) / @_shiro16 さん</h3>

<ul>
<li>ハンドメイドなものをマーケットプレイスがminne</li>
<li>SolrからElasticsearchに切り替えた話 2016/02以降はEs

<ul>
<li>昔は、DBからSolrへ同期</li>
<li>Es版ではDBからの同期ではなく、Workerに対してリクエストを入れる</li>
</ul>
</li>
<li>現状は独自にEC2で運用中</li>
<li>ユーザーが求めているものがきちんとでているかを計測している

<ul>
<li>行動ログはどんな感じ？</li>
<li>TDにログを入れて、CTRとかを計算してre:dashで可視化</li>
</ul>
</li>
<li>A/Bテストも実施

<ul>
<li>指標はキャンペーンなどが実施されている場合にブレる場合もある</li>
</ul>
</li>
<li>トレンドをログから知ることができる</li>
<li>Function Scoreでスコアを変更してる

<ul>
<li>季節的な単語でスコアを変更したりする</li>
</ul>
</li>
<li>ドリンクの対応などをして聴けてないところが。。。</li>
</ul>


<h3>query_stringのはなし / 加藤遼さん　(日本経済新聞社)</h3>

<p>電池が切れそう＋ピザとかの手配をしていたらメモが取れず。</p>

<ul>
<li>苦労が滲み出る感じのセッションでした。</li>
<li>query_string queryが実際にどんなクエリになっているかの説明を交えて説明してもらえたのはすごくよかったんじゃないかと。</li>
</ul>


<h2>まとめ</h2>

<p>検索は話してくれる人が多いし話題に事欠かないなぁという印象でした。
今回も、スピーカーの皆さん、会場提供をしていただいた日経さんありがとうございました。</p>

<p>他のユースケースのスピーカーも募集してます。ぜひMeetup.comの概要に記載してあるリンクからスピーカーの応募をお願いします！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JJUGナイトセミナーで話しました]]></title>
    <link href="http://blog.johtani.info/blog/2018/07/29/apm-java-at-jjug/"/>
    <updated>2018-07-29T14:45:30+09:00</updated>
    <id>http://blog.johtani.info/blog/2018/07/29/apm-java-at-jjug</id>
    <content type="html"><![CDATA[<p><a href="https://jjug.doorkeeper.jp/events/77485">7/25にJJUGナイトセミナー</a>でElastic Stackの紹介とAPMのJava Agentの紹介をしたので、補足のブログです。
（久々に書くな。。。）</p>

<!-- more -->


<p>スライドとサンプルアプリのリポジトリはこちら。</p>

<ul>
<li>スライド：<a href="https://speakerdeck.com/johtani/intro-elastic-stack-and-elastic-apm-java">https://speakerdeck.com/johtani/intro-elastic-stack-and-elastic-apm-java</a></li>
<li>リポジトリ：<a href="https://github.com/johtani/apm-beats-kubernetes-demo/tree/master">https://github.com/johtani/apm-beats-kubernetes-demo/tree/master</a></li>
</ul>


<h3>サンプルアプリ</h3>

<p>勉強会の頭でサンプルアプリへのアクセス用QRコードを用意して質問してもらう感じにしました。</p>

<p><img src="http://blog.johtani.info/images/entries/20180729/APM___Beats_demo_app.jpg" width="600"></p>

<p>アプリ自体が質問の受付と、そこにある質問に対して聞きたいかどうかのVoteができる仕組みになっています。
セッション最後にこの画面をみながら答えました。
手を挙げていただくよりも、匿名（名前入れるようになってますが、実名である必要はない）で登録できるし、
みんなが聞きたいかどうかもわかるので便利だなぁと。</p>

<p>元は、Elastic{ON} 2018であった「<a href="https://www.elastic.co/webinars/elasticsearch-log-collection-with-kubernetes-docker-and-containers">Docker &amp; Kubernetes Log Collection and Monitoring with Beats and Elasticsearch</a>」のサンプルアプリです。
これをSpring Bootに移植して、ちょっとだけサンプルコードを追加したものになります。</p>

<h3>構成とかの補足</h3>

<p>スライド、GitHubのリポジトリのREADMEにある図は、k8s上のサンプルアプリケーションの構成だけでした。
ElasticsearchとKibanaを含めた図はこんな感じです。</p>

<p><img src="http://blog.johtani.info/images/entries/20180729/system-overview.jpg" width="600"></p>

<p>k8s上の各種Beats、APM Serverは一旦Elastic CLoud Elasticsearch Service（AWS Tokyoリージョンにデプロイ）に対してデータを投げます。
で、KibanaはGKE(k8s on GCP)で動かして、実際に勉強会ではkubectl proxyで接続してから表示していました。
この構成にしている理由は次の理由です。</p>

<ul>
<li>Elastic CloudのElasticsearchクラスターにデータを投げている理由

<ul>
<li>クラスターの起動が簡単。</li>
<li>データを永続化したい。k8sのアプリは必要がなくなったらデータを削除したいから。</li>
<li>k8sのdeploymentを書く手間を省く</li>
<li>普段使ってるので。。。</li>
</ul>
</li>
<li>KibanaをGKEで動かした理由

<ul>
<li>Elastic Cloudでは<em>「現時点(7/29現在)」</em>で、KibanaでAPM専用のUIを起動できない</li>
<li>ローカルである必要はない</li>
</ul>
</li>
</ul>


<p>といったところです。
Elastic Cloudのインスタンスを起動したままにしておけば、デモをしなくても、このタイミングのログ、メトリクスを
再利用して話をすることも可能です。</p>

<h3>まとめ</h3>

<p>ということで、簡単ですが、構成の補足でした。
勉強会では告知したのですが、今後の勉強会はトピックスごとでやりたいなと。ということで、どんなトピックスに興味があるのか、スピーカーの応募にはどんなツールが話しやすいかなどといったことのアンケートを集めております。ぜひご協力ください！
また、アンケート、このブログに関する質問がある場合は、<a href="https://twitter.com/johtani">@johtani</a>、もしくはブログへのコメントでお願い致します。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">今後の勉強会のやり方などについてアンケートを実施中です。<a href="https://t.co/XU15CHro0n">https://t.co/XU15CHro0n</a> 皆さん是非ご協力ください。ここにない項目については返信をお願いします。 <a href="https://twitter.com/hashtag/elasticsearchjp?src=hash&amp;ref_src=twsrc%5Etfw">#elasticsearchjp</a></p>&mdash; Jun Ohtani (@johtani) <a href="https://twitter.com/johtani/status/1021388358730170368?ref_src=twsrc%5Etfw">2018年7月23日</a></blockquote>


<p> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Analyze UIとKibanaのプラグインの作成方法（第3回）]]></title>
    <link href="http://blog.johtani.info/blog/2018/04/20/directory-layout-and-architecture/"/>
    <updated>2018-04-20T15:30:01+09:00</updated>
    <id>http://blog.johtani.info/blog/2018/04/20/directory-layout-and-architecture</id>
    <content type="html"><![CDATA[<p><a href="http://blog.johtani.info/blog/2018/02/09/getting-started-template-kibana-plugin/">第2回</a>から少し間が空いてしまいましたが、templateで作成したプラグインのディレクトリ構成とどういう流れでデータがやり取りされるかについてみていきます。
（2018/02月時点で作成したディレクトリ構成にしたがって説明します）
ちなみに、JavaScriptの優れた開発者ではないので、誤解している点や、効率の悪い書き方などがあるかもしれません。見つけた場合は、連絡をいただければと思います。</p>

<!-- more -->


<p>では、まずは作成したディレクトリ構成についてみていきましょう。</p>

<h2>ディレクトリ構成</h2>

<p><code>simple-sample-kibana-plugin</code>がプラグインのプロジェクトのトップディレクトリになります。このディレクトリに次のような構成でサブディレクトリが存在します(なお、画像はIntelliJに取り込んだ後のディレクトリになっているので、<code>.iml</code>など、不要なファイル/ディレクトリが存在しています)。</p>

<p><img src="http://blog.johtani.info/images/entries/20180420/directories.jpg" width="400"></p>

<p>主要なディレクトリ、ファイルについて簡単に一覧で説明します(順不同)。</p>

<table>
<thead>
<tr>
<th> ファイル/ディレクトリ名 </th>
<th> 説明 </th>
</tr>
</thead>
<tbody>
<tr>
<td> index.js </td>
<td> プラグインの本体。Kibanaはこのファイルのオブジェクトを読み込みプラグインを起動。設定などの読み込みもこちら。 </td>
</tr>
<tr>
<td> package.json </td>
<td> npm/yarnのパッケージに関する情報を定義するファイル </td>
</tr>
<tr>
<td> README.md </td>
<td> README。プラグインの説明などを記載する。インストール方法なども記載すると便利 </td>
</tr>
<tr>
<td> public </td>
<td> ブラウザ側に配布されるプログラムや画像一式 </td>
</tr>
<tr>
<td> public/less/main.less </td>
<td> LESS用のファイル。アプリ固有のスタイルなどを記載 </td>
</tr>
<tr>
<td> public/app.js </td>
<td> ブラウザ側で読み込まれるプラグインのモジュールなど。 </td>
</tr>
<tr>
<td> public/template/index.html </td>
<td> HTMLのテンプレート。ブラウザ上での描画に利用 </td>
</tr>
<tr>
<td> server/routes </td>
<td> Kibanaサーバー側で動作するプラグイン。hapi.jsを利用してREST APIを実装する </td>
</tr>
</tbody>
</table>


<p>重要なファイルについて少しだけ説明します。</p>

<h4>package.json</h4>

<p>npmやyarnでビルドなどをするときに使用するパッケージ情報を記載するためのファイルです。
プラグインの名前、バージョン、説明などを記載します。
Kibanaのバージョンについてもこちらで管理します。この情報を
また、ライブラリなどの依存関係についてもこちらで記載しています。
以下、抜粋。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;simple-sample-kibana-plugin&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;0.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Sample plugin for explaining how to make kibana app&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;main&quot;</span><span class="p">:</span> <span class="s2">&quot;index.js&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;kibana&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;6.2.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;templateVersion&quot;</span><span class="p">:</span> <span class="s2">&quot;7.2.4&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;scripts&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;lint&quot;</span><span class="p">:</span> <span class="s2">&quot;eslint **/*.js&quot;</span><span class="p">,</span>
</span><span class='line'><span class="err">...</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;devDependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;@elastic/eslint-config-kibana&quot;</span><span class="p">:</span> <span class="s2">&quot;^0.14.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;@elastic/eslint-import-resolver-kibana&quot;</span><span class="p">:</span> <span class="s2">&quot;^0.9.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;@elastic/plugin-helpers&quot;</span><span class="p">:</span> <span class="s2">&quot;^7.1.3&quot;</span><span class="p">,</span>
</span><span class='line'><span class="err">...</span>
</span><span class='line'>    <span class="nt">&quot;expect.js&quot;</span><span class="p">:</span> <span class="s2">&quot;^0.3.1&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみに私は、<code>version</code>などをリリースするたびに変更しています。</p>

<h4>index.js</h4>

<p>最初にKibanaに読み込まれるオブジェクトになります。
Kibanaのアプリの名前や、必要なモジュールなどを記載します。</p>

<p>また、<code>kibana.yml</code>から設定など読み込む処理なども書くことができます。</p>

<p>2行目の<code>exampleRoute</code>はサーバー側のAPIとして利用するhapi.js用のファイルのパスになります。</p>

<p><code>uiExports</code>はこのアプリの画面に関する設定などの記載になります。
<code>app</code>の部分が実際にアプリの情報で、
<code>main</code>があとで説明するこのプラグインのUIのためのJavaScriptファイル(public/app.js)になります。mainですので、最初に読み込まれる処理が記載されているものを指定します。<code>app.js</code>というファイル名を変更する場合は、こちらの<code>app</code>の部分を変更したファイルに合わせましょう。</p>

<p><code>config(Joi)</code>の関数が設定ファイルの読み込みなどの処理を記載する場所です。</p>

<p><code>init(server, options)</code>の関数が初期化処理を記載する場所になります。
このサンプルアプリでは、2行目の<code>import</code>で読み込んだhapi.js用のファイルの関数を呼び出しています。引数で渡している<code>server</code>がhapi.jsの<code>server</code>オブジェクトになります。
<code>route</code>メソッドを使用して作成しているプラグイン用のREST APIを追加しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">resolve</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;path&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">exampleRoute</span> <span class="nx">from</span> <span class="s1">&#39;./server/routes/example&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">kibana</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nx">kibana</span><span class="p">.</span><span class="nx">Plugin</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">require</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;elasticsearch&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;simple-sample-kibana-plugin&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">uiExports</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">app</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Simple Sample Kibana Plugin&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">description</span><span class="o">:</span> <span class="s1">&#39;Sample plugin for explaining how to make kibana app&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">main</span><span class="o">:</span> <span class="s1">&#39;plugins/simple-sample-kibana-plugin/app&#39;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">config</span><span class="p">(</span><span class="nx">Joi</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">Joi</span><span class="p">.</span><span class="nx">object</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">enabled</span><span class="o">:</span> <span class="nx">Joi</span><span class="p">.</span><span class="kr">boolean</span><span class="p">().</span><span class="k">default</span><span class="p">(</span><span class="kc">true</span><span class="p">),</span>
</span><span class='line'>      <span class="p">}).</span><span class="k">default</span><span class="p">();</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">init</span><span class="p">(</span><span class="nx">server</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Add server routes and initialize the plugin here</span>
</span><span class='line'>      <span class="nx">exampleRoute</span><span class="p">(</span><span class="nx">server</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h4>public/app.js</h4>

<p>画面用のモジュールです。
<code>uiRoutes</code>という機能を使用して、アプリの呼び出しURLを定義します。テンプレートで作成したばかりの場合は、<code>/</code>というURLが追加されるのみです。</p>

<p>実際に画面を表示する際に動くコントローラーの部分はその下の
<code>uiModules.controller</code>に指定してあるfunctionが画面描画の
処理を書く部分になります。
templateで作成したプラグインでは、&#8221;title&#8221;など表示に必要なデータを<code>$scope</code>というオブジェクトに詰め込んでいます。
これはAngularJS(1系)でのモデルオブジェクトになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">moment</span> <span class="nx">from</span> <span class="s1">&#39;moment&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">uiModules</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;ui/modules&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">uiRoutes</span> <span class="nx">from</span> <span class="s1">&#39;ui/routes&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="s1">&#39;ui/autoload/styles&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="s1">&#39;./less/main.less&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">template</span> <span class="nx">from</span> <span class="s1">&#39;./templates/index.html&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">uiRoutes</span><span class="p">.</span><span class="nx">enable</span><span class="p">();</span>
</span><span class='line'><span class="nx">uiRoutes</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">template</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">resolve</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">uiModules</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;app/simple-sample-kibana-plugin&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;simpleSampleKibanaPluginHelloWorld&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$route</span><span class="p">,</span> <span class="nx">$interval</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="s1">&#39;Simple Sample Kibana Plugin&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">description</span> <span class="o">=</span> <span class="s1">&#39;Sample plugin for explaining how to make kibana app&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">&#39;$destroy&#39;</span><span class="p">,</span> <span class="nx">unsubscribe</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h4>server/routes/example.js</h4>

<p><a href="https://hapijs.com">hapi.js</a>というNode.jsのためのサーバーフレームワークです。
このフレームワークをKibanaは使っており、Kibanaのサーバーとブラウザとのやり取りに使用するREST APIを記述するために使用しています。
例えば、Elasticsearchとのやり取りを実際に行うAPIなどをこのREST API内部で記述します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">server</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">server</span><span class="p">.</span><span class="nx">route</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/api/simple-sample-kibana-plugin/example&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;GET&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">handler</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">reply</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">reply</span><span class="p">({</span> <span class="nx">time</span><span class="o">:</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()).</span><span class="nx">toISOString</span><span class="p">()</span> <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>path</code>の部分がブラウザ側からアクセスするURLになります。
実際にElasticsearchとやり取りする処理の書き方については、次回の記事で説明します。</p>

<h2>アーキテクチャ（簡易版）</h2>

<p>ざっくりですが、ファイルやディレクトリについて説明しました。
簡単なデータのやり取りについての流れを説明します。</p>

<p>Kibana自体はNode.jsで実装されサーバーとして動作していますが、ブラウザでアクセスすることで画面を描画しています。
簡単なコンポーネントを並べるとデータのやり取りはこのような形です。</p>

<p><img src="http://blog.johtani.info/images/entries/20180420/architecture.jpg" width="600"></p>

<p>すごく簡易で大雑把な絵ですが。。。</p>

<p>実際のプラグインとしては大きく、2つの処理があります。</p>

<ul>
<li>ブラウザ上の処理

<ul>
<li>クリックなどのイベント処理</li>
<li>HTMLなどのレンダリング処理</li>
</ul>
</li>
<li>Kibanaサーバー上の処理(Elasticsearchなどとの通信が必要な場合)

<ul>
<li>外部との通信処理</li>
<li>ブラウザ上では重い処理</li>
</ul>
</li>
</ul>


<p>絵に記載しましたが、ブラウザ上の処理についてはAngularJSが主なフレームワークで、サーバー上の処理についてはhapi.jsがフレームワークとなっています。</p>

<h2>まとめ</h2>

<p>ということで、今回はディレクトリ構造とファイルの説明、どういったフレームワークが使われ、データのやり取りがどのように行われているか説明しました。</p>

<p>次回からは、実際に私が作成した<a href="https://github.com/johtani/analyze-api-ui-plugin">Analyze UI</a>を元にElasticsearchとのデータのやり取りなどについて紹介していきます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[カンファレンス情報の探し方（CfP、スポンサー応募、開催期間など）？]]></title>
    <link href="http://blog.johtani.info/blog/2018/03/24/how-to-find-conferences/"/>
    <updated>2018-03-24T13:50:12+09:00</updated>
    <id>http://blog.johtani.info/blog/2018/03/24/how-to-find-conferences</id>
    <content type="html"><![CDATA[<p> #MANABIYA のブースでセッション時間の合間はお客さん少ないので、ブログを書いてみたり。
ここ数年、スポンサーとして色々なカンファレンスに参加してるんですが、それについてちょっと気なることがあったので。</p>

<!-- more -->


<h2>スポンサー情報ってどうやって探してます？</h2>

<p>職業柄、カンファレンスにCfP出してセッションしてみたり（落ちること多いけど）、スポンサーとしてブースを出したりしています。</p>

<p>で、疑問があるんですが、みなさんどうやってカンファレンスの情報をゲットしてます？</p>

<p>数年やって来て、検索したりして見つけてスポンサーした結果、
これまでスポンサーしていたので、情報が流れてくるという感じになりました。
それ以外だと、@yusuke さんに教えてもらったりと言うのがあったんですが。。。</p>

<p>自分が知らない、自分のTwitterで流れてこないという情報をどうやったら集められるかな？と言うのが今の課題になってます。
と言うことで、ブログを書いてみました。</p>

<h2>カンファレンスを検索できるサイトとか便利？</h2>

<p>で、私の会社は検索エンジンの会社なんで、検索できると便利では？と考えるんです。</p>

<p>CfPの応募期間で絞り込みできたり、場所で検索できたり、スポンサー情報を取得する方法が載ってたりすると便利なのではないかなと。
便利に思うのが自分だけでは？と言うのがあるんですが。。。</p>

<p>あると嬉しい人、データを掲載したいなと言う人いますでしょうか？
Google Formなどで入力してもらえるようにして何か作るのもありかなぁと考えているところです。
それとも、スポンサーを募っているカンファレンスのスタッフや企業の人は、こういう情報は特定の人にだけ知ってもらったりしたいでしょうか？</p>

<p>自分だけではわからないことが多いので、懸念事項や、それダメでしょ？
あると便利！などのフィードバックをいただけると助かります。</p>

<p>それ以外に、カンファレンス自体の場所、開催日程、サイトへのURLなどが検索できると便利だったりするかも？というのもあります。</p>

<p>とりあえず、自分が知ってるものだけ、個人的に検索できるようにしたりするのがいいかなぁ。。。
コメントお待ちしてます！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第1章の05から06までやってみた（言語処理100本ノック）]]></title>
    <link href="http://blog.johtani.info/blog/2018/03/20/nlp100-ch01-05to06/"/>
    <updated>2018-03-20T21:34:45+09:00</updated>
    <id>http://blog.johtani.info/blog/2018/03/20/nlp100-ch01-05to06</id>
    <content type="html"><![CDATA[<p>Rustで言語処理100本ノックの続きで、05と06です。</p>

<!-- more -->


<h3>05. n-gram</h3>

<p>問題は<a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec05">こちら</a>。</p>

<p>みんな大好きn-gramです。単語と文字があるので、それぞれ別関数として実装しました。問題はbi-gramと<code>n=2</code>だったのですが、一応、<code>n</code>を引数に取る形にして実装しました。</p>

<p>まずは、単語です。</p>

<script src="http://gist-it.appspot.com/https://github.com/johtani/nlp100-rust/blob/5439f96e8521bffe34689c23aa076eb3a2fe817b/src/chapter01/answer.rs?slice=128:139"></script>


<p>前に実装した時は、自分で頑張って、先頭から数えたりしてたんですが、Rustには<a href="https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/std/primitive.slice.html#method.windows">windows(n)</a>という便利なメソッドがsliceにあり、これを利用したらこんな簡単になりました。
sliceは特定のシーケンス（配列）に対してある特定のサイズのViewを作ってくれます（説明あってる？）。
ということで、文字列から、単語の配列（スペース区切りで単語にしている）を作り出して、<code>windows(n)</code>メソッドを通すと、
<code>n</code>で指定した数字の個数だけの単語の配列を先頭から、1単語ずつずらして作ってくれます。まさに、n-gram!
戻り値は配列の配列です。
1点だけ疑問点があるのは、「空白で区切ったものが単語」という考え方で良いかどうか？という点です。特に問題文にはそれが明示されていなかったので、このような前提を置いてあります。</p>

<p><code>invalid_n(text, n)</code>は<code>n</code>の値や入力された文字列をチェックする関数です。入力チェックですね。<code>n</code>が1よりも小さい場合、入力文字列が空文字の場合は、warningでメッセージを出して、空の配列を返す仕組みになっています。</p>

<script src="http://gist-it.appspot.com/https://github.com/johtani/nlp100-rust/blob/5439f96e8521bffe34689c23aa076eb3a2fe817b/src/chapter01/answer.rs?slice=115:126"></script>


<p>次は、文字です。</p>

<script src="http://gist-it.appspot.com/https://github.com/johtani/nlp100-rust/blob/5439f96e8521bffe34689c23aa076eb3a2fe817b/src/chapter01/answer.rs?slice=128:139"></script>


<p>単語とほぼ一緒ですが、入力文字列を、1文字ずつの配列にしているところが異なります。
また、<code>windows</code>メソッドで取り出された、1文字ずつの<code>n</code>個の配列を文字列に修正してから、結果の配列に入れています。
ここでも疑問は空白をどう扱うか？になります。
現時点では、空白も1文字とカウントして扱うことにしてあります。
どっちがいいのかなぁ？</p>

<h3>06. 集合</h3>

<p>問題は<a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec06">こちら</a>。</p>

<p>まずは、文字n-gramで出てきた文字列をSetに入れる関数から。</p>

<script src="http://gist-it.appspot.com/https://github.com/johtani/nlp100-rust/blob/5439f96e8521bffe34689c23aa076eb3a2fe817b/src/chapter01/answer.rs?slice=159:174"></script>


<p>n-gramの問題で実装した文字n-gramの関数の戻り値を配列ではなく、BTreeSetに変えたものになります。比較などがしやすいように？と思い、BTreeSetを利用していますが、実装としてはHashSetでも問題ないかと。
この関数の集合（Set）を元に、和集合、積集合、差集合を求める関数を実装しました。</p>

<script src="http://gist-it.appspot.com/https://github.com/johtani/nlp100-rust/blob/5439f96e8521bffe34689c23aa076eb3a2fe817b/src/chapter01/answer.rs?slice=176:187"></script>


<p>Setのメソッドとして、それぞれ、<code>union</code>＝和集合、<code>intersection</code>＝積集合、<code>difference</code>＝差集合のメソッドが用意されているので、特に困ることはなかったです。
差集合については、1-2と2-1で結果が異なるはずなので、それぞれをテストケース、main.rsで出力するようにしてあります。</p>

<h3>所感</h3>

<p>今回は、Rustがすでに実装してくれているメソッドがあったので楽ができました。
やりたいことに相当するメソッドがあるかどうかを調べるためにリファレンスを探さないといけないのがちょっと苦労しましたが。。。
ということで、今日はこの辺りまで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第1章の03から04までやってみた（言語処理100本ノック）]]></title>
    <link href="http://blog.johtani.info/blog/2018/02/19/nlp100-ch01-03to04/"/>
    <updated>2018-02-19T18:34:08+09:00</updated>
    <id>http://blog.johtani.info/blog/2018/02/19/nlp100-ch01-03to04</id>
    <content type="html"><![CDATA[<p>Rustで言語処理100本ノックの続きで、03と04です。</p>

<!-- more -->


<h3>03. 円周率</h3>

<p>問題は<a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec03">こちら</a>。</p>

<script src="http://gist-it.appspot.com/http://github.com/johtani/nlp100-rust/blob/8ca508cc16fbc7a11ac04bbc43687dfec4f25483/src/chapter01/answer/mod.rs?slice=60:71"></script>


<p>入力文字列を<code>.split_whitespace()</code>で分割しておいて、単語ごとのベクタを作り出し、そこに対して文字を数えました。「アルファベットの」という注意書きがあるので&#8221;,&ldquo;や&rdquo;.&ldquo;は含めずに数えるのかなということで、
charの<code>.is_alphabetic()</code>で<code>A-z</code>までの判定をしつつ、文字のベクタを作ってから、そのベクタの長さを詰め込むという感じでやりました。</p>

<p>これ、ひょっとして、collectでベクタにしなくても、i32とかの変数でカウントするとベクタ作らなくてもいいなじゃにか？というのに書きながら気づいた。。。
必要じゃないオブジェクトを作ってるよなぁ。</p>

<p><code>.filter().map</code>とかかな？この辺りの操作がイマイチ苦手。Javaでもまだ馴染めてないところなんだよなぁ。頭固すぎ。</p>

<h3>04. 元素記号</h3>

<p>問題は<a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec04">こちら</a>。</p>

<script src="http://gist-it.appspot.com/http://github.com/johtani/nlp100-rust/blob/8ca508cc16fbc7a11ac04bbc43687dfec4f25483/src/chapter01/answer/mod.rs?slice=73:112"></script>


<p>大作ですね。何だろう、大作。。。
最終的に連想配列（辞書型もしくはマップ型）」ということだったので、BTreeMapに詰め込んでます。
HashMapでもいいんですが、文字列で出力した時にキーが並んで見やすいからという理由で、BTreeMap使いました。それ以上の理由はないです。普通にやるなら、HashMapかな？</p>

<p>入力として、1文字だけの出力をする場所（インデックス番号）の配列を受け取ってます。1点だけ、チェックしていない、けど入力値の想定をしていて、<code>idx_one_symbols</code>がソートされていて、小さいものから順番に出てくるものとしてます。関数作って、チェックすべきかな？</p>

<p>で、指定された場所の最後のものが入力文字列よりも大きいかどうかというチェックもしています。（あー、テストケース書いてないな）この辺りのせいでちょっと長めになってます。</p>

<p>単語の配列を作るのは03の時と同じやり方です。
回しかたがちょっと違って、<code>.iter().enumerate()</code>で回して、添字と値をタプル？でとりだしてます。添字を見ながら1文字取り出すのか、2文字取り出すのかの判断が必要だからです。あとは一緒ですね。1文字取り出すときは、<code>.first()</code>を使って見ました。
実は、2文字取り出す時と、1文字の時と同じロジック使った方が共通化できて、短くなった？？？</p>

<p>ということで、こんな感じでした。いつものようにツッコミお待ちしてます。</p>

<h3>所感</h3>

<p>問題それぞれについてではなく、
やってて思ったのですが、問題に対して想定される結果が記載されていると嬉しいなと思いました。
ロジックについては、各自実装者に寄ったり、言語によって違いが出たりするし、議論するベースになっていいかなと思うんですが、
問題で想定されている結果（出力）があると、自分の実装にケアが足りないところがないのか？とか、ケアしなくていい点とかがわかるのかもなぁと。
ユニットテスト相当のものがあると楽かなぁと。</p>

<p>このケースどうするんだろ？みたいなのが、ところどころコメントに残ったりしてます。
出題の意図としては、その部分も議論の対象ということなのかな？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第1章の00から02までやってみた（言語処理100本ノック）]]></title>
    <link href="http://blog.johtani.info/blog/2018/02/15/nlp100-ch01-00to02/"/>
    <updated>2018-02-15T21:59:01+09:00</updated>
    <id>http://blog.johtani.info/blog/2018/02/15/nlp100-ch01-00to02</id>
    <content type="html"><![CDATA[<p>「鉄は熱いうちに打て」ということで、言語処理100本ノックの第1章の00から02を実装してみました。</p>

<!-- more -->


<p>さて、これが効率がいいのかどうかはさておき。</p>

<h3>00. 文字列の逆順</h3>

<p>問題は<a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec00">こちら</a>。</p>

<p>最初、<a href="https://github.com/johtani/nlp100-rust/blob/48567d107511541d0401af4ef58c6abb98a6083b/src/chapter01/answer.rs">Vecのreverse()で逆順にして0からlen()まで回してた</a>んですが、pop()がいい感じに後ろから取れることがわかったんで、切り替えました。
シンプルかな？</p>

<script src="http://gist-it.appspot.com/http://github.com/johtani/nlp100-rust/blob/ccbdf272adbb5aa738dc73e78e3667e4300a49c1/src/chapter01/answer.rs?slice=2:12"></script>


<h3>01. 「パタトクカシーー」</h3>

<p>問題は<a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec01">こちら</a>。</p>

<script src="http://gist-it.appspot.com/http://github.com/johtani/nlp100-rust/blob/ccbdf272adbb5aa738dc73e78e3667e4300a49c1/src/chapter01/answer.rs?slice=14:24"></script>


<p>1文字ずつ取り出して、インデックスの番号が2で割ってあまりが0なら文字列に追加していくってのでやってみました。
（ブログ書いてるところで、<code>i in 0..char_array.len()</code>じゃなくて、<code>(i, x) in char_array.iter().enumerate()</code>に切り替えました。）
matchとか使って綺麗に書けたりするのかなぁ？</p>

<h3>02. 「パトカー」＋「タクシー」＝「パタトクカシーー」</h3>

<p>問題は<a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec02">こちら</a>。</p>

<script src="http://gist-it.appspot.com/http://github.com/johtani/nlp100-rust/blob/ccbdf272adbb5aa738dc73e78e3667e4300a49c1/src/chapter01/answer.rs?slice=26:56"></script>


<p>だいぶ思考錯誤してる感じがソースに現れてます。
とりあえず、両方の文字列をcharsの配列にして個々のイテレータを回しながら、next()の戻り値があれば追加していく感じにして、
終了条件が両方Noneを通ったらにしてるけど、、、
なんか、もっと綺麗にできないのかなぁ。。。
next()のタプル返す関数作って、とかでなんかできたりするかなぁ？</p>

<h3>gist-it</h3>

<p>関係ないですが、GitHubのコードを貼り付けるのに便利なサービスがあるみたいです。</p>

<p><a href="http://gist-it.appspot.com">http://gist-it.appspot.com</a></p>

<p>これほんと便利だな。行数指定もできるし。
説明するのが簡単だ。</p>

<p>とりあえず、今日はこの辺まで。なんか、いい知恵あれば教えてください！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[言語処理100本ノックはじめました(Rust)]]></title>
    <link href="http://blog.johtani.info/blog/2018/02/14/start-nlp100-with-rust/"/>
    <updated>2018-02-14T19:52:31+09:00</updated>
    <id>http://blog.johtani.info/blog/2018/02/14/start-nlp100-with-rust</id>
    <content type="html"><![CDATA[<p>ども。新しいもの始めないと頭が退化する。。。ということで、こちら（
<a href="http://blog.katsyoshi.org/blog/2018/01/16/happy-new-year-and-new-language/">happy new year and new language - katsyoshiのめもみたいなもの</a>）のブログに触発されて、言語処理100本ノックをはじめてみました。</p>

<!-- more -->


<p><a href="http://www.cl.ecei.tohoku.ac.jp/nlp100/#ch1">言語処理100本ノック</a>とは、自然言語処理になるのかな、東北大学の研究室の先生が公開している言語処理に関する実践的な課題をベースにプログラミングなどのスキルを学んでいくための問題集です。
元々はPythonを対象とされているようですが、Rustでやってみようかと。
まぁ、先ほどあげたブログの二番煎じです。。。
ちなみに、インスパイアされた元のブログの方はRust book 2nd editionを読み終えたらしいですが、私はかじった程度です（ダメかも？）。</p>

<p>NLPもRustもかじった程度なので、苦戦しそうですが、ちょっとずつやっていこうかなと。
ということで、準備運動の第1章から始めようかと。
GitHubにちょっとずつあげていく予定です。
<a href="https://github.com/johtani/nlp100-rust">https://github.com/johtani/nlp100-rust</a></p>

<p>まぁ、まずは宣言のブログを書いてみただけです。
続いてなかったら、叱咤激励してください。叱咤だけかも？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Analyze UIとKibanaのプラグインの作成方法（第2回）]]></title>
    <link href="http://blog.johtani.info/blog/2018/02/09/getting-started-template-kibana-plugin/"/>
    <updated>2018-02-09T18:17:37+09:00</updated>
    <id>http://blog.johtani.info/blog/2018/02/09/getting-started-template-kibana-plugin</id>
    <content type="html"><![CDATA[<p>第1回では、<a href="https://github.com/johtani/analyze-api-ui-plugin">Analyze UIというプラグイン</a>の紹介をしました、ごく簡単にですが。</p>

<p>第2回では、Kibanaのプラグインの作成方法を順を追って見ていこうと思います。今回は、プラグインのプロジェクトの作り方を説明します。
どんなファイルがあるのかなどについては第3回で説明します（2018/02月現在の方法になります。残念ながら、Kibanaのプラグイン作成自体はまだExperimentalな話になっていますので、変更がある可能性があります）。</p>

<!-- more -->


<p>実はそれほど難しいというわけではありません。Kibanaのプラグインを作成するためのテンプレートが用意されています。<a href="https://github.com/elastic/template-kibana-plugin/">template-kiban-plugin</a>です。
テンプレートのリポジトリのREADMEに作業手順の記載があります。</p>

<ol>
<li>KibanaのリポジトリをClone、Checkout</li>
<li>Node.jsの環境を用意する</li>
<li>Kibanaを起動できるようにする</li>
<li>SAOのインストール</li>
<li>テンプレートによるプロジェクトファイルの生成</li>
</ol>


<p>順を追って説明します。
<code>PLUGIN_DEV_DIR</code>というディレクトリ配下で作業をしている想定になります。</p>

<h2>1. KibanaのリポジトリをClone、Checkout</h2>

<p>開発環境として、Kibanaが必要です。Kibanaのプラグインを作るので。
手順などは<a href="https://github.com/elastic/kibana/blob/6.2/CONTRIBUTING.md#contributing-code">KibanaのCONTRIBUTING.md</a>に記載があります。
ということで、まずはKibanaのリポジトリをCloneします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd PLUGIN_DEV_DIR
</span><span class='line'>git clone git@github.com:elastic/kibana.git</span></code></pre></td></tr></table></div></figure>


<p>このままだと、masterブランチなので、開発したい対象のKibanaのバージョンのブランチもしくはタグをcloneします。今回は6.2.1向けということで、次のようになります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout v6.2.1</span></code></pre></td></tr></table></div></figure>


<p>これで、ソースが6.2.1向けになりました。</p>

<h2>2. Node.jsの環境を用意する</h2>

<p>Node.jsをインストールします。
Kibanaのリポジトリに<code>.node-version</code>というファイルがあります。
こちらにNode.jsのバージョンが記載されています。
Kibanaが使用しているNode.jsを利用できるようにします。ローカルでは<a href="https://github.com/creationix/nvm#installation">nvm</a>利用してインストールしました。後から、切り替えが可能だからです。
nvm自体のインストールについては<a href="https://github.com/creationix/nvm">nvmのサイト</a>をご覧ください。
nvmがインストールできたら、次のコマンドで、Kibanaが使用しているバージョンをインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd kibana
</span><span class='line'>nvm install "$(cat .node-version)"</span></code></pre></td></tr></table></div></figure>


<p>すでにnvmを利用している場合などは、Kibana起動時にKibanaのバージョンに合わせたNode.jsに切り替えるようにしてください。</p>

<h2>3. Kibanaを起動できるようにする</h2>

<p>Kibanaでは<a href="https://yarnpkg.com/lang/en/">yarn</a>というjavascript向けのパッケージマネージャーを利用して起動やビルドなどを行います。まずはyarnをインストールします。<a href="https://github.com/elastic/kibana/pull/15485">最近npmからyarnに切り替えた</a>ようです。
私はMacだったので、<a href="https://yarnpkg.com/en/docs/install">brewでインストール</a>しました。
インストールできたら、次のコマンドを実行します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yarn</span></code></pre></td></tr></table></div></figure>


<p>これにより、package.jsonから必要なライブラリなどをダウンロードして来てくれます。
問題なければ「✨  Done in 439.30s.」というような表示がされます（結構時間かかりますね）。
では、Kibanaを起動できるか確認してみましょう。
さらに、Elasticsearchも起動してみます。
Kibanaのpackage.jsonの中にはElasticsearchを起動するためのスクリプトも用意されています。実際には<a href="https://gruntjs.com">grunt</a>を利用してタスクを実行しているようです。Elasticsearchの起動にはJavaが必要になります。
今回は6.2.1なので、JDK 8以降がインストールされている必要があります。
こちらはインストールされているものとします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yarn elasticsearch</span></code></pre></td></tr></table></div></figure>


<p>で起動できます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt; Started 1 Elasticsearch nodes.</span></code></pre></td></tr></table></div></figure>


<p>という表示が出てればOKです。
次にKibanaです。別のTerminalを起動して、以下のコマンドで起動できます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yarn start</span></code></pre></td></tr></table></div></figure>


<p>これだけです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server    log   [06:58:56.930] [info][listening] Server running at http://localhost:5603</span></code></pre></td></tr></table></div></figure>


<p>この辺りが出てればKibanaのServerは起動済みです。また、Elasticsearchに接続できていれば、次のログが出ているはずです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server    log   [07:02:18.010] [info][status][plugin:elasticsearch@6.2.1] Status changed from red to green - Ready</span></code></pre></td></tr></table></div></figure>


<p>Elasticsearch接続用のKibanaのプラグインの状態になります。
これで、Kibanaの環境が整ったことが確認できました。
もちろん、Elasticsearchに関しては、yarnで起動せずに、tar.gzなどでダウンロードして来たElasticsearchを起動しておき、アクセスするといったことも可能です。プラグインなどをElasticsearchにもいれてテストしたい場合などはそちらの方が便利かもしれません。</p>

<h2>4. SAOのインストール</h2>

<p>では、一度、ElasticsearchとKibanaを停止しましょう。フォワグラウンドで起動しているので、それぞれのTerminalでCtrl+Cで停止できます。
Kibanaのプラグイン作成むけに、テンプレートが作られています。<a href="https://sao.js.org">sao.js</a>というGitHubのリポジトリやnpmのパッケージをテンプレートとして使うことができるツールを利用してプラグインのプロジェクト（リポジトリ）を作成します。
実際にテンプレートとなるリポジトリは<a href="https://github.com/elastic/template-kibana-plugin">template-kibana-plugin</a>になります。
まずはSaoのインストールです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g sao</span></code></pre></td></tr></table></div></figure>


<p>プラグインのテンプレートのページには上記のようにnpmを利用したインストール方法になっていますが、次のようにyarnでも可能です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yarn global add sao</span></code></pre></td></tr></table></div></figure>


<p>これで、saoがインストールできました。</p>

<h2>5. テンプレートによるプロジェクトファイルの生成</h2>

<p>あとは、テンプレートを元にプロジェクトを作成します。
<code>PLUGIN_DEV_DIR</code>ディレクトリ配下に、kibanaと同じ階層で作成するプラグイン用のディレクトリを作成します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir simple-sample-kibana-plugin</span></code></pre></td></tr></table></div></figure>


<p>以下のような構成になります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kibana                      simple-sample-kibana-plugin</span></code></pre></td></tr></table></div></figure>


<p>次にテンプレートを適用していきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd simple-sample-kibana-plugin
</span><span class='line'>sao kibana-plugin@7.2.4</span></code></pre></td></tr></table></div></figure>


<p>2行目がsaoを利用してプロジェクトを作成しているコマンドになります。
すると、次のような質問が出て来ます。
これらに答えるとプロジェクトに必要なファイル（package.jsonやREADME.mdなど）に入力した情報を適用したものを作ってくれます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>? Name of your plugin?
</span><span class='line'>? Provide a short description
</span><span class='line'>? What Kibana version are you targeting?
</span><span class='line'>? Should an app component be generated?
</span><span class='line'>? Should translation files be generated?
</span><span class='line'>? Should an hack component be generated?
</span><span class='line'>? Should a server API be generated?</span></code></pre></td></tr></table></div></figure>


<p>実際に答えた内容はこちら。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>? Name of your plugin? simple-sample-kibana-plugin
</span><span class='line'>? Provide a short description Sample plugin for explaining how to make kibana app
</span><span class='line'>? What Kibana version are you targeting? 6.2.1
</span><span class='line'>? Should an app component be generated? Yes
</span><span class='line'>? Should translation files be generated? Yes
</span><span class='line'>? Should an hack component be generated? Yes
</span><span class='line'>? Should a server API be generated? Yes</span></code></pre></td></tr></table></div></figure>


<p>プラグインの名前などは、ディレクトリ名と同じものを入力補完してくれているので、そのままEnterでもOKです。
Descriptionについてはわかりやすいものを入力しましょう。
バージョンは、先ほどのKibanaのリポジトリに合わせて、<code>6.2.1</code>にしてあります。
あとは、作るプラグインの種類に応じて、必要なコンポーネントを作るかどうかの質問にYes/Noで答えます。
今回はサンプルの説明ということもあるので、全てYesで答えました。
ちなみに、私が実際に作成した<a href="https://github.com/johtani/analyze-api-ui-plugin/">analyze-api-ui-plugin</a>では、<code>app</code>と<code>translation</code>と<code>server</code>の3つを作成しました。
ただし、<code>translation</code>については現在はテンプレートで作成したままのファイルが入っており、実際には利用してないです。</p>

<p>完了したら、プラグインのサンプル入りのプロジェクトが完成です。
もう一度、Elasticsearchを立ち上げて、プラグインのプロジェクトからKibanaを起動してアクセスしてみます。まずは、<code>PLUGIN_DEV_DIR/kibana</code>ディレクトリの下で、Elasticsearchを起動します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yarn elasticsearch</span></code></pre></td></tr></table></div></figure>


<p>次に、<code>PLUGIN_DEV_DIR/simple-sample-kibana-plugin</code>ディレクトリの下で、以下のコマンドを実行し、プラグインが入った状態のKibanaを起動します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yarn start</span></code></pre></td></tr></table></div></figure>


<p>問題なく起動すれば、ブラウザでアクセスすると次のような画面が表示されるはずです。</p>

<p><img src="http://blog.johtani.info/images/entries/20180214/sample_start.jpg" width="800"></p>

<p>左側にメニューが1つ増えています。
クリックすると、上記画像のような画面が表示されるはずです。</p>

<p>これで、カスタムプラグインの開発ができる環境ができました！
次回は、プロジェクトのディレクトリ構成や、どんなツールが内部で使用されてデータのやり取りが行われているかについて説明します。お楽しみに。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Analyze UIとKibanaのプラグインの作成方法（第1回）]]></title>
    <link href="http://blog.johtani.info/blog/2018/01/19/how-to-make-kibana-plugin-example-analysis-ui/"/>
    <updated>2018-01-19T15:36:46+09:00</updated>
    <id>http://blog.johtani.info/blog/2018/01/19/how-to-make-kibana-plugin-example-analysis-ui</id>
    <content type="html"><![CDATA[<p>あけましておめでとうございます。今年はサボりがちだったブログをちょっとずつ復活させようかと。
ということで、第1弾として、昨年少し作っていたKibanaのプラグインを何度かに分けて紹介したいと思います。</p>

<p>今回は<a href="https://github.com/johtani/analyze-api-ui-plugin">Analyze UIというプラグイン</a>の紹介です。</p>

<!-- more -->


<p>今回はインストール方法と簡単な機能紹介です。
細かな紹介は個別にやりたいと思います。</p>

<h3>Analyze UI pluginとは？</h3>

<p>Elasticsearchの<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-analyze.html"><code>_analyze</code>というAPI</a>(個人的に好きなAPIです)をご存知でしょうか？</p>

<p>Elasticsearchは全文検索エンジンで、データの検索には<a href="https://ja.wikipedia.org/wiki/%E8%BB%A2%E7%BD%AE%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9">転置インデックス</a>というものを使用します。
Elasticsearchにデータを登録する際に、<code>text</code>型のデータの場合、この転置インデックスのキーとなる単語を決める処理のことを<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis.html">Analysis</a>と呼びます（Analysisの詳細については割愛します。後日説明するかも？）。
このAnalysisの処理が、入力されたデータの文字列に対してどのように行われて、結果としてどんな単語がキーとして用いられているかを確認できる機能が<code>_analyze</code> APIです。検索で単語がうまくヒットしないな？とか、なんで、こんなので検索結果に出てくるんだ？といった場合、このAPIを利用すると、どのような単語で転置インデックスが作られているかがわかるので、検索にヒットしない/する理由を見つけることができます。</p>

<p>Elasticsearchの便利な点はRESTfulなAPI＋JSONでやりとりができる点なのですが、<code>_analyze</code> APIの結果をJSONで受け取っても、見るのにちょっと苦労します。。。こんな感じ。</p>

<p>リクエスト：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>POST _analyze
</span><span class='line'>{
</span><span class='line'>  "analyzer": "kuromoji",
</span><span class='line'>  "text": "今年はブログをいっぱい書きますよ！"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>レスポンス：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "tokens": [
</span><span class='line'>    {
</span><span class='line'>      "token": "今年",
</span><span class='line'>      "start_offset": 0,
</span><span class='line'>      "end_offset": 2,
</span><span class='line'>      "type": "word",
</span><span class='line'>      "position": 0
</span><span class='line'>    },
</span><span class='line'>    {
</span><span class='line'>      "token": "ブログ",
</span><span class='line'>      "start_offset": 3,
</span><span class='line'>      "end_offset": 6,
</span><span class='line'>      "type": "word",
</span><span class='line'>      "position": 2
</span><span class='line'>    },
</span><span class='line'>    {
</span><span class='line'>      "token": "いっぱい",
</span><span class='line'>      "start_offset": 7,
</span><span class='line'>      "end_offset": 11,
</span><span class='line'>      "type": "word",
</span><span class='line'>      "position": 4
</span><span class='line'>    },
</span><span class='line'>    {
</span><span class='line'>      "token": "書く",
</span><span class='line'>      "start_offset": 11,
</span><span class='line'>      "end_offset": 13,
</span><span class='line'>      "type": "word",
</span><span class='line'>      "position": 5
</span><span class='line'>    }
</span><span class='line'>  ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>このくらいの量であればまだなんとかなりますが、文章が長くなると辛いですよね。</p>

<p>ということで、GUIがあると便利だろうなぁと。で、作ってみましたというのが今日紹介するKibana用のAnalyze UIプラグインです。
こんな感じで、Kibanaのアプリの一部として動作しブラウザ上で、入力テキストの文字列がどのようにanalyzeされて、単語になるかがわかります。</p>

<p><img src="http://blog.johtani.info/images/entries/20180119/analyze_ui_sample_1.jpg" width="800"></p>

<p>（先ほどのAPIのサンプルと同じものを画面で入力した結果になります）。</p>

<h3>インストール方法</h3>

<p>現時点の最新版Kibana（6.1.2）に対応しています。
Kibanaのディレクトリで<code>kibana-plugin</code>コマンドを利用してインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./bin/kibana-plugin install https://github.com/johtani/analyze-api-ui-plugin/releases/download/6.1.2/analyze-api-ui-plugin-6.1.2.zip</span></code></pre></td></tr></table></div></figure>


<p>これだけです。
で、Kibanaを起動していただくと、左のメニューに「Analyze UI」という項目が増えています。</p>

<p><img src="http://blog.johtani.info/images/entries/20180119/kibana_menu.jpg" width="400"></p>

<p>クリックすると、Analyze UIが表示されます。</p>

<p>初期画面は入力された文字を特定のAnalyzerで処理した場合の結果を見るための画面です。綱目の説明は画像をご覧ください。</p>

<p><img src="http://blog.johtani.info/images/entries/20180119/intro_analyze_ui_1.jpg" width="800"></p>

<p>先ほどのJSONよりは見やすくなったかと思います。
そのほかにもいくつか画面や機能があるのですが、今日はこの辺りで。
「<code>_analyze</code> API便利なんだけど、JSONは。。。」とか「検索うまくできないなぁなんでだろう？」と思っている方は、ぜひ試して見ていただければと。
問題点などありましたら、GitHubのIssueを登録してください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[今年の振り返りと来年の抱負（2017）]]></title>
    <link href="http://blog.johtani.info/blog/2017/12/31/looking-back-2017/"/>
    <updated>2017-12-31T21:30:43+09:00</updated>
    <id>http://blog.johtani.info/blog/2017/12/31/looking-back-2017</id>
    <content type="html"><![CDATA[<p>今年は紅白を見ながら書いてます。
今年はいろんなところに出張に行ったなぁ。</p>

<!-- more -->


<h2>振り返り（2016年に書いた抱負から）</h2>

<p>まずは去年の抱負を元に。</p>

<h5>もちろん英語の継続</h5>

<p>もちろん継続してます。英会話しながら海外TVドラマや映画を見てます。
ちょっとずつ英語字幕でも見ようとしてますが、まだまだだなぁ。
あと、TOEICを受けてないんで、それは受けないと。
見たドラマはこの辺です。</p>

<ul>
<li>ER</li>
<li>ウォーキング・デッド</li>
<li>Agent of Shield</li>
<li>SUITS</li>
<li>Mr.Robot(いまいち話の展開についていけなかった)</li>
</ul>


<h5>継続的にイベントに登壇</h5>

<p>OSCに今年もブース出してセッション持ってました。
勉強会ももちろんやりました。
あと、外部のカンファレンス（FOSS4G、BigData Analytics、db tech showcaseなど）や
勉強会(monitoring勉強会やCA.ioなど)にも登壇させていただきました。
もっと外部から読んでいただいたり、CfPに応募して通過できるようにしないとなぁ。</p>

<h5>もっと開発＆ブログ</h5>

<p>ブログはすみません。。。来年頑張ります。。。
ブログの代わりに<a href="https://www.amazon.co.jp/dp/477419218X?tag=johtani-22&amp;camp=243&amp;creative=1615&amp;linkCode=as1&amp;creativeASIN=477419218X&amp;adid=1MB8R50WWEJ3JC8VXN60&amp;">書籍</a>を出せました。データ分析基盤系の書籍になるので、興味のある方はのぞいて見ていただければ。</p>

<p>開発はちょっとやってます。今年後半はKibanaのプラグインとかをちょっと書いてました。
Ingest-CSVもちょこちょこバージョンアップに追従してたりします。</p>

<h5>サポートエンジニア獲得！</h5>

<p>獲得しました！（自分の成果かどうかはわかりませんが。。。）
今は3名体制でサポートしてもらってます。おかげさまでだいぶサポートする機会が減ってきました。
開発は<a href="https://www.elastic.co/about/careers">世界各地どこでも募集中</a>だったりしますので、ぜひ連絡いただければと。</p>

<h5>個人的な検索勉強会の再開</h5>

<p>再開しました。<a href="http://amzn.to/2CmYcw9">検索エンジン自作入門</a>を知人と隔週くらいで読んでます。読んでるだけではあれなんで、実装もしてたり。全然違う言語でトライして見ようと思ったのでRustで書き始めてます。まずは、単純なところからと思ったんですが、
Rustの書き方の違いにだいぶ戸惑ってます。。。</p>

<h2>振り返り(今年あったできごと)</h2>

<p>ここからは今年の出来事を。</p>

<ul>
<li>初アメリカで釣り</li>
<li>Nintendo Switch!</li>
<li>初Japanチームオフサイト</li>
<li>チーム変更</li>
<li>初Berlin Buzzword!</li>
<li>母校（大学）訪問</li>
<li>Kibanaプラグイン開発</li>
</ul>


<p>今年も初モノがちらほらとありますね。
今年もカレンダー振り返ってたら「え？これ今年だったの？」ってのがちらほらありました。。。</p>

<p>アメリカで釣りやりました。自社のカンファレンスElastic{ON}のあとに、エンジニアが集まるミーティングがあるんですが、そこで1日Fun Dayがあって、そこで釣りをやりました。
魚群探知機とかで魚探すんですね、最近のは。2、3匹釣ったので非常に楽しかったです。
来年はスノーシューにチャレンジする予定。</p>

<p>Nintendo Switch買って、ゼルダやりました。今はイカやってます。
イカ欲はちょっと減ってるかもなぁ、1に比べると。
あとは、子供に買ったマリオやったりしてるかな。</p>

<p>ここ10年くらい行きたいと思っていたカンファレンス、<a href="https://berlinbuzzwords.de">Berlin Buzzword</a>に行ってきました！
これが今年一番嬉しかった出来事です。Luceneコミッターの方々にも会えたし。特にPoliceman JenkinsのUweさんに会えたのが本当に感激でした。。。
来年も行けるといいなぁ。。。</p>

<p>今年も出張が多めだったのであちこち飛び回ってたなぁ。
そんな飛び回っている中で、故郷である広島（出身地？）に出張で行ったので、母校に顔を出してきました。
変わってなかった。。。自分が一期生なので、自分が入学した時はまだクレーンとか立ってるような新校舎だったんだけど、それが20年くらい経て、だいぶ古くなってました。。。
広島市内は港近くに高速道路とか出ててだいぶ様変わりしてました。
ただ、小学校も高校も変わってなかったなぁ。久々に高校の同級生にも会えたし。
また、機会があればぜひ行きたいなと。帰省する場所ではなくなったので、行く機会がないんですよね。。。</p>

<p>開発もちょっとやってます。Kibanaのプラグインに挑戦して見てます。
いまだにJavaScriptは苦手なんですが。。。
ちょっとずつ改良して、ひょっとすると本体とかに取り込めるかな？
あとは、今年始めたRustをちょっとずつ継続して行きたいなと。</p>

<h2>来年の抱負</h2>

<p>最後は来年の抱負を。</p>

<ul>
<li>もっと英語の継続＆TOEIC</li>
<li>継続的にイベントに登壇</li>
<li>CfPもっと出すぞ！</li>
<li>もっとブログ！</li>
<li>雑誌やWeb系雑誌で記事を。</li>
<li>コミュニティを別の方法で盛り上げ</li>
<li>Elasticsearchなど検索系の開発にも参加</li>
</ul>


<p>英語はもちろんですね。今年は12月の自社イベントに合わせて多くのAPJチームの人が来て、
チームで会話できたし、もっと英語やらないとなぁと。前よりもちょっとは喋れるようになった気がしてます（気がしてるだけで、喋れてるかどうかは不明）。あとは、TOEIC受けて、実力チェックしてみないとなぁ。</p>

<p>イベント登壇はまぁ、DevRelですから、一応。
来年もとりあえず、3月までは毎月どこかでブース出してます。
Ask Me Anything的なブースの出し方を今年はしてみようかなと思ってるので、
ちょっと使い始めたけど、この辺よくわからないと思ってる方、ぜひ質問しに来てください。
ブース出すだけじゃなくて、スピーカーとしていろんな場所で喋れるようにしないとなぁと。
もっと幅広く知ってもらえるように雑誌とかで連載できるようにしたいなぁと思ってます。
また、日本語の入り口の情報を増やすためにブログも書かないとなぁ。</p>

<p>勉強会も継続しますが、別の方法でも盛り上げて行きたいなぁと。
勉強会はどうしても聞く人が多くて、ユーザーの間での交流や情報交換とまでは行ってない気がするし、<a href="http://discuss.elastic.co">discuss.elastic.co</a>というフォーラムで質問は増えて来てるけど、もう少し交流しやすい場があると使ってもらえるかなぁ？と思っていたり。
何かおすすめとかあれば、連絡ください。
meetup.comの勉強会のページにも掲示板はついてるんだけど交流しにくそうだし。</p>

<p>来年は自分が最も興味のある検索系の開発にも参加したいなぁと。
Elasticsearchをちょっとずつ時間見つけてやってたりはしますが、もう少し首を突っ込んで行きたいなぁと。<a href="http://blog.johtani.info/blog/2017/11/10/welcome-swiftype/">Swiftype</a>もジョインしたし。もっと検索やって行きたい気持ちが強いので。</p>

<p>さて、ということで、今年もあと1時間なくなりました。
今年も様々な面で色々な方々に助けていただけました。本当にお世話になりました。
この場を借りてお礼申し上げます。</p>

<p>来年ももちろん、色々な方に助けてもらうと思いますが、よろしくお願いいたします！</p>
]]></content>
  </entry>
  
</feed>
